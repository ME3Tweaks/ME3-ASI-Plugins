/*
#############################################################################################
# Mass Effect 3 (1.5) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: SFXGame_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_BIO2DA_INDEX_ERROR                                 -1
#define CONST_AI_NearMissDistance                                200
#define CONST_AI_FlinchDistance                                  35.0f
#define CONST_AI_NearbyHurtDistance                              500
#define CONST_TIMER_ADJUSTTOSLOT_LIMIT                           5.f
#define CONST_MAXSEARCHPATHLENGTH                                2000.0f
#define CONST_BIO_ACTION_ANIM_NODE_COUNT                         11
#define CONST_SHOTS_PER_LOOP_CYCLE                               5.0f
#define CONST_BANB_EyeNoise_ChildNum                             0
#define CONST_BANB_Blink_ChildNum                                1
#define CONST_BANB_BlinkState_FadedOutRegularBlink               1
#define CONST_BANB_BlinkState_ActivatedRegularBlink              2
#define CONST_DEFAULT_CAMERA_FOV                                 52.9f
#define CONST_DEFAULT_NEAR_CLIP_PLANE                            10.0f
#define CONST_MaxSaveSize                                        1048576
#define CONST_EncodedSaveDescriptorMultiplier                    1000000
#define CONST_ENABLE_AI_REQUESTED_BY_UNKNOWN                     1
#define CONST_ENABLE_AI_REQUESTED_BY_CONVERSATION                2
#define CONST_ENABLE_AI_REQUESTED_BY_KISMET                      4
#define CONST_ENABLE_AI_REQUESTED_BY_GAME_EFFECT                 8
#define CONST_ENABLE_AI_REQUESTED_BY_DEATH                       16
#define CONST_ENABLE_AI_REQUESTED_BY_HENCHMAN_INTERACTION        32
#define CONST_MUSIC_PLOT_STATE_INDEX                             10251
#define CONST_BITS_PER_INT                                       32
#define CONST_SETMISSION_INDEX_MISSION_COUNT                     10165
#define CONST_SETMISSION_INDEX_ACTIVE_WORLD                      10161
#define CONST_SETMISSION_INDEX_CURRENT_VIEWING                   10162
#define CONST_SETMISSION_INDEX_PREVIOUS_ACTIVE                   10163
#define CONST_SETMISSION_INDEX_GALAXY_STATE                      10164
#define CONST_SETMISSION_INDEX_GALAXY_X                          10041
#define CONST_SETMISSION_INDEX_GALAXY_Y                          10042
#define CONST_SETMISSION_GALAXY_X_DEFAULT                        -5224.0
#define CONST_SETMISSION_GALAXY_Y_DEFAULT                        16978.0
#define CONST_SETMISSION_GALAXY_STATE_DEFAULT                    3
#define CONST_SETMISSION_MODIFIER_USED                           18122
#define CONST_AT_ENTRYMENU                                       "EntryMenu"
#define CONST_CA_REPLICATION_TIME                                3.0f
#define CONST_GESTURES_DEFAULT_BLEND_TIME                        0.1f
#define CONST_GESTURES_DEFAULT_WEIGHT                            1.f
#define CONST_HistoryLength                                      10
#define CONST_UUToM                                              0.01
#define CONST_PROFILE_FRAME_AVERAGE_COUNT                        10
#define CONST_HUD_SEGMENTS                                       64.0f
#define CONST_CALCULATE_RBLOCATION_ERROR_TOLERANCE_SQ            100.0f
#define CONST_REPLICATIONCUSTOMACTIONIMPACT_POOL_SIZE            4
#define CONST_REPLICATIONPOWERSUBSEQUENTIMPACT_POOL_SIZE         4
#define CONST_ANIMATED_REACTION_TIME_MARGIN                      1.0f
#define CONST_NumEvolvedChoices                                  6
#define CONST_NumEvolvedChoicesCanBuy                            3
#define CONST_HEALTH_CHANGE_RTPC_AMOUNT                          0.15f
#define CONST_BIO_PAWN_ANIM_RUN_RIGHT_FOOT_START                 0.25f
#define CONST_BIO_PAWN_ANIM_RUN_RIGHT_FOOT_END                   0.75f
#define CONST_UCONST_BIO_PAWN_ANIM_WALK_START_SPEED              0.05f
#define CONST_DefaultNoSaveReason                                168056
#define CONST_DefaultInCombatReason                              168057
#define CONST_DefaultNotLoggedInReason                           297457
#define CONST_DefaultNoValidStorageReason                        343733
#define CONST_DefaultInVehicleReason                             343734
#define CONST_CANCEL_REASON_SHOT                                 1
#define CONST_CANCEL_REASON_NEW_ORDER                            2
#define CONST_CANCEL_REASON_ORDER_CANCELLED                      4
#define CONST_CANCEL_REASON_TARGET_CHANGED                       8
#define CONST_CANCEL_REASON_IN_PLAYER_LINE_OF_FIRE               16
#define CONST_SFX_HOTKEY_SLOT_COUNT                              8
#define CONST_DefaultPreviewMesh                                 "BioEditorResources.ClientEffectPreviewMesh"
#define CONST_DefaultPreviewPhys                                 "BioEditorResources.ClientEffectPreviewPhys"
#define CONST_UIWORLD_FLAG_HideHeadGear                          1
#define CONST_UIWORLD_FLAG_HideScar                              2
#define CONST_UIWORLD_FLAG_DisableCollision                      4
#define CONST_UIWORLD_FLAG_SpawnHidden                           8
#define CONST_UIWORLD_FLAG_DynamicLightEnv                       16
#define CONST_UIWORLD_FLAG_UseSourceAsTemplate                   32
#define CONST_NUM_LINKS                                          10
#define CONST_NUM_HENCH                                          12
#define CONST_MaxIcons                                           8
#define CONST_CloseAchievement                                   1
#define CONST_Initialize                                         2
#define CONST_NextItem                                           3
#define CONST_PrevItem                                           4
#define CONST_UpdateItemList                                     5
#define CONST_DumpDebug                                          6
#define CONST_NumberOfEvolvedChoices                             6
#define CONST_MaxRank                                            6
#define CONST_INVESTIGATE_OPTION                                 -3
#define CONST_RETURN_OPTION                                      -2
#define CONST_UNUSED_SLOT                                        -1
#define CONST_MODE_Illegal                                       4
#define CONST_MODE_Intimidate                                    3
#define CONST_MODE_Charm                                         2
#define CONST_MODE_Investigate                                   1
#define CONST_MODE_None                                          0
#define CONST_PLANETTAG_DISPLAY_GREEN                            1
#define CONST_PLANETTAG_DISPLAY_BLUE                             0
#define CONST_IT_Populate                                        1
#define CONST_IT_Finished                                        2
#define CONST_NextGeneratedHead                                  1
#define CONST_SliderValueChanged                                 2
#define CONST_StartGameWithIconic                                3
#define CONST_InitializeNC                                       4
#define CONST_StartGameWithCustom                                5
#define CONST_ExitNewCharacter                                   6
#define CONST_ShowNameKeyboard                                   7
#define CONST_ConfirmCharCreate                                  8
#define CONST_ClassChange                                        9
#define CONST_SelectPreviousChar                                 10
#define CONST_Hide3DModel                                        11
#define CONST_StartCustom                                        12
#define CONST_Show3DModel                                        13
#define CONST_ZoomInOnFace                                       14
#define CONST_ZoomOutFromFace                                    15
#define CONST_ResetCategory                                      16
#define CONST_Set3DModelState                                    17
#define CONST_UpdateBonusTalents                                 18
#define CONST_ShowCodeKeyboard                                   20
#define CONST_SetCode                                            21
#define CONST_SelectStorageDevice                                24
#define CONST_MAX_CLASS_CHOICES                                  6
#define CONST_Option_ConfirmCancelExit                           6
#define CONST_Option_SaveAndExit                                 5
#define CONST_Option_SetOption                                   4
#define CONST_Option_Initialize                                  3
#define CONST_Option_ResetDefaults                               2
#define CONST_Option_Close                                       1
#define CONST_CONST_SetCustomName                                19
#define CONST_CONST_CopyCode                                     22
#define CONST_CONST_PasteCode                                    23
#define CONST_Option_ResetPCBindings                             7
#define CONST_Option_ApplyPCBindings                             8
#define CONST_Option_ApplySettings                               9
#define CONST_PCOptions_MaxNumKeysPerAlias                       2
#define CONST_InitializeSelectCharacter                          1
#define CONST_DeleteCharacter                                    2
#define CONST_ResumeGame                                         3
#define CONST_NextCharacter                                      4
#define CONST_PrevCharacter                                      5
#define CONST_back                                               6
#define CONST_NewCharacter                                       7
#define CONST_DeleteCharacterConfirm                             8
#define CONST_CloseConfirm                                       9
#define CONST_ReturnToBrowserMenu                                1
#define CONST_CloseGui                                           2
#define CONST_VisibilityPersistenceTime                          1.0
#define CONST_MAX_COMPLETION_TIMES_PER_STRING                    250
#define CONST_breakChars                                         " .()='\\/\""
#define CONST_APS_SAMPLES                                        4
#define CONST_CROSSHAIR_SMOOTHING_BUFFER                         3
#define CONST_DEFAULT_INITIAL_HIDDEN_TIMER                       0.1
#define CONST_MAX_DISPLAY_ABILITIES                              5
#define CONST_MAX_DISPLAY_WEAPONS                                3
#define CONST_PLAYER_ID                                          -1
#define CONST_NO_WEAPON                                          -2
#define CONST_MaxWeaponMods                                      2
#define CONST_MAX_ARMOUR_PIECES                                  12
#define CONST_TOTAL_ARMOUR_PIECE_HEALTH_STEPS                    15
#define CONST_NUM_HEALTH_SEGMENTS                                5
#define CONST_SWITCH_WEAPON_STRREF                               680987
#define CONST_MAX_WwiseAC                                        20
#define CONST_CSF_CompletionTimes3                               95
#define CONST_CSF_CompletionTimes2                               94
#define CONST_CSF_CompletionTimes                                93
#define CONST_CSF_CurrentReward                                  92
#define CONST_CSF_RewardCompletion                               91
#define CONST_MAX_NUM_PLAYERVARIABLES                            1350
#define CONST_NumCharacterSlots                                  78
#define CONST_NumClassSlots                                      8
#define CONST_MAX_CLASSES                                        8
#define CONST_MAX_CHARACTERS                                     78
#define CONST_MAX_POWER_EVOLUTIONS                               6
#define CONST_MAX_PLAYERVARIABLE_VALUE                           255
#define CONST_Player_NearMissDistance                            200
#define CONST_Player_NearImpactDistance                          100
#define CONST_MAX_CONSUMABLES_PER_MATCH                          4
#define CONST_REPLICATION_DURATION                               3.0f
#define CONST_MAX_REPLICATED_MOVES                               5
#define CONST_SFX_SS_KISVAR_TRUE_INDEX                           0
#define CONST_SFX_SS_KISVAR_FALSE_INDEX                          1
#define CONST_NumMPTargetResistPips                              10
#define CONST_SF_9SLICE_SCALE_ERROR                              0.05336
#define CONST_NumMPTargetResistBars                              4
#define CONST_STATUS_SuperRegen                                  64
#define CONST_STATUS_ActivePower                                 32
#define CONST_STATUS_MinimalDamage                               16
#define CONST_STATUS_HeavyArmour                                 8
#define CONST_STATUS_HardenedShields                             4
#define CONST_STATUS_Bleedout                                    2
#define CONST_STATUS_Barrier                                     1
#define CONST_SaveOption_Initialize                              1
#define CONST_SaveOption_SaveGame                                2
#define CONST_SaveOption_DeleteGame                              4
#define CONST_SaveOption_ChangeStorageDevice                     10
#define CONST_SaveOption_NewSaveGame                             11
#define CONST_LoadOption_Initialize                              1
#define CONST_LoadOption_LoadGame                                3
#define CONST_LoadOption_DeleteGame                              4
#define CONST_LoadOption_QuitToMainMenu                          5
#define CONST_LoadOption_ChangeStorageDevice                     11
#define CONST_LoadOption_InitializeCareers                       6
#define CONST_LoadOption_SelectCareer                            7
#define CONST_LoadOption_DeleteCareer                            8
#define CONST_WEAPON_NONE                                        0
#define CONST_WEAPON_FAIL                                        1
#define CONST_NUM_KEYBOARD_QUICKSLOTS                            8

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum SFXGame.BioAiController.ELocationType
/*enum ELocationType
{
	LT_Known                                           = 0,
	LT_Interp                                          = 1,
	LT_Exact                                           = 2,
	LT_MAX                                             = 3
};*/

// Enum SFXGame.BioAiController.EPerceptionType
/*enum EPerceptionType
{
	PT_Sight                                           = 0,
	PT_Heard                                           = 1,
	PT_HurtBy                                          = 2,
	PT_NotifySight                                     = 3,
	PT_Force                                           = 4,
	PT_MAX                                             = 5
};*/

// Enum SFXGame.BioAiController.eWalkWaypointsTypes
/*enum eWalkWaypointsTypes
{
	WWT_Linear                                         = 0,
	WWT_Looping                                        = 1,
	WWT_OutAndBack                                     = 2,
	WWT_OutAndBackLooping                              = 3,
	WWT_Random                                         = 4,
	WWT_MAX                                            = 5
};*/

// Enum SFXGame.BioAnimNodeAimOffset.EAimInputType
/*enum EAimInputType
{
	AimInput_Pawn                                      = 0,
	AimInput_Vehicle                                   = 1,
	AimInput_Kismet                                    = 2,
	AimInput_PawnMotion                                = 3,
	AimInput_MAX                                       = 4
};*/

// Enum SFXGame.BioAnimNodeBlendBase.EBioAnimBlendDirection
/*enum EBioAnimBlendDirection
{
	eBioAnimBlend_NOBLEND                              = 0,
	eBioAnimBlend_BLENDUP                              = 1,
	eBioAnimBlend_BLENDDOWN                            = 2,
	eBioAnimBlend_BLENDDIRECT                          = 3,
	eBioAnimBlend_MAX                                  = 4
};*/

// Enum SFXGame.BioAnimNodeBlendAdditive.EBioAnimAdditive
/*enum EBioAnimAdditive
{
	eBioAnimAdd_Primary                                = 0,
	eBioAnimAdd_Additive                               = 1,
	eBioAnimAdd_BasePose                               = 2,
	eBioAnimAdd_MAX                                    = 3
};*/

// Enum SFXGame.BioAnimNodeBlendByAction.EBioActionAnimNode
/*enum EBioActionAnimNode
{
	ACTION_ANIM_NODE_POSTURE                           = 0,
	ACTION_ANIM_NODE_MOUNT                             = 1,
	ACTION_ANIM_NODE_HESITATE                          = 2,
	ACTION_ANIM_NODE_FALL                              = 3,
	ACTION_ANIM_NODE_RAGDOLL                           = 4,
	ACTION_ANIM_NODE_SNAPSHOT                          = 5,
	ACTION_ANIM_NODE_DIE                               = 6,
	ACTION_ANIM_NODE_TECH                              = 7,
	ACTION_ANIM_NODE_MATINEE                           = 8,
	ACTION_ANIM_NODE_GETUP                             = 9,
	ACTION_ANIM_NODE_GESTURES                          = 10,
	ACTION_ANIM_NODE_MAX                               = 11
};*/

// Enum SFXGame.BioAnimNodeBlendByAim.EBioAnimNodeBlendByAim
/*enum EBioAnimNodeBlendByAim
{
	eBioAnimNodeBlendByAim_LevelFront                  = 0,
	eBioAnimNodeBlendByAim_LevelLeft                   = 1,
	eBioAnimNodeBlendByAim_LevelRight                  = 2,
	eBioAnimNodeBlendByAim_UpFront                     = 3,
	eBioAnimNodeBlendByAim_UpLeft                      = 4,
	eBioAnimNodeBlendByAim_UpRight                     = 5,
	eBioAnimNodeBlendByAim_DownFront                   = 6,
	eBioAnimNodeBlendByAim_DownLeft                    = 7,
	eBioAnimNodeBlendByAim_DownRight                   = 8,
	eBioAnimNodeBlendByAim_MAX                         = 9
};*/

// Enum SFXGame.BioAnimNodeBlendByDamage.EBioAnimDamage
/*enum EBioAnimDamage
{
	eBioAnimDamage_Front                               = 0,
	eBioAnimDamage_Rear                                = 1,
	eBioAnimDamage_Left                                = 2,
	eBioAnimDamage_Right                               = 3,
	eBioAnimDamage_MAX                                 = 4
};*/

// Enum SFXGame.BioAnimNodeBlendByDeath.EBioAnimDeath
/*enum EBioAnimDeath
{
	eBioAnimDeath_Head                                 = 0,
	eBioAnimDeath_Stomach                              = 1,
	eBioAnimDeath_ArmLeft                              = 2,
	eBioAnimDeath_ArmRight                             = 3,
	eBioAnimDeath_LegLeft                              = 4,
	eBioAnimDeath_LegRight                             = 5,
	eBioAnimDeath_MAX                                  = 6
};*/

// Enum SFXGame.BioAnimNodeBlendByFireSequence.EBioAnimNodeBlendByFireSequenceChild
/*enum EBioAnimNodeBlendByFireSequenceChild
{
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_CHILD_IDLE    = 0,
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_CHILD_START   = 1,
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_CHILD_LOOP    = 2,
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_CHILD         = 3,
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_CHILD_END     = 4,
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_MAX           = 5
};*/

// Enum SFXGame.BioAnimNodeBlendByIncline.EBioAnimIncline
/*enum EBioAnimIncline
{
	eBioAnimIncline_Up                                 = 0,
	eBioAnimIncline_Level                              = 1,
	eBioAnimIncline_Down                               = 2,
	eBioAnimIncline_MAX                                = 3
};*/

// Enum SFXGame.BioAnimNodeBlendByPower.EBioAnimNodePower
/*enum EBioAnimNodePower
{
	eBioAnimNodePower_Idle                             = 0,
	eBioAnimNodePower_Casting                          = 1,
	eBioAnimNodePower_Release                          = 2,
	eBioAnimNodePower_Using                            = 3,
	eBioAnimNodePower_MAX                              = 4
};*/

// Enum SFXGame.BioAnimNodeBlendByPower.EBioAnimNodePowerNotifyActive
/*enum EBioAnimNodePowerNotifyActive
{
	eBioAnimNodePowerNotifyActive_None                 = 0,
	eBioAnimNodePowerNotifyActive_Casting              = 1,
	eBioAnimNodePowerNotifyActive_Release              = 2,
	eBioAnimNodePowerNotifyActive_MAX                  = 3
};*/

// Enum SFXGame.BioAnimNodeBlendByReload.EBioReloadAnimNode
/*enum EBioReloadAnimNode
{
	RELOAD_ANIM_NODE_IDLE                              = 0,
	RELOAD_ANIM_NODE_RELOADING                         = 1,
	RELOAD_ANIM_NODE_MAX                               = 2
};*/

// Enum SFXGame.BioAnimNodeBlendByStorm.EBioAnimNodeBlendByStorm
/*enum EBioAnimNodeBlendByStorm
{
	eBioAnimNodeBlendByStorm_Idle                      = 0,
	eBioAnimNodeBlendByStorm_Storm                     = 1,
	eBioAnimNodeBlendByStorm_MAX                       = 2
};*/

// Enum SFXGame.BioAnimNodeBlendByWeaponAction.WeaponAnimState
/*enum WeaponAnimState
{
	WeaponState_Expanded                               = 0,
	WeaponState_Expanding                              = 1,
	WeaponState_Collapsing                             = 2,
	WeaponState_Collapsed                              = 3,
	WeaponState_MAX                                    = 4
};*/

// Enum SFXGame.BioAnimNodeBlendByWeaponEquip.EBioAnimNodeBlendByWeaponEquip
/*enum EBioAnimNodeBlendByWeaponEquip
{
	eBioAnimNodeBlendByWeaponEquip_Idle                = 0,
	eBioAnimNodeBlendByWeaponEquip_Draw                = 1,
	eBioAnimNodeBlendByWeaponEquip_Holster             = 2,
	eBioAnimNodeBlendByWeaponEquip_MAX                 = 3
};*/

// Enum SFXGame.BioAnimNodeBlendDirStart.EBioAnimStartDirection
/*enum EBioAnimStartDirection
{
	eBioAnimDirStart_ForwardRight                      = 0,
	eBioAnimDirStart_ForwardLeft                       = 1,
	eBioAnimDirStart_Right                             = 2,
	eBioAnimDirStart_Left                              = 3,
	eBioAnimDirStart_BackwardRight                     = 4,
	eBioAnimDirStart_BackwardLeft                      = 5,
	eBioAnimDirStart_MAX                               = 6
};*/

// Enum SFXGame.BioAnimNodeBlendFall.EBioAnimNodeFall
/*enum EBioAnimNodeFall
{
	eBioAnimNodeFall_Falling                           = 0,
	eBioAnimNodeFall_Landing                           = 1,
	eBioAnimNodeFall_MAX                               = 2
};*/

// Enum SFXGame.BioAnimNodeBlendMovement.EBioAnimNodeBlendMovement
/*enum EBioAnimNodeBlendMovement
{
	eBioAnimNodeBlendMovement_Idle                     = 0,
	eBioAnimNodeBlendMovement_Walk                     = 1,
	eBioAnimNodeBlendMovement_Run                      = 2,
	eBioAnimNodeBlendMovement_MAX                      = 3
};*/

// Enum SFXGame.BioAnimNodeBlendMoveStop.EBioAnimMoveStop
/*enum EBioAnimMoveStop
{
	eBioAnimMoveStop_StopRight                         = 0,
	eBioAnimMoveStop_StopLeft                          = 1,
	eBioAnimMoveStop_MAX                               = 2
};*/

// Enum SFXGame.BioAnimNodeBlendPerBone.EBoneBlendType
/*enum EBoneBlendType
{
	BLENDTYPE_ALWAYS                                   = 0,
	BLENDTYPE_ALWAYS_BONE_SWITCH                       = 1,
	BLENDTYPE_CROSSFADE_BONE_SWITCH                    = 2,
	BLENDTYPE_SWITCH                                   = 3,
	BLENDTYPE_TOGGLE                                   = 4,
	BLENDTYPE_WEIGHT                                   = 5,
	BLENDTYPE_MAX                                      = 6
};*/

// Enum SFXGame.BioAnimNodeBlendPerBone.EBoneBlendTestType
/*enum EBoneBlendTestType
{
	BLENDTESTTYPE_NONE                                 = 0,
	BLENDTESTTYPE_ANIM                                 = 1,
	BLENDTESTTYPE_BONE                                 = 2,
	BLENDTESTTYPE_MAX                                  = 3
};*/

// Enum SFXGame.BioAnimNodeBlendScalarMovementBehavior.EBioAnimNodeBlendScalarMovementBehavior
/*enum EBioAnimNodeBlendScalarMovementBehavior
{
	BScMv_None                                         = 0,
	BScMv_TurnAngle                                    = 1,
	BScMv_SpeedVelocity                                = 2,
	BScMv_SpeedTacticalVelocity                        = 3,
	BScMv_AxisDirection                                = 4,
	BScMv_MAX                                          = 5
};*/

// Enum SFXGame.BioAnimNodeBlendScalarMovementBehavior.EBioAnimNodeBlendScalarMoveSpeedStates
/*enum EBioAnimNodeBlendScalarMoveSpeedStates
{
	BScMvSS_Idle                                       = 0,
	BScMvSS_Walk                                       = 1,
	BScMvSS_Run                                        = 2,
	BScMvSS_Sprint                                     = 3,
	BScMvSS_MAX                                        = 4
};*/

// Enum SFXGame.BioAnimNodeBlendScalarMovementBehavior.EBioAnimNodeBlendScalarMoveAxis
/*enum EBioAnimNodeBlendScalarMoveAxis
{
	BScMvAxis_All                                      = 0,
	BScMvAxis_2D                                       = 1,
	BScMvAxis_X                                        = 2,
	BScMvAxis_Y                                        = 3,
	BScMvAxis_Z                                        = 4,
	BScMvAxis_MAX                                      = 5
};*/

// Enum SFXGame.BioAnimNodeBlendScalarMovementBehavior.EBioAnimNodeBlendScalarMoveAxisDir
/*enum EBioAnimNodeBlendScalarMoveAxisDir
{
	BScMvAxisDir_X                                     = 0,
	BScMvAxisDir_Y                                     = 1,
	BScMvAxisDir_Z                                     = 2,
	BScMvAxisDir_MAX                                   = 3
};*/

// Enum SFXGame.BioAnimNodeBlendScalarMovementBehavior.EBioAnimNodeBlendScalarMoveAxisDirMode
/*enum EBioAnimNodeBlendScalarMoveAxisDirMode
{
	BScMvAxisDirMode_WorldRotation                     = 0,
	BScMvAxisDirMode_WorldVelDir                       = 1,
	BScMvAxisDirMode_WorldAccelDir                     = 2,
	BScMvAxisDirMode_LocalVelDir                       = 3,
	BScMvAxisDirMode_LocalAccelDir                     = 4,
	BScMvAxisDirMode_MAX                               = 5
};*/

// Enum SFXGame.BioAnimNodeBlendSkidTurn.EBioAnimSkidTurn
/*enum EBioAnimSkidTurn
{
	eBioAnimSkidTurn_StartRight                        = 0,
	eBioAnimSkidTurn_StartLeft                         = 1,
	eBioAnimSkidTurn_TurnRightNear                     = 2,
	eBioAnimSkidTurn_TurnRightFar                      = 3,
	eBioAnimSkidTurn_TurnLeftNear                      = 4,
	eBioAnimSkidTurn_TurnLeftFar                       = 5,
	eBioAnimSkidTurn_MAX                               = 6
};*/

// Enum SFXGame.BioAnimNodeBlendSpeed.EBioAnim_SpeedType
/*enum EBioAnim_SpeedType
{
	eBioAnim_SpeedStandard                             = 0,
	eBioAnim_SpeedStarting                             = 1,
	eBioAnim_SpeedSnapshot                             = 2,
	eBioAnim_MAX                                       = 3
};*/

// Enum SFXGame.BioAnimNodeBlendState.EBioBlendStatePlayMode
/*enum EBioBlendStatePlayMode
{
	eBioBlendStatePlayMode_None                        = 0,
	eBioBlendStatePlayMode_OneShot                     = 1,
	eBioBlendStatePlayMode_Looping                     = 2,
	eBioBlendStatePlayMode_Query                       = 3,
	eBioBlendStatePlayMode_MAX                         = 4
};*/

// Enum SFXGame.BioAnimNodeBlendState.EBioBlendStatePlayAction
/*enum EBioBlendStatePlayAction
{
	eBioBlendStatePlayAction_NoAction                  = 0,
	eBioBlendStatePlayAction_Play                      = 1,
	eBioBlendStatePlayAction_Stop                      = 2,
	eBioBlendStatePlayAction_Reset                     = 3,
	eBioBlendStatePlayAction_PlayFromStart             = 4,
	eBioBlendStatePlayAction_PlayFromTime              = 5,
	eBioBlendStatePlayAction_MAX                       = 6
};*/

// Enum SFXGame.BioAnimNodeBlendStateActionBehavior.EBioAnimNodeBlendStateActionBehavior
/*enum EBioAnimNodeBlendStateActionBehavior
{
	BSAct_None                                         = 0,
	BSAct_PawnState                                    = 1,
	BSAct_PawnGesturesState                            = 2,
	BSAct_ActiveState                                  = 3,
	BSAct_Posture                                      = 4,
	BSAct_ArtPlaceable                                 = 5,
	BSAct_IdleState                                    = 6,
	BSAct_MAX                                          = 7
};*/

// Enum SFXGame.BioAnimNodeBlendStateActionBehavior.EBioPawnAnimActionStates
/*enum EBioPawnAnimActionStates
{
	PAAS_Posture                                       = 0,
	PAAS_Dying                                         = 1,
	PAAS_Death                                         = 2,
	PAAS_Matinee                                       = 3,
	PAAS_Recover                                       = 4,
	PAAS_Gestures                                      = 5,
	PAAS_MAX                                           = 6
};*/

// Enum SFXGame.BioAnimNodeBlendStateActionBehavior.EBioPawnAnimActiveStates
/*enum EBioPawnAnimActiveStates
{
	PAActiveS_Active                                   = 0,
	PAActiveS_ActiveToInactive                         = 1,
	PAActiveS_InactiveToActive                         = 2,
	PAActiveS_Inactive                                 = 3,
	PAActiveS_MAX                                      = 4
};*/

// Enum SFXGame.BioAnimNodeBlendStateActionBehavior.EBioArtPlaceableActionStates
/*enum EBioArtPlaceableActionStates
{
	APAS_Default                                       = 0,
	APAS_Matinee                                       = 1,
	APAS_MAX                                           = 2
};*/

// Enum SFXGame.BioAnimNodeBlendStateCombatBehavior.EBioAnimNodeBlendStateCombatBehavior
/*enum EBioAnimNodeBlendStateCombatBehavior
{
	BSCbt_None                                         = 0,
	BSCbt_CoverSwitch                                  = 1,
	BSCbt_CoverDirection                               = 2,
	BSCbt_CoverState                                   = 3,
	BSCbt_CoverBlocked                                 = 4,
	BSCbt_CombatSwitch                                 = 5,
	BSCbt_CoverPredictDirection                        = 6,
	BSCbt_CoverBlockType                               = 7,
	BSCbt_MAX                                          = 8
};*/

// Enum SFXGame.BioAnimNodeBlendStateMovementBehavior.EBioAnimNodeBlendStateMovementBehavior
/*enum EBioAnimNodeBlendStateMovementBehavior
{
	BSMove_None                                        = 0,
	BSMove_SpeedVelocity                               = 1,
	BSMove_SpeedTacticalVelocity                       = 2,
	BSMove_ScaleRate                                   = 3,
	BSMove_ScaleRateByWalkSpeed                        = 4,
	BSMove_ScaleRateByRunSpeed                         = 5,
	BSMove_ScaleRateBySprintSpeed                      = 6,
	BSMove_ScaleRateByTacticalWalkSpeed                = 7,
	BSMove_ScaleRateByTacticalRunSpeed                 = 8,
	BSMove_LookAtTurning                               = 9,
	BSMove_TurningDirection                            = 10,
	BSMove_AxisDirection                               = 11,
	BSMove_FlyingState                                 = 12,
	BSMove_StopSwitch                                  = 13,
	BSMove_StopOnFoot                                  = 14,
	BSMove_StartSwitch                                 = 15,
	BSMove_ScaleRateByWalkRunRatio                     = 16,
	BSMove_SkidTurnSwitch                              = 17,
	BSMove_MAX                                         = 18
};*/

// Enum SFXGame.BioAnimNodeBlendStateMovementBehavior.EBioMovementSpeedStates
/*enum EBioMovementSpeedStates
{
	MSS_Idle                                           = 0,
	MSS_Walk                                           = 1,
	MSS_Run                                            = 2,
	MSS_Sprint                                         = 3,
	MSS_MAX                                            = 4
};*/

// Enum SFXGame.BioAnimNodeBlendStateMovementBehavior.EBioAnimNodeBlendStateMoveAxisDir
/*enum EBioAnimNodeBlendStateMoveAxisDir
{
	BSMoveAxisDir_X                                    = 0,
	BSMoveAxisDir_Y                                    = 1,
	BSMoveAxisDir_Z                                    = 2,
	BSMoveAxisDir_MAX                                  = 3
};*/

// Enum SFXGame.BioAnimNodeBlendStateMovementBehavior.EBioAnimNodeBlendStateMoveAxisDirMode
/*enum EBioAnimNodeBlendStateMoveAxisDirMode
{
	BSMoveAxisDirMode_WorldRotation                    = 0,
	BSMoveAxisDirMode_WorldVelDir                      = 1,
	BSMoveAxisDirMode_WorldAccelDir                    = 2,
	BSMoveAxisDirMode_LocalVelDir                      = 3,
	BSMoveAxisDirMode_LocalAccelDir                    = 4,
	BSMoveAxisDirMode_MAX                              = 5
};*/

// Enum SFXGame.BioAnimNodeBlendStrafe.EBioAnimNodeBlendStrafe
/*enum EBioAnimNodeBlendStrafe
{
	eBioAnimNodeBlendStrafe_Forward                    = 0,
	eBioAnimNodeBlendStrafe_Backward                   = 1,
	eBioAnimNodeBlendStrafe_Left                       = 2,
	eBioAnimNodeBlendStrafe_Right                      = 3,
	eBioAnimNodeBlendStrafe_MAX                        = 4
};*/

// Enum SFXGame.BioAnimNodeBlendTurn.EBioAnimNodeBlendTurn
/*enum EBioAnimNodeBlendTurn
{
	eBioAnimNodeBlendTurn_Idle                         = 0,
	eBioAnimNodeBlendTurn_TurnLeft                     = 1,
	eBioAnimNodeBlendTurn_TurnRight                    = 2,
	eBioAnimNodeBlendTurn_MAX                          = 3
};*/

// Enum SFXGame.BioAnimNodeCombatMode.EBioAnimNodeCombatModeChild
/*enum EBioAnimNodeCombatModeChild
{
	BIO_ANIM_NODE_COMBAT_MODE_CHILD_NONCOMBAT          = 0,
	BIO_ANIM_NODE_COMBAT_MODE_CHILD_COMBAT             = 1,
	BIO_ANIM_NODE_COMBAT_MODE_CHILD_ENTERCOMBAT        = 2,
	BIO_ANIM_NODE_COMBAT_MODE_CHILD_EXITCOMBAT         = 3,
	BIO_ANIM_NODE_COMBAT_MODE_CHILD_MAX                = 4
};*/

// Enum SFXGame.BioAnimNodeCombatMode.EBioAnimNodeCombatModeState
/*enum EBioAnimNodeCombatModeState
{
	BIO_ANIM_NODE_COMBAT_MODE_STATE_NONCOMBAT          = 0,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_COMBAT             = 1,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_ANIMATING_TO_COMBAT = 2,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_ANIMATING_TO_NONCOMBAT = 3,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_BLENDING_TO_COMBAT = 4,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_BLENDING_TO_NONCOMBAT = 5,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_MAX                = 6
};*/

// Enum SFXGame.BioAnimNodeCover2Actions.EBioAnimNodeCover2Actions
/*enum EBioAnimNodeCover2Actions
{
	eBioAnimNodeCover2Actions_Default                  = 0,
	eBioAnimNodeCover2Actions_Lean                     = 1,
	eBioAnimNodeCover2Actions_PopUp                    = 2,
	eBioAnimNodeCover2Actions_PeekSide                 = 3,
	eBioAnimNodeCover2Actions_PeekUp                   = 4,
	eBioAnimNodeCover2Actions_PartialLean              = 5,
	eBioAnimNodeCover2Actions_PartialPopUp             = 6,
	eBioAnimNodeCover2Actions_Aimback                  = 7,
	eBioAnimNodeCover2Actions_MAX                      = 8
};*/

// Enum SFXGame.BioAnimNodeCover2ChangeDirection.EBioAnimNodeCover2ChangeDirection
/*enum EBioAnimNodeCover2ChangeDirection
{
	eBioAnimNodeCover2ChangeDirection_Idle             = 0,
	eBioAnimNodeCover2ChangeDirection_TransitionToMirror = 1,
	eBioAnimNodeCover2ChangeDirection_TransitionToDefault = 2,
	eBioAnimNodeCover2ChangeDirection_MAX              = 3
};*/

// Enum SFXGame.BioAnimNodeCover2Move.EBioAnimNodeCover2Move
/*enum EBioAnimNodeCover2Move
{
	eBioAnimNodeCover2Move_Idle                        = 0,
	eBioAnimNodeCover2Move_Move                        = 1,
	eBioAnimNodeCover2Move_MAX                         = 2
};*/

// Enum SFXGame.BioAnimNodeCover2Neutral.EBioAnimNodeCover2Neutral
/*enum EBioAnimNodeCover2Neutral
{
	eBioAnimNodeCover2Neutral_Idle                     = 0,
	eBioAnimNodeCover2Neutral_Active                   = 1,
	eBioAnimNodeCover2Neutral_MAX                      = 2
};*/

// Enum SFXGame.BioAnimNodeCover2Transition.EBioAnimNodeCover2Transition
/*enum EBioAnimNodeCover2Transition
{
	eBioAnimNodeCover2Transition_Intro                 = 0,
	eBioAnimNodeCover2Transition_Body                  = 1,
	eBioAnimNodeCover2Transition_Outro                 = 2,
	eBioAnimNodeCover2Transition_MAX                   = 3
};*/

// Enum SFXGame.BioAnimNodeLocomotion.EBioAnimNodeLocomotion
/*enum EBioAnimNodeLocomotion
{
	eBioAnimNodeLocomotion_Idle                        = 0,
	eBioAnimNodeLocomotion_MoveStart                   = 1,
	eBioAnimNodeLocomotion_Moving                      = 2,
	eBioAnimNodeLocomotion_MoveStop                    = 3,
	eBioAnimNodeLocomotion_SkidTurn                    = 4,
	eBioAnimNodeLocomotion_PoseHolder                  = 5,
	eBioAnimNodeLocomotion_MAX                         = 6
};*/

// Enum SFXGame.BioAnimNodeLocomotionMoving.EBioAnimNodeLocomotionMoving
/*enum EBioAnimNodeLocomotionMoving
{
	eBioAnimNodeLocomotionMoving_Fwd                   = 0,
	eBioAnimNodeLocomotionMoving_LeanLeft              = 1,
	eBioAnimNodeLocomotionMoving_LeanRight             = 2,
	eBioAnimNodeLocomotionMoving_Ascend                = 3,
	eBioAnimNodeLocomotionMoving_Descend               = 4,
	eBioAnimNodeLocomotionMoving_MAX                   = 5
};*/

// Enum SFXGame.BioAnimNodeLocomotionSpeed.EBioAnimNodeLocomotionSpeed
/*enum EBioAnimNodeLocomotionSpeed
{
	eBioAnimNodeLocomotionSpeed_Idle                   = 0,
	eBioAnimNodeLocomotionSpeed_Walk                   = 1,
	eBioAnimNodeLocomotionSpeed_Run                    = 2,
	eBioAnimNodeLocomotionSpeed_MAX                    = 3
};*/

// Enum SFXGame.BioAnimNodeLocomotionStart.EBioAnimNodeLocomotionStart
/*enum EBioAnimNodeLocomotionStart
{
	eBioAnimNodeLocomotionStart_ForwardRight           = 0,
	eBioAnimNodeLocomotionStart_ForwardLeft            = 1,
	eBioAnimNodeLocomotionStart_Right                  = 2,
	eBioAnimNodeLocomotionStart_Left                   = 3,
	eBioAnimNodeLocomotionStart_BackwardRight          = 4,
	eBioAnimNodeLocomotionStart_BackwardLeft           = 5,
	eBioAnimNodeLocomotionStart_MAX                    = 6
};*/

// Enum SFXGame.BioAnimNodeLocomotionStop.EBioAnimNodeLocomotionStop
/*enum EBioAnimNodeLocomotionStop
{
	eBioAnimNodeLocomotionStop_LeftFoot                = 0,
	eBioAnimNodeLocomotionStop_RightFoot               = 1,
	eBioAnimNodeLocomotionStop_MAX                     = 2
};*/

// Enum SFXGame.BioBaseSquad.EBioCapMode
/*enum EBioCapMode
{
	BIO_CAPMODE_WEAPON                                 = 0,
	BIO_CAPMODE_BIOTICS                                = 1,
	BIO_CAPMODE_TECH                                   = 2,
	BIO_CAPMODE_COMBAT                                 = 3,
	BIO_CAPMODE_GRENADES                               = 4,
	BIO_CAPMODE_ERROR                                  = 5,
	BIO_CAPMODE_MAX                                    = 6
};*/

// Enum SFXGame.BioDefine.GAWExternalAssetID
/*enum GAWExternalAssetID
{
	GAWExternalAssetID_Multiplayer                     = 0,
	GAWExternalAssetID_Iphone                          = 1,
	GAWExternalAssetID_FaceBook                        = 2,
	GAWExternalAssetID_Max                             = 3
};*/

// Enum SFXGame.BioDefine.ETargetTipText
/*enum ETargetTipText
{
	TargetTipText_None                                 = 0,
	TargetTipText_Talk                                 = 1,
	TargetTipText_Examine                              = 2,
	TargetTipText_Use                                  = 3,
	TargetTipText_Open                                 = 4,
	TargetTipText_Salvage                              = 5,
	TargetTipText_PickUp                               = 6,
	TargetTipText_Bypass                               = 7,
	TargetTipText_Support                              = 8,
	TargetTipText_Reactivate                           = 9,
	TargetTipText_Deactivate                           = 10,
	TargetTipText_Activate                             = 11,
	TargetTipText_Warn                                 = 12,
	TargetTipText_Revive                               = 13,
	TargetTipText_Wait                                 = 14,
	TargetTipText_MAX                                  = 15
};*/

// Enum SFXGame.BioDefine.EObjectiveMarkerIconType
/*enum EObjectiveMarkerIconType
{
	EOMIT_None                                         = 0,
	EOMIT_Attack                                       = 1,
	EOMIT_Supply                                       = 2,
	EOMIT_Alert                                        = 3,
	EOMIT_MAX                                          = 4
};*/

// Enum SFXGame.BioDefine.EEndGameOption
/*enum EEndGameOption
{
	EGO_ReapersDestroyedEarthDestroyed                 = 0,
	EGO_ReapersDestroyedEarthDevastated                = 1,
	EGO_ReapersDestroyedEarthOk                        = 2,
	EGO_ReapersDestroyedEarthOkShepardAlive            = 3,
	EGO_BecomeAReaperAndEarthDestroyedAndReapersLeave  = 4,
	EGO_BecomeAReaperAndEarthOkAndReapersLeave         = 5,
	EGO_HarmonyOfManAndMachine                         = 6,
	EGO_Demo                                           = 7,
	EGO_None                                           = 8,
	EGO_MAX                                            = 9
};*/

// Enum SFXGame.BioDefine.EGAWAssetSubType
/*enum EGAWAssetSubType
{
	GAWAssetSubType_None                               = 0,
	GAWAssetSubType_Ground                             = 1,
	GAWAssetSubType_Fleet                              = 2,
	GAWAssetSubType_MAX                                = 3
};*/

// Enum SFXGame.BioDefine.EGAWAssetType
/*enum EGAWAssetType
{
	GAWAssetType_Military                              = 0,
	GAWAssetType_Device                                = 1,
	GAWAssetType_Intel                                 = 2,
	GAWAssetType_Artifact                              = 3,
	GAWAssetType_Salvage                               = 4,
	GAWAssetType_Treasure                              = 5,
	GAWAssetType_External                              = 6,
	GAWAssetType_Modifier                              = 7,
	GAWAssetType_Quest                                 = 8,
	GAWAssetType_MAX                                   = 9
};*/

// Enum SFXGame.BioDefine.EAsyncLoadStatus
/*enum EAsyncLoadStatus
{
	ASYNC_LOAD_ERROR                                   = 0,
	ASYNC_LOAD_STARTED                                 = 1,
	ASYNC_LOAD_INPROGRESS                              = 2,
	ASYNC_LOAD_COMPLETE                                = 3,
	ASYNC_LOAD_MAX                                     = 4
};*/

// Enum SFXGame.BioDefine.ESFXHUDActionIcon
/*enum ESFXHUDActionIcon
{
	SFXHUD_Action_NONE                                 = 0,
	SFXHUD_Cover_Enter                                 = 1,
	SFXHUD_Cover_Mantle                                = 2,
	SFXHUD_Cover_Climb                                 = 3,
	SFXHUD_Cover_90DegreeRight                         = 4,
	SFXHUD_Cover_90DegreeLeft                          = 5,
	SFXHUD_Cover_SlipRight                             = 6,
	SFXHUD_Cover_SlipLeft                              = 7,
	SFXHUD_Cover_SwatTurnRight                         = 8,
	SFXHUD_Cover_SwatTurnLeft                          = 9,
	SFXHUD_Cover_Grab                                  = 10,
	SFXHUD_LadderUp                                    = 11,
	SFXHUD_LadderDown                                  = 12,
	SFXHUD_GapJump                                     = 13,
	SFXHUD_AtlasSuit                                   = 14,
	SFXHUD_MAX                                         = 15
};*/

// Enum SFXGame.BioDefine.ESFXHUDPOIIconState
/*enum ESFXHUDPOIIconState
{
	SFXHUD_POI_Off                                     = 0,
	SFXHUD_POI_On                                      = 1,
	SFXHUD_POI_Activated                               = 2,
	SFXHUD_POI_MAX                                     = 3
};*/

// Enum SFXGame.BioDefine.ASParamTypes
/*enum ASParamTypes
{
	ASParam_Integer                                    = 0,
	ASParam_Float                                      = 1,
	ASParam_String                                     = 2,
	ASParam_Boolean                                    = 3,
	ASParam_Undefined                                  = 4,
	ASParam_MAX                                        = 5
};*/

// Enum SFXGame.BioDefine.SFX_MB_TextAlign
/*enum SFX_MB_TextAlign
{
	SFX_MB_Centered                                    = 0,
	SFX_MB_Left                                        = 1,
	SFX_MB_Right                                       = 2,
	SFX_MB_MAX                                         = 3
};*/

// Enum SFXGame.BioDefine.BioMessageBoxIconSets
/*enum BioMessageBoxIconSets
{
	ICONSET_None                                       = 0,
	ICONSET_Manufacturer                               = 1,
	ICONSET_Combat                                     = 2,
	ICONSET_Plot                                       = 3,
	ICONSET_ItemProperties                             = 4,
	ICONSET_MAX                                        = 5
};*/

// Enum SFXGame.BioDefine.Cerberus3DState
/*enum Cerberus3DState
{
	C3D_Default                                        = 0,
	C3D_RightPanel_Open                                = 1,
	C3D_RightPanel_Closed                              = 2,
	C3D_RightPanel_Opening                             = 3,
	C3D_RightPanel_Closing                             = 4,
	C3D_MAX                                            = 5
};*/

// Enum SFXGame.BioDefine.SFX_MB_Skin
/*enum SFX_MB_Skin
{
	SFX_MB_Skin_User                                   = 0,
	SFX_MB_Skin_Shepard                                = 1,
	SFX_MB_Skin_MAX                                    = 2
};*/

// Enum SFXGame.BioDefine.SFXGenericHintIcon
/*enum SFXGenericHintIcon
{
	HINTICON_None                                      = 0,
	HINTICON_MAX                                       = 1
};*/

// Enum SFXGame.BioDefine.SFXPCHintIcon
/*enum SFXPCHintIcon
{
	PCICON_None                                        = 0,
	PCICON_MAX                                         = 1
};*/

// Enum SFXGame.BioDefine.SFXPS3HintIcon
/*enum SFXPS3HintIcon
{
	PS3ICON_None                                       = 0,
	PS3ICON_MAX                                        = 1
};*/

// Enum SFXGame.BioDefine.SFXXBoxHintIcon
/*enum SFXXBoxHintIcon
{
	XBICON_None                                        = 0,
	XBICON_XBOX_A                                      = 1,
	XBICON_XBOX_B                                      = 2,
	XBICON_XBOX_Y                                      = 3,
	XBICON_XBOX_X                                      = 4,
	XBICON_XBOX_Right_Thumb                            = 5,
	XBICON_XBOX_Right_Thumb_Pressed                    = 6,
	XBICON_XBOX_Right_Thumb_Released                   = 7,
	XBICON_XBOX_Left_Thumb                             = 8,
	XBICON_XBOX_Left_Thumb_Pressed                     = 9,
	XBICON_XBOX_Left_Thumb_Released                    = 10,
	XBICON_XBOX_Right_Thumb_Up                         = 11,
	XBICON_XBOX_Right_Thumb_UpRight                    = 12,
	XBICON_XBOX_Right_Thumb_Right                      = 13,
	XBICON_XBOX_Right_Thumb_DownRight                  = 14,
	XBICON_XBOX_Right_Thumb_Down                       = 15,
	XBICON_XBOX_Right_Thumb_DownLeft                   = 16,
	XBICON_XBOX_Right_Thumb_Left                       = 17,
	XBICON_XBOX_Right_Thumb_UpLeft                     = 18,
	XBICON_XBOX_Left_Thumb_Up                          = 19,
	XBICON_XBOX_Left_Thumb_UpRight                     = 20,
	XBICON_XBOX_Left_Thumb_Right                       = 21,
	XBICON_XBOX_Left_Thumb_DownRight                   = 22,
	XBICON_XBOX_Left_Thumb_Down                        = 23,
	XBICON_XBOX_Left_Thumb_DownLeft                    = 24,
	XBICON_XBOX_Left_Thumb_Left                        = 25,
	XBICON_XBOX_Left_Thumb_UpLeft                      = 26,
	XBICON_XBOX_DPad                                   = 27,
	XBICON_XBOX_DPad_Up                                = 28,
	XBICON_XBOX_DPad_Right                             = 29,
	XBICON_XBOX_DPad_Down                              = 30,
	XBICON_XBOX_DPad_Left                              = 31,
	XBICON_XBOX_Start                                  = 32,
	XBICON_XBOX_Back                                   = 33,
	XBICON_XBOX_Right_Shoulder                         = 34,
	XBICON_XBOX_Right_Trigger                          = 35,
	XBICON_XBOX_Left_Shoulder                          = 36,
	XBICON_XBOX_Left_Trigger                           = 37,
	XBICON_MAX                                         = 38
};*/

// Enum SFXGame.BioDefine.SFXHintPosition
/*enum SFXHintPosition
{
	SFXHINTPOS_Top                                     = 0,
	SFXHINTPOS_Middle                                  = 1,
	SFXHINTPOS_Bottom                                  = 2,
	SFXHINTPOS_MAX                                     = 3
};*/

// Enum SFXGame.BioDefine.SFXDisplayableSquadCommands
/*enum SFXDisplayableSquadCommands
{
	SFX_DSC_READY                                      = 0,
	SFX_DSC_ATTACK                                     = 1,
	SFX_DSC_MOVETO                                     = 2,
	SFX_DSC_FOLLOW                                     = 3,
	SFX_DSC_MAX                                        = 4
};*/

// Enum SFXGame.BioDefine.BioTutorialPosition
/*enum BioTutorialPosition
{
	BTP_Top                                            = 0,
	BTP_Bottom                                         = 1,
	BTP_MessageBox                                     = 2,
	BTP_MAX                                            = 3
};*/

// Enum SFXGame.BioDefine.SFMovieStrokeStyle
/*enum SFMovieStrokeStyle
{
	SF_MSS_Correct                                     = 0,
	SF_MSS_Normal                                      = 1,
	SF_MSS_Hairline                                    = 2,
	SF_MSS_MAX                                         = 3
};*/

// Enum SFXGame.BioDefine.BioThumbstickDir
/*enum BioThumbstickDir
{
	BTD_Centered                                       = 0,
	BTD_Negative                                       = 1,
	BTD_Positive                                       = 2,
	BTD_MAX                                            = 3
};*/

// Enum SFXGame.BioDefine.BioGuiEvents
/*enum BioGuiEvents
{
	BIOGUI_EVENT_ON_ENTER                              = 0,
	BIOGUI_EVENT_ON_EXIT                               = 1,
	BIOGUI_EVENT_AXIS_LSTICK_X                         = 2,
	BIOGUI_EVENT_AXIS_LSTICK_Y                         = 3,
	BIOGUI_EVENT_AXIS_RSTICK_X                         = 4,
	BIOGUI_EVENT_AXIS_RSTICK_Y                         = 5,
	BIOGUI_EVENT_AXIS_MOUSE_X                          = 6,
	BIOGUI_EVENT_AXIS_MOUSE_Y                          = 7,
	BIOGUI_EVENT_KEY_WHEEL_UP                          = 8,
	BIOGUI_EVENT_KEY_WHEEL_DOWN                        = 9,
	BIOGUI_EVENT_CONTROL_COOLDOWN_EXPIRE               = 10,
	BIOGUI_EVENT_CONTROL_DOWN                          = 11,
	BIOGUI_EVENT_CONTROL_LEFT                          = 12,
	BIOGUI_EVENT_CONTROL_RIGHT                         = 13,
	BIOGUI_EVENT_CONTROL_UP                            = 14,
	BIOGUI_EVENT_BUTTON_A                              = 15,
	BIOGUI_EVENT_BUTTON_B                              = 16,
	BIOGUI_EVENT_BUTTON_X                              = 17,
	BIOGUI_EVENT_BUTTON_Y                              = 18,
	BIOGUI_EVENT_BUTTON_LT                             = 19,
	BIOGUI_EVENT_BUTTON_RT                             = 20,
	BIOGUI_EVENT_BUTTON_LB                             = 21,
	BIOGUI_EVENT_BUTTON_RB                             = 22,
	BIOGUI_EVENT_BUTTON_BACK                           = 23,
	BIOGUI_EVENT_BUTTON_START                          = 24,
	BIOGUI_EVENT_BUTTON_LTHUMB                         = 25,
	BIOGUI_EVENT_BUTTON_RTHUMB                         = 26,
	BIOGUI_EVENT_KEY_ESCAPE                            = 27,
	BIOGUI_EVENT_KEY_DELETE                            = 28,
	BIOGUI_EVENT_KEY_TAB                               = 29,
	BIOGUI_EVENT_MOUSE_BUTTON_RIGHT                    = 30,
	BIOGUI_EVENT_MOUSE_BUTTON_LEFT                     = 31,
	BIOGUI_EVENT_CONTROL_DOWN_RELEASE                  = 32,
	BIOGUI_EVENT_CONTROL_LEFT_RELEASE                  = 33,
	BIOGUI_EVENT_CONTROL_RIGHT_RELEASE                 = 34,
	BIOGUI_EVENT_CONTROL_UP_RELEASE                    = 35,
	BIOGUI_EVENT_BUTTON_A_RELEASE                      = 36,
	BIOGUI_EVENT_BUTTON_B_RELEASE                      = 37,
	BIOGUI_EVENT_BUTTON_X_RELEASE                      = 38,
	BIOGUI_EVENT_BUTTON_Y_RELEASE                      = 39,
	BIOGUI_EVENT_BUTTON_LT_RELEASE                     = 40,
	BIOGUI_EVENT_BUTTON_RT_RELEASE                     = 41,
	BIOGUI_EVENT_BUTTON_LB_RELEASE                     = 42,
	BIOGUI_EVENT_BUTTON_RB_RELEASE                     = 43,
	BIOGUI_EVENT_BUTTON_BACK_RELEASE                   = 44,
	BIOGUI_EVENT_BUTTON_START_RELEASE                  = 45,
	BIOGUI_EVENT_BUTTON_LTHUMB_RELEASE                 = 46,
	BIOGUI_EVENT_BUTTON_RTHUMB_RELEASE                 = 47,
	BIOGUI_EVENT_KEY_ESCAPE_RELEASE                    = 48,
	BIOGUI_EVENT_KEY_DELETE_RELEASE                    = 49,
	BIOGUI_EVENT_KEY_TAB_RELEASE                       = 50,
	BIOGUI_EVENT_MOUSE_BUTTON_RIGHT_RELEASE            = 51,
	BIOGUI_EVENT_MOUSE_BUTTON_LEFT_RELEASE             = 52,
	BIOGUI_EVENT_MAX                                   = 53
};*/

// Enum SFXGame.BioDefine.EGuiHandlers
/*enum EGuiHandlers
{
	GUI_HANDLER_NONE                                   = 0,
	GUI_HANDLER_INVENTORY                              = 1,
	GUI_HANDLER_INGAMEGUI                              = 2,
	GUI_HANDLER_CHARACTER_RECORD                       = 3,
	GUI_HANDLER_LOOT                                   = 4,
	GUI_HANDLER_CONVERSATION                           = 5,
	GUI_HANDLER_SHOP                                   = 6,
	GUI_HANDLER_GALAXYMAP                              = 7,
	GUI_HANDLER_MAINMENU                               = 8,
	GUI_HANDLER_NEW_CHARACTER                          = 9,
	GUI_HANDLER_SELECT_CHARACTER                       = 10,
	GUI_HANDLER_JOURNAL                                = 11,
	GUI_HANDLER_HUD                                    = 12,
	GUI_HANDLER_PARTYSELECT                            = 13,
	GUI_HANDLER_XMODS                                  = 14,
	GUI_HANDLER_SQUADCOMMAND                           = 15,
	GUI_HANDLER_DATACODEX                              = 16,
	GUI_HANDLER_SAVELOAD                               = 17,
	GUI_HANDLER_ACHIEVEMENT                            = 18,
	GUI_HANDLER_AREAMAP                                = 19,
	GUI_HANDLER_SHAREDINGAMEGUI                        = 20,
	GUI_HANDLER_MENUBROWSER                            = 21,
	GUI_HANDLER_GAMEOVER                               = 22,
	GUI_HANDLER_SPECIALIZATION                         = 23,
	GUI_HANDLER_MESSAGEBOX                             = 24,
	GUI_HANDLER_INTROTEXT                              = 25,
	GUI_HANDLER_BLACKSCREEN                            = 26,
	GUI_HANDLER_CREDITS                                = 27,
	GUI_HANDLER_OPTIONS                                = 28,
	GUI_HANDLER_ADDITONALCONTENT                       = 29,
	GUI_HANDLER_SKILLGAME                              = 30,
	GUI_HANDLER_SPLASH_SCREEN                          = 31,
	GUI_HANDLER_REPLAYCHARACTERSELECT                  = 32,
	GUI_HANDLER_CHOICEGUI                              = 33,
	GUI_HANDLER_SNIPEROVERLAY                          = 34,
	GUI_HANDLER_MAX                                    = 35
};*/

// Enum SFXGame.BioDefine.EResistanceType
/*enum EResistanceType
{
	ResistanceType_None                                = 0,
	ResistanceType_Shield                              = 1,
	ResistanceType_Biotic                              = 2,
	ResistanceType_Armour                              = 3,
	ResistanceType_MAX                                 = 4
};*/

// Enum SFXGame.BioDefine.ERaceType
/*enum ERaceType
{
	RaceType_None                                      = 0,
	RaceType_Humanoid                                  = 1,
	RaceType_Machine                                   = 2,
	RaceType_Animal                                    = 3,
	RaceType_MAX                                       = 4
};*/

// Enum SFXGame.BioDefine.EAffiliationType
/*enum EAffiliationType
{
	AffiliationType_None                               = 0,
	AffiliationType_GenericMerc                        = 1,
	AffiliationType_Reaper                             = 2,
	AffiliationType_Cerberus                           = 3,
	AffiliationType_Geth                               = 4,
	AffiliationType_MAX                                = 5
};*/

// Enum SFXGame.BioDefine.EChallengeType
/*enum EChallengeType
{
	ChallengeType_None                                 = 0,
	ChallengeType_Minion                               = 1,
	ChallengeType_Elite                                = 2,
	ChallengeType_SubBoss                              = 3,
	ChallengeType_Boss                                 = 4,
	ChallengeType_MAX                                  = 5
};*/

// Enum SFXGame.BioDefine.ECharacterType
/*enum ECharacterType
{
	CharacterType_None                                 = 0,
	CharacterType_Human                                = 1,
	CharacterType_Cerberus_Trooper                     = 2,
	CharacterType_Cerberus_Centurion                   = 3,
	CharacterType_Cerberus_Guardian                    = 4,
	CharacterType_Cerberus_Nemesis                     = 5,
	CharacterType_Cerberus_Phantom                     = 6,
	CharacterType_Cerberus_Engineer                    = 7,
	CharacterType_Cerberus_Atlas                       = 8,
	CharacterType_Reaper_Husk                          = 9,
	CharacterType_Reaper_Cannibal                      = 10,
	CharacterType_Reaper_Marauder                      = 11,
	CharacterType_Reaper_Brute                         = 12,
	CharacterType_Reaper_Ravager                       = 13,
	CharacterType_Reaper_Banshee                       = 14,
	CharacterType_Geth_Trooper                         = 15,
	CharacterType_Geth_Rocket_Trooper                  = 16,
	CharacterType_Geth_Pyro                            = 17,
	CharacterType_Geth_Hunter                          = 18,
	CharacterType_Geth_Prime                           = 19,
	CharacterType_MAX                                  = 20
};*/

// Enum SFXGame.BioDefine.EStateEventElementTypes
/*enum EStateEventElementTypes
{
	SEE_Bool                                           = 0,
	SEE_Consequence                                    = 1,
	SEE_Float                                          = 2,
	SEE_Function                                       = 3,
	SEE_Int                                            = 4,
	SEE_LocalBool                                      = 5,
	SEE_LocalFloat                                     = 6,
	SEE_LocalInt                                       = 7,
	SEE_Substate                                       = 8,
	SEE_MAX                                            = 9
};*/

// Enum SFXGame.BioDefine.ELookAtTransitionType
/*enum ELookAtTransitionType
{
	LookAt_Default                                     = 0,
	LookAt_Locked                                      = 1,
	LookAt_InstantTrans                                = 2,
	LookAt_MAX                                         = 3
};*/

// Enum SFXGame.BioDefine.ECustomizableElementType
/*enum ECustomizableElementType
{
	CustomizableType_None                              = 0,
	CustomizableType_Torso                             = 1,
	CustomizableType_Shoulders                         = 2,
	CustomizableType_Arms                              = 3,
	CustomizableType_Legs                              = 4,
	CustomizableType_Helmet                            = 5,
	CustomizableType_Spec                              = 6,
	CustomizableType_Tint                              = 7,
	CustomizableType_Pattern                           = 8,
	CustomizableType_PatternColor                      = 9,
	CustomizableType_Emissive                          = 10,
	CustomizableType_MAX                               = 11
};*/

// Enum SFXGame.BioDefine.EAttachSlot
/*enum EAttachSlot
{
	EASlot_Holster                                     = 0,
	EASlot_LowerBack                                   = 1,
	EASlot_LeftShoulder                                = 2,
	EASlot_RightShoulder                               = 3,
	EASlot_CenterBack                                  = 4,
	EASlot_Max                                         = 5
};*/

// Enum SFXGame.BioDefine.EInventoryResourceTypes
/*enum EInventoryResourceTypes
{
	INV_RESOURCE_CREDITS                               = 0,
	INV_RESOURCE_MEDIGEL                               = 1,
	INV_RESOURCE_SALVAGE                               = 2,
	INV_RESOURCE_GRENADES                              = 3,
	INV_RESOURCE_RARE1_EEZO                            = 4,
	INV_RESOURCE_RARE2_IRIDIUM                         = 5,
	INV_RESOURCE_RARE3_PALLADIUM                       = 6,
	INV_RESOURCE_RARE4_PLATINUM                        = 7,
	INV_RESOURCE_PROBES                                = 8,
	INV_RESOURCE_FUEL                                  = 9,
	INV_RESOURCE_MAX                                   = 10
};*/

// Enum SFXGame.BioDefine.EActionComplete_Combat
/*enum EActionComplete_Combat
{
	ACC_Cancelled                                      = 0,
	ACC_Success                                        = 1,
	ACC_Failed                                         = 2,
	ACC_Dead                                           = 3,
	ACC_TargetKilled                                   = 4,
	ACC_TimeOut                                        = 5,
	ACC_LowTargeting                                   = 6,
	ACC_LostSight                                      = 7,
	ACC_Disabled                                       = 8,
	ACC_PowerCooldown                                  = 9,
	ACC_WeaponOverheat                                 = 10,
	ACC_WeaponCoolDown                                 = 11,
	ACC_MAX                                            = 12
};*/

// Enum SFXGame.BioDefine.EBioRadarType
/*enum EBioRadarType
{
	BRT_None                                           = 0,
	BRT_Pawn_Friendly                                  = 1,
	BRT_Pawn_Neutral                                   = 2,
	BRT_Pawn_Hostile                                   = 3,
	BRT_Vehicle                                        = 4,
	BRT_Store                                          = 5,
	BRT_Destination                                    = 6,
	BRT_Plot                                           = 7,
	BRT_Mineral                                        = 8,
	BRT_Anomaly                                        = 9,
	BRT_Point_Of_Interest                              = 10,
	BRT_Debris                                         = 11,
	BRT_Surveyed                                       = 12,
	BRT_Henchmen                                       = 13,
	BRT_Transition                                     = 14,
	BRT_TextNote                                       = 15,
	BRT_MAX                                            = 16
};*/

// Enum SFXGame.BioDefine.EBioSkillGameDifficulty
/*enum EBioSkillGameDifficulty
{
	SKILL_GAME_DIFFICULTY_EASY                         = 0,
	SKILL_GAME_DIFFICULTY_MEDIUM                       = 1,
	SKILL_GAME_DIFFICULTY_HARD                         = 2,
	SKILL_GAME_DIFFICULTY_MAX                          = 3
};*/

// Enum SFXGame.BioDefine.EBioSkillGame
/*enum EBioSkillGame
{
	SKILL_GAME_DECRYPTION                              = 0,
	SKILL_GAME_ELECTRONICS                             = 1,
	SKILL_GAME_CUSTOM                                  = 2,
	SKILL_GAME_MAX                                     = 3
};*/

// Enum SFXGame.BioCameraBehaviorGalaxy.EBioGalaxyMap_PlanetType
/*enum EBioGalaxyMap_PlanetType
{
	eBioGM_PlanetType_None                             = 0,
	eBioGM_PlanetType_Planet                           = 1,
	eBioGM_PlanetType_Anomaly                          = 2,
	eBioGM_PlanetType_PlanetAndAnomaly                 = 3,
	eBioGM_PlanetType_Citadel                          = 4,
	eBioGM_PlanetType_Prefab                           = 5,
	eBioGM_PlanetType_PlanetAndRing                    = 6,
	eBioGM_PlanetType_2DImage                          = 7,
	eBioGM_PlanetType_MAX                              = 8
};*/

// Enum SFXGame.BioCameraBehaviorGalaxy.EBioGalaxyMapState
/*enum EBioGalaxyMapState
{
	GalaxyMapState_None                                = 0,
	GalaxyMapState_Galaxy                              = 1,
	GalaxyMapState_Cluster                             = 2,
	GalaxyMapState_System                              = 3,
	GalaxyMapState_Planet                              = 4,
	GalaxyMapState_PlanetScan                          = 5,
	GalaxyMapState_MAX                                 = 6
};*/

// Enum SFXGame.BioCheatManager.EProfileType
/*enum EProfileType
{
	Profile_None                                       = 0,
	Profile_AI                                         = 1,
	Profile_Camera                                     = 2,
	Profile_Combat                                     = 3,
	Profile_MPGame                                     = 4,
	Profile_Weapon                                     = 5,
	Profile_CombatStats                                = 6,
	Profile_Difficulty                                 = 7,
	Profile_Angst                                      = 8,
	Profile_Cooldown                                   = 9,
	Profile_Damage                                     = 10,
	Profile_Pawn                                       = 11,
	Profile_Power                                      = 12,
	Profile_Tech                                       = 13,
	Profile_Treasure                                   = 14,
	Profile_Locomotion                                 = 15,
	Profile_AnimTree                                   = 16,
	Profile_Ticket                                     = 17,
	Profile_Vehicle                                    = 18,
	Profile_Henchmen                                   = 19,
	Profile_Settings                                   = 20,
	Profile_Effects                                    = 21,
	Profile_Scaleform                                  = 22,
	Profile_SaveGame                                   = 23,
	Profile_GAWAssets                                  = 24,
	Profile_GAWAssets_Military                         = 25,
	Profile_GAWAssets_Device                           = 26,
	Profile_GAWAssets_Intel                            = 27,
	Profile_GAWAssets_Salvage                          = 28,
	Profile_GAWAssets_Artifact                         = 29,
	Profile_Focus                                      = 30,
	Profile_LoadSeekFreeAsync                          = 31,
	Profile_Placeable                                  = 32,
	Profile_Reinforcements                             = 33,
	Profile_Anim                                       = 34,
	Profile_Cover                                      = 35,
	Profile_Door                                       = 36,
	Profile_Conversation                               = 37,
	Profile_ConversationBug                            = 38,
	Profile_Gestures                                   = 39,
	Profile_Bonuses                                    = 40,
	Profile_Multipliers                                = 41,
	Profile_LookAt                                     = 42,
	Profile_Wwise                                      = 43,
	Profile_Kinect                                     = 44,
	Profile_AnimPreload                                = 45,
	Profile_Galaxy                                     = 46,
	Profile_MAX                                        = 47
};*/

// Enum SFXGame.RvrClientEffectInterface.EValueModifierOperation
/*enum EValueModifierOperation
{
	VMO_None                                           = 0,
	VMO_Add                                            = 1,
	VMO_Subtract                                       = 2,
	VMO_Multiply                                       = 3,
	VMO_Divide                                         = 4,
	VMO_Power                                          = 5,
	VMO_DotProduct                                     = 6,
	VMO_CrossProduct                                   = 7,
	VMO_Greater                                        = 8,
	VMO_Less                                           = 9,
	VMO_NearlyEqual                                    = 10,
	VMO_NotNearlyEqual                                 = 11,
	VMO_MAX                                            = 12
};*/

// Enum SFXGame.RvrClientEffectInterface.EParameterType
/*enum EParameterType
{
	ParamType_FaceValue                                = 0,
	ParamType_Location                                 = 1,
	ParamType_Normal                                   = 2,
	ParamType_ScreenLocation                           = 3,
	ParamType_ScreenNormal                             = 4,
	ParamType_MAX                                      = 5
};*/

// Enum SFXGame.RvrClientEffectInterface.EParameterDataType
/*enum EParameterDataType
{
	ParamDataType_Ambiguous                            = 0,
	ParamDataType_Float                                = 1,
	ParamDataType_Vector                               = 2,
	ParamDataType_ColorWithAlpha                       = 3,
	ParamDataType_MAX                                  = 4
};*/

// Enum SFXGame.RvrClientEffectInterface.EValueModifierSelection
/*enum EValueModifierSelection
{
	VMS_Spawn_Value_X                                  = 0,
	VMS_Spawn_Value_Y                                  = 1,
	VMS_Spawn_Value_Z                                  = 2,
	VMS_Spawn_Value_Vector                             = 3,
	VMS_Parameter_X                                    = 4,
	VMS_Parameter_Y                                    = 5,
	VMS_Parameter_Z                                    = 6,
	VMS_Parameter_Vector                               = 7,
	VMS_Blood_Color                                    = 8,
	VMS_MAX                                            = 9
};*/

// Enum SFXGame.RvrClientEffectInterface.EEffectLocationTarget
/*enum EEffectLocationTarget
{
	ELT_None                                           = 0,
	ELT_Effect                                         = 1,
	ELT_Instigator                                     = 2,
	ELT_HitActor                                       = 3,
	ELT_Tool                                           = 4,
	ELT_HitLocation                                    = 5,
	ELT_HitCharacter                                   = 6,
	ELT_LocalPlayer                                    = 7,
	ELT_Camera                                         = 8,
	ELT_MAX                                            = 9
};*/

// Enum SFXGame.SFXSaveGame.EPlayerAppearanceType
/*enum EPlayerAppearanceType
{
	PlayerAppearanceType_Parts                         = 0,
	PlayerAppearanceType_Full                          = 1,
	PlayerAppearanceType_MAX                           = 2
};*/

// Enum SFXGame.SFXSaveGame.EEndGameState
/*enum EEndGameState
{
	EGS_NotFinished                                    = 0,
	EGS_OutInABlazeOfGlory                             = 1,
	EGS_LivedToFightAgain                              = 2,
	EGS_MAX                                            = 3
};*/

// Enum SFXGame.SFXSaveGame.EOriginType
/*enum EOriginType
{
	OriginType_None                                    = 0,
	OriginType_Spacer                                  = 1,
	OriginType_Colony                                  = 2,
	OriginType_Earthborn                               = 3,
	OriginType_MAX                                     = 4
};*/

// Enum SFXGame.SFXSaveGame.EHelmetPart
/*enum EHelmetPart
{
	HelmetPart_Helmet                                  = 0,
	HelmetPart_Visor                                   = 1,
	HelmetPart_Breather                                = 2,
	HelmetPart_MAX                                     = 3
};*/

// Enum SFXGame.SFXSaveGame.ENotorietyType
/*enum ENotorietyType
{
	NotorietyType_None                                 = 0,
	NotorietyType_Survivor                             = 1,
	NotorietyType_Warhero                              = 2,
	NotorietyType_Ruthless                             = 3,
	NotorietyType_MAX                                  = 4
};*/

// Enum SFXGame.SFXProfileSettings.EDifficultyOptions
/*enum EDifficultyOptions
{
	DO_Level1                                          = 0,
	DO_Level2                                          = 1,
	DO_Level3                                          = 2,
	DO_Level4                                          = 3,
	DO_Level5                                          = 4,
	DO_Level6                                          = 5,
	DO_MAX                                             = 6
};*/

// Enum SFXGame.SFXProfileSettings.EAimAssistOptions
/*enum EAimAssistOptions
{
	AAO_Low                                            = 0,
	AAO_Normal                                         = 1,
	AAO_High                                           = 2,
	AAO_MAX                                            = 3
};*/

// Enum SFXGame.SFXProfileSettings.EAutoReplyModeOptions
/*enum EAutoReplyModeOptions
{
	ARMO_All_Decisions                                 = 0,
	ARMO_Major_Decisions                               = 1,
	ARMO_No_Decisions                                  = 2,
	ARMO_MAX                                           = 3
};*/

// Enum SFXGame.SFXProfileSettings.ETVType
/*enum ETVType
{
	TVT_Default                                        = 0,
	TVT_Soft                                           = 1,
	TVT_Lucent                                         = 2,
	TVT_Vibrant                                        = 3,
	TVT_MAX                                            = 4
};*/

// Enum SFXGame.SFXEngine.ESFXNetworkErrorStatus
/*enum ESFXNetworkErrorStatus
{
	ErrorStatus_NoError                                = 0,
	ErrorStatus_DisplayingPrompt                       = 1,
	ErrorStatus_DisplayPromptAfterTravel               = 2,
	ErrorStatus_MAX                                    = 3
};*/

// Enum SFXGame.SFXEngine.ESFXSaveGameType
/*enum ESFXSaveGameType
{
	SaveGameType_Manual                                = 0,
	SaveGameType_Quick                                 = 1,
	SaveGameType_Auto                                  = 2,
	SaveGameType_Chapter                               = 3,
	SaveGameType_Export                                = 4,
	SaveGameType_Legend                                = 5,
	SaveGameType_MAX                                   = 6
};*/

// Enum SFXGame.SFXEngine.EWaitMessage
/*enum EWaitMessage
{
	EWaitMessage_Generic                               = 0,
	EWaitMessage_MatchStarted                          = 1,
	EWaitMessage_MatchEnded                            = 2,
	EWaitMessage_MAX                                   = 3
};*/

// Enum SFXGame.SFXEngine.ESFXSaveGameAction
/*enum ESFXSaveGameAction
{
	SaveGame_DoNothing                                 = 0,
	SaveGame_Load                                      = 1,
	SaveGame_Save                                      = 2,
	SaveGame_Delete                                    = 3,
	SaveGame_CreateCareer                              = 4,
	SaveGame_DeleteCareer                              = 5,
	SaveGame_EnumerateCareers                          = 6,
	SaveGame_EnumerateSaves                            = 7,
	SaveGame_QueryFreeSpace                            = 8,
	SaveGame_PrepareSave                               = 9,
	SaveGame_DeletePreparedSave                        = 10,
	SaveGame_MAX                                       = 11
};*/

// Enum SFXGame.SFXPlayerSquadLoadoutData.ELoadoutWeaponFlags
/*enum ELoadoutWeaponFlags
{
	LoadoutWeaponFlag_NotNew                           = 0,
	LoadoutWeaponFlag_MAX                              = 1
};*/

// Enum SFXGame.SFXPlayerSquadLoadoutData.ELoadoutWeapons
/*enum ELoadoutWeapons
{
	LoadoutWeapons_AssaultRifles                       = 0,
	LoadoutWeapons_Shotguns                            = 1,
	LoadoutWeapons_SniperRifles                        = 2,
	LoadoutWeapons_AutoPistols                         = 3,
	LoadoutWeapons_HeavyPistols                        = 4,
	LoadoutWeapons_HeavyWeapons                        = 5,
	LoadoutWeapons_MAX                                 = 6
};*/

// Enum SFXGame.SFXEngine.ESFXPostShipFeatureSet
/*enum ESFXPostShipFeatureSet
{
	PSFS_None                                          = 0,
	PSFS_FeatureSet                                    = 1,
	PSFS_FeatureSet01                                  = 2,
	PSFS_FeatureSet02                                  = 3,
	PSFS_FeatureSet03                                  = 4,
	PSFS_FeatureSet04                                  = 5,
	PSFS_FeatureSet05                                  = 6,
	PSFS_FeatureSet06                                  = 7,
	PSFS_FeatureSet07                                  = 8,
	PSFS_FeatureSet08                                  = 9,
	PSFS_FeatureSet09                                  = 10,
	PSFS_MAX                                           = 11
};*/

// Enum SFXGame.SFXDamageType.EHitReactRange
/*enum EHitReactRange
{
	HitReactRange_Invalid                              = 0,
	HitReactRange_Melee                                = 1,
	HitReactRange_Short                                = 2,
	HitReactRange_Medium                               = 3,
	HitReactRange_Long                                 = 4,
	HitReactRange_MAX                                  = 5
};*/

// Enum SFXGame.SFXDamageType.ESFXDamageFalloffType
/*enum ESFXDamageFalloffType
{
	DamageFalloffType_Constant                         = 0,
	DamageFalloffType_Linear                           = 1,
	DamageFalloffType_MAX                              = 2
};*/

// Enum SFXGame.SFXCustomActionTypes.EReactionTypes
/*enum EReactionTypes
{
	Reaction_Light                                     = 0,
	Reaction_Medium                                    = 1,
	Reaction_Heavy                                     = 2,
	Reaction_Pain                                      = 3,
	Reaction_Fire                                      = 4,
	Reaction_ShieldBreach                              = 5,
	Reaction_DeathLight                                = 6,
	Reaction_DeathHeavy                                = 7,
	Reaction_MAX                                       = 8
};*/

// Enum SFXGame.SFXCustomActionTypes.EPowerCustomAction
/*enum EPowerCustomAction
{
	PCA_None                                           = 0,
	PCA_Power_Reave                                    = 1,
	PCA_Power_Throw                                    = 2,
	PCA_Power_Pull                                     = 3,
	PCA_Power_Singularity                              = 4,
	PCA_Power_Warp                                     = 5,
	PCA_Power_Shockwave                                = 6,
	PCA_Power_Stasis                                   = 7,
	PCA_Power_Overpower                                = 8,
	PCA_Power_Slam                                     = 9,
	PCA_Power_Barrier                                  = 10,
	PCA_Power_Dominate                                 = 11,
	PCA_Power_LiftGrenade                              = 12,
	PCA_Power_AdrenalineRush                           = 13,
	PCA_Power_ConcussiveShot                           = 14,
	PCA_Power_Carnage                                  = 15,
	PCA_Power_Fortification                            = 16,
	PCA_Power_IncendiaryAmmo                           = 17,
	PCA_Power_DisruptorAmmo                            = 18,
	PCA_Power_CryoAmmo                                 = 19,
	PCA_Power_ArmorPiercingAmmo                        = 20,
	PCA_Power_WarpAmmo                                 = 21,
	PCA_Power_ShredderAmmo                             = 22,
	PCA_Power_InfernoGrenade                           = 23,
	PCA_Power_FlashbangGrenade                         = 24,
	PCA_Power_FragGrenade                              = 25,
	PCA_Power_StickyGrenade                            = 26,
	PCA_Power_BioticGrenade                            = 27,
	PCA_Power_Overload                                 = 28,
	PCA_Power_Incinerate                               = 29,
	PCA_Power_CryoBlast                                = 30,
	PCA_Power_CombatDrone                              = 31,
	PCA_Power_SentryTurret                             = 32,
	PCA_Power_Hacking                                  = 33,
	PCA_Power_GethShieldBoost                          = 34,
	PCA_Power_EnergyDrain                              = 35,
	PCA_Power_NeuralShock                              = 36,
	PCA_Power_BioticCharge                             = 37,
	PCA_Power_TechArmor                                = 38,
	PCA_Power_Amplification                            = 39,
	PCA_Power_Cloak                                    = 40,
	PCA_Power_Regeneration                             = 41,
	PCA_Power_ClassPassive                             = 42,
	PCA_Power_ClassMeleePassive                        = 43,
	PCA_Power_Cannibal_BioticBlast                     = 44,
	PCA_Power_Atlas_ConcussiveShot                     = 45,
	PCA_Power_GethPrime_ShieldDrone                    = 46,
	PCA_Power_GethPrime_Turret                         = 47,
	PCA_Power_CombatDrone_Zap                          = 48,
	PCA_Power_CombatDrone_Shock                        = 49,
	PCA_Power_CombatDrone_Rocket                       = 50,
	PCA_Power_ProtectorDrone                           = 51,
	PCA_Power_Decoy                                    = 52,
	PCA_Power_Titan_Rocket                             = 53,
	PCA_Power_Titan_Rocket_Player                      = 54,
	PCA_Power_EnemyGrenade                             = 55,
	PCA_Power_SentryTurret_Rocket                      = 56,
	PCA_Power_SentryTurret_Shock                       = 57,
	PCA_Power_GethReaper_Attack                        = 58,
	PCA_Power_Marksman                                 = 59,
	PCA_Power_ProximityMine                            = 60,
	PCA_Power_ShieldDroneBuff                          = 61,
	PCA_Power_BioticFocus                              = 62,
	PCA_Power_Lockdown                                 = 63,
	PCA_Power_Discharge                                = 64,
	PCA_Power_DarkChannel                              = 65,
	PCA_Power_Consumable_Rocket                        = 66,
	PCA_Power_Consumable_Revive                        = 67,
	PCA_Power_Consumable_Shield                        = 68,
	PCA_Power_Consumable_Ammo                          = 69,
	PCA_Power_MatchConsumableAmmo                      = 70,
	PCA_POWER_DLC1                                     = 71,
	PCA_POWER_DLC2                                     = 72,
	PCA_POWER_DLC3                                     = 73,
	PCA_POWER_DLC4                                     = 74,
	PCA_POWER_DLC5                                     = 75,
	PCA_POWER_DLC6                                     = 76,
	PCA_POWER_DLC7                                     = 77,
	PCA_POWER_DLC8                                     = 78,
	PCA_POWER_DLC9                                     = 79,
	PCA_POWER_DLC10                                    = 80,
	PCA_POWER_DLC11                                    = 81,
	PCA_POWER_DLC12                                    = 82,
	PCA_POWER_DLC13                                    = 83,
	PCA_POWER_DLC14                                    = 84,
	PCA_POWER_DLC15                                    = 85,
	PCA_POWER_DLC16                                    = 86,
	PCA_POWER_DLC17                                    = 87,
	PCA_POWER_DLC18                                    = 88,
	PCA_POWER_DLC19                                    = 89,
	PCA_POWER_DLC20                                    = 90,
	PCA_POWER_DLC21                                    = 91,
	PCA_POWER_DLC22                                    = 92,
	PCA_POWER_DLC23                                    = 93,
	PCA_POWER_DLC24                                    = 94,
	PCA_POWER_DLC25                                    = 95,
	PCA_POWER_DLC26                                    = 96,
	PCA_POWER_DLC27                                    = 97,
	PCA_POWER_DLC28                                    = 98,
	PCA_POWER_DLC29                                    = 99,
	PCA_Power_Unity                                    = 100,
	PCA_MAX                                            = 101
};*/

// Enum SFXGame.SFXCustomActionTypes.EAICustomAction
/*enum EAICustomAction
{
	CA_None                                            = 0,
	CA_Ragdoll                                         = 1,
	CA_AnimRagdoll_Singularity                         = 2,
	CA_SyncAttackVictim                                = 3,
	CA_Use                                             = 4,
	CA_Revive                                          = 5,
	CA_PickUpWeapon                                    = 6,
	CA_BovineFortitude                                 = 7,
	CA_Frozen                                          = 8,
	CA_Reload                                          = 9,
	CA_MountedGunReload                                = 10,
	CA_HolsterWeapon                                   = 11,
	CA_DrawWeapon                                      = 12,
	CA_EnterVehicle                                    = 13,
	CA_ExitVehicle                                     = 14,
	CA_SpawnEntrance                                   = 15,
	CA_PrecisionMove                                   = 16,
	CA_HackDoor                                        = 17,
	CA_OmniWave                                        = 18,
	CA_ActivateWeaponFlashlight                        = 19,
	CA_LookAt_Mantle                                   = 20,
	CA_LookAt_MidCoverSlip                             = 21,
	CA_LookAt_StdCoverSlip                             = 22,
	CA_LookAt_MidSwatTurn                              = 23,
	CA_LookAt_StdSwatTurn                              = 24,
	CA_MP_RetrieveFlag                                 = 25,
	CA_MP_DisarmBomb                                   = 26,
	CA_MP_AnnexHack                                    = 27,
	CA_GapJump                                         = 28,
	CA_StandingGapJump                                 = 29,
	CA_JumpDown                                        = 30,
	CA_MantleOver                                      = 31,
	CA_EarlyMantleOver                                 = 32,
	CA_MantleUp                                        = 33,
	CA_MantleDown                                      = 34,
	CA_SlotToSlot                                      = 35,
	CA_CoverSlipLeft                                   = 36,
	CA_CoverSlipLeftStanding                           = 37,
	CA_CoverSlipRight                                  = 38,
	CA_CoverSlipRightStanding                          = 39,
	CA_Cover90TurnRight                                = 40,
	CA_Cover90TurnRightStanding                        = 41,
	CA_Cover90TurnLeft                                 = 42,
	CA_Cover90TurnLeftStanding                         = 43,
	CA_SwatTurnLeft                                    = 44,
	CA_SwatTurnRight                                   = 45,
	CA_LadderClimbUp                                   = 46,
	CA_LadderClimbDown                                 = 47,
	CA_BoostDown                                       = 48,
	CA_BoostUp                                         = 49,
	CA_ClimbUpWall                                     = 50,
	CA_ClimbDownWall                                   = 51,
	CA_LeapHumanoid                                    = 52,
	CA_LeapLarge                                       = 53,
	CA_RollLeft                                        = 54,
	CA_RollRight                                       = 55,
	CA_RollForward                                     = 56,
	CA_RollBackward                                    = 57,
	CA_ClassMelee                                      = 58,
	CA_MantleMelee                                     = 59,
	CA_BackTakeDown                                    = 60,
	CA_InfiltratorCloakPunch                           = 61,
	CA_MidCoverMeleeGrab                               = 62,
	CA_MidCoverMeleeOver                               = 63,
	CA_StdCoverMeleeLeft                               = 64,
	CA_StdCoverMeleeRight                              = 65,
	CA_CoverMeleeRight                                 = 66,
	CA_CoverMeleeLeft                                  = 67,
	CA_HvyStdCoverMeleeLeft                            = 68,
	CA_HvyStdCoverMeleeRight                           = 69,
	CA_HvyCoverMeleeRight                              = 70,
	CA_HvyCoverMeleeLeft                               = 71,
	CA_HeavyStdCoverMeleeRight                         = 72,
	CA_StormPunch                                      = 73,
	CA_BioticStormPunch                                = 74,
	CA_RifleMeleeOne                                   = 75,
	CA_RifleMeleeTwo                                   = 76,
	CA_RifleMeleeThree                                 = 77,
	CA_PistolMeleeOne                                  = 78,
	CA_PistolMeleeTwo                                  = 79,
	CA_PistolMeleeThree                                = 80,
	CA_Reaction_Standard                               = 81,
	CA_Reaction_StandardII                             = 82,
	CA_Reaction_StandardForward                        = 83,
	CA_Reaction_StandardLeft                           = 84,
	CA_Reaction_StandardRight                          = 85,
	CA_Reaction_StandardKnee                           = 86,
	CA_Reaction_Stagger                                = 87,
	CA_Reaction_StaggerII                              = 88,
	CA_Reaction_StaggerForward                         = 89,
	CA_Reaction_StaggerLeft                            = 90,
	CA_Reaction_StaggerRight                           = 91,
	CA_Reaction_Knockback                              = 92,
	CA_Reaction_KnockbackForward                       = 93,
	CA_Reaction_KnockbackLeft                          = 94,
	CA_Reaction_KnockbackRight                         = 95,
	CA_Reaction_Meleed                                 = 96,
	CA_Reaction_MeleedForward                          = 97,
	CA_Reaction_MeleedLeft                             = 98,
	CA_Reaction_MeleedRight                            = 99,
	CA_Reaction_ShieldBreach                           = 100,
	CA_Reaction_FlinchLight                            = 101,
	CA_Reaction_FlinchHeavy                            = 102,
	CA_Reaction_OnFire                                 = 103,
	CA_Reaction_OnFireII                               = 104,
	CA_Reaction_GreatPain                              = 105,
	CA_Reaction_GreatPainII                            = 106,
	CA_Reaction_Freezing                               = 107,
	CA_Reaction_FreezingII                             = 108,
	CA_Reaction_FreezingIII                            = 109,
	CA_Reaction_LargeStagger                           = 110,
	CA_Reaction_LargeStandard                          = 111,
	CA_Reaction_LargeStandardForward                   = 112,
	CA_Reaction_LargeStandardLeft                      = 113,
	CA_Reaction_LargeStandardRight                     = 114,
	CA_ACTMNT_ExplosionBack                            = 115,
	CA_ACTMNT_ExplosionFront                           = 116,
	CA_ACTMNT_ExplosionLeft                            = 117,
	CA_ACTMNT_ExplosionRight                           = 118,
	CA_ACTMNT_ShieldFace                               = 119,
	CA_DeathReaction_Standard                          = 120,
	CA_DeathReaction_HeadShot                          = 121,
	CA_DeathReaction_HitLeftArm                        = 122,
	CA_DeathReaction_HitRightArm                       = 123,
	CA_DeathReaction_HeavyHitLeftArm                   = 124,
	CA_DeathReaction_HeavyHitRightArm                  = 125,
	CA_DeathReaction_HitLeftLeg                        = 126,
	CA_DeathReaction_HitRightLeg                       = 127,
	CA_DeathReaction_Stomach                           = 128,
	CA_DeathReaction_Knockback                         = 129,
	CA_DeathReaction_Corkscrew                         = 130,
	CA_DeathReaction_FlinchDeath                       = 131,
	CA_Power                                           = 132,
	CA_AI_Melee                                        = 133,
	CA_AI_Melee2                                       = 134,
	CA_AI_SyncMelee                                    = 135,
	CA_AI_KillingBlow                                  = 136,
	CA_Engineer_DeployTurret                           = 137,
	CA_Engineer_Repair                                 = 138,
	CA_Engineer_Breach                                 = 139,
	CA_Cannibal_ConsumeBody                            = 140,
	CA_Marauder_BuffAllies                             = 141,
	CA_Marauder_Breach                                 = 142,
	CA_Marauder_BuffedByMarauder                       = 143,
	CA_Swarmer_Spawn                                   = 144,
	CA_KaiLeng_Vortex                                  = 145,
	CA_KaiLeng_SuperVortex                             = 146,
	CA_Phantom_Shield                                  = 147,
	CA_Phantom_AirRecover                              = 148,
	CA_Roar                                            = 149,
	CA_Brute_Block                                     = 150,
	CA_Brute_Charge                                    = 151,
	CA_Harvester_TakeOff                               = 152,
	CA_Harvester_Land                                  = 153,
	CA_Harvester_EnterAim                              = 154,
	CA_Harvester_LeaveAim                              = 155,
	CA_Harvester_FlyingDeath                           = 156,
	CA_Guardian_ShieldBash                             = 157,
	CA_Guardian_Breach                                 = 158,
	CA_Guardian_LoseShield                             = 159,
	CA_Guardian_Stagger                                = 160,
	CA_Atlas_Smoke                                     = 161,
	CA_Atlas_Block                                     = 162,
	CA_Atlas_OpenCockpitDeath                          = 163,
	CA_Atlas_CloseCockpitCombat                        = 164,
	CA_Atlas_OpenCockpitIdle                           = 165,
	CA_Atlas_CloseCockpitIdle                          = 166,
	CA_Atlas_DriverEnter                               = 167,
	CA_Atlas_DriverExit                                = 168,
	CA_Banshee_Blast                                   = 169,
	CA_Banshee_AOEBlast                                = 170,
	CA_Banshee_Shield                                  = 171,
	CA_Banshee_Phase                                   = 172,
	CA_Banshee_Breach                                  = 173,
	CA_Ravager_SpawnSwarmers                           = 174,
	CA_Ravager_PopSacks                                = 175,
	CA_Idle_StandGuard                                 = 176,
	CA_Idle_InspectWeapon                              = 177,
	CA_Idle_InspectOmniTool                            = 178,
	CA_Idle_OmniToolScan                               = 179,
	CA_Idle_UseConsole                                 = 180,
	CA_Idle_Talking                                    = 181,
	CA_Idle_Talking2                                   = 182,
	CA_Idle_Talking3                                   = 183,
	CA_Idle_Listening                                  = 184,
	CA_Idle_Listening2                                 = 185,
	CA_Idle_Listening3                                 = 186,
	CA_Idle_Centurion                                  = 187,
	CA_Idle_GuardPose                                  = 188,
	CA_Idle_SniperSweep                                = 189,
	CA_Idle_SwordFlourish                              = 190,
	CA_Idle_Cannibal                                   = 191,
	CA_Idle_Brute                                      = 192,
	CA_Idle_Husk                                       = 193,
	CA_Idle_Ravager                                    = 194,
	CA_Idle_Banshee                                    = 195,
	CA_OmniTool                                        = 196,
	CA_StandTyping                                     = 197,
	CA_DesignerSpecified                               = 198,
	CA_BeckonFront                                     = 199,
	CA_BeckonRear                                      = 200,
	CA_OmniToolCrouch                                  = 201,
	CA_Crouch                                          = 202,
	CA_InteractLow                                     = 203,
	CA_StandIdle                                       = 204,
	CA_DLC1                                            = 205,
	CA_DLC2                                            = 206,
	CA_DLC3                                            = 207,
	CA_DLC4                                            = 208,
	CA_DLC5                                            = 209,
	CA_DLC6                                            = 210,
	CA_DLC7                                            = 211,
	CA_DLC8                                            = 212,
	CA_DLC9                                            = 213,
	CA_DLC10                                           = 214,
	CA_DLC11                                           = 215,
	CA_DLC12                                           = 216,
	CA_DLC13                                           = 217,
	CA_DLC14                                           = 218,
	CA_DLC15                                           = 219,
	CA_DLC16                                           = 220,
	CA_DLC17                                           = 221,
	CA_DLC18                                           = 222,
	CA_DLC19                                           = 223,
	CA_DLC20                                           = 224,
	CA_DLC21                                           = 225,
	CA_DLC22                                           = 226,
	CA_DLC23                                           = 227,
	CA_DLC24                                           = 228,
	CA_DLC25                                           = 229,
	CA_DLC26                                           = 230,
	CA_DLC27                                           = 231,
	CA_DLC28                                           = 232,
	CA_DLC29                                           = 233,
	CA_MAX                                             = 234
};*/

// Enum SFXGame.SFXDamageType.EWoundDamage
/*enum EWoundDamage
{
	WoundDamage_None                                   = 0,
	WoundDamage_Light                                  = 1,
	WoundDamage_Medium                                 = 2,
	WoundDamage_Heavy                                  = 3,
	WoundDamage_MAX                                    = 4
};*/

// Enum SFXGame.SFXDamageType.EDamageCalculationSource
/*enum EDamageCalculationSource
{
	DamageCalcWeapon                                   = 0,
	DamageCalcPower                                    = 1,
	EDamageCalculationSource_MAX                       = 2
};*/

// Enum SFXGame.SFXAI_NativeBase.EAICombatRange
/*enum EAICombatRange
{
	AI_Range_Melee                                     = 0,
	AI_Range_Short                                     = 1,
	AI_Range_Medium                                    = 2,
	AI_Range_Long                                      = 3,
	AI_Range_MAX                                       = 4
};*/

// Enum SFXGame.SFXAI_NativeBase.EAICombatMood
/*enum EAICombatMood
{
	AI_NoMood                                          = 0,
	AI_Unaware                                         = 1,
	AI_Fallback                                        = 2,
	AI_Normal                                          = 3,
	AI_Aggressive                                      = 4,
	AI_Berserk                                         = 5,
	AI_MAX                                             = 6
};*/

// Enum SFXGame.SFXVocalizationTypes.ESFXVocalizationRole
/*enum ESFXVocalizationRole
{
	SFXVocalizationRole_None                           = 0,
	SFXVocalizationRole_Instigator                     = 1,
	SFXVocalizationRole_Instigator_NonCombat           = 2,
	SFXVocalizationRole_Instigator_Stealth             = 3,
	SFXVocalizationRole_Recipient                      = 4,
	SFXVocalizationRole_EnemyWitness                   = 5,
	SFXVocalizationRole_TeammateWitness                = 6,
	SFXVocalizationRole_HenchmanWitness                = 7,
	SFXVocalizationRole_ReferencedPawn                 = 8,
	SFXVocalizationRole_MAX                            = 9
};*/

// Enum SFXGame.SFXVocalizationTypes.ESFXVocalizationVariationType
/*enum ESFXVocalizationVariationType
{
	SFXVocalizationSpecificType_None                   = 0,
	SFXVocalizationSpecificType_Location               = 1,
	SFXVocalizationSpecificType_CharacterName          = 2,
	SFXVocalizationSpecificType_CharacterType          = 3,
	SFXVocalizationSpecificType_Affiliation            = 4,
	SFXVocalizationSpecificType_Gender                 = 5,
	SFXVocalizationSpecificType_Weapon                 = 6,
	SFXVocalizationSpecificType_Challenge              = 7,
	SFXVocalizationSpecificType_Me                     = 8,
	SFXVocalizationSpecificType_IsFriendly             = 9,
	SFXVocalizationSpecificType_MAX                    = 10
};*/

// Enum SFXGame.SFXVocalizationTypes.ESFXVocalizationBool
/*enum ESFXVocalizationBool
{
	SFXVocalizationBool_False                          = 0,
	SFXVocalizationBool_True                           = 1,
	SFXVocalizationBool_MAX                            = 2
};*/

// Enum SFXGame.SFXVocalizationTypes.ESFXVocalizationLocation
/*enum ESFXVocalizationLocation
{
	SFXVocalizationLocation_None                       = 0,
	SFXVocalizationLocation_Above                      = 1,
	SFXVocalizationLocation_Below                      = 2,
	SFXVocalizationLocation_Right                      = 3,
	SFXVocalizationLocation_Left                       = 4,
	SFXVocalizationLocation_Ahead                      = 5,
	SFXVocalizationLocation_Behind                     = 6,
	SFXVocalizationLocation_Specific                   = 7,
	SFXVocalizationLocation_MAX                        = 8
};*/

// Enum SFXGame.SFXVocalizationTypes.ESFXVocalizationGender
/*enum ESFXVocalizationGender
{
	SFXVocalizationGender_None                         = 0,
	SFXVocalizationGender_Male                         = 1,
	SFXVocalizationGender_Female                       = 2,
	SFXVocalizationGender_MAX                          = 3
};*/

// Enum SFXGame.SFXVocalizationTypes.ESFXVocalizationName
/*enum ESFXVocalizationName
{
	SFXVocalizationCharacter_None                      = 0,
	SFXVocalizationCharacter_Shepard                   = 1,
	SFXVocalizationCharacter_Garrus                    = 2,
	SFXVocalizationCharacter_Tali                      = 3,
	SFXVocalizationCharacter_Legion                    = 4,
	SFXVocalizationCharacter_Samara                    = 5,
	SFXVocalizationCharacter_Morinth                   = 6,
	SFXVocalizationCharacter_Jacob                     = 7,
	SFXVocalizationCharacter_Miranda                   = 8,
	SFXVocalizationCharacter_Grunt                     = 9,
	SFXVocalizationCharacter_Mordin                    = 10,
	SFXVocalizationCharacter_Thane                     = 11,
	SFXVocalizationCharacter_Jack                      = 12,
	SFXVocalizationCharacter_Kasumi                    = 13,
	SFXVocalizationCharacter_Zaeed                     = 14,
	SFXVocalizationCharacter_MAX                       = 15
};*/

// Enum SFXGame.SFXVocalizationTypes.ESFXVocalizationWeapon
/*enum ESFXVocalizationWeapon
{
	SFXVocalizationWeapon_None                         = 0,
	SFXVocalizationWeapon_Pistol                       = 1,
	SFXVocalizationWeapon_SMG                          = 2,
	SFXVocalizationWeapon_AssaultRifle                 = 3,
	SFXVocalizationWeapon_Shotgun                      = 4,
	SFXVocalizationWeapon_SniperRifle                  = 5,
	SFXVocalizationWeapon_HeavyWeapon                  = 6,
	SFXVocalizationWeapon_MAX                          = 7
};*/

// Enum SFXGame.SFXVocalizationManager.ESFXVocalizationEventID
/*enum ESFXVocalizationEventID
{
	SFXVocalizationEvent_None                          = 0,
	SFXVocalizationEvent_EnteredCombat                 = 1,
	SFXVocalizationEvent_ReceivedOrder_Attack          = 2,
	SFXVocalizationEvent_ReceivedOrder_Attack_TargetValid = 3,
	SFXVocalizationEvent_ReceivedOrder_Attack_MovingFirst = 4,
	SFXVocalizationEvent_ReceivedOrder_Attack_KilledTarget = 5,
	SFXVocalizationEvent_ReceivedOrder_ChangeWeapon    = 6,
	SFXVocalizationEvent_ReceivedOrder_Move            = 7,
	SFXVocalizationEvent_ReceivedOrder_Follow          = 8,
	SFXVocalizationEvent_ReceivedOrder_TakeCover       = 9,
	SFXVocalizationEvent_ReceivedOrder_Hold            = 10,
	SFXVocalizationEvent_CancellingHoldOrder           = 11,
	SFXVocalizationEvent_FailedMoveOrder               = 12,
	SFXVocalizationEvent_Attacking                     = 13,
	SFXVocalizationEvent_Attacking_Henchman            = 14,
	SFXVocalizationEvent_KilledTarget_Henchman         = 15,
	SFXVocalizationEvent_LostSight                     = 16,
	SFXVocalizationEvent_EnemySighted                  = 17,
	SFXVocalizationEvent_MovingToCover                 = 18,
	SFXVocalizationEvent_UsingPower                    = 19,
	SFXVocalizationEvent_ChangingWeapon                = 20,
	SFXVocalizationEvent_Death                         = 21,
	SFXVocalizationEvent_Death_NonTrivial              = 22,
	SFXVocalizationEvent_Death_Henchman                = 23,
	SFXVocalizationEvent_ReceivedDamage                = 24,
	SFXVocalizationEvent_ReceivedDamage_LowHealth      = 25,
	SFXVocalizationEvent_ReceivedDamage_ExtremelyLowHealth = 26,
	SFXVocalizationEvent_RequireHealing                = 27,
	SFXVocalizationEvent_ShieldsDown                   = 28,
	SFXVocalizationEvent_OneEnemyRemaining             = 29,
	SFXVocalizationEvent_ZeroEnemiesRemaining          = 30,
	SFXVocalizationEvent_Agitation_High                = 31,
	SFXVocalizationEvent_Agitation_Medium              = 32,
	SFXVocalizationEvent_DamageReaction_GreatPain      = 33,
	SFXVocalizationEvent_DamageReaction_OnFire         = 34,
	SFXVocalizationEvent_DamageReaction_KnockedBack    = 35,
	SFXVocalizationEvent_Falling                       = 36,
	SFXVocalizationEvent_Tossed                        = 37,
	SFXVocalizationEvent_Brainwashed                   = 38,
	SFXVocalizationEvent_Taunt                         = 39,
	SFXVocalizationEvent_Ambient                       = 40,
	SFXVocalizationEvent_Power_Failed_ShieldsUp        = 41,
	SFXVocalizationEvent_Power_Failed_BarrierUp        = 42,
	SFXVocalizationEvent_Power_Failed_ArmorUp          = 43,
	SFXVocalizationEvent_Power_EnergyDrain             = 44,
	SFXVocalizationEvent_Power_Reave                   = 45,
	SFXVocalizationEvent_Power_ShockWave               = 46,
	SFXVocalizationEvent_Power_Crush                   = 47,
	SFXVocalizationEvent_Power_CombatDrone             = 48,
	SFXVocalizationEvent_Power_Incinerate              = 49,
	SFXVocalizationEvent_Power_Lift                    = 50,
	SFXVocalizationEvent_Power_Pull                    = 51,
	SFXVocalizationEvent_Power_Singularity             = 52,
	SFXVocalizationEvent_Power_Stasis                  = 53,
	SFXVocalizationEvent_Power_Throw                   = 54,
	SFXVocalizationEvent_Power_Warp                    = 55,
	SFXVocalizationEvent_Power_Biotic_Misc             = 56,
	SFXVocalizationEvent_Power_AIHack                  = 57,
	SFXVocalizationEvent_Power_Fissure                 = 58,
	SFXVocalizationEvent_Power_Flashbang               = 59,
	SFXVocalizationEvent_Power_NeuralShock             = 60,
	SFXVocalizationEvent_Power_Overload                = 61,
	SFXVocalizationEvent_Power_Sabotage                = 62,
	SFXVocalizationEvent_Power_Tech_Misc               = 63,
	SFXVocalizationEvent_Power_Ammo                    = 64,
	SFXVocalizationEvent_Power_Explosion               = 65,
	SFXVocalizationEvent_Power_Melee                   = 66,
	SFXVocalizationEvent_Power_Projectile              = 67,
	SFXVocalizationEvent_Power_Combat_Misc             = 68,
	SFXVocalizationEvent_Power_Buff                    = 69,
	SFXVocalizationEvent_Power_Cloak                   = 70,
	SFXVocalizationEvent_Power_Regeneration            = 71,
	SFXVocalizationEvent_Power_Resurrection            = 72,
	SFXVocalizationEvent_Power_KroganCharge            = 73,
	SFXVocalizationEvent_Power_KroganResurrection      = 74,
	SFXVocalizationEvent_MultipleAttackers             = 75,
	SFXVocalizationEvent_ViolenceAwe                   = 76,
	SFXVocalizationEvent_Bored                         = 77,
	SFXVocalizationEvent_DrewWeapon_OutOfCombat        = 78,
	SFXVocalizationEvent_StaredAt                      = 79,
	SFXVocalizationEvent_Bumped                        = 80,
	SFXVocalizationEvent_FriendlyFire                  = 81,
	SFXVocalizationEvent_Headshot                      = 82,
	SFXVocalizationEvent_ShootDeadBody                 = 83,
	SFXVocalizationEvent_UsedNuclearWeapon             = 84,
	SFXVocalizationEvent_CoverCrateExplosion           = 85,
	SFXVocalizationEvent_HeavyMechGoingToExplode       = 86,
	SFXVocalizationEvent_Flanked                       = 87,
	SFXVocalizationEvent_UnCloaked                     = 88,
	SFXVocalizationEvent_ChargeFailed                  = 89,
	SFXVocalizationEvent_BlockedPower                  = 90,
	SFXVocalizationEvent_PowerStillOnCooldown          = 91,
	SFXVocalizationEvent_Varren_Charge                 = 92,
	SFXVocalizationEvent_Husk_Charge                   = 93,
	SFXVocalizationEvent_DamageReaction_PlayerStagger  = 94,
	SFXVocalizationEvent_DamageReaction_PlayerMeleed   = 95,
	SFXVocalizationEvent_DamageReaction_PlayerMeleedII = 96,
	SFXVocalizationEvent_DamageReaction_PlayerMeleedNoRotate = 97,
	SFXVocalizationEvent_DamageReaction_PlayerStandardImpact = 98,
	SFXVocalizationEvent_DamageReaction_PlayerKnockback = 99,
	SFXVocalizationEvent_DamageReaction_BloodyPlayerStandardImpact = 100,
	SFXVocalizationEvent_DamageReaction_PlayerOnFire   = 101,
	SFXVocalizationEvent_CollectorPossession           = 102,
	SFXVocalizationEvent_VorchaBloodlust               = 103,
	SFXVocalizationEvent_CausedDamage                  = 104,
	SFXVocalizationEvent_LowAmmo                       = 105,
	SFXVocalizationEvent_OutOfAmmo                     = 106,
	SFXVocalizationEvent_Loot_AmmoFound                = 107,
	SFXVocalizationEvent_Loot_AmmoFull                 = 108,
	SFXVocalizationEvent_Loot_TreasureFound            = 109,
	SFXVocalizationEvent_Saw_HeavyMech                 = 110,
	SFXVocalizationEvent_CollectorGeneral_ReceivedDamage = 111,
	SFXVocalizationEvent_Aggressive_Flank              = 112,
	SFXVocalizationEvent_PraetorianImmune_ReceivedDamage = 113,
	SFXVocalizationEvent_Krogan_ReceivedDamage         = 114,
	SFXVocalizationEvent_CollectorPossessed            = 115,
	SFXVocalizationEvent_Multiplayer_Revive            = 116,
	SFXVocalizationEvent_Multiplayer_PlayerAssisted    = 117,
	SFXVocalizationEvent_Multiplayer_ObjectiveBegin    = 118,
	SFXVocalizationEvent_Multiplayer_RequestAssistMelee = 119,
	SFXVocalizationEvent_Multiplayer_RequestAssistRanged = 120,
	SFXVocalizationEvent_Multiplayer_RequestCoveringFire = 121,
	SFXVocalizationEvent_Multiplayer_RangedAssistMelee = 122,
	SFXVocalizationEvent_Multiplayer_RangedAssistRanged = 123,
	SFXVocalizationEvent_Multiplayer_PowerAssist       = 124,
	SFXVocalizationEvent_Multiplayer_Combo             = 125,
	SFXVocalizationEvent_Multiplayer_Headshot          = 126,
	SFXVocalizationEvent_Mutliplayer_Cloaked           = 127,
	SFXVocalizationEvent_Multiplayer_Flanking          = 128,
	SFXVocalizationEvent_Power_HeavyMelee              = 129,
	SFXVocalizationEvent_Custom1                       = 130,
	SFXVocalizationEvent_Custom2                       = 131,
	SFXVocalizationEvent_Custom3                       = 132,
	SFXVocalizationEvent_Custom4                       = 133,
	SFXVocalizationEvent_Custom5                       = 134,
	SFXVocalizationEvent_Custom6                       = 135,
	SFXVocalizationEvent_Custom7                       = 136,
	SFXVocalizationEvent_Custom8                       = 137,
	SFXVocalizationEvent_Custom9                       = 138,
	SFXVocalizationEvent_PlayerControllingAtlas        = 139,
	SFXVocalizationEvent_EngineerSetUpTurret           = 140,
	SFXVocalizationEvent_EngineerRepairingAtlas        = 141,
	SFXVocalizationEvent_MAX                           = 142
};*/

// Enum SFXGame.SFXGame.ECharacterClass
/*enum ECharacterClass
{
	ClassType_Invalid                                  = 0,
	ClassType_Soldier                                  = 1,
	ClassType_Adept                                    = 2,
	ClassType_Infiltrator                              = 3,
	ClassType_Engineer                                 = 4,
	ClassType_Vanguard                                 = 5,
	ClassType_Sentinel                                 = 6,
	ClassType_MAX                                      = 7
};*/

// Enum SFXGame.SFXAccomplishmentManager.EAccomplishmentStorage
/*enum EAccomplishmentStorage
{
	ACCSTOR_None                                       = 0,
	ACCSTOR_AsAchievement                              = 1,
	ACCSTOR_InOnlineStorage                            = 2,
	ACCSTOR_InProfileSettings                          = 3,
	ACCSTOR_MAX                                        = 4
};*/

// Enum SFXGame.SFXProfileSettings.EAchievementID
/*enum EAchievementID
{
	ACHIEVEMENT_00_PROEAR                              = 0,
	ACHIEVEMENT_01_PROMAR                              = 1,
	ACHIEVEMENT_02_KROGAR                              = 2,
	ACHIEVEMENT_03_KRO001                              = 3,
	ACHIEVEMENT_04_KRO002                              = 4,
	ACHIEVEMENT_05_KROGRU                              = 5,
	ACHIEVEMENT_06_GTH001                              = 6,
	ACHIEVEMENT_07_GTH002                              = 7,
	ACHIEVEMENT_08_GTHLEG                              = 8,
	ACHIEVEMENT_09_CAT003                              = 9,
	ACHIEVEMENT_10_CAT002                              = 10,
	ACHIEVEMENT_11_CAT004                              = 11,
	ACHIEVEMENT_12_CERMIR                              = 12,
	ACHIEVEMENT_13_CITSAM                              = 13,
	ACHIEVEMENT_14_OMGJCK                              = 14,
	ACHIEVEMENT_15_CERJCB                              = 15,
	ACHIEVEMENT_16_END001                              = 16,
	ACHIEVEMENT_17_END002                              = 17,
	ACHIEVEMENT_18_STORE                               = 18,
	ACHIEVEMENT_19_ENDGAMEMAX                          = 19,
	ACHIEVEMENT_20_FINDSALVAGE                         = 20,
	ACHIEVEMENT_21_IMPORT                              = 21,
	ACHIEVEMENT_22_INSANITY                            = 22,
	ACHIEVEMENT_23_WEAPONMOD                           = 23,
	ACHIEVEMENT_24_ROMANCE                             = 24,
	ACHIEVEMENT_25_POWERCOMBO                          = 25,
	ACHIEVEMENT_26_MAXPOWER                            = 26,
	ACHIEVEMENT_27_KILLA                               = 27,
	ACHIEVEMENT_28_KILLB                               = 28,
	ACHIEVEMENT_29_KILLC                               = 29,
	ACHIEVEMENT_30_MELEE                               = 30,
	ACHIEVEMENT_31_ESCAPEREAPER                        = 31,
	ACHIEVEMENT_32_MAXSECURITY                         = 32,
	ACHIEVEMENT_33_OVERLOADSHIELDS                     = 33,
	ACHIEVEMENT_34_ENEMIESFLYING                       = 34,
	ACHIEVEMENT_35_ENEMIESONFIRE                       = 35,
	ACHIEVEMENT_36_BRUTECHARGE                         = 36,
	ACHIEVEMENT_37_GUARDIANMAILSLOT                    = 37,
	ACHIEVEMENT_38_HIJACKATLAS                         = 38,
	ACHIEVEMENT_39_HARVESTER                           = 39,
	ACHIEVEMENT_40_CREATECHAR                          = 40,
	ACHIEVEMENT_41_PLAYALLMAPS                         = 41,
	ACHIEVEMENT_42_PREPARED                            = 42,
	ACHIEVEMENT_43_MISSIONSA                           = 43,
	ACHIEVEMENT_44_MISSIONSB                           = 44,
	ACHIEVEMENT_45_WEAPONMAXED                         = 45,
	ACHIEVEMENT_46_HIGHLEVEL                           = 46,
	ACHIEVEMENT_47_MAXLEVEL                            = 47,
	ACHIEVEMENT_48_NEWGAME                             = 48,
	ACHIEVEMENT_49_ALLMAPSGOLD                         = 49,
	AVATAR_00_OMNIBLADE                                = 50,
	ACHIEVEMENT_DLC                                    = 51,
	ACHIEVEMENT_DLC01                                  = 52,
	ACHIEVEMENT_DLC02                                  = 53,
	ACHIEVEMENT_DLC03                                  = 54,
	ACHIEVEMENT_DLC04                                  = 55,
	ACHIEVEMENT_DLC05                                  = 56,
	ACHIEVEMENT_DLC06                                  = 57,
	ACHIEVEMENT_DLC07                                  = 58,
	ACHIEVEMENT_DLC08                                  = 59,
	ACHIEVEMENT_DLC09                                  = 60,
	ACHIEVEMENT_DLC10                                  = 61,
	ACHIEVEMENT_DLC11                                  = 62,
	ACHIEVEMENT_DLC12                                  = 63,
	ACHIEVEMENT_DLC13                                  = 64,
	ACHIEVEMENT_DLC14                                  = 65,
	ACHIEVEMENT_DLC15                                  = 66,
	ACHIEVEMENT_DLC16                                  = 67,
	ACHIEVEMENT_DLC17                                  = 68,
	ACHIEVEMENT_DLC18                                  = 69,
	ACHIEVEMENT_DLC19                                  = 70,
	ACHIEVEMENT_DLC20                                  = 71,
	ACHIEVEMENT_DLC21                                  = 72,
	ACHIEVEMENT_DLC22                                  = 73,
	ACHIEVEMENT_DLC23                                  = 74,
	ACHIEVEMENT_DLC24                                  = 75,
	ACHIEVEMENT_PS3_SPECIAL_N7ELITE_NO_USE             = 76,
	ACHIEVEMENT_NONE                                   = 77,
	EAchievementID_MAX                                 = 78
};*/

// Enum SFXGame.SFXProfileSettings.EProfileSetting
/*enum EProfileSetting
{
	Setting_Unknown                                    = 0,
	Setting_ControllerVibration                        = 1,
	Setting_YInversion                                 = 2,
	Setting_GamerCred                                  = 3,
	Setting_GamerRep                                   = 4,
	Setting_VoiceMuted                                 = 5,
	Setting_VoiceThruSpeakers                          = 6,
	Setting_VoiceVolume                                = 7,
	Setting_GamerPictureKey                            = 8,
	Setting_GamerMotto                                 = 9,
	Setting_GamerTitlesPlayed                          = 10,
	Setting_GamerAchievementsEarned                    = 11,
	Setting_GameDifficulty                             = 12,
	Setting_ControllerSensitivity                      = 13,
	Setting_PreferredColor1                            = 14,
	Setting_PreferredColor2                            = 15,
	Setting_AutoAim                                    = 16,
	Setting_AutoCenter                                 = 17,
	Setting_MovementControl                            = 18,
	Setting_RaceTransmission                           = 19,
	Setting_RaceCameraLocation                         = 20,
	Setting_RaceBrakeControl                           = 21,
	Setting_RaceAcceleratorControl                     = 22,
	Setting_GameCredEarned                             = 23,
	Setting_GameAchievementsEarned                     = 24,
	Setting_EndLiveIds                                 = 25,
	Setting_ProfileVersionNum                          = 26,
	Setting_ProfileSaveCount                           = 27,
	Setting_StickConfiguration                         = 28,
	Setting_TriggerConfiguration                       = 29,
	Setting_Subtitles                                  = 30,
	Setting_AimAssist                                  = 31,
	Setting_Difficulty                                 = 32,
	Setting_InitialGameDifficulty                      = 33,
	Setting_AutoLevel                                  = 34,
	Setting_SquadPowers                                = 35,
	Setting_AutoSave                                   = 36,
	Setting_MusicVolume                                = 37,
	Setting_FXVolume                                   = 38,
	Setting_DialogVolume                               = 39,
	Setting_MotionBlur                                 = 40,
	Setting_FilmGrain                                  = 41,
	Setting_SelectedDeviceID                           = 42,
	Setting_CurrentCareer                              = 43,
	Setting_DaysSinceRegistration                      = 44,
	Setting_AutoLogin                                  = 45,
	Setting_LoginInfo                                  = 46,
	Setting_PersonaID                                  = 47,
	Setting_NucleusRefused                             = 48,
	Setting_NucleusSuccessful                          = 49,
	Setting_CerberusRefused                            = 50,
	Setting_Achievement_FieldA                         = 51,
	Setting_Achievement_FieldB                         = 52,
	Setting_Achievement_FieldC                         = 53,
	Setting_TelemetryCollectionEnabled                 = 54,
	Setting_KeyBindings                                = 55,
	Setting_DisplayGamma                               = 56,
	Setting_CurrentSaveGame                            = 57,
	Setting_HideCinematicHelmet                        = 58,
	Setting_ActionIconUIHints                          = 59,
	Setting_NumGameCompletions                         = 60,
	Setting_ShowHints                                  = 61,
	Setting_MorinthNotSamara                           = 62,
	Setting_MaxWeaponUpgradeCount                      = 63,
	Setting_LastFinishedCareer                         = 64,
	Setting_SwapTriggersShoulders                      = 65,
	Setting_PS3_RedeemedProductCode                    = 66,
	Setting_LastSelectedPawn                           = 67,
	Setting_ShowScoreIndicators                        = 68,
	Setting_Accomplishment_FieldA                      = 69,
	Setting_Accomplishment_FieldB                      = 70,
	Setting_Accomplishment_FieldC                      = 71,
	Setting_Accomplishment_FieldD                      = 72,
	Setting_Accomplishment_FieldE                      = 73,
	Setting_Accomplishment_FieldF                      = 74,
	Setting_Accomplishment_FieldG                      = 75,
	Setting_Accomplishment_FieldH                      = 76,
	Setting_NumSalvageFound                            = 77,
	Setting_SPLevel                                    = 78,
	Setting_NumKills                                   = 79,
	Setting_NumMeleeKills                              = 80,
	Setting_NumShieldsOverloaded                       = 81,
	Setting_NumEnemiesFlying                           = 82,
	Setting_NumEnemiesOnFire                           = 83,
	Setting_CachedDisconnectError                      = 84,
	Setting_CachedDisconnectFromState                  = 85,
	Setting_CachedDisconnectToState                    = 86,
	Setting_CachedDisconnectSessionId                  = 87,
	Setting_Language_VO                                = 88,
	Setting_Language_Text                              = 89,
	Setting_Language_Speech                            = 90,
	Setting_MPAutoLevel                                = 91,
	Setting_GalaxyAtWarLevel                           = 92,
	Setting_N7Rating_LocalUser                         = 93,
	Setting_N7Rating_FriendBlob                        = 94,
	Setting_AutoReplyMode                              = 95,
	Setting_BonusPower                                 = 96,
	Setting_NumGuardianHeadKilled                      = 97,
	Setting_MPCreateNewMatchPrivacySetting             = 98,
	Setting_MPCreateNewMatchMapName                    = 99,
	Setting_MPCreateNewMatchEnemyType                  = 100,
	Setting_MPCreateNewMatchDifficulty                 = 101,
	Setting_HenchmenHelmetOption                       = 102,
	Setting_AudioDynamicRange                          = 103,
	Setting_NumPowerCombos                             = 104,
	Setting_SPMaps                                     = 105,
	Setting_SPMapsCount                                = 106,
	Setting_NumArmorBought                             = 107,
	Setting_WeaponLevel                                = 108,
	Setting_SPMapsInsane                               = 109,
	Setting_SPMapsInsaneCount                          = 110,
	Setting_PowerLevel                                 = 111,
	Setting_MPQuickMatchMapName                        = 112,
	Setting_MPQuickMatchEnemyType                      = 113,
	Setting_MPQuickMatchDifficulty                     = 114,
	Setting_KinectTutorialPromptViewed                 = 115,
	Setting_GAW_Readiness                              = 116,
	Setting_GAW_ZoneIndex0                             = 117,
	Setting_GAW_ZoneIndex1                             = 118,
	Setting_GAW_ZoneIndex2                             = 119,
	Setting_GAW_ZoneIndex3                             = 120,
	Setting_GAW_ZoneIndex4                             = 121,
	Setting_GAW_ZoneIndex5                             = 122,
	Setting_GAW_AssetMultiplayer                       = 123,
	Setting_GAW_AssetIPhone                            = 124,
	Setting_GAW_AssetFacebook                          = 125,
	Setting_MAX                                        = 126
};*/

// Enum SFXGame.SFXProfileSettings.EOptionOnOff
/*enum EOptionOnOff
{
	OOO_On                                             = 0,
	OOO_Off                                            = 1,
	OOO_MAX                                            = 2
};*/

// Enum SFXGame.SFXProfileSettings.EStickConfigOptions
/*enum EStickConfigOptions
{
	SCO_Default                                        = 0,
	SCO_SouthPaw                                       = 1,
	SCO_MAX                                            = 2
};*/

// Enum SFXGame.SFXProfileSettings.ETriggerConfigOptions
/*enum ETriggerConfigOptions
{
	TCO_Default                                        = 0,
	TCO_SouthPaw                                       = 1,
	TCO_DefaultSwapped                                 = 2,
	TCO_SouthPawSwapped                                = 3,
	TCO_MAX                                            = 4
};*/

// Enum SFXGame.SFXProfileSettings.EAutoLevelOptions
/*enum EAutoLevelOptions
{
	ALO_Off                                            = 0,
	ALO_Squad                                          = 1,
	ALO_All                                            = 2,
	ALO_MAX                                            = 3
};*/

// Enum SFXGame.SFXProfileSettings.EHenchHelmetOptions
/*enum EHenchHelmetOptions
{
	HHO_DefaultOff                                     = 0,
	HHO_DefaultOn                                      = 1,
	HHO_ConversationOff                                = 2,
	HHO_MAX                                            = 3
};*/

// Enum SFXGame.SFXProfileSettings.EAudioDynamicRangeOptions
/*enum EAudioDynamicRangeOptions
{
	ADR_High                                           = 0,
	ADR_Low                                            = 1,
	ADR_MAX                                            = 2
};*/

// Enum SFXGame.SFXProfileSettings.EOptionYesNo
/*enum EOptionYesNo
{
	OYN_Yes                                            = 0,
	OYN_No                                             = 1,
	OYN_MAX                                            = 2
};*/

// Enum SFXGame.SFXTreasureData.EME3Level
/*enum EME3Level
{
	ME3Level_None                                      = 0,
	ME3Level_ProEar                                    = 1,
	ME3Level_ProMar                                    = 2,
	ME3Level_SPRctr                                    = 3,
	ME3Level_CitHub                                    = 4,
	ME3Level_Nor                                       = 5,
	ME3Level_KroGar                                    = 6,
	ME3Level_OmgJck                                    = 7,
	ME3Level_SPCer                                     = 8,
	ME3Level_Kro001                                    = 9,
	ME3Level_KroN7a                                    = 10,
	ME3Level_KroGru                                    = 11,
	ME3Level_KroN7b                                    = 12,
	ME3Level_SPNov                                     = 13,
	ME3Level_Kro002                                    = 14,
	ME3Level_Cat003                                    = 15,
	ME3Level_CitSam                                    = 16,
	ME3Level_CerJcb                                    = 17,
	ME3Level_SPDish                                    = 18,
	ME3Level_SPTowr                                    = 19,
	ME3Level_SPSlum                                    = 20,
	ME3Level_Gth001                                    = 21,
	ME3Level_GthLeg                                    = 22,
	ME3Level_GthN7a                                    = 23,
	ME3Level_Gth002                                    = 24,
	ME3Level_Cat002                                    = 25,
	ME3Level_CerMir                                    = 26,
	ME3Level_Cat004                                    = 27,
	ME3Level_End001                                    = 28,
	ME3Level_End002                                    = 29,
	ME3Level_End003                                    = 30,
	ME3Level_EricCombat                                = 31,
	ME3Level_Cat001                                    = 32,
	ME3Level_DLC1                                      = 33,
	ME3Level_DLC2                                      = 34,
	ME3Level_DLC3                                      = 35,
	ME3Level_DLC4                                      = 36,
	ME3Level_DLC5                                      = 37,
	ME3Level_DLC6                                      = 38,
	ME3Level_DLC7                                      = 39,
	ME3Level_DLC8                                      = 40,
	ME3Level_DLC9                                      = 41,
	ME3Level_DLC10                                     = 42,
	ME3Level_DLC11                                     = 43,
	ME3Level_DLC12                                     = 44,
	ME3Level_DLC13                                     = 45,
	ME3Level_DLC14                                     = 46,
	ME3Level_DLC15                                     = 47,
	ME3Level_DLC16                                     = 48,
	ME3Level_DLC17                                     = 49,
	ME3Level_DLC18                                     = 50,
	ME3Level_DLC19                                     = 51,
	ME3Level_DLC20                                     = 52,
	ME3Level_MAX                                       = 53
};*/

// Enum SFXGame.SFXTreasureData.EArmorTreasurePiece
/*enum EArmorTreasurePiece
{
	ArmorTreasure_None                                 = 0,
	ArmorTreasure_Helmet_Health                        = 1,
	ArmorTreasure_Helmet_Shield                        = 2,
	ArmorTreasure_Helmet_ShieldRegen                   = 3,
	ArmorTreasure_Helmet_PowerDamage                   = 4,
	ArmorTreasure_Helmet_PowerRecharge                 = 5,
	ArmorTreasure_Helmet_Movement                      = 6,
	ArmorTreasure_Helmet_WeaponDamage                  = 7,
	ArmorTreasure_Helmet_ConstraintDamage              = 8,
	ArmorTreasure_Helmet_AmmoCapacity                  = 9,
	ArmorTreasure_Helmet_MeleeDamage                   = 10,
	ArmorTreasure_Torso_Health                         = 11,
	ArmorTreasure_Torso_Shield                         = 12,
	ArmorTreasure_Torso_ShieldRegen                    = 13,
	ArmorTreasure_Torso_PowerDamage                    = 14,
	ArmorTreasure_Torso_PowerRecharge                  = 15,
	ArmorTreasure_Torso_Movement                       = 16,
	ArmorTreasure_Torso_WeaponDamage                   = 17,
	ArmorTreasure_Torso_ConstraintDamage               = 18,
	ArmorTreasure_Torso_AmmoCapacity                   = 19,
	ArmorTreasure_Torso_MeleeDamage                    = 20,
	ArmorTreasure_Shoulders_Health                     = 21,
	ArmorTreasure_Shoulders_Shield                     = 22,
	ArmorTreasure_Shoulders_ShieldRegen                = 23,
	ArmorTreasure_Shoulders_PowerDamage                = 24,
	ArmorTreasure_Shoulders_PowerRecharge              = 25,
	ArmorTreasure_Shoulders_Movement                   = 26,
	ArmorTreasure_Shoulders_WeaponDamage               = 27,
	ArmorTreasure_Shoulders_ConstraintDamage           = 28,
	ArmorTreasure_Shoulders_AmmoCapacity               = 29,
	ArmorTreasure_Shoulders_MeleeDamage                = 30,
	ArmorTreasure_Legs_Health                          = 31,
	ArmorTreasure_Legs_Shield                          = 32,
	ArmorTreasure_Legs_ShieldRegen                     = 33,
	ArmorTreasure_Legs_PowerDamage                     = 34,
	ArmorTreasure_Legs_PowerRecharge                   = 35,
	ArmorTreasure_Legs_Movement                        = 36,
	ArmorTreasure_Legs_WeaponDamage                    = 37,
	ArmorTreasure_Legs_ConstraintDamage                = 38,
	ArmorTreasure_Legs_AmmoCapacity                    = 39,
	ArmorTreasure_Legs_MeleeDamage                     = 40,
	ArmorTreasure_Arms_Health                          = 41,
	ArmorTreasure_Arms_Shield                          = 42,
	ArmorTreasure_Arms_ShieldRegen                     = 43,
	ArmorTreasure_Arms_PowerDamage                     = 44,
	ArmorTreasure_Arms_PowerRecharge                   = 45,
	ArmorTreasure_Arms_Movement                        = 46,
	ArmorTreasure_Arms_WeaponDamage                    = 47,
	ArmorTreasure_Arms_ConstraintDamage                = 48,
	ArmorTreasure_Arms_AmmoCapacity                    = 49,
	ArmorTreasure_Arms_MeleeDamage                     = 50,
	ArmorTreasure_DLC_01                               = 51,
	ArmorTreasure_DLC_02                               = 52,
	ArmorTreasure_DLC_03                               = 53,
	ArmorTreasure_DLC_04                               = 54,
	ArmorTreasure_DLC_05                               = 55,
	ArmorTreasure_DLC_06                               = 56,
	ArmorTreasure_DLC_07                               = 57,
	ArmorTreasure_DLC_08                               = 58,
	ArmorTreasure_DLC_09                               = 59,
	ArmorTreasure_DLC                                  = 60,
	ArmorTreasure_DLC01                                = 61,
	ArmorTreasure_DLC02                                = 62,
	ArmorTreasure_DLC03                                = 63,
	ArmorTreasure_DLC04                                = 64,
	ArmorTreasure_DLC05                                = 65,
	ArmorTreasure_DLC06                                = 66,
	ArmorTreasure_DLC07                                = 67,
	ArmorTreasure_DLC08                                = 68,
	ArmorTreasure_DLC09                                = 69,
	ArmorTreasure_DLC10                                = 70,
	ArmorTreasure_DLC11                                = 71,
	ArmorTreasure_DLC12                                = 72,
	ArmorTreasure_DLC13                                = 73,
	ArmorTreasure_DLC14                                = 74,
	ArmorTreasure_DLC15                                = 75,
	ArmorTreasure_DLC16                                = 76,
	ArmorTreasure_DLC17                                = 77,
	ArmorTreasure_DLC18                                = 78,
	ArmorTreasure_DLC19                                = 79,
	ArmorTreasure_DLC20                                = 80,
	ArmorTreasure_CollectorsEdition                    = 81,
	ArmorTreasure_CollectorsEdition01                  = 82,
	ArmorTreasure_CollectorsEdition02                  = 83,
	ArmorTreasure_Helmet_Mnemonic                      = 84,
	ArmorTreasure_Helmet_Delumcore                     = 85,
	ArmorTreasure_Helmet_Securitel                     = 86,
	ArmorTreasure_MAX                                  = 87
};*/

// Enum SFXGame.BioStateEventMap.EPlotElementTypes
/*enum EPlotElementTypes
{
	BIO_SE_ELEMENT_TYPE_INT                            = 0,
	BIO_SE_ELEMENT_TYPE_FLOAT                          = 1,
	BIO_SE_ELEMENT_TYPE_BOOL                           = 2,
	BIO_SE_ELEMENT_TYPE_FUNCTION                       = 3,
	BIO_SE_ELEMENT_TYPE_LOCAL_INT                      = 4,
	BIO_SE_ELEMENT_TYPE_LOCAL_FLOAT                    = 5,
	BIO_SE_ELEMENT_TYPE_LOCAL_BOOL                     = 6,
	BIO_SE_ELEMENT_TYPE_SUBSTATE                       = 7,
	BIO_SE_ELEMENT_TYPE_CONSEQUENCE                    = 8,
	BIO_SE_ELEMENT_TYPE_MAX                            = 9
};*/

// Enum SFXGame.BioConversation.EConvGUIStyles
/*enum EConvGUIStyles
{
	GUI_STYLE_NONE                                     = 0,
	GUI_STYLE_CHARM                                    = 1,
	GUI_STYLE_INTIMIDATE                               = 2,
	GUI_STYLE_PLAYER_ALERT                             = 3,
	GUI_STYLE_ILLEGAL                                  = 4,
	GUI_STYLE_MAX                                      = 5
};*/

// Enum SFXGame.BioConversation.EReplyCategory
/*enum EReplyCategory
{
	REPLY_CATEGORY_DEFAULT                             = 0,
	REPLY_CATEGORY_AGREE                               = 1,
	REPLY_CATEGORY_DISAGREE                            = 2,
	REPLY_CATEGORY_FRIENDLY                            = 3,
	REPLY_CATEGORY_HOSTILE                             = 4,
	REPLY_CATEGORY_INVESTIGATE                         = 5,
	REPLY_CATEGORY_RENEGADE_INTERRUPT                  = 6,
	REPLY_CATEGORY_PARAGON_INTERRUPT                   = 7,
	REPLY_CATEGORY_MAX                                 = 8
};*/

// Enum SFXGame.BioConversation.EReplyTypes
/*enum EReplyTypes
{
	REPLY_STANDARD                                     = 0,
	REPLY_AUTOCONTINUE                                 = 1,
	REPLY_DIALOGEND                                    = 2,
	REPLY_MAX                                          = 3
};*/

// Enum SFXGame.BioConversation.EInterruptionType
/*enum EInterruptionType
{
	INTERRUPTION_RENEGADE                              = 0,
	INTERRUPTION_PARAGON                               = 1,
	INTERRUPTION_MAX                                   = 2
};*/

// Enum SFXGame.BioConversationController.EBioConversationType
/*enum EBioConversationType
{
	BIOCONV_NULL                                       = 0,
	BIOCONV_FOVO                                       = 1,
	BIOCONV_Ambient                                    = 2,
	BIOCONV_Full                                       = 3,
	BIOCONV_MAX                                        = 4
};*/

// Enum SFXGame.BioConversationController.EConvLightingType
/*enum EConvLightingType
{
	ConvLighting_Cinematic                             = 0,
	ConvLighting_Exploration                           = 1,
	ConvLighting_Dynamic                               = 2,
	ConvLighting_MAX                                   = 3
};*/

// Enum SFXGame.BioCustomAction.ECustomActionPriority
/*enum ECustomActionPriority
{
	CA_Priority_None                                   = 0,
	CA_Priority_Low                                    = 1,
	CA_Priority_Medium                                 = 2,
	CA_Priority_High                                   = 3,
	CA_Priority_SuperHigh                              = 4,
	CA_Priority_MAX                                    = 5
};*/

// Enum SFXGame.BioPawn.EBodyStance
/*enum EBodyStance
{
	BS_FullBody                                        = 0,
	BS_Standing_Upper                                  = 1,
	BS_Standing_Lower                                  = 2,
	BS_Standing_Cov_Upper                              = 3,
	BS_Standing_Cov_Lean_Upper                         = 4,
	BS_Mid_Cov_Upper                                   = 5,
	BS_Mid_Cov_Lean_Upper                              = 6,
	BS_Mid_Cov_Popup_Upper                             = 7,
	BS_Standing_Cov_PartLean_Upper                     = 8,
	BS_Mid_Cov_PartLean_Upper                          = 9,
	BS_Mid_Cov_PartPopup_Upper                         = 10,
	BS_Crouching_Upper                                 = 11,
	BS_Max                                             = 12
};*/

// Enum SFXGame.BioCustomAction_CoverClimbMantleBase.ECoverBodyStanceID
/*enum ECoverBodyStanceID
{
	ECS_None                                           = 0,
	ECS_FromExplore                                    = 1,
	ECS_FromCombat                                     = 2,
	ECS_FromCover                                      = 3,
	ECS_MAX                                            = 4
};*/

// Enum SFXGame.BioCustomAction_KroganCharge.EKroganChargeActions
/*enum EKroganChargeActions
{
	EKC_Start                                          = 0,
	EKC_Miss                                           = 1,
	EKC_Hit                                            = 2,
	EKC_MAX                                            = 3
};*/

// Enum SFXGame.BioEventNotifier.BioNoticeDisplayTypes
/*enum BioNoticeDisplayTypes
{
	NOTICE_TYPE_DELTA                                  = 0,
	NOTICE_TYPE_TEXT                                   = 1,
	NOTICE_TYPE_QUANTITY                               = 2,
	NOTICE_TYPE_QUANTITY_TEXT                          = 3,
	NOTICE_TYPE_MAX                                    = 4
};*/

// Enum SFXGame.BioEventNotifier.BioNoticeIcons
/*enum BioNoticeIcons
{
	NOTICE_ICON_UNASSIGNED                             = 0,
	NOTICE_ICON_QUEST_UPDATE                           = 1,
	NOTICE_ICON_LEVELUP                                = 2,
	NOTICE_ICON_DEFICIENCY                             = 3,
	NOTICE_ICON_XP                                     = 4,
	NOTICE_ICON_PARAGON                                = 5,
	NOTICE_ICON_RENEGADE                               = 6,
	NOTICE_ICON_OMNITOOL                               = 7,
	NOTICE_ICON_BIOAMP                                 = 8,
	NOTICE_ICON_XMOD                                   = 9,
	NOTICE_ICON_CODEX_ADDED                            = 10,
	NOTICE_ICON_COIN                                   = 11,
	NOTICE_ICON_MEDIGEL                                = 12,
	NOTICE_ICON_SALVAGE                                = 13,
	NOTICE_ICON_PISTOL                                 = 14,
	NOTICE_ICON_SHOTGUN                                = 15,
	NOTICE_ICON_ASSAULT_RIFLE                          = 16,
	NOTICE_ICON_SNIPER_RIFLE                           = 17,
	NOTICE_ICON_ARMOR                                  = 18,
	NOTICE_ICON_GRENADE                                = 19,
	NOTICE_ICON_QUEST_ADDED                            = 20,
	NOTICE_ICON_AREAMAPNODE                            = 21,
	NOTICE_ICON_MAX                                    = 22
};*/

// Enum SFXGame.BioEventNotifier.BioNoticeContexts
/*enum BioNoticeContexts
{
	NOTICE_CONTEXT_JOURNAL                             = 0,
	NOTICE_CONTEXT_CODEX                               = 1,
	NOTICE_CONTEXT_INVENTORY                           = 2,
	NOTICE_CONTEXT_PARTYLEVEL                          = 3,
	NOTICE_CONTEXT_XP                                  = 4,
	NOTICE_CONTEXT_MEDIGEL                             = 5,
	NOTICE_CONTEXT_SALVAGE                             = 6,
	NOTICE_CONTEXT_CREDITS                             = 7,
	NOTICE_CONTEXT_GRENADES                            = 8,
	NOTICE_CONTEXT_PARAGON                             = 9,
	NOTICE_CONTEXT_RENEGADE                            = 10,
	NOTICE_CONTEXT_AREAMAP                             = 11,
	NOTICE_CONTEXT_ABILITY                             = 12,
	NOTICE_CONTEXT_MAX                                 = 13
};*/

// Enum SFXGame.BioEventNotifier.BioQuestEventTypes
/*enum BioQuestEventTypes
{
	QET_New                                            = 0,
	QET_Updated                                        = 1,
	QET_Completed                                      = 2,
	QET_MAX                                            = 3
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioGestureAllPoses
/*enum EBioGestureAllPoses
{
	GestPose_Unset                                     = 0,
	GestPose_MAX                                       = 1
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioGestureOverrideType
/*enum EBioGestureOverrideType
{
	DEFAULT_TRACK                                      = 0,
	FEMALE_PLAYER_TRACK                                = 1,
	EBioGestureOverrideType_MAX                        = 2
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioGestureValidPoses
/*enum EBioGestureValidPoses
{
	GestValidPoses_Unset                               = 0,
	GestValidPoses_MAX                                 = 1
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioGestureValidGestures
/*enum EBioGestureValidGestures
{
	GestValidGest_Unset                                = 0,
	GestValidGest_MAX                                  = 1
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioGestureGroups
/*enum EBioGestureGroups
{
	GestGroups_Unset                                   = 0,
	GestGroups_MAX                                     = 1
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioValidPoseGroups
/*enum EBioValidPoseGroups
{
	ValidPoseGroups_Unset                              = 0,
	ValidPoseGroups_MAX                                = 1
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioTrackAllPoseGroups
/*enum EBioTrackAllPoseGroups
{
	AllPoseGroups_Unset                                = 0,
	AllPoseGroups_MAX                                  = 1
};*/

// Enum SFXGame.BioEvtSysTrackProp.EDynPropList
/*enum EDynPropList
{
	DynPropList_Unset                                  = 0,
	DynPropList_MAX                                    = 1
};*/

// Enum SFXGame.BioEvtSysTrackProp.EDynPropActionList
/*enum EDynPropActionList
{
	DynPropActionList_Unset                            = 0,
	DynPropActionList_MAX                              = 1
};*/

// Enum SFXGame.BioEvtSysTrackSetFacing.EDynamicStageNodes
/*enum EDynamicStageNodes
{
	EDynamicStageNodes_UNSET                           = 0,
	EDynamicStageNodes_MAX                             = 1
};*/

// Enum SFXGame.BioEvtSysTrackSwitchCamera.EBioSwitchCamSpecific
/*enum EBioSwitchCamSpecific
{
	SwitchCam_Unset                                    = 0,
	SwitchCam_MAX                                      = 1
};*/

// Enum SFXGame.BioGlobalVariableTable.SFXRomanced
/*enum SFXRomanced
{
	SFXRomanced_NO_ONE                                 = 0,
	SFXRomanced_Ashley                                 = 1,
	SFXRomanced_Kaidan                                 = 2,
	SFXRomanced_Liara                                  = 3,
	SFXRomanced_Miranda                                = 4,
	SFXRomanced_Garrus                                 = 5,
	SFXRomanced_Jacob                                  = 6,
	SFXRomanced_Thane                                  = 7,
	SFXRomanced_Jack                                   = 8,
	SFXRomanced_Tali                                   = 9,
	SFXRomanced_MAX                                    = 10
};*/

// Enum SFXGame.BioGlobalVariableTable.SFXME2Plot_CollectorBaseState
/*enum SFXME2Plot_CollectorBaseState
{
	CollectorBase_Irradiate                            = 0,
	CollectorBase_Destroyed                            = 1,
	CollectorBase_MAX                                  = 2
};*/

// Enum SFXGame.BioGlobalVariableTable.SFXME2Plot_HereticsState
/*enum SFXME2Plot_HereticsState
{
	Heretics_Rewrite                                   = 0,
	Heretics_Destroyed                                 = 1,
	Heretics_NotComplete                               = 2,
	Heretics_MAX                                       = 3
};*/

// Enum SFXGame.BioGlobalVariableTable.SFXME1Plot_WrexState
/*enum SFXME1Plot_WrexState
{
	WREX_ALIVE                                         = 0,
	WREX_DEAD                                          = 1,
	WREX_IGNORED                                       = 2,
	WREX_MAX                                           = 3
};*/

// Enum SFXGame.BioGlobalVariableTable.SFXPlotType
/*enum SFXPlotType
{
	SFXPlotType_Float                                  = 0,
	SFXPlotType_Integer                                = 1,
	SFXPlotType_Boolean                                = 2,
	SFXPlotType_MAX                                    = 3
};*/

// Enum SFXGame.BioHintSystemBase.SFXNotificationPriotity
/*enum SFXNotificationPriotity
{
	NOTIFICATIONPRIORITY_UNDEFINED                     = 0,
	NOTIFICATIONPRIORITY_NORMAL                        = 1,
	NOTIFICATIONPRIORITY_HIGH                          = 2,
	NOTIFICATIONPRIORITY_MAX                           = 3
};*/

// Enum SFXGame.BioHintSystem.SFXPowerTutorialType
/*enum SFXPowerTutorialType
{
	PowerTutorial_Singularity                          = 0,
	PowerTutorial_MAX                                  = 1
};*/

// Enum SFXGame.BioPlayerController.ECommandInputMethod
/*enum ECommandInputMethod
{
	CIM_Default                                        = 0,
	CIM_Kinect                                         = 1,
	CIM_MAX                                            = 2
};*/

// Enum SFXGame.SFXGUIMovie.GUILayout
/*enum GUILayout
{
	GUILayout_PC                                       = 0,
	GUILayout_XBox                                     = 1,
	GUILayout_PS3                                      = 2,
	GUILayout_MAX                                      = 3
};*/

// Enum SFXGame.SFXGameModeManager.ESpeechContext
/*enum ESpeechContext
{
	SpeechContext_Combat                               = 0,
	SpeechContext_Explore                              = 1,
	SpeechContext_Global                               = 2,
	SpeechContext_Conversation                         = 3,
	SpeechContext_MAX                                  = 4
};*/

// Enum SFXGame.SFXGameModeManager.EGameModes
/*enum EGameModes
{
	GameMode_Default                                   = 0,
	GameMode_Vehicle                                   = 1,
	GameMode_Atlas                                     = 2,
	GameMode_PowerWheel                                = 3,
	GameMode_WeaponWheel                               = 4,
	GameMode_Command                                   = 5,
	GameMode_InjuredShepard                            = 6,
	GameMode_Conversation                              = 7,
	GameMode_Cinematic                                 = 8,
	GameMode_GUI                                       = 9,
	GameMode_Movie                                     = 10,
	GameMode_Galaxy                                    = 11,
	GameMode_Orbital                                   = 12,
	GameMode_MultiLand                                 = 13,
	GameMode_CheatMenu                                 = 14,
	GameMode_AIDebug                                   = 15,
	GameMode_Prototyping                               = 16,
	GameMode_DreamSequence                             = 17,
	GameMode_IllusiveManConflict                       = 18,
	GameMode_Spectator                                 = 19,
	GameMode_Dying                                     = 20,
	GameMode_FlyCam                                    = 21,
	GameMode_ReplicationDebug                          = 22,
	GameMode_Lobby                                     = 23,
	GameMode_MAX                                       = 24
};*/

// Enum SFXGame.BioPlayerInput.EAxisBuffer
/*enum EAxisBuffer
{
	AxisBuffer_LX                                      = 0,
	AxisBuffer_LY                                      = 1,
	AxisBuffer_RX                                      = 2,
	AxisBuffer_RY                                      = 3,
	AxisBuffer_MouseX                                  = 4,
	AxisBuffer_MouseY                                  = 5,
	AxisBuffer_MAX                                     = 6
};*/

// Enum SFXGame.BioSFHandler_DesignerUI.BioDUIElements
/*enum BioDUIElements
{
	BIO_DUI_PassiveTimer                               = 0,
	BIO_DUI_PassiveCounter                             = 1,
	BIO_DUI_PassiveText                                = 2,
	BIO_DUI_PassiveBar                                 = 3,
	BIO_DUI_PassiveBarMarker1                          = 4,
	BIO_DUI_PassiveBarMarker2                          = 5,
	BIO_DUI_ModalBar                                   = 6,
	BIO_DUI_ModalBarMarker1                            = 7,
	BIO_DUI_ModalBarMarker2                            = 8,
	BIO_DUI_ModalCounter                               = 9,
	BIO_DUI_ModalTimer                                 = 10,
	BIO_DUI_ModalText                                  = 11,
	BIO_DUI_ModalBackground                            = 12,
	BIO_DUI_ButtonA                                    = 13,
	BIO_DUI_ButtonAText                                = 14,
	BIO_DUI_ButtonB                                    = 15,
	BIO_DUI_ButtonBText                                = 16,
	BIO_DUI_ButtonX                                    = 17,
	BIO_DUI_ButtonXText                                = 18,
	BIO_DUI_ButtonY                                    = 19,
	BIO_DUI_ButtonYText                                = 20,
	BIO_DUI_ModalBackground2                           = 21,
	BIO_DUI_MAX                                        = 22
};*/

// Enum SFXGame.BioInterpolator.EBioInterpolationMethod
/*enum EBioInterpolationMethod
{
	BIO_INTERPOLATION_METHOD_LINEAR                    = 0,
	BIO_INTERPOLATION_METHOD_LOG_E                     = 1,
	BIO_INTERPOLATION_METHOD_QUARTER_SIN               = 2,
	BIO_INTERPOLATION_METHOD_MAX                       = 3
};*/

// Enum SFXGame.SFXDefine.EBioPlotAutoSet
/*enum EBioPlotAutoSet
{
	Plot_Unset                                         = 0,
	Plot_MAX                                           = 1
};*/

// Enum SFXGame.SFXDefine.EBioRegionAutoSet
/*enum EBioRegionAutoSet
{
	Region_Unset                                       = 0,
	Region_MAX                                         = 1
};*/

// Enum SFXGame.SFXDefine.EBioAutoSet
/*enum EBioAutoSet
{
	Unset                                              = 0,
	EBioAutoSet_MAX                                    = 1
};*/

// Enum SFXGame.SFXDefine.WeaponAnimType
/*enum WeaponAnimType
{
	WeaponAnimType_Pistol                              = 0,
	WeaponAnimType_Shotgun                             = 1,
	WeaponAnimType_Rifle                               = 2,
	WeaponAnimType_Sniper                              = 3,
	WeaponAnimType_GrenadeLauncher                     = 4,
	WeaponAnimType_MissileLauncher                     = 5,
	WeaponAnimType_NukeLauncher                        = 6,
	WeaponAnimType_ParticleBeam                        = 7,
	WeaponAnimType_RepulsorBeam                        = 8,
	WeaponAnimType_AutoShotgun                         = 9,
	WeaponAnimType_AutoSniper                          = 10,
	WeaponAnimType_AutoPistol                          = 11,
	WeaponAnimType_MAX                                 = 12
};*/

// Enum SFXGame.BioMorphUtility.EBioMorphUtilityComponentType
/*enum EBioMorphUtilityComponentType
{
	BMU_Component_Unknown                              = 0,
	BMU_Component_Picker                               = 1,
	BMU_Component_Slider                               = 2,
	BMU_Component_Combo                                = 3,
	BMU_Component_RGBA                                 = 4,
	BMU_Component_Compound                             = 5,
	BMU_Component_MAX                                  = 6
};*/

// Enum SFXGame.BioMorphUtility.EBioMorphUtilityHairComponentType
/*enum EBioMorphUtilityHairComponentType
{
	BMU_HairComponent_Hair                             = 0,
	BMU_HairComponent_Other                            = 1,
	BMU_HairComponent_MAX                              = 2
};*/

// Enum SFXGame.BioMorphFaceFrontEnd.EBioMorphFrontendSliderType
/*enum EBioMorphFrontendSliderType
{
	BMFE_SLIDER_MORPH_SINGLE                           = 0,
	BMFE_SLIDER_MORPH_DOUBLE                           = 1,
	BMFE_SLIDER_MATERIAL                               = 2,
	BMFE_SLIDER_MAX                                    = 3
};*/

// Enum SFXGame.BioParticleModuleLocationAttachedMesh.EmissionAreaSpecificationType
/*enum EmissionAreaSpecificationType
{
	EAST_UniformDensityPerVertex                       = 0,
	EAST_UniformDensityPerBone                         = 1,
	EAST_WeightedDensityPerBone                        = 2,
	EAST_WeightedDensityPerEmissionArea                = 3,
	EAST_UniformDensityPerEmissionArea                 = 4,
	EAST_MAX                                           = 5
};*/

// Enum SFXGame.BioParticleModuleLocationPrimitiveNearestSurface.ELocationNearestSurface
/*enum ELocationNearestSurface
{
	eLocationNearestSurface_Stay                       = 0,
	eLocationNearestSurface_StayAtRadius               = 1,
	eLocationNearestSurface_Kill                       = 2,
	eLocationNearestSurface_MAX                        = 3
};*/

// Enum SFXGame.BioParticleModuleLocationPrimitiveNearestSurface.EBioParticleCollisionComplete
/*enum EBioParticleCollisionComplete
{
	EBPCC_DoNothing                                    = 0,
	EBPCC_Kill                                         = 1,
	EBPCC_Freeze                                       = 2,
	EBPCC_FreezeTranslation                            = 3,
	EBPCC_FreezeRotation                               = 4,
	EBPCC_FreezeMovement                               = 5,
	EBPCC_MAX                                          = 6
};*/

// Enum SFXGame.BioParticleModuleMultiplyByEmitterSpeed.MultiplyByEmitterSpeedProperty
/*enum MultiplyByEmitterSpeedProperty
{
	MESProperty_SpawnRate                              = 0,
	MESProperty_MAX                                    = 1
};*/

// Enum SFXGame.BioParticleModuleSound.EInstanceVersion
/*enum EInstanceVersion
{
	ParticleModSound_OriginalVer                       = 0,
	ParticleModSound_PerParticleVer                    = 1,
	ParticleModSound_MaxVer                            = 2,
	ParticleModSound_MAX                               = 3
};*/

// Enum SFXGame.BioPathNodeVolume.EBioPathNodeAlignment
/*enum EBioPathNodeAlignment
{
	BIO_PATH_ALIGN_NONE                                = 0,
	BIO_PATH_ALIGN_CENTER                              = 1,
	BIO_PATH_ALIGN_JUSTIFY                             = 2,
	BIO_PATH_ALIGN_MAX                                 = 3
};*/

// Enum SFXGame.BioPathNodeVolume.EBioPathNodeGenerators
/*enum EBioPathNodeGenerators
{
	PATHNODE_SQUARE                                    = 0,
	PATHNODE_MAX                                       = 1
};*/

// Enum SFXGame.BioPawn.EWeaponRange
/*enum EWeaponRange
{
	WeaponRange_Invalid                                = 0,
	WeaponRange_Melee                                  = 1,
	WeaponRange_Short                                  = 2,
	WeaponRange_Medium                                 = 3,
	WeaponRange_Long                                   = 4,
	WeaponRange_MAX                                    = 5
};*/

// Enum SFXGame.BioPawn.EAimNodes
/*enum EAimNodes
{
	AimNode_Cover                                      = 0,
	AimNode_Head                                       = 1,
	AimNode_LeftShoulder                               = 2,
	AimNode_RightShoulder                              = 3,
	AimNode_Chest                                      = 4,
	AimNode_Groin                                      = 5,
	AimNode_LeftKnee                                   = 6,
	AimNode_RightKnee                                  = 7,
	AimNode_MAX                                        = 8
};*/

// Enum SFXGame.BioPawn.EBioAnimNodeCombatModeFadeOut
/*enum EBioAnimNodeCombatModeFadeOut
{
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_NONE             = 0,
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_ANIMATING_ENTER  = 1,
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_ENTER            = 2,
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_ANIMATING_EXIT   = 3,
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_EXIT             = 4,
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_MAX              = 5
};*/

// Enum SFXGame.BioPawn.EReplicatedCustomActionCmd
/*enum EReplicatedCustomActionCmd
{
	eRCACmd_Start                                      = 0,
	eRCACmd_Override                                   = 1,
	eRCACmd_Interrupt                                  = 2,
	eRCACmd_MAX                                        = 3
};*/

// Enum SFXGame.BioPawn.EBioAnimStopState
/*enum EBioAnimStopState
{
	eBioAnimStop_NoState                               = 0,
	eBioAnimStop_StopLeftMove                          = 1,
	eBioAnimStop_StopRightMove                         = 2,
	eBioAnimStop_FinishLeftMove                        = 3,
	eBioAnimStop_FinishRightMove                       = 4,
	eBioAnimStop_InterruptLeftMove                     = 5,
	eBioAnimStop_InterruptRightMove                    = 6,
	eBioAnimStop_DoneFinishLeftMove                    = 7,
	eBioAnimStop_DoneFinishRightMove                   = 8,
	eBioAnimStop_DoneIntLeftMove                       = 9,
	eBioAnimStop_DoneIntRightMove                      = 10,
	eBioAnimStop_MAX                                   = 11
};*/

// Enum SFXGame.BioPawn.EBioAnimSkidTurnState
/*enum EBioAnimSkidTurnState
{
	eBioAnimSkid_NoState                               = 0,
	eBioAnimSkid_StartingLeft                          = 1,
	eBioAnimSkid_StartingRight                         = 2,
	eBioAnimSkid_TurningLeft                           = 3,
	eBioAnimSkid_TurningRight                          = 4,
	eBioAnimSkid_FinishingLeft                         = 5,
	eBioAnimSkid_FinishingRight                        = 6,
	eBioAnimSkid_MAX                                   = 7
};*/

// Enum SFXGame.BioPawn.EBioAnimTurnDirState
/*enum EBioAnimTurnDirState
{
	eBioAnimTurn_NoTurn                                = 0,
	eBioAnimTurn_ReqStartLeft                          = 1,
	eBioAnimTurn_ReqStartRight                         = 2,
	eBioAnimTurn_AckStartLeft                          = 3,
	eBioAnimTurn_AckStartRight                         = 4,
	eBioAnimTurn_ProcessLeft                           = 5,
	eBioAnimTurn_ProcessRight                          = 6,
	eBioAnimTurn_MAX                                   = 7
};*/

// Enum SFXGame.BioPawn.EBioAnimStartState
/*enum EBioAnimStartState
{
	eBioAnimStart_NoState                              = 0,
	eBioAnimStart_StartingMove                         = 1,
	eBioAnimStart_FinishStartMove                      = 2,
	eBioAnimStart_DoneStartMove                        = 3,
	eBioAnimStart_RotationUnlocked                     = 4,
	eBioAnimStart_PlayingMove                          = 5,
	eBioAnimStart_MAX                                  = 6
};*/

// Enum SFXGame.BioPawn.EBioAnimGetUpState
/*enum EBioAnimGetUpState
{
	eBioAnimGetUp_Idle                                 = 0,
	eBioAnimGetUp_Start                                = 1,
	eBioAnimGetUp_Processing                           = 2,
	eBioAnimGetUp_MAX                                  = 3
};*/

// Enum SFXGame.SFXModule_Locomotion.ESFXLocomotionState
/*enum ESFXLocomotionState
{
	eSFXLocomotionState_Inactive                       = 0,
	eSFXLocomotionState_Moving                         = 1,
	eSFXLocomotionState_Idle                           = 2,
	eSFXLocomotionState_MoveStart                      = 3,
	eSFXLocomotionState_MoveStop                       = 4,
	eSFXLocomotionState_SkidTurn                       = 5,
	eSFXLocomotionState_MAX                            = 6
};*/

// Enum SFXGame.SFXModule_Locomotion.EWalkingSpeedMode
/*enum EWalkingSpeedMode
{
	eWalkingSpeedMode_ExploreRun                       = 0,
	eWalkingSpeedMode_ExploreWalk                      = 1,
	eWalkingSpeedMode_ExploreStorming                  = 2,
	eWalkingSpeedMode_ExploreCrouched                  = 3,
	eWalkingSpeedMode_CombatRun                        = 4,
	eWalkingSpeedMode_CombatWalk                       = 5,
	eWalkingSpeedMode_CombatStorming                   = 6,
	eWalkingSpeedMode_CombatCrouched                   = 7,
	eWalkingSpeedMode_CombatSniping                    = 8,
	eWalkingSpeedMode_CombatZoomed                     = 9,
	eWalkingSpeedMode_CoverMove                        = 10,
	eWalkingSpeedMode_CoverCrouched                    = 11,
	eWalkingSpeedMode_MAX                              = 12
};*/

// Enum SFXGame.SFXGameEffect.EBonusFormula
/*enum EBonusFormula
{
	BonusFormula_Add                                   = 0,
	BonusFormula_Substract                             = 1,
	BonusFormula_LargestValue                          = 2,
	BonusFormula_Custom                                = 3,
	BonusFormula_MAX                                   = 4
};*/

// Enum SFXGame.SFXGameEffect.EDurationType
/*enum EDurationType
{
	DurationType_Instant                               = 0,
	DurationType_Temporary                             = 1,
	DurationType_Permanent                             = 2,
	DurationType_MAX                                   = 3
};*/

// Enum SFXGame.sfxmodule_damage.EHealthType
/*enum EHealthType
{
	HealthType_Default                                 = 0,
	HealthType_Shields                                 = 1,
	HealthType_Barrier                                 = 2,
	HealthType_Armour                                  = 3,
	HealthType_MAX                                     = 4
};*/

// Enum SFXGame.SFXModule_Gestures.ESFXAmbientPerfGroupEnum
/*enum ESFXAmbientPerfGroupEnum
{
	SFXAmbPerfGroup_Unset                              = 0,
	SFXAmbPerfGroup_MAX                                = 1
};*/

// Enum SFXGame.SFXModule_Gestures.ESFXAmbientPerformanceEnum
/*enum ESFXAmbientPerformanceEnum
{
	SFXAmbPerf_Unset                                   = 0,
	SFXAmbPerf_MAX                                     = 1
};*/

// Enum SFXGame.SFXModule_Gestures.ESFXAmbientPoseGroupEnum
/*enum ESFXAmbientPoseGroupEnum
{
	SFXAmbPoseGroup_Unset                              = 0,
	SFXAmbPoseGroup_MAX                                = 1
};*/

// Enum SFXGame.SFXModule_Gestures.ESFXDefaultPoseEnum
/*enum ESFXDefaultPoseEnum
{
	SFXDefPose_Unset                                   = 0,
	SFXDefPose_MAX                                     = 1
};*/

// Enum SFXGame.SFXGalaxyMapObject.ESFXGalaxyMapObjectLevel
/*enum ESFXGalaxyMapObjectLevel
{
	GalaxyMapObjType_Undefined                         = 0,
	GalaxyMapObjType_GalaxyLevel                       = 1,
	GalaxyMapObjType_ClusterLevel                      = 2,
	GalaxyMapObjType_SystemLevel                       = 3,
	GalaxyMapObjType_PlanetLevel                       = 4,
	GalaxyMapObjType_MAX                               = 5
};*/

// Enum SFXGame.SFXGalaxyMapObject.EGalaxyObjectVisiblePlotAutoSet
/*enum EGalaxyObjectVisiblePlotAutoSet
{
	GalaxyObjectVisiblePlot_Unset                      = 0,
	GalaxyObjectVisiblePlot_MAX                        = 1
};*/

// Enum SFXGame.SFXGalaxyMapObject.EGalaxyObjectVisibleAutoSet
/*enum EGalaxyObjectVisibleAutoSet
{
	GalaxyObjectVisible_Unset                          = 0,
	GalaxyObjectVisible_MAX                            = 1
};*/

// Enum SFXGame.SFXGalaxyMapObject.EGalaxyObjectUsablePlotAutoSet
/*enum EGalaxyObjectUsablePlotAutoSet
{
	GalaxyObjectUsablePlot_Unset                       = 0,
	GalaxyObjectUsablePlot_MAX                         = 1
};*/

// Enum SFXGame.SFXGalaxyMapObject.EGalaxyObjectUsableAutoSet
/*enum EGalaxyObjectUsableAutoSet
{
	GalaxyObjectUsable_Unset                           = 0,
	GalaxyObjectUsable_MAX                             = 1
};*/

// Enum SFXGame.BioPlanet.ESystemLevelType
/*enum ESystemLevelType
{
	SL_PLANET                                          = 0,
	SL_ANOMALY                                         = 1,
	SL_RINGPLANET                                      = 2,
	SL_MASSRELAY                                       = 3,
	SL_DEPOT                                           = 4,
	SL_SUN                                             = 5,
	SL_MAX                                             = 6
};*/

// Enum SFXGame.BioPlanet.EOrbitRingType
/*enum EOrbitRingType
{
	OR_NONE                                            = 0,
	OR_ORBIT                                           = 1,
	OR_ASTEROID                                        = 2,
	OR_MAX                                             = 3
};*/

// Enum SFXGame.BioPlanet.EPlanetType
/*enum EPlanetType
{
	NOSCAN_PLANET                                      = 0,
	ROCK_PLANET                                        = 1,
	DESERT_PLANET                                      = 2,
	OCEAN_PLANET                                       = 3,
	GARDEN_PLANET                                      = 4,
	GIANT_ICE_PLANET                                   = 5,
	GIANT_JOVIAN_PLANET                                = 6,
	GIANT_PEGASID_PLANET                               = 7,
	POST_GARDEN                                        = 8,
	BROWN_DWARF                                        = 9,
	TIDAL_LOCK                                         = 10,
	EPlanetType_MAX                                    = 11
};*/

// Enum SFXGame.BioPlanet.EBioPlanetEventConditionPlotAutoSet
/*enum EBioPlanetEventConditionPlotAutoSet
{
	BioPlanetEventConditionPlot_Unset                  = 0,
	BioPlanetEventConditionPlot_MAX                    = 1
};*/

// Enum SFXGame.BioPlanet.EBioPlanetEventConditionAutoSet
/*enum EBioPlanetEventConditionAutoSet
{
	BioPlanetEventCondition_Unset                      = 0,
	BioPlanetEventCondition_MAX                        = 1
};*/

// Enum SFXGame.BioPlanet.EBioPlanetEventTransitionPlotAutoSet
/*enum EBioPlanetEventTransitionPlotAutoSet
{
	BioPlanetEventTransitionPlot_Unset                 = 0,
	BioPlanetEventTransitionPlot_MAX                   = 1
};*/

// Enum SFXGame.BioPlanet.EBioPlanetEventTransitionAutoSet
/*enum EBioPlanetEventTransitionAutoSet
{
	BioPlanetEventTransition_Unset                     = 0,
	BioPlanetEventTransition_MAX                       = 1
};*/

// Enum SFXGame.BioPlanet.EBioPlanetLandConditionPlotAutoSet
/*enum EBioPlanetLandConditionPlotAutoSet
{
	BioPlanetLandConditionPlot_Unset                   = 0,
	BioPlanetLandConditionPlot_MAX                     = 1
};*/

// Enum SFXGame.BioPlanet.EBioPlanetLandConditionAutoSet
/*enum EBioPlanetLandConditionAutoSet
{
	BioPlanetLandCondition_Unset                       = 0,
	BioPlanetLandCondition_MAX                         = 1
};*/

// Enum SFXGame.BioPlanet.EBioPlanetPlotLabelConditionPlotAutoSet
/*enum EBioPlanetPlotLabelConditionPlotAutoSet
{
	BioPlanetPlotLabelConditionPlot_Unset              = 0,
	BioPlanetPlotLabelConditionPlot_MAX                = 1
};*/

// Enum SFXGame.BioPlanet.EBioPlanetPlotLabelConditionAutoSet
/*enum EBioPlanetPlotLabelConditionAutoSet
{
	BioPlanetPlotLabelCondition_Unset                  = 0,
	BioPlanetPlotLabelCondition_MAX                    = 1
};*/

// Enum SFXGame.SFXPlanetFeature.EMineralType
/*enum EMineralType
{
	MINERAL_RED                                        = 0,
	MINERAL_BLUE                                       = 1,
	MINERAL_GREEN                                      = 2,
	MINERAL_ALPHA                                      = 3,
	MINERAL_MAX                                        = 4
};*/

// Enum SFXGame.SFXPlanetFeature.EFeatureType
/*enum EFeatureType
{
	FEATURE_INVALID                                    = 0,
	FEATURE_MINERAL                                    = 1,
	FEATURE_LABEL                                      = 2,
	FEATURE_PROBES                                     = 3,
	FEATURE_ARTIFACT                                   = 4,
	FEATURE_LANDINGSITE                                = 5,
	FEATURE_ANOMOLY                                    = 6,
	FEATURE_MAX                                        = 7
};*/

// Enum SFXGame.SFXPlanetFeature.ESFXPlanetFeatureEventTransitionPlotAutoSet
/*enum ESFXPlanetFeatureEventTransitionPlotAutoSet
{
	SFXPlanetFeatureEventTransitionPlot_Unset          = 0,
	SFXPlanetFeatureEventTransitionPlot_MAX            = 1
};*/

// Enum SFXGame.SFXPlanetFeature.ESFXPlanetFeatureEventTransitionAutoSet
/*enum ESFXPlanetFeatureEventTransitionAutoSet
{
	SFXPlanetFeatureEventTransition_Unset              = 0,
	SFXPlanetFeatureEventTransition_MAX                = 1
};*/

// Enum SFXGame.BioPlayerController.ETutorialHooks
/*enum ETutorialHooks
{
	TUT_Storm                                          = 0,
	TUT_Cover                                          = 1,
	TUT_Mantle                                         = 2,
	TUT_MeleeHeavy                                     = 3,
	TUT_MeleeLight                                     = 4,
	TUT_AmmoPickup                                     = 5,
	TUT_Reload                                         = 6,
	TUT_WeaponSwapWheel                                = 7,
	TUT_WeaponSwapButton                               = 8,
	TUT_CastPowerWheel                                 = 9,
	TUT_CastPowerButton                                = 10,
	TUT_AssignedPower                                  = 11,
	TUT_MeleeFromCover                                 = 12,
	TUT_CoverSlip                                      = 13,
	TUT_SWATRoll                                       = 14,
	TUT_TurnCoverCorner                                = 15,
	TUT_SquadCommand                                   = 16,
	TUT_ClimbUp                                        = 17,
	TUT_ObjectiveCheck                                 = 18,
	TUT_MAX                                            = 19
};*/

// Enum SFXGame.BioPlayerController.ECoverVisualizations
/*enum ECoverVisualizations
{
	CV_None                                            = 0,
	CV_Mantle                                          = 1,
	CV_MAX                                             = 2
};*/

// Enum SFXGame.sfxai_core.AttackResult
/*enum AttackResult
{
	ATTACK_SUCCESS                                     = 0,
	ATTACK_FAIL                                        = 1,
	ATTACK_FAIL_RELOADING                              = 2,
	ATTACK_FAIL_NO_LOS                                 = 3,
	ATTACK_MAX                                         = 4
};*/

// Enum SFXGame.sfxai_core.EAITicketType
/*enum EAITicketType
{
	AI_NoTicket                                        = 0,
	AI_TargetTicket                                    = 1,
	AI_AttackTicket                                    = 2,
	AI_MAX                                             = 3
};*/

// Enum SFXGame.sfxai_core.KismetOrderType
/*enum KismetOrderType
{
	KISMET_ORDER_NONE                                  = 0,
	KISMET_ORDER_FIRE_WEAPON                           = 1,
	KISMET_ORDER_MOVE                                  = 2,
	KISMET_ORDER_MAX                                   = 3
};*/

// Enum SFXGame.sfxai_core.EAICompletionReasons
/*enum EAICompletionReasons
{
	AI_Cancelled                                       = 0,
	AI_Success                                         = 1,
	AI_Failed                                          = 2,
	AI_LOS                                             = 3,
	AI_Cooldown                                        = 4,
	AI_Disabled                                        = 5,
	AI_MAX                                             = 6
};*/

// Enum SFXGame.SFXAI_Henchman.HenchmanOrderType
/*enum HenchmanOrderType
{
	HENCHMAN_ORDER_NONE                                = 0,
	HENCHMAN_ORDER_USE_POWER                           = 1,
	HENCHMAN_ORDER_SWITCH_WEAPON                       = 2,
	HENCHMAN_ORDER_ATTACK_TARGET                       = 3,
	HENCHMAN_ORDER_FOLLOW                              = 4,
	HENCHMAN_ORDER_HOLD_POSITION                       = 5,
	HENCHMAN_ORDER_MAX                                 = 6
};*/

// Enum SFXGame.SFXWeapon.AimProfiles
/*enum AimProfiles
{
	AimProfile_Rifle                                   = 0,
	AimProfile_Pistol                                  = 1,
	AimProfile_PistolShield                            = 2,
	AimProfile_MAX                                     = 3
};*/

// Enum SFXGame.SFXWeapon.IKProfiles
/*enum IKProfiles
{
	IKProfile_Rifle                                    = 0,
	IKProfile_Pistol                                   = 1,
	IKProfile_SMG                                      = 2,
	IKProfile_MAX                                      = 3
};*/

// Enum SFXGame.SFXWeapon.FireModes
/*enum FireModes
{
	FireMode_None                                      = 0,
	FireMode_SemiAuto                                  = 1,
	FireMode_FullAuto                                  = 2,
	FireMode_Burst                                     = 3,
	FireMode_Reload                                    = 4,
	FireMode_MAX                                       = 5
};*/

// Enum SFXGame.SFXWeapon.EWeaponStatBars
/*enum EWeaponStatBars
{
	EWeaponStatBarAccuracy                             = 0,
	EWeaponStatBarDamage                               = 1,
	EWeaponStatBarFireRate                             = 2,
	EWeaponStatBarMagSize                              = 3,
	EWeaponStatBarWeight                               = 4,
	EWeaponStatBarOther                                = 5,
	EWeaponStatBar_MAX                                 = 6,
	EWeaponStatBars_MAX                                = 7
};*/

// Enum SFXGame.BioPlayerSquad.EExperienceSourceType
/*enum EExperienceSourceType
{
	EXPSourceType_SimpleDeath                          = 0,
	EXPSourceType_SkillUse                             = 1,
	EXPSourceType_QuestCompletion                      = 2,
	EXPSourceType_Generic                              = 3,
	EXPSourceType_MAX                                  = 4
};*/

// Enum SFXGame.BioPower.EBioPowerType
/*enum EBioPowerType
{
	BIO_POWER_TYPE_UNKNOWN                             = 0,
	BIO_POWER_TYPE_CYLINDER                            = 1,
	BIO_POWER_TYPE_TARGET                              = 2,
	BIO_POWER_TYPE_PARTY                               = 3,
	BIO_POWER_TYPE_IMPACT_VOLUME                       = 4,
	BIO_POWER_TYPE_MELEE                               = 5,
	BIO_POWER_TYPE_MAX                                 = 6
};*/

// Enum SFXGame.BioPower.EBioPowerResource
/*enum EBioPowerResource
{
	BIO_POWER_RESOURCE_VFX_PLAYER_CRUST                = 0,
	BIO_POWER_RESOURCE_VFX_PLAYER_MATERIAL             = 1,
	BIO_POWER_RESOURCE_VFX_TARGET_CRUST                = 2,
	BIO_POWER_RESOURCE_VFX_TARGET_MATERIAL             = 3,
	BIO_POWER_RESOURCE_VFX_FRAMEBUFFER                 = 4,
	BIO_POWER_RESOURCE_VFX_TRAVELLING                  = 5,
	BIO_POWER_RESOURCE_VFX_IMPACT                      = 6,
	BIO_POWER_RESOURCE_VFX_WORLD_IMPACT                = 7,
	BIO_POWER_RESOURCE_VFX_RELEASE                     = 8,
	BIO_POWER_RESOURCE_VFX_CASTING_BEAM                = 9,
	BIO_POWER_RESOURCE_CASTING                         = 10,
	BIO_POWER_RESOURCE_RELEASE                         = 11,
	BIO_POWER_RESOURCE_MAX                             = 12
};*/

// Enum SFXGame.BioSeqAct_BlackScreen.BlackScreenActionSet
/*enum BlackScreenActionSet
{
	BlackScreenAction_TurnBlackOn                      = 0,
	BlackScreenAction_TurnBlackOff                     = 1,
	BlackScreenAction_FadeToBlack                      = 2,
	BlackScreenAction_FadeFromBlack                    = 3,
	BlackScreenAction_MAX                              = 4
};*/

// Enum SFXGame.BioSeqAct_FaceOnlyVO.EBioFOVOLines
/*enum EBioFOVOLines
{
	FOVOLines_Unset                                    = 0,
	FOVOLines_MAX                                      = 1
};*/

// Enum SFXGame.BioSeqAct_FaceOnlyVO.EBioFOVOSpeakers
/*enum EBioFOVOSpeakers
{
	FOVOSpeakers_Unset                                 = 0,
	FOVOSpeakers_MAX                                   = 1
};*/

// Enum SFXGame.BioSeqAct_ScalarMathUnit.EScalarMathOps
/*enum EScalarMathOps
{
	SMO_Add                                            = 0,
	SMO_Subtract                                       = 1,
	SMO_Multiply                                       = 2,
	SMO_Divide                                         = 3,
	SMO_Exponent                                       = 4,
	SMO_Modulo                                         = 5,
	SMO_MAX                                            = 6
};*/

// Enum SFXGame.BioWorldInfo.BioBrowserStates
/*enum BioBrowserStates
{
	BBS_NORMAL                                         = 0,
	BBS_ALERT                                          = 1,
	BBS_DISABLED                                       = 2,
	BBS_MAX                                            = 3
};*/

// Enum SFXGame.BioWorldInfo.MEBrowserWheelSubPages
/*enum MEBrowserWheelSubPages
{
	MBW_SP_Map                                         = 0,
	MBW_SP_Save                                        = 1,
	MBW_SP_SquadRecord                                 = 2,
	MBW_SP_Load                                        = 3,
	MBW_SP_Journal                                     = 4,
	MBW_SP_DataPad                                     = 5,
	MBW_SP_Options                                     = 6,
	MBW_SP_ReturnToMainMenu                            = 7,
	MBW_SP_ExitGame                                    = 8,
	MBW_SP_Manual                                      = 9,
	MBW_SP_MAX                                         = 10
};*/

// Enum SFXGame.BioWorldInfo.BioLocalVariableObjectType
/*enum BioLocalVariableObjectType
{
	BIO_LVOT_PLAYER                                    = 0,
	BIO_LVOT_OWNER                                     = 1,
	BIO_LVOT_TARGET                                    = 2,
	BIO_LVOT_BYTAG                                     = 3,
	BIO_LVOT_SPEAKER                                   = 4,
	BIO_LVOT_MAX                                       = 5
};*/

// Enum SFXGame.BioWorldInfo.EPlayerRenderStateSetting
/*enum EPlayerRenderStateSetting
{
	PRSS_NEARCLIP                                      = 0,
	PRSS_MAX                                           = 1
};*/

// Enum SFXGame.BioWorldInfo.JournalSortMethods
/*enum JournalSortMethods
{
	JSM_Newest                                         = 0,
	JSM_Name                                           = 1,
	JSM_Oldest                                         = 2,
	JSM_MAX                                            = 3
};*/

// Enum SFXGame.BioSubtitles.ESubtitlesRenderMode
/*enum ESubtitlesRenderMode
{
	SUBTITLE_RENDER_NONE                               = 0,
	SUBTITLE_RENDER_DEFAULT                            = 1,
	SUBTITLE_RENDER_TOP                                = 2,
	SUBTITLE_RENDER_BOTTOM                             = 3,
	SUBTITLE_RENDER_ABOVE_WHEEL                        = 4,
	SUBTITLE_RENDER_LOADSCREEN                         = 5,
	SUBTITLE_RENDER_MAX                                = 6
};*/

// Enum SFXGame.BioSeqAct_SetGestureMode.EBioSetGestureModes
/*enum EBioSetGestureModes
{
	GestureMode_On                                     = 0,
	GestureMode_Off                                    = 1,
	GestureMode_MAX                                    = 2
};*/

// Enum SFXGame.BioSeqAct_SetWeapon.EBioSeqActSetWeaponLinks
/*enum EBioSeqActSetWeaponLinks
{
	EBioSeqActSetWeaponLinks_Success                   = 0,
	EBioSeqActSetWeaponLinks_Failure                   = 1,
	EBioSeqActSetWeaponLinks_MAX                       = 2
};*/

// Enum SFXGame.BioSeqAct_SkillGame_Base.ESkillGameComplete
/*enum ESkillGameComplete
{
	SK_CANCEL                                          = 0,
	SK_SUCCESS                                         = 1,
	SK_FAIL                                            = 2,
	SK_UNDEFINED                                       = 3,
	SK_MAX                                             = 4
};*/

// Enum SFXGame.BioSeqAct_ToggleLightEnv.ToggleLightEnvType
/*enum ToggleLightEnvType
{
	TLET_ENABLE                                        = 0,
	TLET_DISABLE                                       = 1,
	TLET_TOGGLE                                        = 2,
	TLET_MAX                                           = 3
};*/

// Enum SFXGame.BioSeqEvt_Conversation.EConversationScriptType
/*enum EConversationScriptType
{
	NodeEnd                                            = 0,
	NodeStart                                          = 1,
	StartConversationScript                            = 2,
	EndConversationScript                              = 3,
	SwitchFromFullToAmbient                            = 4,
	EConversationScriptType_MAX                        = 5
};*/

// Enum SFXGame.SFXGameChoiceGUIData.SFXChoiceColors
/*enum SFXChoiceColors
{
	CHOICECOLOR_Orange                                 = 0,
	CHOICECOLOR_Red                                    = 1,
	CHOICECOLOR_Green                                  = 2,
	CHOICECOLOR_MAX                                    = 3
};*/

// Enum SFXGame.SFXGameChoiceGUIData.EChoiceDisplayType
/*enum EChoiceDisplayType
{
	EChoiceDisplayType_Normal                          = 0,
	EChoiceDisplayType_Nested                          = 1,
	EChoiceDisplayType_Special                         = 2,
	EChoiceDisplayType_None                            = 3,
	EChoiceDisplayType_MAX                             = 4
};*/

// Enum SFXGame.BioSFHandler_BlackScreen.BlackScreenDisplayModes
/*enum BlackScreenDisplayModes
{
	BlackScreenMode_None                               = 0,
	BlackScreenMode_TurnBlackOn                        = 1,
	BlackScreenMode_TurnBlackOff                       = 2,
	BlackScreenMode_FadeToBlack                        = 3,
	BlackScreenMode_FadeFromBlack                      = 4,
	BlackScreenMode_MAX                                = 5
};*/

// Enum SFXGame.SFXPowerCustomActionBase.EPowerType
/*enum EPowerType
{
	PowerType_Instant                                  = 0,
	PowerType_Projectile                               = 1,
	PowerType_Melee                                    = 2,
	PowerType_Buff                                     = 3,
	PowerType_MAX                                      = 4
};*/

// Enum SFXGame.SFXPowerCustomActionBase.EPowerStatBarFormula
/*enum EPowerStatBarFormula
{
	EPowerStatBarFormula_Normal                        = 0,
	EPowerStatBarFormula_Percent                       = 1,
	EPowerStatBarFormula_Distance                      = 2,
	EPowerStatBarFormula_MAX                           = 3
};*/

// Enum SFXGame.SFXPowerCustomActionBase.EPowerDataFormula
/*enum EPowerDataFormula
{
	Normal                                             = 0,
	BonusIsHardValue                                   = 1,
	DivideByBonusSum                                   = 2,
	EPowerDataFormula_MAX                              = 3
};*/

// Enum SFXGame.SFXPowerCustomActionBase.EEvolveChoice
/*enum EEvolveChoice
{
	EvolveChoice1                                      = 0,
	EvolveChoice2                                      = 1,
	EvolveChoice3                                      = 2,
	EvolveChoice4                                      = 3,
	EvolveChoice5                                      = 4,
	EvolveChoice6                                      = 5,
	EEvolveChoice_MAX                                  = 6
};*/

// Enum SFXGame.BioSFHandler_ChoiceGUI.EChoiceGUIHandlerID
/*enum EChoiceGUIHandlerID
{
	CHOICEHANDLER_NONE                                 = 0,
	CHOICEHANDLER_SELECTED                             = 1,
	CHOICEHANDLER_EXIT                                 = 2,
	CHOICEHANDLER_UPDATE_IMAGE                         = 3,
	CHOICEHANDLER_SHOW_CREDITS                         = 4,
	CHOICEHANDLER_MAX                                  = 5
};*/

// Enum SFXGame.BioSFHandler_Conversation.BioConvWheelPositions
/*enum BioConvWheelPositions
{
	REPLY_WHEEL_MIDDLE_RIGHT                           = 0,
	REPLY_WHEEL_BOTTOM_RIGHT                           = 1,
	REPLY_WHEEL_BOTTOM_LEFT                            = 2,
	REPLY_WHEEL_MIDDLE_LEFT                            = 3,
	REPLY_WHEEL_TOP_LEFT                               = 4,
	REPLY_WHEEL_TOP_RIGHT                              = 5,
	REPLY_WHEEL_MAX                                    = 6
};*/

// Enum SFXGame.BioSFHandler_GalaxyMap.ESFXGalaxyMapUIAction
/*enum ESFXGalaxyMapUIAction
{
	GalaxyAction_None                                  = 0,
	GalaxyAction_Exit                                  = 1,
	GalaxyAction_LeavePlanet                           = 2,
	GalaxyAction_EnterPlanetScan                       = 3,
	GalaxyAction_LeavePlanetScan                       = 4,
	GalaxyAction_SystemObjectAction                    = 5,
	GalaxyAction_PlanetAction                          = 6,
	GalaxyAction_MassRelayJump                         = 7,
	GalaxyAction_BuyFuel                               = 8,
	GalaxyAction_ClusterSelect                         = 9,
	GalaxyAction_SystemSelect                          = 10,
	GalaxyAction_MultiLandLand                         = 11,
	GalaxyAction_MAX                                   = 12
};*/

// Enum SFXGame.BioSFHandler_MessageBox.SFXWeaponPickupUIOption
/*enum SFXWeaponPickupUIOption
{
	WEAPPICKUP_AddToInventory                          = 0,
	WEAPPICKUP_OpenInventory                           = 1,
	WEAPPICKUP_Equip                                   = 2,
	WEAPPICKUP_MAX                                     = 3
};*/

// Enum SFXGame.BioSFHandler_NewCharacter.EPlotChoice
/*enum EPlotChoice
{
	EPlotChoice_None                                   = 0,
	EPlotChoice_KaidenDies                             = 1,
	EPlotChoice_AshleyDies                             = 2,
	EPlotChoice_MAX                                    = 3
};*/

// Enum SFXGame.BioSFHandler_NewCharacter.EDataOrigin
/*enum EDataOrigin
{
	DataOrigin_NewGame                                 = 0,
	DataOrigin_ME1                                     = 1,
	DataOrigin_ME2                                     = 2,
	DataOrigin_ME3                                     = 3,
	DataOrigin_MAX                                     = 4
};*/

// Enum SFXGame.BioSFHandler_NewCharacter.ECreateCharacterGUIGender
/*enum ECreateCharacterGUIGender
{
	ECreateCharacterGUIGender_Male                     = 0,
	ECreateCharacterGUIGender_Female                   = 1,
	ECreateCharacterGUIGender_MAX                      = 2
};*/

// Enum SFXGame.BioSFHandler_NewCharacter.BioNewCharacterTemplates
/*enum BioNewCharacterTemplates
{
	BNCT_ICONIC                                        = 0,
	BNCT_CUSTOM                                        = 1,
	BNCT_IMPORTED                                      = 2,
	BNCT_MAX                                           = 3
};*/

// Enum SFXGame.BioSFHandler_NewCharacter.NewCharacterLookAtTarget
/*enum NewCharacterLookAtTarget
{
	NCLAT_Ahead                                        = 0,
	NCLAT_Left                                         = 1,
	NCLAT_Right                                        = 2,
	NCLAT_Up                                           = 3,
	NCLAT_Down                                         = 4,
	NCLAT_MAX                                          = 5
};*/

// Enum SFXGame.BioSFHandler_Options.EGuiOptions
/*enum EGuiOptions
{
	OPTION_NULL                                        = 0,
	OPTION_Difficulty                                  = 1,
	OPTION_AutoLvlUp                                   = 2,
	OPTION_Subtitles                                   = 3,
	OPTION_SquadPower                                  = 4,
	OPTION_AutoSave                                    = 5,
	OPTION_ControlBindings                             = 6,
	OPTION_MouseInvert                                 = 7,
	OPTION_MouseSmooth                                 = 8,
	OPTION_MouseSensitivity                            = 9,
	OPTION_Resolution                                  = 10,
	OPTION_WindowMode                                  = 11,
	OPTION_Gamma                                       = 12,
	OPTION_Bloom                                       = 13,
	OPTION_DynShadows                                  = 14,
	OPTION_EnvShadows                                  = 15,
	OPTION_FilmGrain                                   = 16,
	OPTION_MusicVolume                                 = 17,
	OPTION_SFXVolume                                   = 18,
	OPTION_DlgVolume                                   = 19,
	OPTION_OnlineTelemetry                             = 20,
	OPTION_OnlineAutoLogin                             = 21,
	OPTION_ControllerRumble                            = 22,
	OPTION_InvertYAxis                                 = 23,
	OPTION_ControllerSensitivity                       = 24,
	OPTION_StickConfig                                 = 25,
	OPTION_TriggerConfig                               = 26,
	OPTION_SwapTriggersShoulders                       = 27,
	OPTION_MotionBlur                                  = 28,
	OPTION_AimAssist                                   = 29,
	OPTION_HideCinematicHelmet                         = 30,
	OPTION_HenchHelmetOption                           = 31,
	OPTION_ActionUIHints                               = 32,
	OPTION_TextLanguage                                = 33,
	OPTION_VOLanguage                                  = 34,
	OPTION_SpeechLanguage                              = 35,
	OPTION_MPAutoLvlUp                                 = 36,
	OPTION_MPVoiceChatInputDevice                      = 37,
	OPTION_MPVoiceChatOutputDevice                     = 38,
	OPTION_MPVoiceChatVolume                           = 39,
	OPTION_MPVoiceChatMode                             = 40,
	OPTION_MPVoiceContinueOnLostFocus                  = 41,
	OPTION_AutoReplyMode                               = 42,
	OPTION_AudioDynamicRange                           = 43,
	OPTION_Hints                                       = 44,
	OPTION_AntiAliasing                                = 45,
	OPTION_CONTENT                                     = 46,
	OPTION_CONTENT01                                   = 47,
	OPTION_CONTENT02                                   = 48,
	OPTION_CONTENT03                                   = 49,
	OPTION_CONTENT04                                   = 50,
	OPTION_CONTENT05                                   = 51,
	OPTION_CONTENT06                                   = 52,
	OPTION_CONTENT07                                   = 53,
	OPTION_CONTENT08                                   = 54,
	OPTION_CONTENT09                                   = 55,
	OPTION_CONTENT10                                   = 56,
	OPTION_CONTENT11                                   = 57,
	OPTION_CONTENT12                                   = 58,
	OPTION_CONTENT13                                   = 59,
	OPTION_CONTENT14                                   = 60,
	OPTION_CONTENT15                                   = 61,
	OPTION_CONTENT16                                   = 62,
	OPTION_CONTENT17                                   = 63,
	OPTION_CONTENT18                                   = 64,
	OPTION_CONTENT19                                   = 65,
	OPTION_CONTENT20                                   = 66,
	OPTION_CONTENT21                                   = 67,
	OPTION_CONTENT22                                   = 68,
	OPTION_CONTENT23                                   = 69,
	OPTION_CONTENT24                                   = 70,
	OPTION_MAX                                         = 71
};*/

// Enum SFXGame.BioSFHandler_Options.EOptionsGuiMode
/*enum EOptionsGuiMode
{
	GuiMode_BrowserWheel                               = 0,
	GuiMode_MainMenu                                   = 1,
	GuiMode_NewGame                                    = 2,
	GuiMode_Multiplayer                                = 3,
	GuiMode_MAX                                        = 4
};*/

// Enum SFXGame.BioSFHandler_XBoxMessageBox.MessageBoxIcon
/*enum MessageBoxIcon
{
	MBI_None                                           = 0,
	MBI_Error                                          = 1,
	MBI_Warning                                        = 2,
	MBI_Alert                                          = 3,
	MBI_MAX                                            = 4
};*/

// Enum SFXGame.RvrClientEffectModule.EEffectLocationReference
/*enum EEffectLocationReference
{
	ELR_Actor                                          = 0,
	ELR_Bone                                           = 1,
	ELR_Socket                                         = 2,
	ELR_HitBone                                        = 3,
	ELR_TargetSocket                                   = 4,
	ELR_TargetBone                                     = 5,
	ELR_MAX                                            = 6
};*/

// Enum SFXGame.RvrClientEffectModule.EModuleTickGroup
/*enum EModuleTickGroup
{
	MTG_Main                                           = 0,
	MTG_Location                                       = 1,
	MTG_Parameters                                     = 2,
	MTG_MAX                                            = 3
};*/

// Enum SFXGame.RvrCEffectModuleLocation.EEffectRotationTarget
/*enum EEffectRotationTarget
{
	ERotTarget_OppositeRayDir                          = 0,
	ERotTarget_RayDir                                  = 1,
	ERotTarget_AwayFromImpact                          = 2,
	ERotTarget_IntoImpact                              = 3,
	ERotTarget_World                                   = 4,
	ERotTarget_Actor                                   = 5,
	ERotTarget_Bone                                    = 6,
	ERotTarget_MAX                                     = 7
};*/

// Enum SFXGame.RvrCEffectModuleLocation.EEffectBoneAxis
/*enum EEffectBoneAxis
{
	EBoneAxis_All                                      = 0,
	EBoneAxis_X                                        = 1,
	EBoneAxis_Y                                        = 2,
	EBoneAxis_Z                                        = 3,
	EBoneAxis_MAX                                      = 4
};*/

// Enum SFXGame.RvrPhysicalMaterialProperty.EClientEffectMaterial
/*enum EClientEffectMaterial
{
	CEM_Dummy                                          = 0,
	CEM_MAX                                            = 1
};*/

// Enum SFXGame.SFXAccomplishmentManager.ChallengeEventType
/*enum ChallengeEventType
{
	CET_None                                           = 0,
	CET_EnemyKill                                      = 1,
	CET_EnemyScoreKill                                 = 2,
	CET_DamageScore                                    = 3,
	CET_MatchCompletion                                = 4,
	CET_WavesCompleted                                 = 5,
	CET_Medal                                          = 6,
	CET_Power                                          = 7,
	CET_Assist                                         = 8,
	CET_Revive                                         = 9,
	CET_Promotion                                      = 10,
	CET_MAX                                            = 11
};*/

// Enum SFXGame.sfxscoremanager.MPMedalType
/*enum MPMedalType
{
	MPMedalType_Invalid                                = 0,
	MPMedalType_Kill                                   = 1,
	MPMedalType_MeleeKill                              = 2,
	MPMedalType_OverCoverKill                          = 3,
	MPMedalType_Headshot                               = 4,
	MPMedalType_AssaultRifle                           = 5,
	MPMedalType_SniperRifle                            = 6,
	MPMedalType_Shotgun                                = 7,
	MPMedalType_Pistol                                 = 8,
	MPMedalType_SMG                                    = 9,
	MPMedalType_HeavyWeapon                            = 10,
	MPMedalType_Biotics                                = 11,
	MPMedalType_Tech                                   = 12,
	MPMedalType_Revive                                 = 13,
	MPMedalType_Assist                                 = 14,
	MPMedalType_Survival                               = 15,
	MPMedalType_ChallengeLevel                         = 16,
	MPMedalType_Extraction                             = 17,
	MPMedalType_Killstreak                             = 18,
	MPMedalType_RandomMap                              = 19,
	MPMedalType_RandomFaction                          = 20,
	MPMedalType_MAX                                    = 21
};*/

// Enum SFXGame.SFXAICmd_HenchmanInteraction.FallBackMethod
/*enum FallBackMethod
{
	eFBM_None                                          = 0,
	eFBM_MoveToPlayer                                  = 1,
	eFBM_TeleportToNearbyNode                          = 2,
	eFBM_DirectTeleport                                = 3,
	eFBM_TeleportWhileVisible                          = 4,
	eFBM_MAX                                           = 5
};*/

// Enum SFXGame.SFXAnimNodeBlendStrafe.ESFXAnimNodeBlendStrafe
/*enum ESFXAnimNodeBlendStrafe
{
	eSFXAnimNodeBlendStrafe_Forward                    = 0,
	eSFXAnimNodeBlendStrafe_ForwardLeft                = 1,
	eSFXAnimNodeBlendStrafe_Left                       = 2,
	eSFXAnimNodeBlendStrafe_BackwardLeft               = 3,
	eSFXAnimNodeBlendStrafe_Backward                   = 4,
	eSFXAnimNodeBlendStrafe_BackwardRight              = 5,
	eSFXAnimNodeBlendStrafe_Right                      = 6,
	eSFXAnimNodeBlendStrafe_ForwardRight               = 7,
	eSFXAnimNodeBlendStrafe_MAX                        = 8
};*/

// Enum SFXGame.SFXSFHandler_AreaMap.SFXAreaMapLayout
/*enum SFXAreaMapLayout
{
	AM_CitDock                                         = 0,
	AM_CitEmb                                          = 1,
	AM_CitHosp                                         = 2,
	AM_CitPurg                                         = 3,
	AM_CitCommons                                      = 4,
	AM_CitCamp                                         = 5,
	AM_Biop_nor                                        = 6,
	AM_Biop_nor01                                      = 7,
	AM_Biop_nor02                                      = 8,
	AM_Biop_nor03                                      = 9,
	AM_Biop_nor04                                      = 10,
	AM_MAX                                             = 11
};*/

// Enum SFXGame.SFXCustomAction_ProceduralMoveBase.EMoveStage
/*enum EMoveStage
{
	EMS_Sync                                           = 0,
	EMS_Start                                          = 1,
	EMS_Loop                                           = 2,
	EMS_End                                            = 3,
	EMS_MAX                                            = 4
};*/

// Enum SFXGame.SFXTimelineData.ETimelineType
/*enum ETimelineType
{
	TLT_None                                           = 0,
	TLT_Visual                                         = 1,
	TLT_Sound                                          = 2,
	TLT_Voc                                            = 3,
	TLT_Rumble                                         = 4,
	TLT_ScreenShake                                    = 5,
	TLT_TimeDilation                                   = 6,
	TLT_Ragdoll                                        = 7,
	TLT_Reaction                                       = 8,
	TLT_Damage                                         = 9,
	TLT_AOE                                            = 10,
	TLT_AOEVisiblePawns                                = 11,
	TLT_AOESingle                                      = 12,
	TLT_SyncPartner                                    = 13,
	TLT_Timeline                                       = 14,
	TLT_InputOn                                        = 15,
	TLT_InputOff                                       = 16,
	TLT_Function                                       = 17,
	TLT_RadialBlurOn                                   = 18,
	TLT_RadialBlurOff                                  = 19,
	TLT_CameraAnim                                     = 20,
	TLT_ClientEffect                                   = 21,
	TLT_ClientEffect_Stop                              = 22,
	TLT_GameEffect                                     = 23,
	TLT_MAX                                            = 24
};*/

// Enum SFXGame.SFXTimelineData.ETimelineTarget
/*enum ETimelineTarget
{
	TRG_Source                                         = 0,
	TRG_Target                                         = 1,
	TRG_MAX                                            = 2
};*/

// Enum SFXGame.SFXTimelineData.ETimelineAOEType
/*enum ETimelineAOEType
{
	AOE_Radius                                         = 0,
	AOE_Cone                                           = 1,
	AOE_MAX                                            = 2
};*/

// Enum SFXGame.SFXCustomAction_LookAtLoop.ECustomActionLoopState
/*enum ECustomActionLoopState
{
	LoopState_Start                                    = 0,
	LoopState_Loop                                     = 1,
	LoopState_End                                      = 2,
	LoopState_MAX                                      = 3
};*/

// Enum SFXGame.SFXCustomAction_Loop.ECustomActionLoopState
/*enum ECustomActionLoopState
{
	LoopState_Start                                    = 0,
	LoopState_Loop                                     = 1,
	LoopState_End                                      = 2,
	LoopState_MAX                                      = 3
};*/

// Enum SFXGame.SFXCustomAction_LoopingInteraction.EInteractionAnimStage
/*enum EInteractionAnimStage
{
	IS_Start                                           = 0,
	IS_Loop                                            = 1,
	IS_End                                             = 2,
	IS_MAX                                             = 3
};*/

// Enum SFXGame.SFXDoor.ESFXDoorType
/*enum ESFXDoorType
{
	EDT_Manual                                         = 0,
	EDT_Proximity                                      = 1,
	EDT_AutoEntrance                                   = 2,
	EDT_AutoExit                                       = 3,
	EDT_MAX                                            = 4
};*/

// Enum SFXGame.SFXDoor.ESFXDoorState
/*enum ESFXDoorState
{
	EDS_Closed                                         = 0,
	EDS_Open                                           = 1,
	EDS_Hackable                                       = 2,
	EDS_PlotLocked                                     = 3,
	EDS_Disabled                                       = 4,
	EDS_Delayed                                        = 5,
	EDS_DelayedActive                                  = 6,
	EDS_MAX                                            = 7
};*/

// Enum SFXGame.SFXGameModeBase.EGameModePriority2
/*enum EGameModePriority2
{
	ModePriority_Base                                  = 0,
	ModePriority_CheatMenu                             = 1,
	ModePriority_Conversation                          = 2,
	ModePriority_Menus                                 = 3,
	ModePriority_Popup                                 = 4,
	ModePriority_MAX                                   = 5
};*/

// Enum SFXGame.SFXGAWAssetsHandler.EGAWZone
/*enum EGAWZone
{
	EGAWZone_InnerCouncil                              = 0,
	EGAWZone_Terminus                                  = 1,
	EGAWZone_Earth                                     = 2,
	EGAWZone_Council                                   = 3,
	EGAWZone_Attican                                   = 4,
	EGAWZone_MAX                                       = 5
};*/

// Enum SFXGame.SFXGUI_Credits.ECreditEntryType
/*enum ECreditEntryType
{
	CREDIT_Heading                                     = 0,
	CREDIT_Flashing                                    = 1,
	CREDIT_Scrolling                                   = 2,
	CREDIT_Delay                                       = 3,
	CREDIT_LineBreak                                   = 4,
	CREDIT_MAX                                         = 5
};*/

// Enum SFXGame.SFXGUI_Credits.EFlashingCreditState
/*enum EFlashingCreditState
{
	FLASHCREDIT_FadeIn                                 = 0,
	FLASHCREDIT_Hold                                   = 1,
	FLASHCREDIT_FadeOut                                = 2,
	FLASHCREDIT_Delay                                  = 3,
	FLASHCREDIT_MAX                                    = 4
};*/

// Enum SFXGame.SFXGUI_MainMenu_Message.MMM_Status
/*enum MMM_Status
{
	MMM_DataUnloaded                                   = 0,
	MMM_DataLoading                                    = 1,
	MMM_DataLoadFailed                                 = 2,
	MMM_DataLoadSuccess                                = 3,
	MMM_DataLoadProcessed                              = 4,
	MMM_MAX                                            = 5
};*/

// Enum SFXGame.SFXGUI_MainMenu_RTT.EMM_GameType
/*enum EMM_GameType
{
	MM_GameType_None                                   = 0,
	MM_GameType_New                                    = 1,
	MM_GameType_Plus                                   = 2,
	MM_GameType_Legacy                                 = 3,
	MM_GameType_Max                                    = 4
};*/

// Enum SFXGame.SFXGUI_SquadRecord.PowerStateEnum
/*enum PowerStateEnum
{
	STATE_LOCKED                                       = 0,
	STATE_UNLOCKED                                     = 1,
	STATE_MAX                                          = 2
};*/

// Enum SFXGame.SFXGUI_SquadRecord.EvolutionStateEnum
/*enum EvolutionStateEnum
{
	STATE_LOCKED                                       = 0,
	STATE_BUYABLE                                      = 1,
	STATE_BOUGHT                                       = 2,
	STATE_MAX                                          = 3
};*/

// Enum SFXGame.SFXGUIData_Store.EItemType
/*enum EItemType
{
	TYPE_MOD                                           = 0,
	TYPE_QUEST                                         = 1,
	TYPE_DECORATION                                    = 2,
	TYPE_WEAPON                                        = 3,
	TYPE_WEAPONUPGRADE                                 = 4,
	TYPE_HELMET                                        = 5,
	TYPE_TORSO                                         = 6,
	TYPE_SHOULDERS                                     = 7,
	TYPE_LEGS                                          = 8,
	TYPE_ARMS                                          = 9,
	TYPE_UNIQUEARMOR                                   = 10,
	TYPE_PARTBASEDARMOR                                = 11,
	TYPE_MEDIGEL                                       = 12,
	TYPE_POWER                                         = 13,
	TYPE_TALENTRESET                                   = 14,
	TYPE_INTELREWARD                                   = 15,
	TYPE_NESTEDCATEGORY                                = 16,
	TYPE_RETURN                                        = 17,
	TYPE_INTELSUMMARY                                  = 18,
	TYPE_MAX                                           = 19
};*/

// Enum SFXGame.SFXWeaponMod.EWeaponModCategory
/*enum EWeaponModCategory
{
	WModCategory_Uncategorized                         = 0,
	WModCategory_Barrel                                = 1,
	WModCategory_Scope                                 = 2,
	WModCategory_Body                                  = 3,
	WModCategory_Grip                                  = 4,
	WModCategory_Emissive                              = 5,
	WModCategory_Blade                                 = 6,
	WModCategory_DLC1                                  = 7,
	WModCategory_DLC2                                  = 8,
	WModCategory_DLC3                                  = 9,
	WModCategory_DLC4                                  = 10,
	WModCategory_DLC5                                  = 11,
	WModCategory_DLC6                                  = 12,
	WModCategory_DLC7                                  = 13,
	WModCategory_DLC8                                  = 14,
	WModCategory_DLC9                                  = 15,
	WModCategory_DLC10                                 = 16,
	WModCategory_MAX                                   = 17
};*/

// Enum SFXGame.sfxgui_playercountdown.EPlayerCountdownTypes
/*enum EPlayerCountdownTypes
{
	PCT_Death                                          = 0,
	PCT_ThisPlayerRevive                               = 1,
	PCT_OtherPlayerRevive                              = 2,
	PCT_MAX                                            = 3
};*/

// Enum SFXGame.SFXGUIInteraction.SFXFontStyle
/*enum SFXFontStyle
{
	SFXFONT_Normal                                     = 0,
	SFXFONT_Italic                                     = 1,
	SFXFONT_Bold                                       = 2,
	SFXFONT_BoldItalic                                 = 3,
	SFXFONT_FauxItalic                                 = 4,
	SFXFONT_FauxBold                                   = 5,
	SFXFONT_FauxBoldItalic                             = 6,
	SFXFONT_MAX                                        = 7
};*/

// Enum SFXGame.sfxguiext_weaponmods.WeaponUIModSlot
/*enum WeaponUIModSlot
{
	UIModSlot                                          = 0,
	UIModSlot01                                        = 1,
	UIModSlot_MAX                                      = 2
};*/

// Enum SFXGame.SFXGUIHelper_ConsoleKeyboard.Keyboard_Options
/*enum Keyboard_Options
{
	KEYBOARD_STANDARD                                  = 0,
	KEYBOARD_EMAIL                                     = 1,
	KEYBOARD_PASSWORD                                  = 2,
	KEYBOARD_CODE                                      = 3,
	KEYBOARD_MAX                                       = 4
};*/

// Enum SFXGame.SFXGUIRenderTarget_InterpActor.MouseSupportLevel
/*enum MouseSupportLevel
{
	Mouse_None                                         = 0,
	Mouse_Click                                        = 1,
	Mouse_ClickAndMove                                 = 2,
	Mouse_MAX                                          = 3
};*/

// Enum SFXGame.SFXGUIValue_PowerIcon.SFXPowerWheelMapButtonIcon
/*enum SFXPowerWheelMapButtonIcon
{
	PWBI_Icon_NONE                                     = 0,
	PWBI_FaceButtonTop                                 = 1,
	PWBI_FaceButtonLeft                                = 2,
	PWBI_DPadLeft                                      = 3,
	PWBI_DPadRight                                     = 4,
	PWBI_ShoulderLeft                                  = 5,
	PWBI_ShoulderRight                                 = 6,
	PWBI_TriggerLeft                                   = 7,
	PWBI_TriggerRight                                  = 8,
	PWBI_ICON_COUNT                                    = 9,
	PWBI_MAX                                           = 10
};*/

// Enum SFXGame.SFXGUIValue_PowerIcon.SFXPowerWheelPowerState
/*enum SFXPowerWheelPowerState
{
	PWPS_Selectable                                    = 0,
	PWPS_Selected                                      = 1,
	PWPS_Inactive                                      = 2,
	PWPS_Activated                                     = 3,
	PWPS_Overload                                      = 4,
	PWPS_EmptySelectable                               = 5,
	PWPS_EmptySelected                                 = 6,
	PWPS_NotSuggested                                  = 7,
	PWPS_STATE_COUNT                                   = 8,
	PWPS_MAX                                           = 9
};*/

// Enum SFXGame.SFXWeapon.EPlayerPositionRTPC
/*enum EPlayerPositionRTPC
{
	EXPLORE                                            = 0,
	UPRIGHT_NORMAL                                     = 1,
	UPRIGHT_IRONSIGHTS                                 = 2,
	UPRIGHT_SCOPE_SNIPER                               = 3,
	UPRIGHT_SCOPE_OTHER                                = 4,
	COVER_NORMAL                                       = 5,
	COVER_IRONSIGHTS                                   = 6,
	COVER_SCOPE_SNIPER                                 = 7,
	COVER_SCOPE_OTHER                                  = 8,
	EPlayerPositionRTPC_MAX                            = 9
};*/

// Enum SFXGame.SFXWeapon.ChargeEffectType
/*enum ChargeEffectType
{
	CET_ShutOffAll                                     = 0,
	CET_StopCharge                                     = 1,
	CET_StartCharge                                    = 2,
	CET_MAX                                            = 3
};*/

// Enum SFXGame.sfxwavecoordinator.EWaveCoordinator_HordeOpEvent
/*enum EWaveCoordinator_HordeOpEvent
{
	EW_StartWaves                                      = 0,
	EW_BeginWave                                       = 1,
	EW_BeginSupplyWave                                 = 2,
	EW_FinishWave                                      = 3,
	EW_JoinInProgress                                  = 4,
	EW_MAX                                             = 5
};*/

// Enum SFXGame.SFXInterpTrackMovieBase.EMoviePlayState
/*enum EMoviePlayState
{
	EMPS_Play                                          = 0,
	EMPS_Stop                                          = 1,
	EMPS_Pause                                         = 2,
	EMPS_MAX                                           = 3
};*/

// Enum SFXGame.SFXTreasureUseModule.ETreasureType
/*enum ETreasureType
{
	AMMO_TREASURE                                      = 0,
	MEDIGEL_TREASURE                                   = 1,
	CREDITS_TREASURE                                   = 2,
	GRENADE_TREASURE                                   = 3,
	ETreasureType_MAX                                  = 4
};*/

// Enum SFXGame.SFXInventoryManager.CREDCurveSet
/*enum CREDCurveSet
{
	CREDCurve_NoReward                                 = 0,
	CREDCurve_Minor                                    = 1,
	CREDCurve_Small                                    = 2,
	CREDCurve_Medium                                   = 3,
	CREDCurve_Large                                    = 4,
	CREDCurve_Major                                    = 5,
	CREDCurve_MAX                                      = 6
};*/

// Enum SFXGame.SFXLoadMovieManager.LoadingMovieState
/*enum LoadingMovieState
{
	LMS_NotPlaying                                     = 0,
	LMS_Playing                                        = 1,
	LMS_MAX                                            = 2
};*/

// Enum SFXGame.SFXModule_DamageParty.EBleedoutState
/*enum EBleedoutState
{
	BleedOutState_None                                 = 0,
	BleedOutState_InBleedOut                           = 1,
	BleedOutState_ShieldGate                           = 2,
	BleedOutState_HealthGate                           = 3,
	BleedOutState_MAX                                  = 4
};*/

// Enum SFXGame.SFXModule_Wound.EWoundSeverity
/*enum EWoundSeverity
{
	WoundSev_Light                                     = 0,
	WoundSev_Medium                                    = 1,
	WoundSev_Heavy                                     = 2,
	WoundSev_MAX                                       = 3
};*/

// Enum SFXGame.SFXOperation_ObjectiveSpawnPoint.EObjectiveLocation
/*enum EObjectiveLocation
{
	EObjectiveLocation_Table                           = 0,
	EObjectiveLocation_Floor                           = 1,
	EObjectiveLocation_MAX                             = 2
};*/

// Enum SFXGame.SFXOnlineComponentMatchMakingBot.EBotGameContext
/*enum EBotGameContext
{
	BGC_Unknown                                        = 0,
	BGC_Splash                                         = 1,
	BGC_MainMenu                                       = 2,
	BGC_LobbyCharacter                                 = 3,
	BGC_LobbyMain                                      = 4,
	BGC_InGame                                         = 5,
	BGC_GameOver                                       = 6,
	BGC_Prompt                                         = 7,
	BGC_MAX                                            = 8
};*/

// Enum SFXGame.SFXOnlineComponentMatchMakingBot.EBotAction
/*enum EBotAction
{
	BOT_NoAction                                       = 0,
	BOT_MoveForward                                    = 1,
	BOT_MoveBackward                                   = 2,
	BOT_Disconnect                                     = 3,
	BOT_MAX                                            = 4
};*/

// Enum SFXGame.SFXSFHandler_EANetworking.EAGUI_MsgBoxResult
/*enum EAGUI_MsgBoxResult
{
	EAG_MSGBOX_BTN                                     = 0,
	EAG_MSGBOX_BTN01                                   = 1,
	EAG_MSGBOX_BTN02                                   = 2,
	EAG_MSGBOX_BTN03                                   = 3,
	EAG_MSGBOX_BTN_MAX                                 = 4
};*/

// Enum SFXGame.SFXSFHandler_EANetworking.EAGUI_CerberusIntroResult
/*enum EAGUI_CerberusIntroResult
{
	EAG_CI_REDEEM_CODE                                 = 0,
	EAG_CI_BUY_CODE                                    = 1,
	EAG_CI_CANCEL                                      = 2,
	EAG_CI_MAX                                         = 3
};*/

// Enum SFXGame.SFXSFHandler_EANetworking.EAGUI_EmailPswdMismatchResult
/*enum EAGUI_EmailPswdMismatchResult
{
	EAG_EPM_SUBMIT                                     = 0,
	EAG_EPM_EMAIL_PSWD                                 = 1,
	EAG_EPM_CANCEL                                     = 2,
	EAG_EPM_MAX                                        = 3
};*/

// Enum SFXGame.SFXSFHandler_EANetworking.EAGUI_NucleusLoginResult
/*enum EAGUI_NucleusLoginResult
{
	EAG_NL_LOGIN                                       = 0,
	EAG_NL_CREATE                                      = 1,
	EAG_NL_CANCEL                                      = 2,
	EAG_NL_MAX                                         = 3
};*/

// Enum SFXGame.SFXOnlineGameEntryFlow.MPFlowType
/*enum MPFlowType
{
	MPF_Inactive                                       = 0,
	MPF_Connect                                        = 1,
	MPF_ResolvingInvite                                = 2,
	MPF_LobbyAccess                                    = 3,
	MPF_MAX                                            = 4
};*/

// Enum SFXGame.SFXOnlinePlayerStorage.EStorageField
/*enum EStorageField
{
	SGF_Base                                           = 0,
	SGF_Class00                                        = 1,
	SGF_Class01                                        = 2,
	SGF_Class02                                        = 3,
	SGF_Class03                                        = 4,
	SGF_Class04                                        = 5,
	SGF_Class05                                        = 6,
	SGF_Class06                                        = 7,
	SGF_Class07                                        = 8,
	SGF_Character00                                    = 9,
	SGF_Character01                                    = 10,
	SGF_Character02                                    = 11,
	SGF_Character03                                    = 12,
	SGF_Character04                                    = 13,
	SGF_Character05                                    = 14,
	SGF_Character06                                    = 15,
	SGF_Character07                                    = 16,
	SGF_Character08                                    = 17,
	SGF_Character09                                    = 18,
	SGF_Character10                                    = 19,
	SGF_Character11                                    = 20,
	SGF_Character12                                    = 21,
	SGF_Character13                                    = 22,
	SGF_Character14                                    = 23,
	SGF_Character15                                    = 24,
	SGF_Character16                                    = 25,
	SGF_Character17                                    = 26,
	SGF_Character18                                    = 27,
	SGF_Character19                                    = 28,
	SGF_Character20                                    = 29,
	SGF_Character21                                    = 30,
	SGF_Character22                                    = 31,
	SGF_Character23                                    = 32,
	SGF_Character24                                    = 33,
	SGF_Character25                                    = 34,
	SGF_Character26                                    = 35,
	SGF_Character27                                    = 36,
	SGF_Character28                                    = 37,
	SGF_Character29                                    = 38,
	SGF_Character30                                    = 39,
	SGF_Character31                                    = 40,
	SGF_Character32                                    = 41,
	SGF_Character33                                    = 42,
	SGF_Character34                                    = 43,
	SGF_Character35                                    = 44,
	SGF_Character36                                    = 45,
	SGF_Character37                                    = 46,
	SGF_Character38                                    = 47,
	SGF_Character39                                    = 48,
	SGF_Character40                                    = 49,
	SGF_Character41                                    = 50,
	SGF_Character42                                    = 51,
	SGF_Character43                                    = 52,
	SGF_Character44                                    = 53,
	SGF_Character45                                    = 54,
	SGF_Character46                                    = 55,
	SGF_Character47                                    = 56,
	SGF_Character48                                    = 57,
	SGF_Character49                                    = 58,
	SGF_Character50                                    = 59,
	SGF_Character51                                    = 60,
	SGF_Character52                                    = 61,
	SGF_Character53                                    = 62,
	SGF_Character54                                    = 63,
	SGF_Character55                                    = 64,
	SGF_Character56                                    = 65,
	SGF_Character57                                    = 66,
	SGF_Character58                                    = 67,
	SGF_Character59                                    = 68,
	SGF_Character60                                    = 69,
	SGF_Character61                                    = 70,
	SGF_Character62                                    = 71,
	SGF_Character63                                    = 72,
	SGF_Character64                                    = 73,
	SGF_Character65                                    = 74,
	SGF_Character66                                    = 75,
	SGF_Character67                                    = 76,
	SGF_Character68                                    = 77,
	SGF_Character69                                    = 78,
	SGF_Character70                                    = 79,
	SGF_Character71                                    = 80,
	SGF_Character72                                    = 81,
	SGF_Character73                                    = 82,
	SGF_Character74                                    = 83,
	SGF_Character75                                    = 84,
	SGF_Character76                                    = 85,
	SGF_Character77                                    = 86,
	SGF_FaceCodes                                      = 87,
	SGF_NewReinforcements                              = 88,
	ASF_Completion                                     = 89,
	ASF_Progress                                       = 90,
	EStorageField_MAX                                  = 91
};*/

// Enum SFXGame.SFXOnlineSaveGameMP.EMPSerializationResult
/*enum EMPSerializationResult
{
	EMPSerializationResult_Success                     = 0,
	EMPSerializationResult_Failure                     = 1,
	EMPSerializationResult_TooOld                      = 2,
	EMPSerializationResult_TooNew                      = 3,
	EMPSerializationResult_ForcedWipe                  = 4,
	EMPSerializationResult_MAX                         = 5
};*/

// Enum SFXGame.SFXSaveManagerMP.ECharacterNameResult
/*enum ECharacterNameResult
{
	ECharacterNameResult_AllGood                       = 0,
	ECharacterNameResult_NotUnique                     = 1,
	ECharacterNameResult_NameTooLong                   = 2,
	ECharacterNameResult_Empty                         = 3,
	ECharacterNameResult_MAX                           = 4
};*/

// Enum SFXGame.SFXSaveManagerMP.EReinforcementGUICategory
/*enum EReinforcementGUICategory
{
	EReinforcementGUICategory_None                     = 0,
	EReinforcementGUICategory_AssaultRifle             = 1,
	EReinforcementGUICategory_SMG                      = 2,
	EReinforcementGUICategory_SniperRifle              = 3,
	EReinforcementGUICategory_Pistol                   = 4,
	EReinforcementGUICategory_Shotgun                  = 5,
	EReinforcementGUICategory_Mod                      = 6,
	EReinforcementGUICategory_Kit                      = 7,
	EReinforcementGUICategory_MatchConsumableAmmo      = 8,
	EReinforcementGUICategory_MatchConsumableWeapon    = 9,
	EReinforcementGUICategory_MatchConsumableArmor     = 10,
	EReinforcementGUICategory_MatchConsumableGear      = 11,
	EReinforcementGUICategory_NewlyAffordableStoreItems = 12,
	EReinforcementGUICategory_KitAppearance            = 13,
	EReinforcementGUICategory_MAX                      = 14
};*/

// Enum SFXGame.sfxpawn.EStyleEventMultiplier
/*enum EStyleEventMultiplier
{
	STYLE_EVENT_NORMAL                                 = 0,
	STYLE_EVENT_NONE                                   = 1,
	STYLE_EVENT_VERYWEAK                               = 2,
	STYLE_EVENT_WEAK                                   = 3,
	STYLE_EVENT_GOOD                                   = 4,
	STYLE_EVENT_VERYGOOD                               = 5,
	STYLE_EVENT_MAX                                    = 6
};*/

// Enum SFXGame.SFXPawn_PlayerParty.EHelmetState
/*enum EHelmetState
{
	HS_Default                                         = 0,
	HS_ForcedOn                                        = 1,
	HS_ForcedOn_Full                                   = 2,
	HS_ForcedOff                                       = 3,
	HS_MAX                                             = 4
};*/

// Enum SFXGame.SFXPawn_PlayerParty.EHelmetStateController
/*enum EHelmetStateController
{
	HSC_Kismet                                         = 0,
	HSC_Conversation                                   = 1,
	HSC_Cinematic                                      = 2,
	HSC_UserOptions_Default                            = 3,
	HSC_MAX                                            = 4
};*/

// Enum SFXGame.SFXPawn_Player.EPermanentGameEffect_Type
/*enum EPermanentGameEffect_Type
{
	PermanentGEType_Player                             = 0,
	PermanentGEType_Weapon                             = 1,
	PermanentGEType_GAWAsset                           = 2,
	PermanentGEType_MAX                                = 3
};*/

// Enum SFXGame.sfxpowercustomaction.EBioCapabilityTypes
/*enum EBioCapabilityTypes
{
	BioCaps_Normal                                     = 0,
	BioCaps_Death                                      = 1,
	BioCaps_MAX                                        = 2
};*/

// Enum SFXGame.sfxpowercustomaction.EClientNoCooldownDecision
/*enum EClientNoCooldownDecision
{
	NoCooldown_NoDecision                              = 0,
	NoCooldown_Success                                 = 1,
	NoCooldown_Failure                                 = 2,
	NoCooldown_MAX                                     = 3
};*/

// Enum SFXGame.sfxpowercustomaction.ECastingPhase
/*enum ECastingPhase
{
	CP_Start                                           = 0,
	CP_End                                             = 1,
	CP_MAX                                             = 2
};*/

// Enum SFXGame.SFXSavedMove.ESFXSavedMoveType
/*enum ESFXSavedMoveType
{
	SavedMoveType_Walk                                 = 0,
	SavedMoveType_Storm                                = 1,
	SavedMoveType_InCover                              = 2,
	SavedMoveType_AimBack                              = 3,
	SavedMoveType_RootMotion                           = 4,
	SavedMoveType_Standard                             = 5,
	SavedMoveType_MAX                                  = 6
};*/

// Enum SFXGame.SFXSceneShopNodePlotCheck.ESFXSSPlotVarType
/*enum ESFXSSPlotVarType
{
	PlotVar_Unset                                      = 0,
	PlotVar_State                                      = 1,
	PlotVar_Int                                        = 2,
	PlotVar_Float                                      = 3,
	PlotVar_MAX                                        = 4
};*/

// Enum SFXGame.sfxscoremanager.ScoreTagType
/*enum ScoreTagType
{
	ScoreTagType_Kill                                  = 0,
	ScoreTagType_Assist                                = 1,
	ScoreTagType_Objective                             = 2,
	ScoreTagType_Medal                                 = 3,
	ScoreTagType_MAX                                   = 4
};*/

// Enum SFXGame.sfxscoremanager.ScoreType
/*enum ScoreType
{
	SCORETYPE_DAMAGE                                   = 0,
	SCORETYPE_POWER                                    = 1,
	SCORETYPE_OBJECTIVE                                = 2,
	SCORETYPE_MEDAL                                    = 3,
	SCORETYPE_MAX                                      = 4
};*/

// Enum SFXGame.SFXSeqAct_AIFactory2.ESpawnSortType
/*enum ESpawnSortType
{
	SST_Shuffle                                        = 0,
	SST_Linear                                         = 1,
	SST_MAX                                            = 2
};*/

// Enum SFXGame.SFXSeqAct_AwardTreasure_Base.ETreasureIndex
/*enum ETreasureIndex
{
	TREASURE_ONE                                       = 0,
	TREASURE_TWO                                       = 1,
	TREASURE_THREE                                     = 2,
	TREASURE_FOUR                                      = 3,
	TREASURE_FIVE                                      = 4,
	TREASURE_SIX                                       = 5,
	TREASURE_SEVEN                                     = 6,
	TREASURE_EIGHT                                     = 7,
	TREASURE_NINE                                      = 8,
	TREASURE_TEN                                       = 9,
	TREASURE_MAX                                       = 10
};*/

// Enum SFXGame.SFXSeqAct_DummyWeaponFire.DummyFireObjectCyclingMethod
/*enum DummyFireObjectCyclingMethod
{
	DFOCM_Sequential                                   = 0,
	DFOCM_Random                                       = 1,
	DFOCM_MAX                                          = 2
};*/

// Enum SFXGame.SFXSeqAct_PlatformMovieBink.EMoviePlatform
/*enum EMoviePlatform
{
	MoviePlatform_None                                 = 0,
	MoviePlatform_PC                                   = 1,
	MoviePlatform_PS3                                  = 2,
	MoviePlatform_Xbox360                              = 3,
	MoviePlatform_MAX                                  = 4
};*/

// Enum SFXGame.SFXSeqAct_ResearchChoiceGUI.eMode
/*enum eMode
{
	MODE_TOPLEVEL                                      = 0,
	MODE_RESEARCH                                      = 1,
	MODE_TECH                                          = 2,
	MODE_MAX                                           = 3
};*/

// Enum SFXGame.SFXSeqAct_ResearchChoiceGUI.EResearchMode
/*enum EResearchMode
{
	MODE_RESEARCH_TOP                                  = 0,
	MODE_RESEARCH_WEAPON                               = 1,
	MODE_RESEARCH_ARMOR                                = 2,
	MODE_RESEARCH_SHIP                                 = 3,
	MODE_RESEARCH_GEAR                                 = 4,
	MODE_RESEARCH_MAX                                  = 5
};*/

// Enum SFXGame.SFXSeqEvt_AmbientPerformance.ESFXAmbPerfEventType
/*enum ESFXAmbPerfEventType
{
	AmbPerf_UNSET                                      = 0,
	AmbPerf_PerformanceStart                           = 1,
	AmbPerf_PerformanceEnd                             = 2,
	AmbPerf_PoseStart                                  = 3,
	AmbPerf_PoseEnd                                    = 4,
	AmbPerf_GestureStart                               = 5,
	AmbPerf_GestureEnd                                 = 6,
	AmbPerf_PoseEnterTransDone                         = 7,
	AmbPerf_MAX                                        = 8
};*/

// Enum SFXGame.SFXSeqEvt_AmbientPerformance.ESFXAmbPerfEventPoseEnum
/*enum ESFXAmbPerfEventPoseEnum
{
	SFXAPEPose_Unset                                   = 0,
	SFXAPEPose_MAX                                     = 1
};*/

// Enum SFXGame.SFXSeqEvt_AmbientPerformance.ESFXAmbPerfEventGestureEnum
/*enum ESFXAmbPerfEventGestureEnum
{
	SFXAPEGesture_Unset                                = 0,
	SFXAPEGesture_MAX                                  = 1
};*/

// Enum SFXGame.SFXSeqVar_Hench.ESFXVarHenchTag
/*enum ESFXVarHenchTag
{
	VarHenchTag_Unset                                  = 0,
	VarHenchTag_MAX                                    = 1
};*/

// Enum SFXGame.SFXSFHandler_HUD.ESFXPortraitState
/*enum ESFXPortraitState
{
	PORTRAIT_STATE_NORMAL                              = 0,
	PORTRAIT_STATE_DEAD                                = 1,
	PORTRAIT_STATE_BUSY                                = 2,
	PORTRAIT_STATE_MAX                                 = 3
};*/

// Enum SFXGame.SFXSFHandler_Save.ESaveGuiMode
/*enum ESaveGuiMode
{
	SaveGuiMode_BrowserWheel                           = 0,
	SaveGuiMode_MainMenu                               = 1,
	SaveGuiMode_GameOver                               = 2,
	SaveGuiMode_MAX                                    = 3
};*/

// Enum SFXGame.SFXSFHandler_Load.ELoadGuiMode
/*enum ELoadGuiMode
{
	LoadGuiMode_Default                                = 0,
	LoadGuiMode_NGPlus                                 = 1,
	LoadGuiMode_LegacyME2                              = 2,
	LoadGuiMode_MAX                                    = 3
};*/

// Enum SFXGame.SFXSFHandler_Personalization.ESFXPersonalizationOption
/*enum ESFXPersonalizationOption
{
	SFXPersOpt_Casual                                  = 0,
	SFXPersOpt_Type                                    = 1,
	SFXPersOpt_Helmet                                  = 2,
	SFXPersOpt_Torso                                   = 3,
	SFXPersOpt_Shoulder                                = 4,
	SFXPersOpt_Arm                                     = 5,
	SFXPersOpt_Leg                                     = 6,
	SFXPersOpt_Spec                                    = 7,
	SFXPersOpt_Pattern                                 = 8,
	SFXPersOpt_PatternColor                            = 9,
	SFXPersOpt_Tint1                                   = 10,
	SFXPersOpt_Tint2                                   = 11,
	SFXPersOpt_Emissive                                = 12,
	SFXPersOpt_MAX                                     = 13
};*/

// Enum SFXGame.SFXSFHandler_PowerWheel.SFXPowerWheelMode
/*enum SFXPowerWheelMode
{
	PWM_NONE                                           = 0,
	PWM_Powers                                         = 1,
	PWM_Weapons                                        = 2,
	PWM_PC                                             = 3,
	PWM_MAX                                            = 4
};*/

// Enum SFXGame.SFXSFHandler_PowerWheel.SFXPowerWheelPawnID
/*enum SFXPowerWheelPawnID
{
	PWPID_Player                                       = 0,
	PWPID_Hench1                                       = 1,
	PWPID_Hench2                                       = 2,
	PWPID_MAX                                          = 3
};*/

// Enum SFXGame.SFXSFHandler_PowerWheel.SFXPowerWheelWeaponState
/*enum SFXPowerWheelWeaponState
{
	PWWS_Normal                                        = 0,
	PWWS_Hover                                         = 1,
	PWWS_Disabled                                      = 2,
	PWWS_Selected                                      = 3,
	PWWS_WEAPSTATE_COUNT                               = 4,
	PWWS_MAX                                           = 5
};*/

// Enum SFXGame.SFXSystem.EBioReaperControlConditionPlotAutoSet
/*enum EBioReaperControlConditionPlotAutoSet
{
	BioReaperControlConditionPlot_Unset                = 0,
	BioReaperControlConditionPlot_MAX                  = 1
};*/

// Enum SFXGame.SFXSystem.EBioReaperControlConditionAutoSet
/*enum EBioReaperControlConditionAutoSet
{
	BioReaperControlCondition_Unset                    = 0,
	BioReaperControlCondition_MAX                      = 1
};*/

// Enum SFXGame.SFXTeamInfo.ESFXTeam
/*enum ESFXTeam
{
	TEAM_PLAYER                                        = 0,
	TEAM_ENEMY                                         = 1,
	TEAM_DUMMY                                         = 2,
	TEAM_EVERYONE                                      = 3,
	TEAM_MAX                                           = 4
};*/

// Enum SFXGame.SFXTracer.ESFXTracerState
/*enum ESFXTracerState
{
	eSFXTracerState_Idle                               = 0,
	eSFXTracerState_ScaleUp                            = 1,
	eSFXTracerState_ScaleDown                          = 2,
	eSFXTracerState_MAX                                = 3
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class SFXGame.BioHardLinks
// 0x000C (0x0048 - 0x003C)
class UBioHardLinks : public UObject
{
public:
	TArray< struct FBioHardLinkReference >             References;                                       		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1350 ];

		return pClassPointer;
	};

};

UClass* UBioHardLinks::pClassPointer = NULL;

// Class SFXGame.BioHintSystemBase
// 0x008C (0x00C8 - 0x003C)
class UBioHintSystemBase : public UObject
{
public:
	TArray< struct FHintDefinition >                   m_aHints;                                         		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFXNotification >                  m_aNotifications;                                 		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      m_aCurrentlyDisplayedMiniNotificationIDs;         		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSFXNotificationData >              m_NotificationData;                               		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x006C (0x003C) UNKNOWN PROPERTY: MapProperty SFXGame.BioHintSystemBase.m_mTrackingData
	float                                              m_fMinimumTimeBetweenAnyHints;                    		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fCurrentTime;                                   		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurrentlyDisplayedHint;                        		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurrentlyDisplayedNotificationID;              		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTexture2D*                                  m_DefaultImage;                                   		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSinceDisplayPossible;                      		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDisplayDelay;                                  		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bEnabled : 1;                                   		// 0x00C4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bDisabledForTutorial : 1;                       		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bNotificationIsPaused : 1;                      		// 0x00C4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1351 ];

		return pClassPointer;
	};

	void eventCacheCurrentState ( );
	void Tick ( float TimeDelta );
	float TimeSince ( float fTime );
	float GetPreviousTime ( int nAge, struct FHintTrackingData* oData );
	struct FHintTrackingData GetTrackingData ( struct FName nmEvent, struct FName nmContext );
	void Clear ( );
	void HintEvent ( struct FName nmEvent, struct FName nmContext );
	void ClearNotifications ( );
	void OnNotificationDisplayCompleted ( int nNotificationID );
	bool IsHintsOptionDisabled ( );
	bool HintsEnabled ( );
	void SetNotificationPaused ( unsigned long bVal );
	void eventJournalUpdate ( void* srTitle, void* srDescription );
	void eventCodexUpdate ( void* srTitle, void* srDescription );
	void eventAddNotification_BonusPower ( int PlotStateID );
	void PopulateNotificationOneParameter ( int nParam1, struct FSFXNotificationData* oNoteData, struct FSFXNotification* oNotification );
	struct FSFXNotificationData GetNotificationData ( struct FName nmNotificationType );
	void ShowNotification ( struct FSFXNotification* oNotification );
	void AddNotification_Custom ( float nDisplayTime, struct FString sTitle, struct FString sSubtitle, struct FString sBody, struct FString sImagePath, struct FName nRemoteEvent, struct FName nmType, struct FName nmSound, int Priority, int FlourishID, int nBarPercent, struct FName nmIcon, unsigned long bMini );
	void AddNotification_AccomplishmentUnlocked ( struct FAccomplishment* Data, struct FGrinderAccomplishment* Grinder );
	void AddNotification_AccomplishmentChange ( struct FString sTitle, struct FString sSubtitle, struct FString sBody, int currentCount, int totalCount, struct FString sImage );
	void AddNotification_AmmoRecovery ( int nAmount );
	void AddNotification_HeavyWeaponAmmoRecovery ( int nAmount );
	void AddNotification_ElementZeroRecovery ( int nAmount );
	void AddNotification_PlatinumRecovery ( int nAmount );
	void AddNotification_PalladiumRecovery ( int nAmount );
	void AddNotification_IridiumRecovery ( int nAmount );
	void AddNotification_ReputationChange ( int nAmount );
	void AddNotification_RenegadeChange ( int nAmount );
	void AddNotification_ParagonChange ( int nAmount );
	void AddNotification_MedigelRecovery ( int nAmount );
	void AddNotification_CreditRecovery ( int nAmount );
	void AddNotification_CodexChange ( );
	void AddNotification_JournalChange ( );
	void AddNotification ( struct FSFXNotification* oNotification );
};

UClass* UBioHintSystemBase::pClassPointer = NULL;

// Class SFXGame.BioLevelUpSystem
// 0x0004 (0x0040 - 0x003C)
class UBioLevelUpSystem : public UObject
{
public:
	float                                              ME2ImportReputationAmount;                        		// 0x003C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1352 ];

		return pClassPointer;
	};

	int GetMaxLevel ( );
	void VerifyPlayerTalentPoints ( class Asfxpawn* Pawn );
	void SetME2ImportStartingValues ( struct FPlayerSaveRecord* PlayerRecord );
	void ME2ToME3_ParagonRenegade ( int Paragon_ME2, int Renegade_ME2, int* Paragon_ME3, int* Renegade_ME3 );
	void AutoLevelUpPowers ( class ABioPawn* Pawn );
	int GetTalentPointSum ( int Level, unsigned long bHenchman );
	bool LevelUpBioPawn ( class ASFXPawn_PlayerParty* Pawn, int newLevel );
	bool GetLevelFromXP ( int experience, int* Level );
	bool GetXPNeededForLevel ( int Level, int* experience );
	bool AttemptLevelUp ( class ABioBaseSquad* Squad );
};

UClass* UBioLevelUpSystem::pClassPointer = NULL;

// Class SFXGame.BioLoadingMovie
// 0x0024 (0x0060 - 0x003C)
class UBioLoadingMovie : public UObject
{
public:
	struct FString                                     MovieName;                                        		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                LoopBackFrame;                                    		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEventPairObject*                       LoadingMovieWwisePair;                            		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeInTime;                                       		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutTime;                                      		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 FadeOutWwiseEvent;                                		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinPlayTime;                                      		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1353 ];

		return pClassPointer;
	};

};

UClass* UBioLoadingMovie::pClassPointer = NULL;

// Class SFXGame.BioPhysicsSounds
// 0x0014 (0x0050 - 0x003C)
class UBioPhysicsSounds : public UObject
{
public:
	float                                              m_fMaxMass;                                       		// 0x003C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMaxSpeed;                                      		// 0x0040 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMinTimeBetweenSoundByActor;                    		// 0x0044 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMinSpeedToPlay;                                		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bEnableLogging : 1;                             		// 0x004C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1354 ];

		return pClassPointer;
	};

	float GetSpeedSpecifier ( class UPrimitiveComponent* oComp, float fSpeedToUse );
	float GetMassSpecifier ( class UPrimitiveComponent* oComp );
	void UpdateLastCollidedActor ( class UPrimitiveComponent* oComp, class AActor* OtherActor );
	void UpdateLastTimePlayed ( class UPrimitiveComponent* oComp );
	bool IsTooSlowToPlay ( class UPrimitiveComponent* oComp );
	bool IsSameCollidedActor ( class UPrimitiveComponent* oComp, class AActor* OtherActor );
	bool IsTooSoonToPlay ( class UPrimitiveComponent* oComp );
	bool CanPlay ( class UPrimitiveComponent* oComp0, class UPrimitiveComponent* oComp1, struct FCollisionImpactData* RigidCollisionData );
	int GetPhysMatWwiseType ( class UPhysicalMaterial* PhysMat );
	class UWwiseEvent* GetWwiseEvent ( class UPhysicalMaterial* PhysMat );
	void eventPlaySoundOnPhysMatAt ( class AGameReplicationInfo* GRI, class UPhysicalMaterial* PhysMat, class UPhysicalMaterial* PhysMatSweetener, struct FVector pos, TArray< struct FString > RTPCNames, TArray< float > RTPCValues );
};

UClass* UBioPhysicsSounds::pClassPointer = NULL;

// Class SFXGame.BioPlaypenVolume
// 0x0014 (0x0240 - 0x022C)
class ABioPlaypenVolume : public AVolume
{
public:
	struct FGuid                                       PlaypenGuid;                                      		// 0x022C (0x0010) [0x0000000000220003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bSubtractive : 1;                                 		// 0x023C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1355 ];

		return pClassPointer;
	};

};

UClass* ABioPlaypenVolume::pClassPointer = NULL;

// Class SFXGame.BioPlotTreasure
// 0x000C (0x0048 - 0x003C)
class UBioPlotTreasure : public UObject
{
public:
	class UBio2DA*                                     oPlotTreasureResources2DA;                        		// 0x003C (0x0004) [0x0000000000000000]              
	class UBio2DA*                                     oPlotTreasureTreasure2DA;                         		// 0x0040 (0x0004) [0x0000000000000000]              
	class UBio2DA*                                     oPlotTreasureTech2DA;                             		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1356 ];

		return pClassPointer;
	};

	bool GetMapName ( struct FString* sOutMapName );
	bool GetPlotTreasureTechInt ( struct FName nmTech, struct FName nmNameHeader, struct FName nmHeader, int* nTechValue );
	bool GetPlotTreasureTechName ( struct FName nmTech, struct FName nmHeader, struct FName* nmTechName );
	bool GetPlotTreasureTreasureName ( int nTreasureId, struct FName nmHeader, struct FName* nmPlotTreasureName );
	bool GetPlotTreasureTreasureInt ( int nTreasureId, struct FName nmHeader, int* nPlotTreasureValue );
	bool GetPlotTreasureResourcesInt ( struct FName nmLevel, struct FName nmHeader, int* nPlotTreasureValue );
};

UClass* UBioPlotTreasure::pClassPointer = NULL;

// Class SFXGame.BioPower
// 0x002C (0x0068 - 0x003C)
class UBioPower : public UObject
{
public:
	struct FString                                     m_sRTPCName;                                      		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       m_nmPower;                                        		// 0x0048 (0x0008) [0x0000000000000000]              
	class UBioPowerScript*                             Script;                                           		// 0x0050 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class AController*                                 Instigator;                                       		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXPower*                                   NewPower;                                         		// 0x0058 (0x0004) [0x0000000000000000]              
	class AActor*                                      Owner;                                            		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                m_nSuppressedCount;                               		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bFakePower : 1;                                 		// 0x0064 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bDisableVFX : 1;                                		// 0x0064 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bDisableDamageAndEffects : 1;                   		// 0x0064 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bDisableAnimation : 1;                          		// 0x0064 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1357 ];

		return pClassPointer;
	};

	bool ShouldDisplayInHUD ( );
	bool GetDescription ( struct FString* sDescription );
	bool GetImpactText ( void** srImpactText );
	bool GetDisplayName ( struct FString* sDisplayName );
	int GetPowerIcon ( );
	bool CanCasterMoveDuringPower ( );
	void Tick ( float fDeltaTime );
	bool IsSuppressed ( );
	int SuppressPower ( unsigned long bSuppress );
	bool IsEnabled ( );
	unsigned char GetType ( );
	bool GetAnimSet ( class UAnimSet** oAnimSet );
	void CreatePowerScript ( );
	void InitializePower ( struct FName nmPower );
	unsigned char GetDiscipline ( );
	bool GetStopOnFirstHit ( );
	bool GetBlockedByObjects ( );
	float GetConeHalfAngle ( );
	float GetVFXIntensity ( );
	float GetEffectDuration ( );
	float GetImpactRadius ( );
	float GetMaximumRange ( );
	float GetMinimumRange ( );
	float GetProjectileRadius ( );
	float GetProjectileSpeed ( );
	float GetGlobalCooldown ( );
	float GetReleaseAnimRate ( );
	float GetCastingTime ( );
};

UClass* UBioPower::pClassPointer = NULL;

// Class SFXGame.BioPowerManager
// 0x004C (0x0088 - 0x003C)
class UBioPowerManager : public UObject
{
public:
	struct FMap_Mirror                                 m_mapGlobalCooldowns;                             		// 0x003C (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FPowerReservation >                 m_aReservations;                                  		// 0x0078 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_nCurrentReservationID;                          		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1358 ];

		return pClassPointer;
	};

	bool eventCanImpactActor ( class AActor* oActor );
	void TickReservations ( float fDeltaTime );
	bool StartReservation ( int nReservationID );
	void ClearReservation ( int nReservationID );
	int MakeReservation ( class USFXPowerCustomActionBase* oPower, class APawn* oPawn, unsigned long bForceSuccess );
	void TickGlobalCooldowns ( float fDeltaTime );
	float GetGlobalCooldown ( struct FName nmPower );
	void SetGlobalCooldown ( struct FName nmPower, float fCooldown );
	void Tick ( float fDeltaTime );
	void ChooseTargetForPlayer ( class USFXPower* oPower, class AActor** oTarget, struct FVector* vTargetLocation );
	bool AreActorsFriendly ( class AActor* oFirstActor, class AActor* oSecondActor );
	bool CheckLOSToLocation ( class AActor* oSourceActor, struct FVector vStartLocation, struct FVector vEndLocation, float fMaxRange, unsigned long bIgnoreFriendlies, float fIgnoreCoverDistance, class AActor** oHitActor, struct FVector* vHitLocation, struct FVector* vHitNormal );
	bool CheckLOSToActor ( class AActor* oSourceActor, class AActor* oDestinationActor, struct FVector vStartLocation, float fMaxRange, unsigned long bIgnoreFriendlies, unsigned long bIgnorePawns, class AActor** oHitActor, struct FVector* vHitLocation, struct FVector* vHitNormal );
	void GetStartLocationForLOSCheck ( class APawn* Caster, struct FVector* vStartLocation );
};

UClass* UBioPowerManager::pClassPointer = NULL;

// Class SFXGame.BioPowerScript
// 0x0080 (0x00BC - 0x003C)
class UBioPowerScript : public UObject
{
public:
	TArray< class AActor* >                            m_ImpactedActors;                                 		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     m_vWorldImpactLocation;                           		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vWorldImpactNormal;                             		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vProjectileVelocity;                            		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vProjectileLocation;                            		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vLocationToAimAt;                               		// 0x0078 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UForceFeedbackWaveform*                      m_ImpactWaveForm;                                 		// 0x0084 (0x0004) [0x0000000000000000]              
	class AActor*                                      m_oTargetToAimAt;                                 		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              Recommended_TargetVulnerable;                     		// 0x008C (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_TargetOrganic;                     		// 0x0090 (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_TargetMachine;                     		// 0x0094 (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_TargetHasShields;                  		// 0x0098 (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_TargetHasBiotics;                  		// 0x009C (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_TargetHasArmor;                    		// 0x00A0 (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_NoMedigel;                         		// 0x00A4 (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_NoSquadMemberDead;                 		// 0x00A8 (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_NoSquadMemberInjured;              		// 0x00AC (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_WeaponPowerAlreadyOn;              		// 0x00B0 (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_TargetImmune;                      		// 0x00B4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bWeaponModePower : 1;                           		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShouldTick : 1;                                  		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bPlayerOrderedPowerUse : 1;                     		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1359 ];

		return pClassPointer;
	};

	void DebugDraw_Power ( class ABioHUD* H );
	struct FString eventGetHUDWheelIconInfo ( class ABioPawn* OwnerPawn );
	void ReloadAmmoPower ( class ABioPawn* Target, class ASFXWeapon* Weapon );
	void OnOwnerDied ( );
	void OnSquadMemberAdded ( class APawn* Pawn );
	void OnPowersLoaded ( );
	void OnPowerRankIncreased ( );
	void OnPowerAdded ( class USFXPower* Power );
	bool eventShouldUsePower ( class AActor* Caster, class AActor* Target, struct FString* sOptionalInfo );
	float GetDuration ( );
	float GetElapsedTime ( );
	bool PlayGuiSound ( struct FName nmSound );
	bool GetFloorLocation ( struct FVector vStartLocation, struct FVector* vFloorLocation );
	void GetCooldownResearchBonus ( float* fStaticResearchBonus );
	bool eventAdjustCooldown ( float* fCooldownTime );
	bool eventEffectUnapply ( class AActor* oCaster, float fCasterStability, class AActor* oImpacted, int nPreviouslyImpacted );
	bool eventOnImpact ( class AActor* oCaster, float fCasterStability, class AActor* oImpacted, int nPreviouslyImpacted );
	bool eventCanStartPower ( class AActor* oCaster );
	void eventTick ( float DeltaTime );
	void OnProjectileExploded ( class AActor* oCaster, struct FVector HitLocation, struct FVector HitNormal, struct FVector Velocity );
	void OnWeaponReload ( class ASFXWeapon* Weapon, unsigned long QuickReload );
	void OnWeaponUnequip ( class ASFXWeapon* Weapon );
	void OnWeaponEquip ( class ASFXWeapon* Weapon );
	void OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact );
	void eventInitializePowerScript ( );
};

UClass* UBioPowerScript::pClassPointer = NULL;

// Class SFXGame.BioRadarMapBoundaries
// 0x000E (0x0204 - 0x01F6)
class ABioRadarMapBoundaries : public AActor
{
public:
	struct FVector                                     m_vBoundarySize;                                  		// 0x01F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1360 ];

		return pClassPointer;
	};

};

UClass* ABioRadarMapBoundaries::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_GiveMissionXP_NativeBase
// 0x0014 (0x00C4 - 0x00B0)
class UBioSeqAct_GiveMissionXP_NativeBase : public USequenceAction
{
public:
	struct FName                                       CombatToken;                                      		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              RewardAmount;                                     		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              ObjectiveStringRef;                               		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSkipNotifications : 1;                           		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCombatExperience : 1;                            		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1361 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* UBioSeqAct_GiveMissionXP_NativeBase::pClassPointer = NULL;

// Class SFXGame.BioSFResources
// 0x0024 (0x0060 - 0x003C)
class UBioSFResources : public UObject
{
public:
	TArray< struct FBioSFSoundAssetResource >          Sounds;                                           		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UBioSFScreenTip* >                   LoadScreenTips;                                   		// 0x0048 (0x000C) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UGFxMovieInfo* >                     Movies;                                           		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1362 ];

		return pClassPointer;
	};

};

UClass* UBioSFResources::pClassPointer = NULL;

// Class SFXGame.BioSocketSupermodel
// 0x000C (0x0374 - 0x0368)
class UBioSocketSupermodel : public USkeletalMesh
{
public:
	TArray< class USkeletalMesh* >                     Dependents;                                       		// 0x0368 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1363 ];

		return pClassPointer;
	};

};

UClass* UBioSocketSupermodel::pClassPointer = NULL;

// Class SFXGame.BioTacticalMoveToIndicator
// 0x000E (0x0204 - 0x01F6)
class ABioTacticalMoveToIndicator : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystem;                                   		// 0x01F8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fFadeInTime;                                    		// 0x01FC (0x0004) [0x0000000000000000]              
	float                                              m_fTimePassed;                                    		// 0x0200 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1364 ];

		return pClassPointer;
	};

};

UClass* ABioTacticalMoveToIndicator::pClassPointer = NULL;

// Class SFXGame.SFXAccomplishmentManager
// 0x005C (0x0098 - 0x003C)
class USFXAccomplishmentManager : public UObject
{
public:
	TArray< struct FAccomplishment >                   AccomplishmentData;                               		// 0x003C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      AccomplishmentIsComplete;                         		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      AccomplishmentCompletionTimes;                    		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FAccomplishmentProgress >           AccomplishmentProgressData;                       		// 0x0060 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FGrinderAccomplishment >            GrinderAccomplishmentData;                        		// 0x006C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAchievementReward >                Rewards;                                          		// 0x0078 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FChallengeEvent >                   Challenges;                                       		// 0x0084 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class USFXAccomplishmentStorage*                   AccomplishmentStorage;                            		// 0x0090 (0x0004) [0x0000000000000000]              
	unsigned long                                      bChallengeSystemEnabled : 1;                      		// 0x0094 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      IsDataValidated : 1;                              		// 0x0094 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsSaving : 1;                                    		// 0x0094 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bPendingSave : 1;                                 		// 0x0094 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bSaveRequired : 1;                                		// 0x0094 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1365 ];

		return pClassPointer;
	};

	void Destroyed ( );
	class USFXOnlineJobSendMessage* eventCreateJobSendAchievementMessage ( int AchievementId );
	struct FName AccomplishmentProgressIndexToName ( int AccomplishmentProgressIndex );
	struct FName AccomplishmentIndexToName ( int AccomplishmentIndex );
	void LoadStorageData ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void LoadSettingsData ( class USFXProfileSettings* CurrentProfileSettings );
	void LoadAchievementData ( TArray< struct FAchievementDetails > AchievementsList, class ABioPlayerController* PC );
	void SaveComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void Save ( );
	unsigned char GetAccomplishmentParamsStorage ( unsigned char AchievementId, unsigned long IsMultiplayerOnly );
	unsigned char GetAccomplishmentStorage ( int ArrayIndex );
	bool UpdateGrinderAccomplishmentByValue ( int UpdateValue, struct FName AccomplishmentProgressName, class ABioPlayerController* PC );
	bool GrinderAccomplishmentIncrement ( struct FName AccomplishmentProgressName, class ABioPlayerController* PC );
	bool SetGrinderAccomplishmentProgressWithUpdate ( struct FName AccomplishmentProgressName, int Progress, class ABioPlayerController* PC );
	int GetGrinderAccomplishmentProgress ( struct FName AccomplishmentProgressName, class ABioPlayerController* PC );
	void SetGrinderAccomplishmentProgress ( struct FName AccomplishmentProgressName, int Progress, class ABioPlayerController* PC );
	void GrinderAccomplishmentReset ( struct FName AccomplishmentProgressName, class ABioPlayerController* PC );
	bool GetGrinderAccomplishment ( struct FName AccomplishmentName, TArray< struct FGrinderAccomplishment >* GAList );
	bool CanUnlockAccomplishment ( struct FName AccomplishmentName );
	bool HasCompletedAccomplishment ( struct FName AccomplishmentName );
	unsigned char GetProfileSettingFromAccomplishmentProgress ( struct FName AccomplishmentProgressName );
	bool AreAllChildAccomplishmentsCompleted ( struct FName ParentAccomplishment );
	void UpdateAccomplishmentTree ( struct FName ParentAccomplishment, class ABioPlayerController* PC );
	bool SetAccomplishmentUncompleted ( struct FName AccomplishmentName, class ABioPlayerController* PC );
	bool SetAccomplishmentCompleted ( struct FName AccomplishmentName, class ABioPlayerController* PC );
	bool PropagateAccomplishmentCompletion ( int Index, unsigned long IsComplete, class ABioPlayerController* PC, unsigned long bSaveProfile );
	void ResetChallengeRewards ( );
	void SetCurrentReward ( int nRewardID );
	void GetCurrentReward ( int* nRewardID, int* nRewardLevel );
	void UpdateN7RatingChallenge ( int n7Rating, class ABioPlayerController* PC );
	void UpdateMiscChallenges ( unsigned char ChallengeType, class ABioPlayerController* PC );
	void UpdatePowerChallenges ( struct FName PowerName, class UClass* PowerDamageType, unsigned long bCombo, class ABioPlayerController* PC );
	void UpdateMedalChallenges ( unsigned char Medal, class ABioPlayerController* PC );
	void UpdateWaveChallenges ( class ABioPlayerController* PC );
	void UpdateMatchChallenges ( int PlayerID, class ABioPlayerController* PC );
	void UpdateDamageScoreChallenges ( float Score, void* DamageSource, class ABioPlayerController* PC );
	void UpdateEnemyScoreChallenges ( class UClass* KilledPawnClass, float Score, class ABioPlayerController* PC );
	void UpdateKillChallenges ( class UClass* KilledPawnClass, class UClass* KillingDamageType, void* KillingSource, unsigned long bHeadShot, unsigned long bHeadGib, class ABioPlayerController* PC );
	void GetCurrentChallengeData ( class ABioPlayerController* PC, struct FChallengeEvent* CurrentEvent );
	void GetOtherAccomplishments ( struct FChallengeEvent* CurrentEvent, TArray< struct FName >* Accomplishments );
	void GetPowerAccomplishments ( class UClass* PowerDamageType, struct FChallengeEvent* CurrentEvent, TArray< struct FName >* Accomplishments );
	void GetMedalAccomplishments ( struct FChallengeEvent* CurrentEvent, TArray< struct FName >* Accomplishments );
	void GetWaveAccomplishments ( struct FChallengeEvent* CurrentEvent, TArray< struct FName >* Accomplishments );
	void GetMatchAccomplishments ( struct FChallengeEvent* CurrentEvent, TArray< struct FName >* Accomplishments );
	void GetDamageScoreAccomplishments ( struct FChallengeEvent* CurrentEvent, TArray< struct FName >* Accomplishments );
	void GetEnemyScoreAccomplishments ( class UClass* KilledPawnClass, struct FChallengeEvent* CurrentEvent, TArray< struct FName >* Accomplishments );
	void GetKillAccomplishments ( class UClass* KilledPawnClass, class UClass* KillingDamageType, struct FChallengeEvent* CurrentEvent, TArray< struct FName >* Accomplishments );
	void ResetChallengeGroupProgress ( struct FName ChallengeGroupName );
	bool CanUpdateAccomplishmentProgress ( int CurrentProgress, int GrinderIndex, int AccomplishmentIndex );
	void OnGrantedEntitlement ( struct FBWEntitlementId Id, int nResult );
	int GetTotalChallengePoints ( );
	void AddChallengePointsEarned ( int PointsEarned );
	bool UnlockReward ( struct FName AccomplishmentName, int PointsEarned, unsigned long bIsMultiplayerOnly, class ABioPlayerController* PC );
	void Validate ( );
	void eventInitialize ( );
};

UClass* USFXAccomplishmentManager::pClassPointer = NULL;

// Class SFXGame.SFXActorFactoryRigidBody
// 0x0000 (0x0095 - 0x0095)
class USFXActorFactoryRigidBody : public UActorFactoryRigidBody
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1366 ];

		return pClassPointer;
	};

};

UClass* USFXActorFactoryRigidBody::pClassPointer = NULL;

// Class SFXGame.BioActorFactoryPhysicsActor
// 0x0000 (0x0095 - 0x0095)
class UBioActorFactoryPhysicsActor : public USFXActorFactoryRigidBody
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1367 ];

		return pClassPointer;
	};

};

UClass* UBioActorFactoryPhysicsActor::pClassPointer = NULL;

// Class SFXGame.SFXAnimationMarker
// 0x0012 (0x0208 - 0x01F6)
class ASFXAnimationMarker : public AActor
{
public:
	struct FString                                     Text;                                             		// 0x01F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UStaticMeshComponent*                        ZoneMeshComp;                                     		// 0x0204 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1368 ];

		return pClassPointer;
	};

};

UClass* ASFXAnimationMarker::pClassPointer = NULL;

// Class SFXGame.SFXArmourPiece
// 0x007C (0x00B8 - 0x003C)
class USFXArmourPiece : public UObject
{
public:
	TArray< struct FName >                             HideBones;                                        		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     RelativeBoneLocation;                             		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeBoneRotation;                             		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RelativeBoneScale;                                		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    Rotation;                                         		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AttachSocket;                                     		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ArmourName;                                       		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     Mesh;                                             		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     DestroyedMesh;                                    		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           PhysMaterialOverride;                             		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPrimitiveComponent*                         AttachInstance;                                   		// 0x00A0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             PS_Destruction;                                   		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 DestructionSound;                                 		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxHealth;                                        		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentHealth;                                    		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bMeshStartsHidden : 1;                            		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStartsDetached : 1;                              		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCanBeDamaged : 1;                                		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNotifyOnHit : 1;                                 		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bPassThroughDamage : 1;                           		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1369 ];

		return pClassPointer;
	};

	void UpdateMorphWeights ( class USkeletalMeshComponent* SkelMeshComp, float NewWeight );
	void UpdateAppearance ( );
	void eventActivateEffects ( class AActor* oTarget );
	void DetachFromActor ( class AActor* oTarget, unsigned long bDestroyed, struct FTraceHitInfo* HitInfo );
	bool AttachToActor ( class AActor* oTarget );
};

UClass* USFXArmourPiece::pClassPointer = NULL;

// Class SFXGame.SFXAsyncAssetLoader
// 0x0028 (0x0064 - 0x003C)
class USFXAsyncAssetLoader : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FSFXAsyncPackageRequest >           m_aPackageRequests;                               		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXAsyncLoadGroupCallback >        m_OnGroupLoadedCallbacks;                         		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAsyncGroupLoaded__Delegate;                   		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1370 ];

		return pClassPointer;
	};

	bool GetAssetsForGroup ( struct FName nmAsyncGroupTag, TArray< class UObject* >* oAssets );
	void ClearAsyncGroup ( struct FName nmAsyncGroupTag );
	bool IsAsyncGroupLoaded ( struct FName nmAsyncGroupTag );
	void AsyncLoadAssets ( struct FName nmAsyncGroupTag, struct FScriptDelegate AsyncGroupLoaded, TArray< struct FSFXAsyncAssetRequest >* Assets );
	void OnAsyncGroupLoaded ( );
};

UClass* USFXAsyncAssetLoader::pClassPointer = NULL;

// Class SFXGame.SFXCombatZone
// 0x0010 (0x023C - 0x022C)
class ASFXCombatZone : public AVolume
{
public:
	struct FGuid                                       CombatZoneGuid;                                   		// 0x022C (0x0010) [0x0000000000220003]              ( CPF_Edit | CPF_Const | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1371 ];

		return pClassPointer;
	};

};

UClass* ASFXCombatZone::pClassPointer = NULL;

// Class SFXGame.SFXCustomReachSpec
// 0x0006 (0x008C - 0x0086)
class USFXCustomReachSpec : public UAdvancedReachSpec
{
public:
	class APawn*                                       BlockingPawn;                                     		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1372 ];

		return pClassPointer;
	};

};

UClass* USFXCustomReachSpec::pClassPointer = NULL;

// Class SFXGame.SFXBoostReachSpec
// 0x0000 (0x008C - 0x008C)
class USFXBoostReachSpec : public USFXCustomReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1373 ];

		return pClassPointer;
	};

};

UClass* USFXBoostReachSpec::pClassPointer = NULL;

// Class SFXGame.SFXClimbWallReachSpec
// 0x0000 (0x008C - 0x008C)
class USFXClimbWallReachSpec : public USFXCustomReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1374 ];

		return pClassPointer;
	};

};

UClass* USFXClimbWallReachSpec::pClassPointer = NULL;

// Class SFXGame.SFXJumpDownReachSpec
// 0x0000 (0x008C - 0x008C)
class USFXJumpDownReachSpec : public USFXCustomReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1375 ];

		return pClassPointer;
	};

};

UClass* USFXJumpDownReachSpec::pClassPointer = NULL;

// Class SFXGame.SFXJumpReachSpec
// 0x0008 (0x0094 - 0x008C)
class USFXJumpReachSpec : public USFXCustomReachSpec
{
public:
	float                                              MaxHeight;                                        		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MovePercentToReachMaxHeight;                      		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1376 ];

		return pClassPointer;
	};

};

UClass* USFXJumpReachSpec::pClassPointer = NULL;

// Class SFXGame.SFXLadderReachSpec
// 0x0000 (0x008C - 0x008C)
class USFXLadderReachSpec : public USFXCustomReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1377 ];

		return pClassPointer;
	};

};

UClass* USFXLadderReachSpec::pClassPointer = NULL;

// Class SFXGame.SFXLargeBoostReachSpec
// 0x0000 (0x008C - 0x008C)
class USFXLargeBoostReachSpec : public USFXCustomReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1378 ];

		return pClassPointer;
	};

};

UClass* USFXLargeBoostReachSpec::pClassPointer = NULL;

// Class SFXGame.SFXLargeClimbReachSpec
// 0x0000 (0x008C - 0x008C)
class USFXLargeClimbReachSpec : public USFXCustomReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1379 ];

		return pClassPointer;
	};

};

UClass* USFXLargeClimbReachSpec::pClassPointer = NULL;

// Class SFXGame.SFXLargeMantleReachSpec
// 0x0000 (0x008C - 0x008C)
class USFXLargeMantleReachSpec : public USFXCustomReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1380 ];

		return pClassPointer;
	};

};

UClass* USFXLargeMantleReachSpec::pClassPointer = NULL;

// Class SFXGame.SFXLeapReachSpecBase
// 0x0004 (0x0090 - 0x008C)
class USFXLeapReachSpecBase : public USFXCustomReachSpec
{
public:
	float                                              LeapHeight;                                       		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1381 ];

		return pClassPointer;
	};

};

UClass* USFXLeapReachSpecBase::pClassPointer = NULL;

// Class SFXGame.SFXLeapReachSpecHumanoid
// 0x0000 (0x0090 - 0x0090)
class USFXLeapReachSpecHumanoid : public USFXLeapReachSpecBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1382 ];

		return pClassPointer;
	};

};

UClass* USFXLeapReachSpecHumanoid::pClassPointer = NULL;

// Class SFXGame.SFXLeapReachSpecLarge
// 0x0000 (0x0090 - 0x0090)
class USFXLeapReachSpecLarge : public USFXLeapReachSpecBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1383 ];

		return pClassPointer;
	};

};

UClass* USFXLeapReachSpecLarge::pClassPointer = NULL;

// Class SFXGame.SFXDamageType
// 0x005A (0x00E2 - 0x0088)
class USFXDamageType : public UDamageType
{
public:
	TArray< struct FHitReactionSet >                   HitReactions;                                     		// 0x0088 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FResistanceInfo                             Resistance;                                       		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              WoundPct;                                         		// 0x00A0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DamageRadius;                                     		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              HeadGibChance;                                    		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      ShieldHitFFWaveform;                              		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_DeathEffect;                                   		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                DeathEffectPriority;                              		// 0x00B4 (0x0004) [0x0000000000000000]              
	class URvrClientEffectInterface*                   CE_PlayerFrameBufferEffect;                       		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              Range_Melee;                                      		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Range_Short;                                      		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Range_Medium;                                     		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Range_Long;                                       		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlinchChance;                                     		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlinchDistance;                                   		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              SourceDisplayName;                                		// 0x00D4 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 DeathSoundEffect;                                 		// 0x00D8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSpawnWeaponImpacts : 1;                          		// 0x00DC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIgnoreShields : 1;                               		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPartBasedDamageDisabled : 1;                     		// 0x00DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bHealthDamage : 1;                                		// 0x00DC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDamagesFriends : 1;                              		// 0x00DC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCanGibHead : 1;                                  		// 0x00DC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bIsMelee : 1;                                     		// 0x00DC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bCausesNormalizedDamage : 1;                      		// 0x00DC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bUsesDamageScaling : 1;                           		// 0x00DC (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bIgnoreDamageGating : 1;                          		// 0x00DC (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bAlwaysPlayHitReact : 1;                          		// 0x00DC (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bCriticalHit : 1;                                 		// 0x00DC (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bMPKillDamage : 1;                                		// 0x00DC (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bCausesRagdoll : 1;                               		// 0x00DC (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bCausesRagdollOnDeath : 1;                        		// 0x00DC (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bDisableAIControl : 1;                            		// 0x00DC (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bImmediateDeath : 1;                              		// 0x00DC (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bIgnoresCoverDirection : 1;                       		// 0x00DC (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bNoShake : 1;                                     		// 0x00DC (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bCorpseDestroyedOnDeath : 1;                      		// 0x00DC (0x0004) [0x0000000000000002] [0x00080000] ( CPF_Const )
	unsigned char                                      FalloffType;                                      		// 0x00E0 (0x0001) [0x0000000000000000]              
	unsigned char                                      WoundDamage;                                      		// 0x00E1 (0x0001) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1384 ];

		return pClassPointer;
	};

	float CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc );
	void ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc );
	bool CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer );
};

UClass* USFXDamageType::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_Suicide
// 0x0000 (0x00E2 - 0x00E2)
class USFXDamageType_Suicide : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1385 ];

		return pClassPointer;
	};

	float CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc );
	void ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc );
	bool CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer );
};

UClass* USFXDamageType_Suicide::pClassPointer = NULL;

// Class SFXGame.SFXGRI
// 0x0059 (0x02B1 - 0x0258)
class ASFXGRI : public AGameReplicationInfo
{
public:
	struct FScriptDelegate                             __GenericTimerCallback__Delegate;                 		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      DifficultyHandlerClass;                           		// 0x0264 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      VocManagerClass;                                  		// 0x0268 (0x0004) [0x0000000000000000]              
	class ASFXObjectPool*                              ObjectPool;                                       		// 0x026C (0x0004) [0x0000000000000000]              
	class ASFXPreAsyncWorkTicker*                      PreAsyncWorker;                                   		// 0x0270 (0x0004) [0x0000000000000000]              
	class ASFXDuringAsyncWorkTicker*                   DuringAsyncWorker;                                		// 0x0274 (0x0004) [0x0000000000000000]              
	class USFXGameConfig*                              gameconfig;                                       		// 0x0278 (0x0004) [0x0000000000000000]              
	float                                              StormStamina;                                     		// 0x027C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StormRegen;                                       		// 0x0280 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StormStaminaNonCombat;                            		// 0x0284 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StormRegenNonCombat;                              		// 0x0288 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HackCrouchCoverOffset;                            		// 0x028C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class ASFXVocalizationManager*                     VocManager;                                       		// 0x0290 (0x0004) [0x0000000000000000]              
	class USFXMarkerModuleManager*                     MarkerModuleManager;                              		// 0x0294 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXDifficultyHandler*                       DifficultyHandler;                                		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class Asfxwavecoordinator*                         WaveCoordinator;                                  		// 0x029C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              WaveDelay;                                        		// 0x02A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class URvrClientEffectManager*                     m_pClientEffectManager;                           		// 0x02A4 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class URvrClientEffectPool*                        m_pClientEffectPool;                              		// 0x02A8 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bCanSpawnHenchmen : 1;                            		// 0x02AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPlayerCanChangeSquad : 1;                        		// 0x02AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPauseForCommand : 1;                             		// 0x02AC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAllowTimeDilation : 1;                           		// 0x02AC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bAlwaysInCombat : 1;                              		// 0x02AC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bMultiplayer : 1;                                 		// 0x02AC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bIsMultiplayerCharacter : 1;                      		// 0x02AC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bCanShowMap : 1;                                  		// 0x02AC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bCanShowCodex : 1;                                		// 0x02AC (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bCanShowJournal : 1;                              		// 0x02AC (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bCanSave : 1;                                     		// 0x02AC (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bInCombat : 1;                                    		// 0x02AC (0x0004) [0x0000000000002020] [0x00000800] ( CPF_Net | CPF_Transient )
	unsigned long                                      bForceCombat : 1;                                 		// 0x02AC (0x0004) [0x0000000000002020] [0x00001000] ( CPF_Net | CPF_Transient )
	unsigned long                                      EnableDamage : 1;                                 		// 0x02AC (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bForceOperationWave : 1;                          		// 0x02AC (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned char                                      MaxUniquePlayers;                                 		// 0x02B0 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1386 ];

		return pClassPointer;
	};

	float GetTeamScore ( );
	bool RandomFactionChosen ( );
	bool RandomMapChosen ( );
	bool IsGameOver ( );
	bool ClearGenericTimer ( struct FScriptDelegate Callback );
	bool SetGenericTimer ( float InRate, struct FScriptDelegate Callback );
	void GenericTimer ( );
	void GenericTimerCallback ( );
	void OnMissionComplete ( );
	int GetMapID ( );
	int GetEnemyWaveTypeID ( );
	void SetMatchMinuteCounter ( int MatchTime );
	void CopyProperties ( class ASFXGRI* OldGRI );
	bool HasSquadMedal ( int Medal );
	void AddSquadMedal ( int Medal, int ReplaceMedal );
	bool IsJoinInProgress ( );
	void CreateWaveCoordinator ( class UClass* WaveCoordinatorClass );
	class USFXMPEventTicker* GetEventTicker ( );
	class Usfxscoremanager* GetScoreManager ( );
	bool IsOperationWave ( );
	bool eventGetPlayerLevel ( int ControllerId, int* PlayerLevel );
	int NumPlayersInGame ( );
	int NumLivingPlayers ( );
	class APawn* NextLivingPlayer ( );
	bool ModifyDamage ( struct FVector Momentum, class UClass* DamageType, class AActor* injured, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FDamageCalculationAlgorithm* DamageCalc );
	void PlayTransientSound ( class UWwiseBaseSoundObject* InWwiseEvent, struct FVector SoundLocation, TArray< struct FString > RTPCName, TArray< float > RTPCValue );
	bool eventInCombat ( );
	void eventClearAllMarkerActors ( );
	void eventTriggerVocalizationEvent ( unsigned char VocalizationID, class ABioPawn* instigatedBy, class ABioPawn* Recipient, float Delay, float fChanceToPlayModifier, unsigned long bReplicated );
	void eventDestroyed ( );
	void PostBeginPlay ( );
	void DestroyLoadMovieAudio ( );
};

UClass* ASFXGRI::pClassPointer = NULL;

// Class SFXGame.SFXDifficultyHandler
// 0x008E (0x00CA - 0x003C)
class USFXDifficultyHandler : public UObject
{
public:
	TArray< struct FDifficultySettings >               Level1DifficultyData;                             		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FDifficultySettings >               Level2DifficultyData;                             		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FDifficultySettings >               Level3DifficultyData;                             		// 0x0054 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FDifficultySettings >               Level4DifficultyData;                             		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FDifficultySettings >               Level5DifficultyData;                             		// 0x006C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                CurrentLevel;                                     		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                MaxPlayerLevel;                                   		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DifficultyScore;                                  		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              StoppingPowerScalar;                              		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              OutHenchDamageScale;                              		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OutAIDamageScale;                                 		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AmmoPct;                                          		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                GrenadesPerDrop;                                  		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              DownedDistanceRange;                              		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              ShieldRegenPct;                                   		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              ShieldRegenDelay;                                 		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              PartialShieldRegenDelay;                          		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              CoverDamageReduction;                             		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              NoCoverDamageBonus;                               		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              ReviveDamageReductionLength;                      		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              ReviveDamageReductionAmount;                      		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              MaxSwarmers;                                      		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              PlayerPartyHealthGateDuration;                    		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              PlayerPartyShieldGateDuration;                    		// 0x00C0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNeedsUpdate : 1;                                 		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      CurrentDifficulty;                                		// 0x00C8 (0x0001) [0x0000000000000000]              
	unsigned char                                      NormalizedDifficulty;                             		// 0x00C9 (0x0001) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1387 ];

		return pClassPointer;
	};

	void UpdateDifficultyScore ( );
	void Update ( );
	float GetMaxFloat ( struct FName PropertyName, struct FName DifficultyCategory );
	float GetMinFloat ( struct FName PropertyName, struct FName DifficultyCategory );
	float GetFloatAtDifficulty ( struct FName PropertyName, struct FName DifficultyCategory, unsigned char Difficulty, float Score );
	float GetFloat ( struct FName PropertyName, struct FName DifficultyCategory );
	float GetFloatNormalized ( struct FName PropertyName, struct FName DifficultyCategory );
	bool GetBool ( struct FName PropertyName, struct FName DifficultyCategory );
	class USFXDifficultyHandler* GetDifficultyHandler ( );
};

UClass* USFXDifficultyHandler::pClassPointer = NULL;

// Class SFXGame.SFXDoorMarker
// 0x000C (0x02D0 - 0x02C4)
class ASFXDoorMarker : public ANavigationPoint
{
public:
	class ASFXDoor*                                    MyDoor;                                           		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nUnblockCount;                                    		// 0x02C8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bWaitUntilCompletelyOpened : 1;                   		// 0x02CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitiallyClosed : 1;                             		// 0x02CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockedWhenClosed : 1;                           		// 0x02CC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDoorOpen : 1;                                    		// 0x02CC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bTempDisabledCollision : 1;                       		// 0x02CC (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bPrevBlockedState : 1;                            		// 0x02CC (0x0004) [0x0000000000002002] [0x00000020] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1388 ];

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
	bool ProceedWithMove ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void DoorClosed ( );
	void DoorOpened ( );
	void eventPostBeginPlay ( );
	void UpdateConnectingPaths ( );
	int RestoreDoorMarkerBlockedState ( );
	int UnblockDoorMarker ( );
};

UClass* ASFXDoorMarker::pClassPointer = NULL;

// Class SFXGame.SFXDummyWeaponFireActor
// 0x0012 (0x0208 - 0x01F6)
class ASFXDummyWeaponFireActor : public AActor
{
public:
	class USFXSeqAct_DummyWeaponFire*                  FireAction;                                       		// 0x01F8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AActor*                                      OriginActor;                                      		// 0x01FC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AActor*                                      TargetActor;                                      		// 0x0200 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ShotCount;                                        		// 0x0204 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1389 ];

		return pClassPointer;
	};

	void eventNotifyShotFired ( class AActor* InOriginActor, class AActor* InTargetActor );
	void eventDestroyed ( );
	void eventTick ( float DeltaTime );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFXDummyWeaponFireActor::pClassPointer = NULL;

// Class SFXGame.SFXDuringAsyncWorkTicker
// 0x0046 (0x023C - 0x01F6)
class ASFXDuringAsyncWorkTicker : public AActor
{
public:
	TArray< struct FSFXDuringAsyncWorkQueuedImpactPSC > QueuedImpactPSCs;                                 		// 0x01F8 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< struct FSFXDuringAsyncWorkQueuedImpactDecal > QueuedImpactDecals;                               		// 0x0204 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< struct FSFXDuringAsyncWorkQueuedTracer >   QueuedTracers;                                    		// 0x0210 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXDuringAsyncWorkQueuedEffect >   QueuedEffects;                                    		// 0x021C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              PSCCullDistance;                                  		// 0x0228 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DecalCullDistanceBase;                            		// 0x022C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TracerCullDistance;                               		// 0x0230 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LocalPlayerCullDistanceBias;                      		// 0x0234 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bNoQueuedImpactPSCs : 1;                          		// 0x0238 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNoQueuedImpactDecals : 1;                        		// 0x0238 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNoQueuedTracers : 1;                             		// 0x0238 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNoQueuedEffects : 1;                             		// 0x0238 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bUseLocalPawnLocation : 1;                        		// 0x0238 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bNoPSCCull : 1;                                   		// 0x0238 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bNoDecalCull : 1;                                 		// 0x0238 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bNoTracerCull : 1;                                		// 0x0238 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bNoEffectCull : 1;                                		// 0x0238 (0x0004) [0x0000000000000000] [0x00000100] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1390 ];

		return pClassPointer;
	};

	void eventSetEffectLifetime ( class AEmitter* Emit, float Lifetime );
	void SpawnEffectAtLocation ( class AActor* inInstigator, class UParticleSystem* Effect, struct FVector EffectLocation, struct FRotator EffectRotation, float Lifetime, float Scale );
	void SpawnTracer ( class AActor* inInstigator, class UStaticMesh* TracerMesh, class UParticleSystem* TracerVFX, struct FVector TracerScale3D, float TracerSpeed, float TracerSpawnOffset, struct FVector StartLocation, struct FVector HitLocation );
	void SpawnImpactDecalAtLocation ( class AActor* inInstigator, class UMaterialInterface* ImpactDecalMaterial, struct FVector ImpactLocation, struct FVector ImpactNormal, float ImpactDecalWidth, float ImpactDecalHeight, float ImpactDecalFarPlane, unsigned long ImpactDecalNoClip, float ImpactDecalFadeTime, TArray< struct FName >* ImpactDecalFadingParameters );
	void SpawnImpactDecal ( class AActor* inInstigator, class UMaterialInterface* ImpactDecalMaterial, float ImpactDecalWidth, float ImpactDecalHeight, float ImpactDecalFarPlane, unsigned long ImpactDecalNoClip, float ImpactDecalFadeTime, struct FImpactInfo* Impact, TArray< struct FName >* ImpactDecalFadingParameters );
	void SpawnImpactEffectAtLocation ( class AActor* inInstigator, class UParticleSystem* Effect, class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, class UPrimitiveComponent* HitComponent, struct FName HitBoneName, float Scale, struct FName VectorParameterName, struct FVector VectorParameter );
	void SpawnImpactEffect ( class AActor* inInstigator, class UParticleSystem* Effect, float ImpactScale, struct FImpactInfo* Impact );
};

UClass* ASFXDuringAsyncWorkTicker::pClassPointer = NULL;

// Class SFXGame.SFXEngine
// 0x0309 (0x0A52 - 0x0749)
class USFXEngine : public UGameEngine
{
public:
	struct FUniqueNetId                                m_oInitialPlayerID;                               		// 0x074C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FUniqueNetId                                m_oProfilePlayerID;                               		// 0x0754 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FDouble                                     LoadMapTimeStamp;                                 		// 0x075C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FQWord                                      LoadMapFrameCounter;                              		// 0x0764 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FPlayerInfoEx                               DefaultPlayer;                                    		// 0x076C (0x0040) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	struct FPlayerInfoEx                               ProgressPlayer;                                   		// 0x07AC (0x0040) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPlayerInfoEx                               NewPlayer;                                        		// 0x07EC (0x0040) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGalaxyMapSaveRecord                        SavedGalaxyMapRecord;                             		// 0x082C (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGuid >                             DeadPawnList;                                     		// 0x0844 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGuid >                             UseModuleList;                                    		// 0x0850 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FLevelTreasureSaveRecord >          SavedTreasure;                                    		// 0x085C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FKismetBoolSaveRecord >             SavedKismetList;                                  		// 0x0868 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FHenchmanSaveRecord >               HenchmanRecords;                                  		// 0x0874 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FDoorSaveRecord >                   SavedDoorList;                                    		// 0x0880 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPlaceableSaveRecord >              SavedPlaceableList;                               		// 0x088C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           CorruptedCareers;                                 		// 0x0898 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSFXCareerCacheEntry >              CareerCache;                                      		// 0x08A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScriptDelegate                             ResumeGameCompleteDelegate;                       		// 0x08B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           MultiDisc1;                                       		// 0x08BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           MultiDisc2;                                       		// 0x08C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< unsigned char >                            PlayerLoadoutGroups;                              		// 0x08D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FWeaponModSaveRecord >              PlayerWeaponMods;                                 		// 0x08E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDynamicLoadInfo >                  DynamicLoadMapping;                               		// 0x08EC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSeekfreeCommonPackageInfo >        SeekfreeCommonPackageMap;                         		// 0x08F8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FPackageRemapInfo >                 DynamicLoadPackageRemapping;                      		// 0x0904 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      AsyncLoadingMapping;                              		// 0x0910 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sLastNetworkError;                                		// 0x091C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LoadMapFrom;                                      		// 0x0928 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           SFXUniqueIDs;                                     		// 0x0934 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FPostShipObjectFix >                PostShipObjectFixes;                              		// 0x0940 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __SFXSaveCommandCallback__Delegate;               		// 0x094C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnResumeGameComplete__Delegate;                 		// 0x0958 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0964 (0x003C) UNKNOWN PROPERTY: MapProperty SFXGame.SFXEngine.PlayerVariables
	struct FName                                       PlayerLoadoutWeapons[ 0x6 ];                      		// 0x09A0 (0x0030) [0x0000000000000000]              
	struct FName                                       m_DesiredStartPoint;                              		// 0x09D0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                GUIMultiDisplayMaxWidth;                          		// 0x09D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GUIMultiDisplayBezelTolerance;                    		// 0x09DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastSaveTime;                                     		// 0x09E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastSecondsPlayed;                                		// 0x09E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentDeviceID;                                  		// 0x09E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentLoadingTip;                                		// 0x09EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXSaveGame*                                CurrentSaveGame;                                  		// 0x09F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXSaveGame*                                LegacyImportSaveGame;                             		// 0x09F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXSaveGame*                                PlusImportSaveGame;                               		// 0x09F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              AutoSaveInsufficientSpaceText;                    		// 0x09FC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              QuickSaveInsufficientSpaceText;                   		// 0x0A00 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              InsufficentSpaceAcknowledgedText;                 		// 0x0A04 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class USFXOnlinePlayerStorage*                     OnlinePlayerStorage;                              		// 0x0A08 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXSaveManagerMP*                           MPSaveManager;                                    		// 0x0A0C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXAccomplishmentManager*                   AccomplishmentManager;                            		// 0x0A10 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXTelemetry*                               Telemetry;                                        		// 0x0A14 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class Usfxhostmigration*                           HostMigration;                                    		// 0x0A18 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              CorruptCareerWarningText;                         		// 0x0A1C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              ConfirmDeleteCorruptText;                         		// 0x0A20 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              CancelDeleteCorruptText;                          		// 0x0A24 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              LastCantContinueTime;                             		// 0x0A28 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              srCantContinueErrorMessage;                       		// 0x0A2C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LoadingScreenTimeout;                             		// 0x0A30 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DebugLoadingScreenTimeout;                        		// 0x0A34 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DesiredLoadingScreenTimeout;                      		// 0x0A38 (0x0004) [0x0000000000000000]              
	float                                              ActualLoadingScreenTimeout;                       		// 0x0A3C (0x0004) [0x0000000000000000]              
	int                                                Player1ControllerID;                              		// 0x0A40 (0x0004) [0x0000000000000000]              
	class USFXAsyncAssetLoader*                        AsyncAssetLoader;                                 		// 0x0A44 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXLoadMovieManager*                        LoadMovieManager;                                 		// 0x0A48 (0x0004) [0x0000000004402009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      CopySaveToSkynet : 1;                             		// 0x0A4C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      GenerateQASaveLibrary : 1;                        		// 0x0A4C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bEnableAccomplishmentManager : 1;                 		// 0x0A4C (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bEnableFastResume : 1;                            		// 0x0A4C (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bCanWriteSaveToStorage : 1;                       		// 0x0A4C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bQuickSaveInProgress : 1;                         		// 0x0A4C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bPendingRemountDLC : 1;                           		// 0x0A4C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bPendingSaveProfile : 1;                          		// 0x0A4C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bPendingDisableAutoSave : 1;                      		// 0x0A4C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bFlushInputRequested : 1;                         		// 0x0A4C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bPlayerNeedsLoad : 1;                             		// 0x0A4C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bPlayerLoadPosition : 1;                          		// 0x0A4C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bMPTransitionToEntryMenu : 1;                     		// 0x0A4C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      m_bRenderingSuspended : 1;                        		// 0x0A4C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      m_bProfileInitialized : 1;                        		// 0x0A4C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bHasProfileCantContinueError : 1;                 		// 0x0A4C (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bDisableProfileReconnection : 1;                  		// 0x0A4C (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bNewPlayer : 1;                                   		// 0x0A4C (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bInitPlayer : 1;                                  		// 0x0A4C (0x0004) [0x0000000000006000] [0x00040000] ( CPF_Transient | CPF_Config )
	unsigned long                                      bGameInProgress : 1;                              		// 0x0A4C (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bUsedSetMission : 1;                              		// 0x0A4C (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bSimulatedNetworkError : 1;                       		// 0x0A4C (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      LoadMapWithFastResume : 1;                        		// 0x0A4C (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      DebugTraceBlockingSeekFreeLoad : 1;               		// 0x0A4C (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bUploadFaceCodesToBlaze : 1;                      		// 0x0A4C (0x0004) [0x0000000000004002] [0x01000000] ( CPF_Const | CPF_Config )
	unsigned char                                      PendingModeToRemove;                              		// 0x0A50 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      eNetworkErrorStatus;                              		// 0x0A51 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1391 ];

		return pClassPointer;
	};

	void HandleAFKTimeout ( );
	void AddWeaponToPlayerLoadout ( struct FName WeaponClassName );
	void eventLoadingScreenStarted ( );
	class ABioWorldInfo* GetRealWorldInfo ( );
	void SetLoadingScreenTimeout ( float inTimeout );
	void HandleLoadingScreenTimeout ( );
	void eventLoadingScreenTimedOut ( unsigned char WaitMessage );
	bool eventIsDemo ( );
	void ValidateNetObjectIndex ( );
	bool HasRequiredDLC ( TArray< int >* ModuleIDs );
	bool HasDLC ( int ModuleID );
	void GetNetworkPerfStats ( int* NumConnection, int* AvrOutBytesPerSecond, int* PeekOutBytesPerSecond, int* AvrPing );
	void ClearNetworkPerfStats ( );
	struct FString GetStrFromSFXUniqueID ( int UniqueId );
	int GetSFXUniqueIDFromStr ( struct FString Str );
	class USFXEngine* GetSFXEngine ( );
	void CloseGameAfterOriginShutdown ( );
	void OnSaveGameCompleteAfterOriginShutdown ( struct FSFXSaveGameCommandEventArgs Args );
	void OnOriginClosed ( );
	void eventRegisterOriginEvents ( );
	struct FString eventGetHostMigrationMapName ( );
	bool eventIsReadyToBeHost ( );
	void eventEnableRestorationForHostMigration ( unsigned long bEnable );
	class Usfxhostmigration* InitHostMigration ( class UClass* InstanceClass );
	class USFXAsyncAssetLoader* GetAsyncAssetLoader ( );
	void SetLanguageForSpeech ( struct FString Language, unsigned long UpdateProfile );
	void SetLanguageForText ( struct FString Language, unsigned long UpdateProfile );
	void SetLanguageForVO ( struct FString Language, unsigned long UpdateProfile );
	void SuspendBlazeServerPing ( unsigned long suspend );
	bool IsDemoMode ( );
	bool HasCommandlineOption ( struct FString Option );
	bool IsStreamingWhileInGame ( );
	bool IsInCombatMode ( );
	bool IsInCinematicMode ( );
	void SendAndResetSkynetFPS ( struct FName TriggerName, struct FName StateName, struct FName TierName, struct FName InChunkName, unsigned long bIsFloor );
	bool DoesPackageExist ( struct FString PackageName );
	struct FString GetDisconnectFallbackMap ( );
	void SetBlockOnStreaming ( );
	void ShowLoadScreen ( struct FString LevelName );
	void CloseLoadScreen ( unsigned long bDelayStopUntilGameHasRendered );
	void QueryPlayerVariables ( struct FString SearchText, TArray< struct FName >* VariableNames );
	void SetPlayerVariable ( struct FName VariableName, int VariableValue );
	int GetPlayerVariable ( struct FName VariableName );
	void FlushIOHandles ( );
	void BioShowDebugMessageBox ( struct FString sMessage );
	bool FindCurrentSaveDevice ( );
	bool IsCurrentDeviceValid ( );
	void ForceGUIUpdate ( );
	float GetCurrentTime ( );
	float GetPlayTimeSeconds ( );
	void LoadPlayerWeapons ( );
	void LoadPlayer ( );
	int GetCurrentDevice ( );
	void UpdateCurrentDevice ( int DeviceID );
	bool FastResumeGame ( struct FScriptDelegate Callback );
	void LoadSaveFromCallback ( struct FSFXSaveGameCommandEventArgs Args );
	void SlowResumeGameCallback ( struct FSFXSaveGameCommandEventArgs Args );
	void FastResumeGameCallback ( struct FSFXSaveGameCommandEventArgs Args );
	void ResumeGame ( struct FScriptDelegate Callback );
	class USFXProfileSettings* GetProfileSettings ( );
	void HandleNoFreeSpaceCallback ( unsigned long bAPressed, int Context );
	void HandleNoFreeSpace ( unsigned char Type, int AdditionalFreeBytesNeeded );
	void SetCurrentSaveGame ( struct FSFXSaveDescriptor Descriptor );
	void SaveGameCallback ( struct FSFXSaveGameCommandEventArgs Args );
	void UploadFaceCodeToBlaze ( struct FString firstName, struct FString faceCode );
	void QueueSaveGameEx ( struct FSFXSaveDescriptor SaveDescriptor, struct FScriptDelegate Callback );
	void SaveGameEx ( struct FSFXSaveDescriptor SaveDescriptor, struct FScriptDelegate Callback );
	void CheckForCorruptCareers ( );
	bool RemoveCachedCareer ( struct FString Career );
	void ResumeRendering ( );
	void SuspendRendering ( );
	void eventInitializeAccomplishmentManager ( );
	void eventSetupInitialMPCharacters ( );
	void InitializeMPSaves ( );
	void ClearReadPlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadPlayerStorageCompleteDelegate );
	void ReadPlayerStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void eventOnBlazeDisconnect ( );
	bool ReadPlayerStorage ( struct FScriptDelegate ReadPlayerStorageCompleteDelegate );
	void eventInitializePlayerStorage ( );
	void eventInitializeOnlinePlayerStorage ( );
	bool eventHasCantContinueProfileError ( );
	bool eventHasCantContinueError ( );
	void Callback_PlayerLoggedOut ( unsigned long bAPressed, int Context );
	void SetPlayerVariableViaEntitlements ( );
	void SetPlotFlagsViaEntitlements ( class UBioGlobalVariableTable* InTable );
	void Callback_ConfirmDeleteCorruptCareers ( unsigned long bAPressed, int Context );
	void ClearSaveCache ( );
	struct FString ValidCharsFilter ( struct FString Sin, unsigned long bFilterAccentedChars );
	void CacheProfileData ( class USFXProfileSettings* Profile );
	void LoadSaveGame ( class USFXSaveGame* SaveGame );
	bool IsPerformingSaveAction ( unsigned char eAction );
	bool IsSaving ( );
	void ScanSaveDataComplete ( struct FSFXSaveGameCommandEventArgs Args );
	void ScanSaveData ( );
	bool TryGetCachedCareer ( struct FString Career, struct FSFXCareerCacheEntry* OutEntry );
	void UpdateCareerCache ( struct FSFXSaveDescriptor SaveDescriptor, class USFXSaveGame* SaveGame );
	void ImportLegacyCharacter ( class USFXSaveGame* SaveGame );
	void ImportPlusCharacter ( class USFXSaveGame* SaveGame );
	void ResumeSaveGameCommandExecution ( );
	void QueueSaveGameCommandWithLocation ( unsigned char Action, struct FSFXSaveDescriptor SaveDescriptor, struct FVector location, struct FScriptDelegate Callback );
	void QueueSaveGameCommand ( unsigned char Action, struct FSFXSaveDescriptor SaveDescriptor, struct FScriptDelegate Callback );
	void ClearCurrentSaveDescriptor ( );
	struct FSFXSaveDescriptor GetCurrentSaveDescriptor ( );
	bool ParseCareer ( struct FString Career, struct FString* firstName, struct FString* className, unsigned char* Origin, unsigned char* Notoriety, int* Year, int* Month, int* Day, int* MSSinceMidnight );
	void GenerateCareer ( struct FString firstName, struct FString className, unsigned char Origin, unsigned char Notoriety, int Year, int Month, int Day, int MSSinceMidnight, struct FString* OutCareer, struct FString* OutDisplayName );
	void CreateCareerInternal ( struct FString firstName, struct FString className, unsigned char Origin, unsigned char Notoriety, int Year, int Month, int Day, int MSSinceMidnight, struct FScriptDelegate Callback );
	void CreateCareer ( struct FString firstName, void* srClass, unsigned char Origin, unsigned char Notoriety, struct FScriptDelegate Callback );
	void OnResumeGameComplete ( unsigned long bWasSuccessful );
	void SFXSaveCommandCallback ( struct FSFXSaveGameCommandEventArgs Args );
	float CurrentSystemTimeSeconds ( );
	struct FDynamicLoadInfo GetDynamicLoadMappingInfoByNetID ( int ObjectNetID );
	struct FDynamicLoadInfo GetDynamicLoadMappingInfo ( struct FString ObjectName );
	class UObject* GetSeekFreeObject ( struct FString ObjectName, class UClass* ObjectClass );
	class UObject* GetSeekFreeObjectByName ( struct FName ObjectName, class UClass* ObjectClass );
	bool AreGoBigFeaturesEnabled ( );
	bool IsPostShipFeatureSetEnabled ( unsigned char nFeatureSet );
	struct FGuid CreateGUID ( );
	void ReplicateReleaseSeekFreeObject ( int ObjectIndex );
	void ReplicateLoadSeekFreeObject ( int ObjectIndex );
	void ReleaseSeekFreeObjectByNetID ( int ObjectNetID );
	void ReleaseSeekFreeObject ( struct FString ObjectName );
	class UObject* LoadSeekFreeObjectAsyncByNetID ( int ObjectNetID, class UClass* ObjectClass, unsigned char* Status );
	class UObject* LoadSeekFreeObjectAsync ( struct FString ObjectName, class UClass* ObjectClass, unsigned char* Status );
	class UObject* LoadSeekFreeObjectBlocking ( struct FString ObjectName, class UClass* ObjectClass );
	bool IsSeekFreeObjectSupported ( struct FString ObjectName );
	void LaunchUnreaperWithDiscCheck ( );
	void LaunchUnreaper ( );
	void ReLaunchExecutable ( );
	struct FPlayerInfoEx CurrentPlayerInfo ( );
	int GetLocalPlayerControllerId ( );
};

UClass* USFXEngine::pClassPointer = NULL;

// Class SFXGame.SFXGalaxyMapObject
// 0x0073 (0x00AF - 0x003C)
class USFXGalaxyMapObject : public UObject
{
public:
	struct FString                                     Tag;                                              		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class USFXGalaxyMapObject* >               Children;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UActorComponent* >                   TemporaryComponents;                              		// 0x0054 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FName                                       VisitedEvent;                                     		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       VisitedEventParam;                                		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                PosX;                                             		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                PosY;                                             		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                TableID;                                          		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              DisplayName;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Scale;                                            		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXGalaxyMapObjectAppearanceBase*           Appearance;                                       		// 0x0084 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	int                                                nPreviouslySelectedIndex;                         		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                VisibleConditional;                               		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                VisibleParameter;                                 		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                UsableConditional;                                		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                UsableParameter;                                  		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fScanDetectionRange;                            		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AActor*                                      ObjectActor;                                      		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      VirtualObject : 1;                                		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      ActorSpawned : 1;                                 		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      VisibleConditionalRegion;                         		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      VisibleConditionalPlot;                           		// 0x00A9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      VisibleConditionalName;                           		// 0x00AA (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UsableConditionalRegion;                          		// 0x00AB (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UsableConditionalPlot;                            		// 0x00AC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UsableConditionalName;                            		// 0x00AD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MapObjectLevel;                                   		// 0x00AE (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1392 ];

		return pClassPointer;
	};

	int EncodeWorldID ( int nCluster, int nSystem, int nPlanet );
	void DecodeWorldID ( int nWorldID, int* nCluster, int* nSystem, int* nPlanet );
	int GetPlanetFromID ( int nWorldID );
	int GetSystemFromID ( int nWorldID );
	int GetClusterFromID ( int nWorldID );
	void CleanActor ( class AActor* oActorToClean );
	void eventAssociateActor ( struct FName nmAssociation, class AActor* oActor );
	bool eventIsSelectable ( );
	bool eventBuildPlotLabelList ( unsigned char eMapLevel, TArray< void* >* aPlotNames );
	bool HasFeaturesToCountForExploration ( );
	void CountObjectsForExploration ( unsigned char eMapLevel, int* nObjectCount, int* nExploredCount );
	float eventGetExploredPercent ( unsigned char eMapLevel );
	void eventDetachTemporaryComponent ( class UActorComponent* oComponent );
	void eventAttachTemporaryComponent ( class UActorComponent* oComponent );
	void eventCleanTransientData ( );
	class AActor* SpawnGalaxyActor ( class UClass* oActorClass, struct FVector vLocation, struct FName nmTag );
	void eventInitObjectActor ( class AActor* pActor, class UBioCameraBehaviorGalaxy* pGalaxy );
	class AActor* eventSpawn ( class UBioCameraBehaviorGalaxy* pGalaxy, struct FVector vLocation, struct FName nmTag );
	void eventOnScanned ( class UObject* oScanInstigator, struct FVector vScanOrigin );
	bool eventCanBeScanned ( );
	class UBioCameraBehaviorGalaxy* GetGalaxyBehavior ( );
	bool eventMapTagIsVisible ( );
	bool eventIsVisitedInMap ( );
	void* eventGetMapTag ( );
	void eventObjectLeft ( );
	void eventObjectVisited ( );
	bool eventIsUsable ( );
	bool eventIsVisible ( );
	struct FVector eventGetSpawnLocation ( struct FVector vMapCenter );
	float GetLevelSize ( );
	void Tick ( class UBioCameraBehaviorGalaxy* oGalaxy, float fDeltaT );
	void eventTickChildren ( class UBioCameraBehaviorGalaxy* oGalaxy, float fDeltaT );
	class USFXGalaxyMapObject* GetChildWithID ( int nTableId );
	int CountChildren ( class UClass* childClassType );
	struct FString eventGetEditorLabel ( );
	void eventSetEditorPosition ( int nX, int nY );
	void eventInitializeAppearance ( );
	void eventOnEditorCreate ( );
	void eventRemoveChild ( class USFXGalaxyMapObject* Child );
	void eventAddChild ( class USFXGalaxyMapObject* oChild );
	class USFXGalaxyMapObject* CreateChild ( class UClass* childClass );
};

UClass* USFXGalaxyMapObject::pClassPointer = NULL;

// Class SFXGame.SFXCluster
// 0x0051 (0x0100 - 0x00AF)
class USFXCluster : public USFXGalaxyMapObject
{
public:
	TArray< class USFXSystem* >                        Systems;                                          		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFXCluster* >                       RelayConnections;                                 		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FLinearColor                                StarColor;                                        		// 0x00C8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                StarColor2;                                       		// 0x00D8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  ClusterTexture;                                   		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NebularDensity;                                   		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CloudTile;                                        		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereIntensity;                                  		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereSize;                                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ExploredCluster : 1;                              		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1393 ];

		return pClassPointer;
	};

	void CountObjectsForExploration ( unsigned char eMapLevel, int* nObjectCount, int* nExploredCount );
	bool eventIsReaperControlled ( );
	float GetLevelSize ( );
	void EnumerateSystems ( );
	void eventRemoveChild ( class USFXGalaxyMapObject* Child );
	void eventAddChild ( class USFXGalaxyMapObject* oChild );
};

UClass* USFXCluster::pClassPointer = NULL;

// Class SFXGame.SFXGalaxy
// 0x0011 (0x00C0 - 0x00AF)
class USFXGalaxy : public USFXGalaxyMapObject
{
public:
	TArray< class USFXCluster* >                       Clusters;                                         		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fGalaxyRadius;                                  		// 0x00BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1394 ];

		return pClassPointer;
	};

	float GetLevelSize ( );
	void eventEnumerateClusters ( );
	void eventRemoveChild ( class USFXGalaxyMapObject* Child );
	void eventAddChild ( class USFXGalaxyMapObject* oChild );
};

UClass* USFXGalaxy::pClassPointer = NULL;

// Class SFXGame.SFXPlanetFeature
// 0x0051 (0x0100 - 0x00AF)
class USFXPlanetFeature : public USFXGalaxyMapObject
{
public:
	struct FString                                     RTPCName;                                         		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     LandingSiteMapName;                               		// 0x00BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     Position;                                         		// 0x00C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                FeatureTransition;                                		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                FeatureTransitionParameter;                       		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       StartEvent;                                       		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       StopEvent;                                        		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              LandingSiteText;                                  		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FeatureMarker;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MarkerScale;                                      		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    ParticleComponent;                                		// 0x00F0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                ScaledAmount;                                     		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      CritPathFeature : 1;                              		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      Hidden : 1;                                       		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      FeatureType;                                      		// 0x00FC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FeatureTransitionRegion;                          		// 0x00FD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FeatureTransitionPlot;                            		// 0x00FE (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FeatureTransitionName;                            		// 0x00FF (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1395 ];

		return pClassPointer;
	};

	bool IsProbeable ( );
	bool eventBuildPlotLabelList ( unsigned char eMapLevel, TArray< void* >* aPlotNames );
	void eventCleanTransientData ( );
	bool ShouldShowFeatureMarker ( );
	void LeftScanMode ( );
	void EnteredScanMode ( );
	void EnableFeatureMarker ( );
	void FeatureProbed ( );
	void* eventGetFeatureText ( );
	void eventPerformTransition ( );
};

UClass* USFXPlanetFeature::pClassPointer = NULL;

// Class SFXGame.SFXSystem
// 0x0068 (0x0117 - 0x00AF)
class USFXSystem : public USFXGalaxyMapObject
{
public:
	TArray< class UBioPlanet* >                        Planets;                                          		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFXGalaxyMapObject* >               aReapersTouchingPlayer;                           		// 0x00BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FLinearColor                                SunColor;                                         		// 0x00C8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                StarColor;                                        		// 0x00D8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                FlareTint;                                        		// 0x00E8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                ActiveWorld;                                      		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fReaperAlertLevel;                              		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ReaperControlCondition;                           		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              m_fReaperGraceTime;                               		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              m_fGameOverFadeTime;                              		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                m_nScannedPlanets;                                		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bHasMassRelay : 1;                              		// 0x0110 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bShowNebula : 1;                                		// 0x0110 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bReapersChasePlayer : 1;                        		// 0x0110 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bSystemReapersActive : 1;                       		// 0x0110 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bReapersHaveBeenDetected : 1;                   		// 0x0110 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned char                                      ReaperControlConditionRegion;                     		// 0x0114 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ReaperControlConditionPlot;                       		// 0x0115 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ReaperControlConditionName;                       		// 0x0116 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1396 ];

		return pClassPointer;
	};

	void SystemObjectScanned ( class USFXSystemLevelObject* oSrc );
	void ReaperUnTouched ( class USFXGalaxyMapObject* oReaper );
	void ReaperTouched ( class USFXGalaxyMapObject* oReaper );
	void ReaperGameOver ( );
	void ReaperCaughtPlayer ( );
	void EndReaperGracePeriod ( );
	void BeginReaperGracePeriod ( );
	void eventPlayerEscapedReapers ( );
	void ReaperChaseEnd ( );
	void ReaperChaseStart ( );
	bool eventIsReaperControlled ( );
	bool ShouldCountSystemObjectsForExploration ( );
	void CountObjectsForExploration ( unsigned char eMapLevel, int* nObjectCount, int* nExploredCount );
	bool eventIsMassRelay ( class USFXGalaxyMapObject* o );
	bool eventIsReaper ( class USFXGalaxyMapObject* o );
	bool eventBuildPlotLabelList ( unsigned char eMapLevel, TArray< void* >* aPlotNames );
	void eventObjectLeft ( );
	void eventObjectVisited ( );
	void eventPushReapersToEdgeOfSystem ( struct FVector vCenter, float fSystemRadius );
	bool eventIsVisitedInMap ( );
	bool eventMapTagIsVisible ( );
	class USFXGalaxyMapObject* eventGetMassRelay ( );
	float GetLevelSize ( );
	void EnumeratePlanets ( class USFXCluster* Cluster );
	void eventRemoveChild ( class USFXGalaxyMapObject* Child );
	void eventAddChild ( class USFXGalaxyMapObject* oChild );
	void ResetGlobalReaperAlertLevels ( );
	void SetReaperAlertLevel ( float fLevel );
	void AddReaperAlertValue ( float fReaperValue );
	void eventCleanTransientData ( );
	void SetSaveData ( );
	void LoadSaveData ( );
};

UClass* USFXSystem::pClassPointer = NULL;

// Class SFXGame.SFXSystemLevelObject
// 0x0021 (0x00D0 - 0x00AF)
class USFXSystemLevelObject : public USFXGalaxyMapObject
{
public:
	struct FWwiseAudioPair                             ScanAudio;                                        		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ScanParticleSystem;                               		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              SystemActionButtonText;                           		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ActiveWorld;                                      		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AEmitterSpawnable*                           ScanEmitter;                                      		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseAudioComponent*                        AudioComponent;                                   		// 0x00C8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned long                                      ShowOrbitRing : 1;                                		// 0x00CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      IsActualPlanet : 1;                               		// 0x00CC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bShowAsScanned : 1;                             		// 0x00CC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1397 ];

		return pClassPointer;
	};

	bool HasBeenSystemScanned ( );
	void* eventGetSystemActionButtonText ( );
	void eventObjectVisited ( );
	bool HasBeenScanned ( );
	void SetScannedState ( unsigned long bScanned );
	void eventOnSystemScan ( class UObject* oScanInstigator, struct FVector vScanOrigin );
	bool eventCanBeSystemScanned ( );
	void eventCleanTransientData ( );
	void PlayAudio ( struct FWwiseAudioPair soundPair );
	void RemoveSystemScanMarker ( );
	void SpawnSystemScanMarker ( unsigned long bPlaySound );
};

UClass* USFXSystemLevelObject::pClassPointer = NULL;

// Class SFXGame.BioPlanet
// 0x0104 (0x01D4 - 0x00D0)
class UBioPlanet : public USFXSystemLevelObject
{
public:
	TArray< struct FPlanetSun >                        Suns;                                             		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class USFXPlanetFeature* >                 Features;                                         		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFXPlanetFeature* >                 AutoGrantedFeatures;                              		// 0x00E8 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct FString                                     MapName;                                          		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ImageBackground;                                  		// 0x0100 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     PlanetEvent;                                      		// 0x010C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FLinearColor                                RingColor;                                        		// 0x0118 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CloudColor;                                       		// 0x0128 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CoronaColor;                                      		// 0x0138 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	void*                                              Description;                                      		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              ButtonLabel;                                      		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  PreviewImage;                                     		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              MissionBriefing;                                  		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ResourceRichness;                                 		// 0x0158 (0x0004) [0x0000000000000000]              
	float                                              PlanetRotation;                                   		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Opacity;                                          		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FringeBloom;                                      		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   PlanetMaterial;                                   		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   CloudMaterial;                                    		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPrefab*                                     ScenePrefab;                                      		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  TextureParam;                                     		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RelativeSize;                                     		// 0x0178 (0x0004) [0x0000000000000000]              
	float                                              DefaultDisplaySize;                               		// 0x017C (0x0004) [0x0000000000000000]              
	float                                              TerrainDepthFactor;                               		// 0x0180 (0x0004) [0x0000000000000000]              
	float                                              m_fPlanetScale;                                   		// 0x0184 (0x0004) [0x0000000000000000]              
	float                                              UnscaledMineralsSum;                              		// 0x0188 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlacedMineralsPool;                               		// 0x018C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RandomMineralsBase;                               		// 0x0190 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EezoMineralsBase;                                 		// 0x0194 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ScanBarMaxMineralSize;                            		// 0x0198 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                PlanetLandCondition;                              		// 0x019C (0x0004) [0x0000000000000000]              
	int                                                PlanetEventCondition;                             		// 0x01A0 (0x0004) [0x0000000000000000]              
	int                                                PlanetEventParameter;                             		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PlanetEventTransition;                            		// 0x01A8 (0x0004) [0x0000000000000000]              
	int                                                PlanetEventTransitionParameter;                   		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              PlanetEventMessage;                               		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              PlanetPlotLabel;                                  		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PlanetPlotLabelCondition;                         		// 0x01B8 (0x0004) [0x0000000000000000]              
	class AActor*                                      SystemActorStorage;                               		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      AlreadyExplored : 1;                              		// 0x01C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      LabelAlwaysVisible : 1;                           		// 0x01C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      AlwaysShowMapTag : 1;                             		// 0x01C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bInitialized : 1;                                 		// 0x01C0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      CritPathPlot : 1;                                 		// 0x01C0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      PlanetType;                                       		// 0x01C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      OrbitRing;                                        		// 0x01C5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SystemLevelType;                                  		// 0x01C6 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetLevelType;                                  		// 0x01C7 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetLandConditionRegion;                        		// 0x01C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetLandConditionPlot;                          		// 0x01C9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetLandConditionName;                          		// 0x01CA (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetEventConditionRegion;                       		// 0x01CB (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetEventConditionPlot;                         		// 0x01CC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetEventConditionName;                         		// 0x01CD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetEventTransitionRegion;                      		// 0x01CE (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetEventTransitionPlot;                        		// 0x01CF (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetEventTransitionName;                        		// 0x01D0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetPlotLabelConditionRegion;                   		// 0x01D1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetPlotLabelConditionPlot;                     		// 0x01D2 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetPlotLabelConditionName;                     		// 0x01D3 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1398 ];

		return pClassPointer;
	};

	void CountObjectsForExploration ( unsigned char eMapLevel, int* nObjectCount, int* nExploredCount );
	bool HasFeaturesToCountForExploration ( );
	void OnDisplayPlanetDetails ( class UBioSFHandler_GalaxyMap* oGUI );
	class UTexture2D* GetPlanetViewImage ( );
	struct FString GetPlanetMissionText ( );
	struct FString GetPlanetTitleText ( );
	struct FString GetPlanetDescriptionText ( );
	bool eventIsSelectable ( );
	bool eventBuildPlotLabelList ( unsigned char eMapLevel, TArray< void* >* aPlotNames );
	bool eventShouldDisplayUnknownTag ( );
	bool eventMapTagIsVisible ( );
	void eventCleanTransientData ( );
	bool eventCanBeInteractedWith ( );
	void eventObjectVisited ( );
	void eventLeaveScan ( );
	void eventEnterScan ( );
	void eventLeavePlanetDetailView ( );
	void eventEnterPlanetDetailView ( class AActor* DetailActor );
	bool HasBeenSystemScanned ( );
	void SetSystemScannedState ( unsigned long bScanned );
	void eventOnSystemScan ( class UObject* oScanInstigator, struct FVector vScanOrigin );
	bool eventCanBeSystemScanned ( );
	bool eventCanBeScanned ( );
	bool IsMultiLand ( );
	bool ShouldCountFeature ( class USFXPlanetFeature* oFeatureObj, unsigned char eFeature, unsigned long bCheckUsable, unsigned long bCheckVisible, unsigned long bCheckProbeable );
	int eventCountFeatures ( unsigned char eFeature, unsigned long bCheckUsable, unsigned long bCheckVisible, unsigned long bCheckProbeable );
	struct FVector SphereToPlanePos ( struct FVector vSphere, float SphereRadius );
	struct FVector PlanePosToSphere ( struct FVector vPosition2D, float SphereRadius );
	float GetPlanetSize ( );
	void LoadMultiLandPlanetData ( class AInterpActor* Planet, TArray< class UParticleSystemComponent* >* TempComponents );
	void LoadPlanetData ( class AInterpActor* Planet, TArray< class UParticleSystemComponent* >* TempComponents );
	bool eventIsVisitedInMap ( );
	void LoadProbeImpacts ( TArray< struct FVector >* vImpacts );
	void SaveProbeImpact ( struct FVector vImpact );
	void SetVisited ( unsigned long bVisited );
	bool IsVisited ( );
};

UClass* UBioPlanet::pClassPointer = NULL;

// Class SFXGame.SFXGalaxyMapObjectAppearanceBase
// 0x0038 (0x0074 - 0x003C)
class USFXGalaxyMapObjectAppearanceBase : public UObject
{
public:
	TArray< class UMaterialInterface* >                MaterialOverrides;                                		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FRotator                                    MeshRotation;                                     		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    MeshRotationSpeed;                                		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeshScale;                                        		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 MeshResource;                                     		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               SkeletalMeshResource;                             		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fAccumulatedRotationTime;                       		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      NoAppearance : 1;                                 		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1399 ];

		return pClassPointer;
	};

	void Tick ( class UBioCameraBehaviorGalaxy* pGalaxy, float fDeltaT );
	bool RequiresActor ( );
	void OnObjectSpawned ( class AActor* oObjectActor, class UBioCameraBehaviorGalaxy* pGalaxy );
};

UClass* USFXGalaxyMapObjectAppearanceBase::pClassPointer = NULL;

// Class SFXGame.SFXGame
// 0x02C0 (0x0650 - 0x0390)
class ASFXGame : public AGameInfo
{
public:
	struct FMap_Mirror                                 DecayedCoverMap;                                  		// 0x0390 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class ASFXTeamInfo* >                      Teams;                                            		// 0x03CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MaleActorType;                                    		// 0x03D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FemaleActorType;                                  		// 0x03E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TreasureClassName;                                		// 0x03F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           NewGamePlusPlayerVariables;                       		// 0x03FC (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FTimeDilationStruct >               TimeDilationCurves;                               		// 0x0408 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MAdeptArchName;                                   		// 0x0414 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MEngineerArchName;                                		// 0x0420 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MInfiltratorArchName;                             		// 0x042C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MSentinelArchName;                                		// 0x0438 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MSoldierArchName;                                 		// 0x0444 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MVanguardArchName;                                		// 0x0450 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MAdeptNCArchName;                                 		// 0x045C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MEngineerNCArchName;                              		// 0x0468 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MInfiltratorNCArchName;                           		// 0x0474 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MSentinelNCArchName;                              		// 0x0480 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MSoldierNCArchName;                               		// 0x048C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MVanguardNCArchName;                              		// 0x0498 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MAdeptInjuredArchName;                            		// 0x04A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MEngineerInjuredArchName;                         		// 0x04B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MInfiltratorInjuredArchName;                      		// 0x04BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MSentinelInjuredArchName;                         		// 0x04C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MSoldierInjuredArchName;                          		// 0x04D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MVanguardInjuredArchName;                         		// 0x04E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MCharCreationArchName;                            		// 0x04EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FAdeptArchName;                                   		// 0x04F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FEngineerArchName;                                		// 0x0504 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FInfiltratorArchName;                             		// 0x0510 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FSentinelArchName;                                		// 0x051C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FSoldierArchName;                                 		// 0x0528 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FVanguardArchName;                                		// 0x0534 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FAdeptNCArchName;                                 		// 0x0540 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FEngineerNCArchName;                              		// 0x054C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FInfiltratorNCArchName;                           		// 0x0558 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FSentinelNCArchName;                              		// 0x0564 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FSoldierNCArchName;                               		// 0x0570 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FVanguardNCArchName;                              		// 0x057C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FAdeptInjuredArchName;                            		// 0x0588 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FEngineerInjuredArchName;                         		// 0x0594 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FInfiltratorInjuredArchName;                      		// 0x05A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FSentinelInjuredArchName;                         		// 0x05AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FSoldierInjuredArchName;                          		// 0x05B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FVanguardInjuredArchName;                         		// 0x05C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FCharCreationArchName;                            		// 0x05D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDecayedCover >                     DecayedCoverList;                                 		// 0x05DC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FReputationThreshold >              ReputationThresholds;                             		// 0x05E8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   JoinInProgressDelegates;                          		// 0x05F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnJoinInProgress__Delegate;                     		// 0x0600 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ABioBaseSquad*                               PlayerSquad;                                      		// 0x060C (0x0004) [0x0000000000000000]              
	void*                                              srGameOverString;                                 		// 0x0610 (0x0004) [0x0000000000000000]              
	float                                              fAutoUnlitDownsizeThreshold;                      		// 0x0614 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USFXTreasureData*                            TREASURE;                                         		// 0x0618 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeDilationOverride;                             		// 0x061C (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 StartSlowEvent;                                   		// 0x0620 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 StopSlowEvent;                                    		// 0x0624 (0x0004) [0x0000000000000000]              
	float                                              AdjacentDecayMult;                                		// 0x0628 (0x0004) [0x0000000000000000]              
	int                                                DecayRecoveryPerSecond;                           		// 0x062C (0x0004) [0x0000000000000000]              
	float                                              DecayRecoveryIntervalRemaining;                   		// 0x0630 (0x0004) [0x0000000000000000]              
	int                                                CurrentSmokeCount;                                		// 0x0634 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxSmokeCount;                                    		// 0x0638 (0x0004) [0x0000000000000000]              
	int                                                CurrentSwarmerCount;                              		// 0x063C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentCannibalCount;                             		// 0x0640 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastEnemyGrenadeTimestamp;                        		// 0x0644 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFXAIPerceptionManager*                     PerceptionManager;                                		// 0x0648 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bEnableLowDetailProxySilhouettes : 1;             		// 0x064C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bAutoUnlitDownsizeInCombat : 1;                   		// 0x064C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bDilateSound : 1;                                 		// 0x064C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bGenerateTutorialEvents : 1;                      		// 0x064C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bShowSquadScreenMessageBoxes : 1;                 		// 0x064C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bPerfProto : 1;                                   		// 0x064C (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1400 ];

		return pClassPointer;
	};

	void SetMipFadingValue ( float fNewMipValue );
	float GetMipFadingValue ( );
	void UpdateResourceStreaming ( float fTime, unsigned long bProcessEverything );
	void UnRegisterJoinInProgressDelegate ( struct FScriptDelegate DelegateToRemove );
	void RegisterJoinInProgressDelegate ( struct FScriptDelegate NewDelegate );
	class ABioBaseSquad* SpawnEnemySquad ( );
	void CopyAndUpdateME2ImportData ( class USFXSaveGame* SaveTo, class USFXSaveGame* SaveFrom, struct FPlayerInfoEx PlayerDataOverrides );
	void CopyAndUpdateNewGamePlusData ( class USFXSaveGame* SaveTo, class USFXSaveGame* SaveFrom, struct FPlayerInfoEx PlayerDataOverrides );
	void ClearCrossLevelReferences ( );
	bool AllowCheats ( class APlayerController* P );
	int CalculatedNetSpeed ( );
	int eventGetCurrentMusicPlotStateIndex ( );
	void PostMakeLevelLive ( );
	void RestartFromWave ( int NewWave, struct FString WaveType );
	bool AwardItem ( struct FName ItemName, struct FString Level );
	bool AwardCredits ( int Amount, struct FString Level, unsigned long bShowNotification );
	bool AwardCreditPercent ( float fAmount, struct FString Level, unsigned long bShowNotifications );
	bool AwardXP ( int Amount, struct FString Level, unsigned long bShowNotifications );
	void AddCoverDecay ( class ACoverSlotMarker* CoverMarker, int Amount );
	int GetDownedPlayerCount ( );
	int GetPlayerCount ( );
	void RestartPlayer ( class AController* NewPlayer );
	void Reset ( );
	void StartMatch ( );
	void NotifyStartMatchForTests ( );
	void OnGameCompleted ( int nEndID );
	void SetRenegadePoints ( int nPoints );
	int GetRenegadePoints ( );
	int GetReputationPoints ( );
	void SetParagonPoints ( int nPoints );
	int GetParagonPoints ( );
	int GetME2RenegadePoints ( );
	int GetME2ParagonPoints ( );
	void OnPlayerSquadDeath ( );
	bool CheckGameOver ( );
	void SignalEndGame ( void* GameOverString );
	void GameEnding ( );
	void SpawnGameOverGUI ( );
	void StartFirstUsePowerDelay ( );
	void ToggleCombatOverride ( unsigned long bCombatOverride );
	void CombatEnded ( );
	void CombatStarted ( );
	void ProbeOnCombatEnd ( );
	void ProbeOnCombatBegin ( );
	void OnCombatEnd ( );
	void OnCombatStart ( );
	bool PreventPermanentDeath ( class ABioPawn* KilledPawn );
	bool PreventDeath ( class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );
	void OnTimeDilationChange ( float NewTimeDilation );
	void Tick ( float TimeDelta );
	float UpdateTimeDilationArray ( float TimeDelta );
	void PerformEndGameHandling ( );
	void CancelTimeDilation ( struct FName Identifier );
	void RequestTimeDilation ( struct FInterpCurveFloat Curve, float TotalTime, struct FName Identifier );
	void LoadPackage ( struct FString PackageName );
	void UpdatePlotStateRTPCs ( class UBioGlobalVariableTable* VarTable, class ASFXPawn_Player* Player );
	void UpdatePlotVariables ( class ASFXPawn_Player* Player );
	void eventSpawnPlayerForResume ( class AController* LocalPlayer );
	void HandleBonusPowers ( class Asfxpawn* NewPawn, struct FName BonusTalent );
	class APawn* SpawnNewPlayerPawn ( unsigned long bCombatPawn, unsigned long bInjuredPawn, unsigned long bUseCasualAppearance, int ForcedCasualID, unsigned long bCreateAndShowWeapons, class ABioPlayerController* PC, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void GetPlayerSpawnArchetype ( unsigned long bCombatPawn, unsigned long bInjuredPawn, class APawn** PlayerArchetype, struct FString* firstName, unsigned char* Origin, unsigned char* Notoriety, struct FString* faceCode, struct FGuid* CharacterGUID );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot, unsigned long bNoCollisionFail );
	class APawn* GetPlayerCombatArchetype ( class UClass* CharacterClass, unsigned long bIsFemale );
	class APawn* GetPlayerInjuredArchetype ( class UClass* CharacterClass, unsigned long bIsFemale );
	class APawn* GetPlayerNonCombatArchetype ( class UClass* CharacterClass, unsigned long bIsFemale );
	class UClass* GetCharacterClassByName ( struct FString className );
	unsigned char GetIDByClass ( class UClass* PlayerClass );
	class ASFXPawn_Player* GetPlayer ( int ControllerId );
	void SortActorsByAngle ( struct FVector RefLocation, struct FRotator RefRotation, unsigned long bPreferBioPawns, TArray< class AActor* >* List );
	struct FString GetSimpleString ( int StrRef, unsigned long bParse );
	void SetGameSpeed ( float T );
	bool ChangeTeam ( class AController* Other, int N, unsigned long bNewTeam );
	void InitializeTeams ( );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	void ReCalculate ( struct FScaledFloat* F );
	void OnJoinInProgress ( );
};

UClass* ASFXGame::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect
// 0x0026 (0x0062 - 0x003C)
class USFXGameEffect : public UObject
{
public:
	struct FName                                       Category;                                         		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentTime;                                      		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              EffectValue;                                      		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Owner;                                            		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AController*                                 Instigator;                                       		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Causer;                                           		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPreventGibs : 1;                                 		// 0x005C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bPreventEatable : 1;                              		// 0x005C (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned char                                      DurationType;                                     		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BonusFormula;                                     		// 0x0061 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1401 ];

		return pClassPointer;
	};

	class AController* CheckOwnerInstigator ( class AController* Attacker );
	void SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	class UClass* LoadGameEffectClass ( struct FString GEClassName );
	void OnUnpaused ( );
	void OnPaused ( );
	void OnCombatEnd ( );
	void eventOnRemoved ( );
	void eventOnUpdate ( float DeltaSeconds );
	void OnApplied ( );
	void ComputeCustomEffectValue ( float* Value );
};

UClass* USFXGameEffect::pClassPointer = NULL;

// Class SFXGame.BioPlayerController
// 0x0519 (0x0AFB - 0x05E2)
class ABioPlayerController : public APlayerController
{
public:
	struct FMap_Mirror                                 m_RadarDataMap;                                   		// 0x05E4 (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_DamageIndicatorDataMap;                         		// 0x0620 (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FString                                     MPSeamlessTravelDelayURL;                         		// 0x065C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ASFXOutlineGlowActorBase* >          OutlineGlowActors;                                		// 0x0668 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FLocalEnemy >                       EnemyList;                                        		// 0x0674 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StormRTPCName;                                    		// 0x0680 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      TutorialIDs;                                      		// 0x068C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class ABioPawn* >                          m_AccomplishmentTargets;                          		// 0x0698 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      m_anRecoveredRadarIndexes;                        		// 0x06A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      m_anDestroyedPawnIndexesToRecover;                		// 0x06B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AActor* >                            m_aoPotentialRadarObjects;                        		// 0x06BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ABioRadarMapBoundaries* >            m_aoMapBoundaryObjects;                           		// 0x06C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class APawn* >                             m_aoDamageCausers;                                		// 0x06D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPostProcessInfo >                  PostProcessPresets;                               		// 0x06E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FBioPPSettingsCallbackData >        m_aPPCallbacks;                                   		// 0x06EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnResumeGameComplete__Delegate;                 		// 0x06F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PauseOnExternalUIState__Delegate;               		// 0x0704 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXHotKeyDefinition                        m_aHotKeyDefines[ 0x8 ];                          		// 0x0710 (0x0080) [0x0000000000000000]              
	struct FScreenShakeStruct                          CoverShake;                                       		// 0x0790 (0x0078) [0x0000000000000001]              ( CPF_Edit )
	struct FPlayerOrder                                m_currentOrder;                                   		// 0x0808 (0x0034) [0x0000000000002000]              ( CPF_Transient )
	struct FBoxSphereBounds                            AimbackBounds;                                    		// 0x083C (0x001C) [0x0000000000002000]              ( CPF_Transient )
	struct FCoverAcquisitionParams                     CoverAcquireParams;                               		// 0x0858 (0x0014) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FCoverAcquisitionParams                     DirectionalCoverAcquireParams;                    		// 0x086C (0x0014) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FGuid                                       CoverVisualizationClientEffectGuid;               		// 0x0880 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       JumpClientEffectGuid;                             		// 0x0890 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       LadderUpClientEffectGuid;                         		// 0x08A0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       LadderDownClientEffectGuid;                       		// 0x08B0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PushOffCoverDir;                                  		// 0x08C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLocationRadarArrowPointsTo;                    		// 0x08CC (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vNavAssistPoint;                                		// 0x08D8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastReceivedLocation;                             		// 0x08E4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastReceivedAcceleration;                         		// 0x08F0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    LastReceivedRotation;                             		// 0x08FC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     DesiredLocation;                                  		// 0x0908 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastExtrapolatedLocation;                         		// 0x0914 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     RemoteCameraLocation;                             		// 0x0920 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    RemoteCameraRotation;                             		// 0x092C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   FlinchIntervalRange;                              		// 0x0938 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   NoShieldFlinchIntervalRange;                      		// 0x0940 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USFXProfileSettings*                         ProfileSettings;                                  		// 0x0948 (0x0004) [0x0000000000000000]              
	float                                              MPSeamlessTravelDelay;                            		// 0x094C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MPSeamlessTravelDelayTriggerTime;                 		// 0x0950 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioCameraZoom*                              ZoomData;                                         		// 0x0954 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveStickIdleThreshold;                           		// 0x0958 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MoveStickWalkThreshold;                           		// 0x095C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MoveStickRunThreshold;                            		// 0x0960 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MoveWalkModifierBlendTime;                        		// 0x0964 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DeadZoneThreshold;                                		// 0x0968 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PlayerCoverTransitionTime;                        		// 0x096C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CoverTransitionCountHold;                         		// 0x0970 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CoverBreakTimeThreshold;                          		// 0x0974 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CoverBreakTimer;                                  		// 0x0978 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxCoverEnterDist;                                		// 0x097C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CoverCameraTransitionTime;                        		// 0x0980 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverSnapScale;                                   		// 0x0984 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CoverUpdateDelay;                                 		// 0x0988 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              StormCoverUpdateDelay;                            		// 0x098C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CoverSlipCamAlign;                                		// 0x0990 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PushOffCoverDuration;                             		// 0x0994 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              PushOffTimeToGo;                                  		// 0x0998 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastFlinchTime;                                   		// 0x099C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FlinchInterval;                                   		// 0x09A0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              NoShieldFlinchInterval;                           		// 0x09A4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class URvrClientEffectInterface*                   CoverVisualizationClientEffect;                   		// 0x09A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_Grab;                                          		// 0x09AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_Mantle;                                        		// 0x09B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_SwatLeft;                                      		// 0x09B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_SwatRight;                                     		// 0x09B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_HighSwatLeft;                                  		// 0x09BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_HighSwatRight;                                 		// 0x09C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_SlipRight;                                     		// 0x09C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_SlipLeft;                                      		// 0x09C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_HighSlipRight;                                 		// 0x09CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_HighSlipLeft;                                  		// 0x09D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_Jump;                                          		// 0x09D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_LadderUp;                                      		// 0x09D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_LadderDown;                                    		// 0x09DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LadderFaceDot;                                    		// 0x09E0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LadderAimDot;                                     		// 0x09E4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              m_fClimbMantleFaceAngleThreshold;                 		// 0x09E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fClimbMantleDistanceThreshold;                  		// 0x09EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RemappedJoyRight;                                 		// 0x09F0 (0x0004) [0x0000000000000000]              
	float                                              RemappedJoyUp;                                    		// 0x09F4 (0x0004) [0x0000000000000000]              
	float                                              RotationSensitivityLow;                           		// 0x09F8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RotationSensitivityMedium;                        		// 0x09FC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RotationSensitivityHigh;                          		// 0x0A00 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                OldIgnoreMoveCount;                               		// 0x0A04 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NextEnemyToCheckLOS;                              		// 0x0A08 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SawEnemyTypeShoutCooldownTime;                    		// 0x0A0C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CurrentStormStamina;                              		// 0x0A10 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StormCooldownTime;                                		// 0x0A14 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                StormDisabledCounter;                             		// 0x0A18 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseEvent*                                 StormStartWwiseEvent_M;                           		// 0x0A1C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 StormPeakWwiseEvent_M;                            		// 0x0A20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 StormStartWwiseEvent_F;                           		// 0x0A24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 StormPeakWwiseEvent_F;                            		// 0x0A28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 StormEndWwiseEvent;                               		// 0x0A2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              KismetNoSaveReason;                               		// 0x0A30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              StorageDeviceRemovedText;                         		// 0x0A34 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              DLCRemovedText;                                   		// 0x0A38 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              RestartGame;                                      		// 0x0A3C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              ProfileChangedText;                               		// 0x0A40 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              ProfileChangedUnrecoverableText;                  		// 0x0A44 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              ControllerRemoved;                                		// 0x0A48 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              m_fLeaveConvPitch;                                		// 0x0A4C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fMoveToDropDistance;                            		// 0x0A50 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMaxZDifference;                                		// 0x0A54 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRelativeZUpLimit;                              		// 0x0A58 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRelativeZDownLimit;                            		// 0x0A5C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fLastRadarPassTime;                             		// 0x0A60 (0x0004) [0x0000000000000000]              
	float                                              m_fLastRadarRange;                                		// 0x0A64 (0x0004) [0x0000000000000000]              
	float                                              m_fRadarRange;                                    		// 0x0A68 (0x0004) [0x0000000000000000]              
	float                                              m_fRadarFOV;                                      		// 0x0A6C (0x0004) [0x0000000000000000]              
	float                                              m_fLastRadarFOV;                                  		// 0x0A70 (0x0004) [0x0000000000000000]              
	class ABioRadarMapBoundaries*                      m_oRadarMapBoundary;                              		// 0x0A74 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMaxRadarIndex;                                 		// 0x0A78 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nNavAssistMaxNodeLimit;                         		// 0x0A7C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fBumpCheckTimer;                                		// 0x0A80 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDamageIndicatorDisplayTime;                    		// 0x0A84 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              m_srVehicleExitFailureMsg;                        		// 0x0A88 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srVehicleExitAButtonMsg;                        		// 0x0A8C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USFXGameModeManager*                         GameModeManager2;                                 		// 0x0A90 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAttackOrderFarAngle;                           		// 0x0A94 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fAttackOrderCloseAngle;                         		// 0x0A98 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fAttackOrderCloseDistance;                      		// 0x0A9C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	class URvrComponentPCNetClientEffects*             m_oRvrNetClientEffectsInterface;                  		// 0x0AA0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                InvalidServerMovesReceived;                       		// 0x0AA4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NUM_SERVERMOVE_BEFORE_RESET;                      		// 0x0AA8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MOVEREP_DELAY_FRAME;                              		// 0x0AAC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NumberOfFrameSinceLastMoveRep;                    		// 0x0AB0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RemotePlayerPendingCustomAction;                  		// 0x0AB4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RemotePlayerPendingPowerCustomAction;             		// 0x0AB8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RemotePlayersRotationInterpolationSpeed;          		// 0x0ABC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BIO_RESET_MAX_POSITION_ERROR_SQUARED;             		// 0x0AC0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BIO_WARNING_MAX_POSITION_ERROR_SQUARED;           		// 0x0AC4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MAX_CONSECUTIVE_POSITION_ERROR;                   		// 0x0AC8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ClientTimeoutForPendingCustomActionReset;         		// 0x0ACC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AutonomousProxyLocationInterpSpeed;               		// 0x0AD0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EdgeCoverSlotSnapRange;                           		// 0x0AD4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumClientPositionError;                           		// 0x0AD8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              srOK;                                             		// 0x0ADC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srNuiDisconnectError;                             		// 0x0AE0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UBioHintSystemBase*                          HintSystem;                                       		// 0x0AE4 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioPlayerSelection*                         m_oPlayerSelection;                               		// 0x0AE8 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bUsePackedMoves : 1;                              		// 0x0AEC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDisableSquadCommandExit : 1;                   		// 0x0AEC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDebugCover : 1;                                  		// 0x0AEC (0x0004) [0x0000000000004001] [0x00000004] ( CPF_Edit | CPF_Config )
	unsigned long                                      bBreakFromCover : 1;                              		// 0x0AEC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bPreferLeanOverPopup : 1;                         		// 0x0AEC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bNoCoverFromStorm : 1;                            		// 0x0AEC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCancelStorm : 1;                                 		// 0x0AEC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bNoLeaveCover : 1;                                		// 0x0AEC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bReticleHidden : 1;                               		// 0x0AEC (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bLockPosition : 1;                                		// 0x0AEC (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      CoverRespectsRotation : 1;                        		// 0x0AEC (0x0004) [0x0000000000004001] [0x00000400] ( CPF_Edit | CPF_Config )
	unsigned long                                      bCoverGUIShowing : 1;                             		// 0x0AEC (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bJumpGUIShowing : 1;                              		// 0x0AEC (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bLadderGUIShowing : 1;                            		// 0x0AEC (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bShowActionIcons : 1;                             		// 0x0AEC (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      m_bCanMantleOutsideOfCover : 1;                   		// 0x0AEC (0x0004) [0x0000000000004000] [0x00008000] ( CPF_Config )
	unsigned long                                      HasSeenFirstEnemy : 1;                            		// 0x0AEC (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bTiredStorming : 1;                               		// 0x0AEC (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bStormCoolingDown : 1;                            		// 0x0AEC (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bProfileSettingsUpdated : 1;                      		// 0x0AEC (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bKismetNoSave : 1;                                		// 0x0AEC (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      m_bIsStoppedForConv : 1;                          		// 0x0AEC (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      m_bEnableCineModeWarning : 1;                     		// 0x0AEC (0x0004) [0x0000000000006000] [0x00400000] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bDEBUGFlyUpPressed : 1;                         		// 0x0AEC (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      m_bDEBUGFlyDownPressed : 1;                       		// 0x0AEC (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      m_bRadarArrow : 1;                                		// 0x0AEC (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      m_bRadarIsJammed : 1;                             		// 0x0AEC (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      m_bPermanentWalk : 1;                             		// 0x0AEC (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      m_bToggledWalk : 1;                               		// 0x0AEC (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bSkipPhysicsForOneFrame : 1;                      		// 0x0AEC (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bMultiplayerCommandMode : 1;                      		// 0x0AEC (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bExtrapolationActive : 1;                         		// 0x0AEC (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      bExtrapolationWasActive : 1;                      		// 0x0AF0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bReceivedNewLocation : 1;                         		// 0x0AF0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bEnableMultiplayerMotionBlur : 1;                 		// 0x0AF0 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      RemoteAimAssistActive : 1;                        		// 0x0AF0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bClientStorming : 1;                              		// 0x0AF0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned char                                      bWantsToStorm;                                    		// 0x0AF4 (0x0001) [0x0000000000002004]              ( CPF_Input | CPF_Transient )
	unsigned char                                      CurrentVisualization;                             		// 0x0AF5 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bBoost;                                           		// 0x0AF6 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bJump;                                            		// 0x0AF7 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bAlternateCamera;                                 		// 0x0AF8 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bMine;                                            		// 0x0AF9 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      m_eCurrentActionIcon;                             		// 0x0AFA (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1402 ];

		return pClassPointer;
	};

	void SetCurrentChallengeReward ( int nRewardIndex );
	void SetFakePermaCooldown ( );
	void ResetForcedCooldown ( );
	void SetForcedCooldown ( float Cooldown );
	void SetAFKLastActionTime ( unsigned long isMovementCheck );
	void Reset ( );
	void eventTriggerCoverPlayerFailedVocalization ( class ABioPawn* Henchman );
	void AcknowledgePossession ( class APawn* P );
	void eventDisplayNuiSpeech_Disconnection ( );
	void DisplayNuiSpeech_ExploreFeedback ( unsigned long Successful );
	void DisplayNuiSpeech_CombatFeedback ( unsigned long Successful, struct FString TargetPawn, void* Rule );
	void DisplayNuiSpeech_GenericFeedback ( unsigned long Successful, void* Rule );
	class USFXSFHandler_HUD* GetHUDMovie ( );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_rotation );
	void eventShippingClientMessage ( struct FString S, struct FName Type, float MsgLifeTime );
	bool IsStormDisabled ( );
	void EnableStorm ( );
	void DisableStorm ( );
	bool eventIsUseCasualAppearance ( );
	bool eventIsTestFrameworkSetupComplete ( );
	void HandlePickup ( class AInventory* Inv );
	void ViewNextPlayer ( );
	void eventClientVocalizationEvent ( struct FSFXVocalizationEvent VocEvent );
	void ServerTestNameReplication ( struct FName InName, struct FString InConfirmString );
	void ClientTestNameReplication ( struct FName InName, struct FString InConfirmString );
	void eventClientPlaySimpleDialogLine ( void* DialogLineSr, class AActor* DialogPlayerOwner );
	void eventClientReleaseSeekFreeObject ( int ObjectNetID );
	void eventClientLoadSeekFreeObjectAsync ( int ObjectNetID );
	void DispatchCommand ( struct FString CommandString );
	void eventSquadDrawWeapons ( );
	void ForceLocation ( struct FVector NewLocation );
	void ClientForceLocation ( float NewLocX, float NewLocY, float NewLocZ );
	void Internal_ResetPlayerController ( struct FVector NewLocation );
	void ClientResetPlayerController ( float NewLocX, float NewLocY, float NewLocZ );
	void eventResetPlayerController ( );
	void ClientUpdatePosition ( );
	void SFXClientAdjustPosition ( float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ );
	void SFXShortClientAdjustPosition ( float TimeStamp, float NewLocX, float NewLocY, float NewLocZ );
	void SFXWarnAdjustPosition ( float TimeStamp, float NewLocX, float NewLocY, float NewLocZ );
	void eventSendClientAdjustment ( );
	void Revive ( class APawn* Other );
	void TickCoverVisualization ( );
	void DisplayCoverVisualization ( class URvrClientEffectInterface* NewVisualization, struct FRvrClientEffectTarget Target );
	void TickJumpDown ( );
	void ServerUseLadder ( class ASFXNav_LadderNode* Ladder );
	bool TryUseLadder ( class ASFXNav_LadderNode* LadderNode );
	bool CanUseLadder ( class ASFXNav_LadderNode* LadderNode );
	bool DetectPressAway ( struct FVector StartLocation, struct FVector EndLocation );
	bool DetectPressInto ( struct FVector StartLocation, struct FVector EndLocation );
	void eventPlayerTick ( float DeltaTime );
	void ServerStartPowerCustomAction ( int PowerCustomAction, class AActor* Target, struct FVector TargetLocation, struct FVector CamLocation, struct FVector CamDirection );
	void RemotePlayerResetPendingCustomActionInfo ( );
	bool StartPowerCustomAction ( class USFXPowerCustomActionBase* Power );
	void ServerStartCustomActionWithNav ( int NewAction, class UObject* Nav, class ABioPawn* Sync, int NewPowerAction );
	void ServerStartCustomActionWithDirection ( int NewAction, struct FVector Direction, class ABioPawn* Sync, int NewPowerAction );
	void ServerStartCustomAction ( int NewAction, class ABioPawn* Sync, int NewPowerAction );
	bool StartCustomAction ( int NewAction, class ABioPawn* Sync, unsigned long bForced, int NewPowerAction );
	bool StartCustomActionWithSyncPartner ( int NewAction );
	void PlayFlinch ( class AWeapon* W, unsigned long bFromCoverCone );
	void OnCoverConeProtected ( class AWeapon* W );
	void ClientSetHUD ( class UClass* newHUDType, class UClass* newScoringType );
	int GetPlayerControllerId ( );
	class USFXGUIInteraction* GetSFXUIController ( );
	void OnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	void OnExternalUIChanged ( unsigned long bIsOpening );
	void PauseOnExternalUIState ( );
	float GetRadarFOV ( );
	float GetRadarRange ( );
	class ABioPawn* GetBioPawn ( );
	unsigned char GetLoginStatus ( );
	class Usfxgamemodedefault* GetGameModeDefault ( );
	void eventHandleWalking ( );
	bool IsLookInputIgnored ( );
	void UpdateInputConfiguration ( );
	void LoadPCInputConfiguration ( );
	void SavePCInputConfiguration ( class USFXProfileSettings* Profile );
	void UpdateUIProfileSettings ( class USFXProfileSettings* oProfileSettings );
	void eventUpdateLocalProfileSettingsCache ( );
	bool CanRestartPlayer ( );
	void eventRestoreMotionBlur ( );
	void EnableFilmgrain ( unsigned long bEnable );
	void EnableMotionBlur ( unsigned long bEnable );
	bool HasCompletedAccomplishment ( struct FName AccomplishmentName );
	void ClientSetAccomplishmentProgression ( int AccomplishmentUniqueID, int Progress, unsigned long IsOnlyIncreasing );
	void eventSetAccomplishmentProgression ( struct FName AccomplishmentProgressName, int Progress, unsigned long IsOnlyIncreasing, class ABioPawn* oTarget );
	void ClientUpdateAccomplishmentProgression ( int AccomplishmentUniqueID );
	void eventUpdateAccomplishmentProgression ( struct FName AccomplishmentProgressName, class ABioPawn* oTarget );
	void ClientLockAccomplishment ( int AccomplishmentUniqueID );
	void eventLockAccomplishment ( struct FName AccomplishmentName );
	void ClientUnlockAccomplishment ( int AccomplishmentUniqueID );
	void eventUnlockAccomplishment ( struct FName AccomplishmentName );
	void eventUnlockAchievement ( int AchivementID );
	void NotifyReadAchievementsComplete ( int TitleId );
	void UpdateProfileData ( );
	void NotifyProfileReadComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void eventCheckThatGameCanContinue ( );
	void StorageDeviceChanged ( );
	bool DownloadableContentWasRemoved ( );
	void ClearOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	void ClientSetOnlineStatus ( );
	int GetRichPresenceClassContextID ( );
	void SetRichPresenceForIdlePlayers ( );
	void eventSetRichPresence ( );
	void NotifyLoginChange ( unsigned char LocalUserNum );
	void eventSaveProfile ( unsigned long checkForDelay, unsigned long bUpdateProfileSettingsCache );
	void SaveGameEx ( struct FSFXSaveDescriptor SaveDescriptor, struct FScriptDelegate Callback );
	void OverwriteGame ( int DeleteIndex, int SaveIndex, struct FScriptDelegate Callback );
	void SaveGame ( int SaveIndex, struct FScriptDelegate Callback );
	void ResumeGame ( struct FScriptDelegate Callback );
	void QuickLoad ( );
	void QuickSave ( );
	void eventDoQuickSave ( );
	bool eventCanSave ( struct FString* Reason );
	void SetDeviceID ( int nID );
	void eventClientTravel ( struct FString URL, unsigned char TravelType, unsigned long bSeamless, struct FGuid MapPackageGuid );
	void eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	float GetSensitivityScaling ( );
	void SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons, class USeqAct_ToggleCinematicMode* SFXAction );
	void eventRestoreHenchmenPowers ( );
	void eventRestorePlayerAndSquad ( unsigned long bHolsterWeapon, unsigned long bDisableAI, unsigned long bResetHenchmenAI, unsigned long bTeleport );
	void ProcessCinematicModeHelmetSettings ( class UBioSeqAct_BioToggleCinematicMode* Action );
	void eventGenerateTutorialEvent ( unsigned char eTutHook );
	void QueueDamageIndicator ( class APawn* oPawn );
	void DebugDraw_CoverCheck ( class ABioHUD* HUD );
	void CameraShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency );
	bool IsReloading ( );
	void eventSetZoomed ( unsigned long bZoomState );
	bool IsZoomed ( );
	bool eventIsPlayerPerformingBlockingAction ( );
	void eventCancelLastOrderedPower ( class APawn* oOrderedPawn, struct FName nmPower );
	bool CanRunQueuedOrder ( );
	void ClearPlayerOrder ( );
	void eventSwitchWeapon ( class ASFXWeapon_NativeBase* oWpn );
	bool CanStartImmediateOrder ( );
	bool CanQueueOrder ( );
	void OrderWeaponSwitch ( class APawn* oOrderedPawn, class ASFXWeapon* Wpn, unsigned char eInputMethod );
	void GiveHenchmanOrder ( class APawn* oHenchman, unsigned char eOrder, class AActor* oTargetActor, struct FVector vTargetLocation, struct FName nmPower, class ASFXWeapon* oWpn, int nQueue, unsigned char eInputMethod );
	void eventHenchmanOrderHoldPosition ( class APawn* oHenchman, struct FVector vLocation, unsigned char eInputMethod );
	void eventHenchmanOrderFollow ( class APawn* oHenchman, unsigned char eInputMethod );
	void eventHenchmanOrderAttackTarget ( class APawn* oHenchman, class AActor* oTargetActor, unsigned char eInputMethod );
	void eventHenchmanOrderUsePower ( class APawn* oHenchman, class AActor* oTargetActor, struct FVector vTargetLocation, struct FName nmPower, int nQueue, unsigned char eInputMethod );
	bool eventGetHenchmanAttackOrderPower ( class APawn* oHenchman, class AActor* oTarget, struct FName* nmPowerName );
	void ResetStormCooldown ( );
	void OnTeleportCameraSync ( class USeqAct_Teleport* Action );
	void eventSpawnPlayerCamera ( );
	void InitializeGammaCorrectionSettings ( );
	void SetPostProcessValues ( unsigned char Preset );
	void GrantXP ( float XP, unsigned long bSkipNotify );
	void UpdateSquadPlayerPawn ( class ABioPlayerSquad* PlayerSquad, class ABioPawn* oBioPawn );
	void ResetInitialPlayerPawn ( class ABioPlayerSquad* PlayerSquad );
	void Possess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void ToggleSlowFlyCam ( );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void InternalSawNewEnemy ( class ABioPawn** EnemyPawn );
	void ServerSawNewEnemy ( class ABioPawn* EnemyPawn );
	void eventSawNewEnemy ( struct FLocalEnemy* CurEnemy );
	void InternalSawFirstEnemy ( );
	void ServerSawFirstEnemy ( );
	void eventSawFirstEnemy ( );
	void UpdateEnemyList ( );
	bool IsUsingPower ( );
	void ServerUseSelection ( class AActor* oActorUsed );
	bool TryUse ( class AActor* Selection );
	void ActivateUseModule ( class AActor* Selection );
	bool eventCanUse ( class AActor* Selection );
	void PlayCoverPresentation ( );
	void Internal_AcquireCover ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	void ServerAcquireCover ( class ACoverLink* Link, unsigned char SlotIdx, unsigned char LeftIdx, unsigned char RightIdx, float SlotPct, unsigned char ClientCoverDirection, float TimeStamp );
	void AcquireCover ( struct FCovPosInfo CovInfo );
	bool FindLadderNode ( float MinDistance, class USFXLadderReachSpec** out_LadderSpec );
	bool FindJumpDownPoint ( class USFXJumpDownReachSpec** out_JumpDownSpec );
	bool FindJumpPoint ( class USFXJumpReachSpec** out_JumpSpec );
	bool CanPerformMantle ( struct FCovPosInfo* CoverInfo );
	bool CanPerformClimb ( struct FCovPosInfo* CoverInfo );
	bool CanPerformEnterCover ( );
	bool CoverReachable ( class APawn* PlayerPawn, struct FCovPosInfo* out_CovPosInfo );
	bool ValidatePotentialCover ( struct FVector SourceLoc, struct FVector Direction, unsigned long OnlyIfBetter, float MaxHeightFactor, float* OutMinDotFOV, float* OutMaxDistanceSquared, struct FCovPosInfo* OutCovPosInfo );
	void FillCoverPosInfo ( class ACoverLink* Link, int SlotIdx, struct FVector SourceLoc, struct FVector Direction, float MaxDistance, struct FCovPosInfo* out_CovPosInfo );
	bool FindPlayerCover ( struct FVector Direction, float MaxDistance, float MinCameraDotCover, float MinSlotDotPlayer, float MinPlayerDotCoverOffset, float MaxHeightFactor, struct FCovPosInfo* out_CovPosInfo );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void NotifyCoverDisabled ( class ACoverLink* Link, int SlotIdx, unsigned long bAdjacentIdx );
	void NotifyReachedCoverSlot ( int SlotIdx, int OldSlotIdx );
	void ReenableMovement ( );
	void SetIsInStationaryCover ( unsigned long bIsInStationaryCover );
	unsigned char GetPawnCoverType ( );
	void SetPawnCoverType ( unsigned char NewCoverType );
	unsigned char GetPawnCoverAction ( );
	void SetPawnCoverAction ( unsigned char NewCoverAction );
	unsigned char GetCoverDirection ( );
	void SetCoverDirection ( unsigned char NewCoverDirection );
	void eventLeaveCover ( );
	void CoverLog ( struct FString Msg, struct FString Function );
	bool IsInCoverState ( );
	void ResetCoverAction ( );
	void SetSpectatorMode ( unsigned long bOn );
	void ClientInvalidCoverClaim ( );
	void BioMoveAutonomous ( float DeltaTime, struct FRotator DeltaRot, class USavedMove* Move );
	float ComputeClientLocationError ( struct FVector CurrentLocation, struct FVector NewLocation );
	void ServerUpdateClientCorrection ( struct FVector ClientLocation, unsigned long bForceCorrection );
	void ServerExecuteMove ( class USavedMove* Move );
	void ServerExecuteMove_RootMotion ( class USavedMove* Move );
	void ServerExecuteMove_AimBack ( class USavedMove* Move );
	void ServerExecuteMove_Cover ( class USavedMove* Move );
	void BioServerMove ( struct FSavedMoveReplicationInfo RepMoves, struct FVector ClientLocation );
	void ReplicateMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot );
	void ParallelServerMove ( float TimeStamp, int View );
	void StormingServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View, unsigned char MoveMag, int PawnDesiredYaw );
	void WalkingServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View, unsigned char MoveMag );
	void RootMotionServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View, unsigned char MoveMag );
	void AimBackServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View, unsigned char MoveMag );
	void CoverServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View, unsigned char MoveMag, unsigned char InCoverType, unsigned char InCoverAction, unsigned char InCoverDirection, unsigned char InCurrentSlotDirection, unsigned long bInIsInstationaryCover );
	void StandardServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View, unsigned char MoveMag, struct FName ControllerState );
	void SendServerMove ( class USavedMove* NewMove, struct FVector ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove );
	void CallServerMove ( class USavedMove* NewMove, struct FVector ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove );
	void BreakFromCover ( struct FVector BreakDir );
	bool IsCameraAlignedWithCoverSlot ( float fThreshold );
	void DetermineLeanDirection ( class ABioPawn* BioPawn, struct FCoverSlot* CurrentSlot, unsigned char* out_PawnCA, unsigned char* out_PawnCD );
	void ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation );
	void PawnLanded ( );
	void PawnFalling ( );
	void PawnDied ( class APawn* inPawn );
	void eventApplyTacticalOrders ( );
	bool CanStorm ( );
	bool IsExploreTargetable ( class AActor* A );
	bool IsCombatTargetable ( class AActor* A );
	void RefreshRadarData ( );
	void eventPostBeginPlay ( );
	void ValidateCinematicModeOff ( );
	bool UpdateMoveToIndicator ( class APawn* pSquadPawn, struct FVector vMoveToPosition );
	void ClearServerMoveExtrapolation ( );
	bool AutoUseFromStorm ( );
	void CheckStormToCover ( );
	void eventOnStormStop ( );
	void eventOnStormStart ( );
	class UDOFEffect* FindUberDOFEffect ( );
	bool GetInputDisabled ( );
	void SetInputDisabled ( unsigned long bVal );
	bool eventGetZoomSnapWeaponInfo ( class AWeapon* Weapon, int idx, unsigned char* AimNode, float* OuterSnapAngle, float* InnerSnapAngle, float* OffsetMag );
	class APawn* GetZoomSnapTarget ( float MinDistance, float MaxDistance, struct FVector* AimLocation );
	class APawn* GetAimAssistTarget ( float MaxDistance, struct FVector* CamLoc, struct FRotator* CamRot, struct FVector* TargetLoc, float* Margin );
	float ScoreZoomSnapTarget ( class APawn* TestPawn, float MaxDistance, struct FVector* CamLoc, struct FRotator* CamRot, struct FVector* AimLocation );
	int LerpMovementStickAngle ( int RotDesired, int RotBase, float RotationSpeed, float DeltaSeconds );
	void ComputeMovementStickAngle ( float* Mag, float* AngleStick, struct FRotator* RotWorld );
	bool GetCameraRelativeRotation ( struct FVector* vDirection );
	void eventOnActionStateChanged ( );
	void ResetGoalPriorities ( class ASFXNav_GoalPoint* oGoal );
	class ASFXNav_GoalPoint* GetBestGoalPoint ( );
	void SquadOrderEquipWeapon ( unsigned char nWeapon, class APawn* pPawn );
	bool SquadOrderUsePower ( struct FName nmPower, class APawn* pPawn, int nQueue, unsigned long bShowIndicator, class AActor* pDesiredSelectionTarget, unsigned char eInputMethod, class AActor* pDesiredTarget, struct FVector vDesiredTargetLocation );
	bool ShouldLockOnTarget ( class AActor* pTarget );
	bool GetValidOrderLocation ( struct FVector TestLocation, struct FVector* OrderLocation );
	bool QuickCommandMoveTo ( int nSquadIndex, unsigned char eInputMethod, struct FVector vDesiredTargetLocation );
	bool QuickCommandCoverPlayer ( int nSquadIndex, unsigned char eInputMethod );
	bool QuickCommandAttackTarget ( int nSquadIndex, unsigned char eInputMethod, class AActor* pDesiredTarget );
	bool QuickCommandFollowPlayer ( int nSquadIndex, unsigned char eInputMethod );
	void Destroyed ( );
	void ClearDamageIndicators ( class ULevel* Level );
	void UpdateBinkAudioVolume ( );
	void DisableDOF ( );
	void RecoverCameraPostCinematic ( );
	void DrawSelectionReticle ( struct FVector vLocation );
	void DrawCircle ( struct FVector vLocation, struct FVector vNormal, float fRadius, struct FColor CircleColor );
	void UnregisterPlayerDataStores ( );
	void RegisterCustomPlayerDataStores ( );
	void OnResumeGameComplete ( unsigned long bWasSuccessful );
};

UClass* ABioPlayerController::pClassPointer = NULL;

// Class SFXGame.SFXGameModeBase
// 0x0061 (0x009D - 0x003C)
class USFXGameModeBase : public UObject
{
public:
	struct FMultiMap_Mirror                            CollectedBindMapping;                             		// 0x003C (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FKeyBind >                          Bindings;                                         		// 0x0078 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FKeyBind >                          LocalizedBindings;                                		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumReportSkynetMPCustomEventSent;                 		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              RadarMapDisplayTime;                              		// 0x0094 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      bBindingsCollected : 1;                           		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsActive : 1;                                    		// 0x0098 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShowHUD : 1;                                     		// 0x0098 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowSelection : 1;                               		// 0x0098 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowExploreSelection : 1;                        		// 0x0098 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowDamageIndicators : 1;                        		// 0x0098 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowRadar : 1;                                   		// 0x0098 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowHealth : 1;                                  		// 0x0098 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowWeapon : 1;                                  		// 0x0098 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowRotationUpdate : 1;                         		// 0x0098 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowMovement : 1;                               		// 0x0098 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bStopMovement : 1;                                		// 0x0098 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowCamera : 1;                                 		// 0x0098 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowCameraMods : 1;                             		// 0x0098 (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowSave : 1;                                   		// 0x0098 (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowPauseMenu : 1;                              		// 0x0098 (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowHints : 1;                                  		// 0x0098 (0x0004) [0x0000000000000003] [0x00010000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowSubtitle : 1;                                		// 0x0098 (0x0004) [0x0000000000000003] [0x00020000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bClearPendingFire : 1;                            		// 0x0098 (0x0004) [0x0000000000000003] [0x00040000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasMouseAuthority : 1;                           		// 0x0098 (0x0004) [0x0000000000000003] [0x00080000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMouseVisible : 1;                                		// 0x0098 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bMergeNotifications : 1;                          		// 0x0098 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bQueueAndSuppressNotifications : 1;               		// 0x0098 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bShowReticles : 1;                                		// 0x0098 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bPlayVocalizations : 1;                           		// 0x0098 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bEnforce16x9Subtitles : 1;                        		// 0x0098 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bAllowMessageUI : 1;                              		// 0x0098 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bRestrictToPrimaryViewport : 1;                   		// 0x0098 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bNuiSpeechGlobal : 1;                             		// 0x0098 (0x0004) [0x0000000000000003] [0x10000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNuiSpeechExplore : 1;                            		// 0x0098 (0x0004) [0x0000000000000003] [0x20000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNuiSpeechCombat : 1;                             		// 0x0098 (0x0004) [0x0000000000000003] [0x40000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowPowerWeaponUI : 1;                          		// 0x0098 (0x0004) [0x0000000000000003] [0x80000000] ( CPF_Edit | CPF_Const )
	unsigned char                                      Priority;                                         		// 0x009C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1403 ];

		return pClassPointer;
	};

	bool ShowAreaMap ( );
	void StopObjectiveDisplay ( );
	void HoldObjectiveDisplay ( );
	void PulseObjectiveDisplay ( );
	void TurnObjectiveRadarDisplayOff ( );
	void TurnObjectiveRadarDisplayOn ( );
	void ToggleObjectiveRadarDisplay ( unsigned long bTurnOn );
	void PulseRadarDisplay ( float fPulseTime );
	void UnpauseTimeDilationEffects ( );
	void PauseTimeDilationEffects ( );
	void EnterWeaponWheel ( );
	void EnterPowerWheel ( );
	void EnterCommandMenu ( );
	void RemoveTimeDilationEffects ( );
	void GuiKey ( unsigned char Event );
	void LeaveWorld ( );
	void StartIngamePropertyEditor ( );
	void SquadCommand_Move2 ( );
	void SquadCommand_Move1 ( );
	void SquadCommand_Follow ( );
	void SquadCommand_Attack ( );
	void ShowMenu ( );
	void eventHidePauseMenu ( );
	void eventShowPauseMenu ( );
	void StopFiringWeapon ( );
	void FireWeapon ( );
	void CollectBindings ( );
	void eventInitialize ( );
	void DeactivateSpecifier ( struct FName ModeSpecifier );
	void ActivateSpecifier ( struct FName ModeSpecifier );
	void Deactivated ( );
	void Activated ( );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	class USFXCameraMode* eventHACK_GetCameraMode ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

UClass* USFXGameModeBase::pClassPointer = NULL;

// Class SFXGame.SFXGameModeGalaxy
// 0x000F (0x00AC - 0x009D)
class USFXGameModeGalaxy : public USFXGameModeBase
{
public:
	float                                              DeadZone;                                         		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UBioCameraBehaviorGalaxy*                    GalaxyCam;                                        		// 0x00A4 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_GalaxyMap*              InstantTransition;                                		// 0x00A8 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1404 ];

		return pClassPointer;
	};

	void ScanSystem ( );
	void SetLTriggerLabelVisible ( unsigned long bShow, void* srText );
	void SetRTriggerLabelVisible ( unsigned long bShow, void* srText );
	void StopFuel ( );
	void StartFuel ( );
	bool eventCanBuyFuel ( );
	void BuyFuel ( );
	class UBioSFHandler_GalaxyMap* GetGalaxyMap ( );
	void BeginExitGalaxyMap ( unsigned long resize );
	bool CanExit ( );
	class USFXCameraMode* HACK_GetCameraMode ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	void Initialize ( );
};

UClass* USFXGameModeGalaxy::pClassPointer = NULL;

// Class SFXGame.SFXGameModeMultiLand
// 0x0078 (0x0124 - 0x00AC)
class USFXGameModeMultiLand : public USFXGameModeGalaxy
{
public:
	TArray< class UParticleSystemComponent* >          TemporaryComponents;                              		// 0x00AC (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRotator                                    ReticleRot;                                       		// 0x00B8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    ReticleRotStart;                                  		// 0x00C4 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FRotator                                    ReticleRotTopLeftClamp;                           		// 0x00D0 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FRotator                                    ReticleRotBottomRightClamp;                       		// 0x00DC (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     ScanReticleInputMovement;                         		// 0x00E8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReticleDegreesPerSecond;                          		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InputAttenuation;                                 		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UParticleSystemComponent*                    ReticleEffect;                                    		// 0x00FC (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              ReticleScale;                                     		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReticleMoveSpeed;                                 		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SelectDistance;                                   		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USFXPlanetFeature*                           LandingSiteFeature;                               		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fRescaleTime;                                     		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fInitialScale;                                    		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fNewScale;                                        		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fMaxRescaleTime;                                  		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bMouseLock : 1;                                   		// 0x0120 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCanLand : 1;                                     		// 0x0120 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bInitialized : 1;                                 		// 0x0120 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bRescaling : 1;                                   		// 0x0120 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1405 ];

		return pClassPointer;
	};

	void UpdateLabelPositions ( );
	void DrawLabels ( );
	void ToggleMouseLock ( unsigned long bNewMouseLock );
	void RingReticleUpDown ( float Axis );
	void RingReticleLeftRight ( float Axis );
	void AttemptLand ( );
	bool TestLandingCondition ( );
	void UpdateReticleRotationFromInput ( float fDeltaT );
	void UpdateReticle ( float fDeltaT );
	void UpdatePlanetScale ( float DeltaTime );
	void Update ( float DeltaTime );
	void BeginExitGalaxyMap ( unsigned long resize );
	bool eventCanExit ( );
	void Deactivated ( );
	void Activated ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	class UBioSeqAct_MultiLand* GetGameData ( );
};

UClass* USFXGameModeMultiLand::pClassPointer = NULL;

// Class SFXGame.SFXGameModeManager
// 0x0035 (0x0071 - 0x003C)
class USFXGameModeManager : public UObject
{
public:
	TArray< class UClass* >                            SupportedModes;                                   		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFXGameModeBase* >                  GameModes;                                        		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FLocalizedKeyName >                 KeyNames;                                         		// 0x0054 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     sAudioGameModeRTPCName;                           		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bDisableInput : 1;                                		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      CurrentMode;                                      		// 0x0070 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1406 ];

		return pClassPointer;
	};

	struct FString GetLocalizedNameForKey ( struct FName Key, unsigned long Control, unsigned long Shift, unsigned long Alt );
	void UpdateAllBindMappingCollections ( );
	void ResetKeyPresses ( );
	void ResetBindings ( );
	bool AllowPowerWeaponUI ( );
	bool StopsMovement ( );
	bool ShouldRestrictToPrimaryViewport ( );
	bool ShouldAllowMessageUI ( );
	bool ShouldEnforce16x9Subtitles ( );
	bool ShouldPlayVocalizations ( );
	bool ShouldShowReticles ( );
	bool ShouldQueueAndSuppressNotifications ( );
	bool ShouldMergeNotifications ( );
	bool GetMouseVisible ( );
	bool HasMouseAuthority ( );
	bool ShouldShowSubtitles ( );
	bool AllowsHints ( );
	bool AllowsSaving ( );
	bool AllowsCameraMods ( );
	bool AllowsMovement ( );
	bool AllowRotationUpdates ( );
	bool ShouldShowWeapon ( );
	bool ShouldShowHealth ( );
	bool ShouldShowRadar ( );
	bool ShouldShowDamageIndicators ( );
	bool ShouldShowExplorationSelection ( );
	bool ShouldShowSelection ( );
	bool ShouldShowHUD ( );
	bool IsActive ( unsigned char mode );
	void UpdateCurrentAudioMode ( );
	void UpdateCurrentMode ( );
	void Initialize ( );
	bool IsInAnInteractiveGalaxyMode ( );
	class USFXCameraMode* HACK_GetCameraMode ( unsigned char GalaxyOrConversationMode );
	void eventHACK_BeginExitGalaxyMap ( unsigned long resize );
	bool eventHACK_CanExitGalaxyMode ( );
	class USFXGameModeBase* eventHACK_GetMultiLandMode ( );
	class USFXGameModeBase* HACK_GetOrbitalMode ( );
	bool AllowCameraUpdates ( );
	void LogKeyBindings ( );
	void Console_UpdatePS3ButtonSwapping ( unsigned long bSwapCrossCircle );
	void Console_UpdateTriggerAndShoulderBindings ( unsigned char ConfigOption );
	void Console_UpdateStickBindings ( unsigned char ConfigOption );
	void Console_RestoreBindingsToDefaults ( );
	void Helper_ResetStaticConsoleBindings ( );
	void Helper_SetStaticConsoleBinding ( struct FName Key, struct FString Command );
	void Helper_SwapBinding ( class USFXGameModeBase* mode, struct FName KeyA, struct FName KeyB );
	void Helper_SetBinding ( class USFXGameModeBase* mode, struct FName Key, struct FString Command );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	void DisableInput ( );
	void EnableInput ( );
	void ResetReticles ( );
	void HideReticle ( );
	void eventDisableMode ( unsigned char mode, struct FName ModeSpecifier );
	void eventEnableMode ( unsigned char mode, struct FName ModeSpecifier );
	bool eventIsPlayMode ( unsigned char mode );
	unsigned char eventGetDefaultMode ( );
};

UClass* USFXGameModeManager::pClassPointer = NULL;

// Class SFXGame.SFXGUIInputHandler
// 0x0033 (0x006F - 0x003C)
class USFXGUIInputHandler : public UObject
{
public:
	TArray< struct FSFXInputEventCooldownStruct >      m_aInputEventCooldowns;                           		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BannedChars;                                      		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPointer                                    m_pEngine;                                        		// 0x0054 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FVector2D                                   MousePositionOverride;                            		// 0x0058 (0x0008) [0x0000000000000000]              
	float                                              UDLRInitialCooldown;                              		// 0x0060 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              UDLRHeldCooldown;                                 		// 0x0064 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                RTT_HitCheckDistance_UU;                          		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      m_eLastUDLREvent;                                 		// 0x006C (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nLStickX;                                       		// 0x006D (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nLStickY;                                       		// 0x006E (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1407 ];

		return pClassPointer;
	};

	void AddCooldown ( unsigned char nEvent, float fTime );
};

UClass* USFXGUIInputHandler::pClassPointer = NULL;

// Class SFXGame.SFXInventoryManager
// 0x00F8 (0x030C - 0x0214)
class ASFXInventoryManager : public AInventoryManager
{
public:
	struct FScaledFloat                                MaxGrenadeBonus;                                  		// 0x0214 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      CurrentWeaponSelection;                           		// 0x0238 (0x0004) [0x0000000000000000]              
	struct FRotator                                    WeaponRecoilOffset;                               		// 0x023C (0x000C) [0x0000000000000000]              
	struct FRotator                                    TotalRecoil;                                      		// 0x0248 (0x000C) [0x0000000000000000]              
	struct FRotator                                    Drift;                                            		// 0x0254 (0x000C) [0x0000000000000000]              
	struct FRotator                                    DriftTarget;                                      		// 0x0260 (0x000C) [0x0000000000000000]              
	int                                                Credits;                                          		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Medigel;                                          		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Grenades;                                         		// 0x0274 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                Eezo;                                             		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Iridium;                                          		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Palladium;                                        		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Platinum;                                         		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Probes;                                           		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentFuel;                                      		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxCredits;                                       		// 0x0290 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxEezo;                                          		// 0x0294 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxIridium;                                       		// 0x0298 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxPalladium;                                     		// 0x029C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxPlatinum;                                      		// 0x02A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxMedigel;                                       		// 0x02A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxGrenades;                                      		// 0x02A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxGrenadesMP;                                    		// 0x02AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxProbes;                                        		// 0x02B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxFuel;                                          		// 0x02B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FuelEfficiency;                                   		// 0x02B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ExtraMedigelPlotInt;                              		// 0x02BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DriftPitch;                                       		// 0x02C0 (0x0004) [0x0000000000000000]              
	float                                              DriftYaw;                                         		// 0x02C4 (0x0004) [0x0000000000000000]              
	float                                              DriftInterpSpeed;                                 		// 0x02C8 (0x0004) [0x0000000000000000]              
	float                                              DriftInterpResetSize;                             		// 0x02CC (0x0004) [0x0000000000000000]              
	float                                              DriftInterpMinSize;                               		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              DriftNoiseMagPitch;                               		// 0x02D4 (0x0004) [0x0000000000000000]              
	float                                              DriftNoiseMagYaw;                                 		// 0x02D8 (0x0004) [0x0000000000000000]              
	float                                              DriftRampUpRate;                                  		// 0x02DC (0x0004) [0x0000000000000000]              
	float                                              DriftRampUpDelay;                                 		// 0x02E0 (0x0004) [0x0000000000000000]              
	class ALight*                                      AttachedFlashlight;                               		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ALight*                                      AttachedAmbientLight;                             		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   AttachedFlashlightVFX;                            		// 0x02EC (0x0004) [0x0000000000000000]              
	float                                              AmbientLightCachedBrightness;                     		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlashlightCachedBrightness;                       		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlashlightCachedRadius;                           		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      FlashlightCachedColor;                            		// 0x02FC (0x0004) [0x0000000000000000]              
	struct FColor                                      AmbientLightCachedColor;                          		// 0x0300 (0x0004) [0x0000000000000000]              
	int                                                ReplicatedWeaponIndex;                            		// 0x0304 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bWeaponFired : 1;                                 		// 0x0308 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bFlashlightAttached : 1;                          		// 0x0308 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCanPickUpGrenades : 1;                           		// 0x0308 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1408 ];

		return pClassPointer;
	};

	void NextWeapon ( );
	void PrevWeapon ( );
	int GetInventoryIndex ( class AInventory* oInventory );
	class AInventory* GetInventoryByIndex ( int Index );
	bool IsClientReadyToInitialize ( );
	bool GiveAmmo ( unsigned char ttype, int ResourceAmount );
	int GiveInventoryTreasure ( unsigned char InvType, int Amount, unsigned long bIsSalvage, unsigned long bIgnoreBudget );
	bool GiveGrenades ( unsigned char ttype, int ResourceAmount, unsigned long bAbsoluteAmount );
	bool GiveMediGel ( unsigned char ttype, int ResourceAmount, unsigned long bAbsoluteAmount );
	bool GiveCash ( unsigned char ttype, int nBudgetPercent, unsigned long bAbsoluteAmount, unsigned long bIsSalvage );
	bool AwardResource ( unsigned char ttype, int nBudgetPercent, unsigned long bAbsoluteAmount, unsigned long bIsSalvage );
	void ServerSetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void SetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void RemoveWeaponDynamicLights ( );
	void AddWeaponDynamicLights ( class ALight* oLight, class ALight* oAmbientLight, class URvrClientEffectInterface* CE_WeaponEffect );
	void SetPendingWeapon ( class AWeapon* DesiredWeapon );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	int GetMaxProbes ( );
	int GetMaxGrenades ( );
	int GetMaxMedigel ( );
	void SetMaxFuel ( float F );
	float GetMaxFuel ( );
	int GetResource ( unsigned char eInvResType );
	void AdjustResource ( unsigned char eInvResType, int Amount, unsigned long bShowNotification, unsigned long bIgnoreBudget );
	void RemoveHeavyWeapons ( );
	void eventEmptyInventory ( );
	void ProcessDamage ( struct FVector Momentum, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, float* TotalDamageDone );
	class AInventory* CreateInventory ( class UClass* NewInventoryItemClass, unsigned long bDoNotActivate );
	class ASFXWeapon* GetWeaponByCategory ( unsigned char Slot, unsigned long bIgnoreWielded );
	class ASFXWeapon* GetWeaponInSlot ( unsigned char Slot, unsigned long bIgnoreWielded );
	void SetWeaponIfAvailable ( class ASFXWeapon* WeapToSwitch );
	void SetWeaponFromSlot ( unsigned char Slot );
	void SetWeaponBySelected ( );
	class AWeapon* GetBestWeapon ( unsigned long bForceADifferentWeapon );
	void ChangedWeapon ( );
	bool CancelWeaponChange ( );
	void UpdateKickbackFade ( float DeltaTime, struct FRotator* out_DeltaRot );
	bool ApplySniperDrift ( float DeltaTime );
	void UpdateKickback ( float DeltaTime, struct FRotator* out_DeltaRot );
	void SetWeaponRecoil ( float PitchRecoil );
	void SwitchToBestWeapon ( unsigned long bForceADifferentWeapon );
	void ServerSetWeaponImmediately ( class ASFXWeapon* WpnForSwitch );
	void InternalSetCurrentWeapon ( class AWeapon* DesiredWeapon );
	bool eventSetWeaponImmediately ( class ASFXWeapon* WpnForSwitch );
	void ReplicatedWeaponChange ( class AWeapon* NewWeapon, unsigned long InstantSwitch );
	void ReplicatedWeaponUpdated ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* ASFXInventoryManager::pClassPointer = NULL;

// Class SFXGame.SFXLoadMovieManager
// 0x0095 (0x00D1 - 0x003C)
class USFXLoadMovieManager : public UObject
{
public:
	struct FScriptDelegate                             MovieStateDelegates[ 0x2 ];                       		// 0x003C (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FNativeLoadingMovie >               NativeMovies;                                     		// 0x0054 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FLoadingLevelTip >                  AreaLoadTips;                                     		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FLoadingTip >                       LoadTips;                                         		// 0x006C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           LoadingMovieNames;                                		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UBioLoadingMovie* >                  DefaultLoadingMovies;                             		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __LoadingMovieDelegate__Delegate;                 		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       WWiseGlobalEvent_LoadMute;                        		// 0x009C (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       WWiseGlobalEvent_LoadUnMute;                      		// 0x00A4 (0x0008) [0x0000000000004000]              ( CPF_Config )
	class UWwiseEventPairObject*                       MovieSound;                                       		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                nLoopBackFrame;                                   		// 0x00B0 (0x0004) [0x0000000000000000]              
	void*                                              srLevelLoadTipStrRef;                             		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              FadeInTime;                                       		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              FadeOutTime;                                      		// 0x00BC (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 FadeOutWwiseEvent;                                		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              MinPlayTime;                                      		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              LoadMovieAudioTimerDelay;                         		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bPlayToCompletion : 1;                            		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRequireExplicitStop : 1;                         		// 0x00CC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bResetToDefaultOnPlayLoadMovie : 1;               		// 0x00CC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bShowLevelLoadTip : 1;                            		// 0x00CC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bStreamFromDisc : 1;                              		// 0x00CC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      PlaybackState;                                    		// 0x00D0 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1409 ];

		return pClassPointer;
	};

	void RegisterDelegate ( unsigned char TriggerState, struct FScriptDelegate InDelegate );
	void eventTriggerDelegates ( unsigned char TriggerState );
	void LoadingMovieDelegate ( );
	void* GetRandomTip ( );
	bool IsLoadingMoviePlaying ( );
	bool StopLoadingMovie ( unsigned long bDelayStopUntilGameHasRendered );
	bool PlayLoadingMovie ( struct FString LevelName, unsigned long bForcePlay );
	void InitLoadScreenTip ( struct FString LevelName );
	void SetupNativeLoadingMovie ( struct FName Tag, class UBioSFScreenTip* ScreenTip, unsigned long RequiresExplicitStop, unsigned long PlayToCompletion, unsigned long StreamFromDisc );
	void SetupLoadingMovie ( class UBioSFScreenTip* ScreenTip, unsigned long HideLoadingTip, unsigned long RequiresExplicitStop, unsigned long PlayToCompletion, unsigned long StreamFromDisc, TArray< class UBioLoadingMovie* >* Movies );
	void ResetToDefaultLoadMovie ( );
};

UClass* USFXLoadMovieManager::pClassPointer = NULL;

// Class SFXGame.SFXLoadoutData
// 0x0048 (0x0084 - 0x003C)
class USFXLoadoutData : public UObject
{
public:
	TArray< class UClass* >                            Weapons;                                          		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FShieldLoadout >                    ShieldLoadouts;                                   		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            Powers;                                           		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPowerLevelUp >                     PowerLevelUpInfo;                                 		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     ShieldOffset;                                     		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   WeaponLevelRange;                                 		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShieldScale;                                      		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1410 ];

		return pClassPointer;
	};

};

UClass* USFXLoadoutData::pClassPointer = NULL;

// Class SFXGame.SFXPlayerSquadLoadoutData
// 0x00AC (0x0130 - 0x0084)
class USFXPlayerSquadLoadoutData : public USFXLoadoutData
{
public:
	TArray< struct FLoadoutWeaponInfo >                AssaultRifles;                                    		// 0x0084 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FLoadoutWeaponInfo >                Shotguns;                                         		// 0x0090 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FLoadoutWeaponInfo >                SniperRifles;                                     		// 0x009C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FLoadoutWeaponInfo >                AutoPistols;                                      		// 0x00A8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FLoadoutWeaponInfo >                HeavyPistols;                                     		// 0x00B4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FLoadoutWeaponInfo >                HeavyWeapons;                                     		// 0x00C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FPlotWeapon >                       PlotWeapons;                                      		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            StandardWeapons;                                  		// 0x00D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FUnlockableWeaponClass >            UnlockableStandardWeapons;                        		// 0x00E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPlayerLoadoutInfoStruct >          PlayerLoadoutInfo;                                		// 0x00F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FLoadoutInfo >                      HenchLoadoutInfo;                                 		// 0x00FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FBonusWeaponInfo >                  PlayerBonusWeapons;                               		// 0x0108 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSpecialWeaponInfo >                PlayerSpecialWeapons;                             		// 0x0114 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSpecialWeaponInfo >                HenchmenSpecialWeapons;                           		// 0x0120 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                MaxWeapons;                                       		// 0x012C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1411 ];

		return pClassPointer;
	};

	void SetWeaponLoadoutFlag ( struct FName nmWeaponClassPath, unsigned char eFlag );
	bool CheckWeaponLoadoutFlag ( struct FName nmWeaponClassPath, unsigned char eFlag );
	bool GetHenchmanLoadoutData ( struct FName HenchClassName, struct FLoadoutInfo* HenchInfo );
	bool GetPlayerLoadoutData ( struct FString PlayerClassName, struct FPlayerLoadoutInfoStruct* PlayerData );
	bool CanHenchmanUseWeaponClass2 ( struct FName HenchTag, struct FName WeaponClassName );
	bool CanHenchmanUseWeaponClass ( struct FName HenchTag, class UClass* Weapon );
	bool IsWeaponClassInThePlayersDefaultWeaponGroups ( class UClass* WClass );
	float GetWeaponPriority ( class UClass* WClass );
	bool CanPlayerUseWeaponGroup ( unsigned char eWeaponGroupID );
	bool CanPlayerUseWeaponClass ( class UClass* WeaponClass );
	bool CanHenchmanUseWeaponGroup ( struct FName HenchTag, unsigned char WeaponGroup );
	bool IsPlayerUsingWeaponGroup ( unsigned char WeaponGroup );
	TArray< struct FName > GetCurrentPlayerWeaponNames ( );
	struct FName GetHenchmanClassname ( struct FName HenchTag );
	int GetPluralPrettyName ( int idx );
	class UClass* FindWeaponClass ( struct FName WeaponClassName );
	void GetWeaponCategoryByName ( struct FName WClassName, int* GroupIdx, int* EntryIdx );
	void GetWeaponCategory ( class UClass* WClass, int* GroupIdx, int* EntryIdx );
	unsigned char GetWeaponCategoryFromClassName ( struct FName WClassName );
	TArray< struct FLoadoutWeaponInfo > GetWeaponGroup ( int idx );
};

UClass* USFXPlayerSquadLoadoutData::pClassPointer = NULL;

// Class SFXGame.SFXModule_Armour
// 0x0060 (0x00A8 - 0x0048)
class USFXModule_Armour : public USFXModule
{
public:
	class USFXArmourPiece*                             ActiveArmour[ 0xC ];                              		// 0x0048 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	int                                                ReplicatedArmourStates[ 0xC ];                    		// 0x0078 (0x0030) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1412 ];

		return pClassPointer;
	};

	class USFXArmourPiece* GetArmourPieceByName ( struct FName ArmourName );
	void AddArmourEntry ( class USFXArmourPiece* piece );
	void SwapToDamagedArmourPiece ( class USFXArmourPiece* ArmourPiece );
	void DetachDamagedArmourPiece ( class USFXArmourPiece* ArmourPiece );
	int GetArmourIndex ( class USFXArmourPiece* ArmourPiece );
	void UpdateReplicatedArmour ( );
	bool DetachArmourPiece ( struct FName ArmourName, class USFXArmourPiece** piece );
	void DetachAllDynamicArmour ( );
	void AttachAllDynamicArmour ( );
	bool HasDynamicArmourToAttach ( );
	void PlayWeaponImpacts ( class ASFXWeapon* Weapon, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation );
	void eventPreviewArmour ( );
	float GetArmourHealthPctByName ( struct FName ArmourName );
	float GetArmourHealthPct ( int ArmourIndex );
	void DestroyAllArmour ( );
	void ApplyDamageToPiece ( int ArmourIndex, float Damage, class AController* instigatedBy );
	void ApplyDamage ( struct FVector Momentum, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation );
	void eventHandlePostBeginPlay ( );
	void ReplicateArmourPiece ( int ArmourIndex );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* USFXModule_Armour::pClassPointer = NULL;

// Class SFXGame.SFXModule_Audio
// 0x0024 (0x006C - 0x0048)
class USFXModule_Audio : public USFXModule
{
public:
	TArray< struct FRTPCPair >                         RTPCs;                                            		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UWwiseEvent*                                 DefaultFootStepEvent;                             		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              FootstepCullDistance;                             		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLastFootStepTime;                              		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeBetweenFootsteps;                             		// 0x0060 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              RunThreshold;                                     		// 0x0064 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bPlayFootstepSounds : 1;                          		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1413 ];

		return pClassPointer;
	};

	void SFXSetAudioComponentRTPCs ( class UActorComponent* pWwiseAudioComponent );
	class UWwiseEvent* GetSpecificFootStepSound ( class USFXPhysicalMaterialFootSteps* FootStepSounds, int FootDown );
	class UWwiseEvent* GetFootStepSound ( class UPhysicalMaterial* PhysMat, int FootDown );
	void PlayStepSound ( int FootDown, struct FTraceHitInfo HitInfo );
	class AActor* PlayFootStepSound ( int FootDown, struct FTraceHitInfo* HitInfo );
};

UClass* USFXModule_Audio::pClassPointer = NULL;

// Class SFXGame.SFXModule_Conversation
// 0x003C (0x0084 - 0x0048)
class USFXModule_Conversation : public USFXModule
{
public:
	struct FVector                                     m_vCameraFocusPoint;                              		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vProceduralCameraPosition;                      		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    m_rProceduralCameraRotation;                      		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFov;                                           		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fNearClip;                                      		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDOFFocusInnerRadius;                           		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDOFFocusDistance;                              		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFaceFXAsset*                                m_pDefaultFaceFXAsset;                            		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bDisableFacefx : 1;                             		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bInConversation : 1;                            		// 0x0080 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1414 ];

		return pClassPointer;
	};

	bool ScriptIsInConversation ( class AActor* pActor );
};

UClass* USFXModule_Conversation::pClassPointer = NULL;

// Class SFXGame.SFXModule_DamageNativeBase
// 0x0039 (0x0081 - 0x0048)
class USFXModule_DamageNativeBase : public USFXModule_DamageBase
{
public:
	struct FScaledFloat                                MaxHealth;                                        		// 0x0048 (0x0024) [0x0000000000400021]              ( CPF_Edit | CPF_Net | CPF_NeedCtorLink )
	float                                              CurrentHealth;                                    		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalizedHealth;                                 		// 0x0070 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              LevelScaledHealth;                                		// 0x0074 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                TOTAL_HEALTH_STEPS;                               		// 0x0078 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastHealthPct;                                    		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ReplicatedHealth;                                 		// 0x0080 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1415 ];

		return pClassPointer;
	};

	struct FScaledFloat GetMaxHealthStats ( );
	float GetHealthRatio ( );
	float GetMaxHealth ( );
	float GetCurrentHealth ( );
	void SetMaxHealth ( struct FScaledFloat NewMaxHealth );
	void SetCurrentHealth ( float NewHealth, unsigned long bRecomputeHealthSegment );
	void ReplicateCurrentHealth ( );
	void InitializeMaxHealth ( float Value );
	void eventHandlePostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* USFXModule_DamageNativeBase::pClassPointer = NULL;

// Class SFXGame.SFXModule_GameEffectManager_NativeBase
// 0x0010 (0x0058 - 0x0048)
class USFXModule_GameEffectManager_NativeBase : public USFXModule
{
public:
	TArray< class USFXGameEffect* >                    GameEffects;                                      		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      EffectListLocked : 1;                             		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1416 ];

		return pClassPointer;
	};

	void eventHandlePreRemove ( );
	void eventRemoveAllEffects ( );
	void Tick ( float DeltaSeconds );
};

UClass* USFXModule_GameEffectManager_NativeBase::pClassPointer = NULL;

// Class SFXGame.SFXModule_Locomotion
// 0x0085 (0x00CD - 0x0048)
class USFXModule_Locomotion : public USFXModule
{
public:
	struct FRotator                                    PawnDesiredRotation;                              		// 0x0048 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     PawnAcceleration;                                 		// 0x0054 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MoveStartInitialPos;                              		// 0x0060 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              MovingLeanYaw[ 0x2 ];                             		// 0x006C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    MyBP;                                             		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNode*                                   AnimNode;                                         		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                StateTag;                                         		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TickTag;                                          		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PawnMoveStartFwdAngle;                            		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStartFwdSpeed;                            		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStartFwdAccelerationTimer;                		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStartSidewayAccelerationTimer;            		// 0x0090 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStartStopTimerThreshold;                  		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStandTurnDistanceThreshold;               		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStandTurnRotRate;                         		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStopTimerThreshold;                       		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStopRestartTimerThreshold;                		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StateTimer;                                       		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StateSpeed;                                       		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MovingLean;                                       		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MovingIncline;                                    		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveStartInitialYaw;                              		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveStartRelYaw;                                  		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveStartLastYaw;                                 		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveStartIdleTimer;                               		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      MoveStartStopping : 1;                            		// 0x00C8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      CurrentState;                                     		// 0x00CC (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1417 ];

		return pClassPointer;
	};

	void eventHandlePostBeginPlay ( );
	void SetAcceleration ( struct FVector Acceleration );
	void SetDesiredRotation ( struct FRotator DesiredRotation );
};

UClass* USFXModule_Locomotion::pClassPointer = NULL;

// Class SFXGame.SFXModule_LookAt
// 0x0038 (0x0080 - 0x0048)
class USFXModule_LookAt : public USFXModule
{
public:
	TArray< class UBioActorLookAtController* >         m_Controllers;                                    		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      m_pTarget;                                        		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                m_nRank;                                          		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              LookAtNoticeTimer;                                		// 0x005C (0x0004) [0x0000000000000000]              
	class AActor*                                      LookAtNoticeActor;                                		// 0x0060 (0x0004) [0x0000000000000000]              
	class UBioLookAtDefinition*                        m_Definition;                                     		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoticeDuration;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoticeEnableDistance;                             		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoticeDisableDistance;                            		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ReNoticeMinTime;                                  		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ReNoticeMaxTime;                                  		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisabling : 1;                                   		// 0x007C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bLookAtNotice : 1;                                		// 0x007C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bEnableLookAtTargeting : 1;                       		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAutoLookAtPlayer : 1;                            		// 0x007C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1418 ];

		return pClassPointer;
	};

	void ChangeTarget ( class AActor* Target, unsigned char a_eTransition, int nRank );
	void Cleanup ( );
	void Setup ( );
	void eventHandlePostBeginPlay ( );
};

UClass* USFXModule_LookAt::pClassPointer = NULL;

// Class SFXGame.SFXModule_Marker
// 0x0034 (0x007C - 0x0048)
class USFXModule_Marker : public USFXModule
{
public:
	struct FString                                     MarkerType;                                       		// 0x0048 (0x000C) [0x0000000000400021]              ( CPF_Edit | CPF_Net | CPF_NeedCtorLink )
	class UClass*                                      GUIMarkerClass;                                   		// 0x0054 (0x0004) [0x0000000000000000]              
	struct FVector                                     MarkerOffset;                                     		// 0x0058 (0x000C) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FName                                       BoneToAttachTo;                                   		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	void*                                              MarkerLabel;                                      		// 0x006C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	class APawn*                                       PawnWithExclusiveVisibility;                      		// 0x0070 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APawn*                                       PawnWithExclusiveInvisibility;                    		// 0x0074 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bActive : 1;                                      		// 0x0078 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1419 ];

		return pClassPointer;
	};

	void DeferredHandlePostAdd ( );
	void Deactivate ( );
	void Activate ( );
	void ActiveStateChanged ( );
	void eventReplicatedEvent ( struct FName VarName );
	bool CanPawnSeeMarker ( class APawn* P );
	void eventHandlePreRemove ( );
	void eventHandlePostAdd ( );
};

UClass* USFXModule_Marker::pClassPointer = NULL;

// Class SFXGame.SFXModule_MarkerObjective
// 0x0001 (0x007D - 0x007C)
class USFXModule_MarkerObjective : public USFXModule_Marker
{
public:
	unsigned char                                      MarkerIconType;                                   		// 0x007C (0x0001) [0x0000000000000021]              ( CPF_Edit | CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1420 ];

		return pClassPointer;
	};

};

UClass* USFXModule_MarkerObjective::pClassPointer = NULL;

// Class SFXGame.SFXModule_MarkerPlayer
// 0x0004 (0x0080 - 0x007C)
class USFXModule_MarkerPlayer : public USFXModule_Marker
{
public:
	unsigned long                                      PlayerIsDown : 1;                                 		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      PlayerIsDead : 1;                                 		// 0x007C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1421 ];

		return pClassPointer;
	};

	void UpdatePlayerDownState ( unsigned long NewPlayerIsDown );
	void eventHandlePostAdd ( );
};

UClass* USFXModule_MarkerPlayer::pClassPointer = NULL;

// Class SFXGame.SFXModule_Radar
// 0x0005 (0x004D - 0x0048)
class USFXModule_Radar : public USFXModule
{
public:
	unsigned long                                      bRadarDisabled : 1;                               		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      RadarType;                                        		// 0x004C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1422 ];

		return pClassPointer;
	};

	void eventHandlePostBeginPlay ( );
};

UClass* USFXModule_Radar::pClassPointer = NULL;

// Class SFXGame.SFXModule_Wound
// 0x0018 (0x0060 - 0x0048)
class USFXModule_Wound : public USFXModule
{
public:
	TArray< struct FBioWoundSpec >                     m_aWoundSpecs;                                    		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FBioWoundSpec >                     m_aWounds;                                        		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1423 ];

		return pClassPointer;
	};

	bool CanSupportAnotherWound ( );
	struct FBoxSphereBounds GetWoundBox ( int WoundIdx );
	void CreateBestWound ( struct FName HitPart, class UClass* DamageType, struct FVector* HitLocation, struct FVector* Momentum );
	void CreateWound ( int WoundIdx );
};

UClass* USFXModule_Wound::pClassPointer = NULL;

// Class SFXGame.SFXModule_Wrinkles
// 0x0020 (0x0068 - 0x0048)
class USFXModule_Wrinkles : public USFXModule
{
public:
	struct FString                                     m_sWrinkleMaterialIdentifier;                     		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FBioWrinkleConfig >                 TextureOverrides;                                 		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                m_nWrinkleHighestLOD;                             		// 0x0060 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bUseWrinkles : 1;                                 		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1424 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	void Tick_Wrinkle ( float DeltaTime );
};

UClass* USFXModule_Wrinkles::pClassPointer = NULL;

// Class SFXGame.sfxmpcharacterrecord
// 0x0078 (0x00B4 - 0x003C)
class Usfxmpcharacterrecord : public UObject
{
public:
	struct FString                                     CharacterName;                                    		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPowerRecord >                      Powers;                                           		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FWeaponRecord >                     Weapons;                                          		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FWeaponModRecord >                  WeaponMods;                                       		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSaveTimeStamp                              TimeStamp;                                        		// 0x006C (0x0010) [0x0000000000000000]              
	struct FName                                       className;                                        		// 0x007C (0x0008) [0x0000000000000000]              
	struct FName                                       KitName;                                          		// 0x0084 (0x0008) [0x0000000000000000]              
	int                                                Tint1ID;                                          		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                Tint2ID;                                          		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                PatternID;                                        		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                PatternColorID;                                   		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                PhongID;                                          		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                EmissiveID;                                       		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                SkinToneID;                                       		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              SecondsPlayed;                                    		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                TalentPointsAvailable;                            		// 0x00AC (0x0004) [0x0000000000000000]              
	unsigned long                                      TalentPointsInitialized : 1;                      		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      Deployed : 1;                                     		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      LeveledUp : 1;                                    		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSerializedFromBlaze : 1;                         		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1425 ];

		return pClassPointer;
	};

	bool IsInitialized ( );
	void SetLeveledUp ( unsigned long bLeveledUp );
	bool HasLeveledUp ( );
	int GetTalentPointsFast ( );
	int GetPointsSpentAtRank ( int PowerRank );
	void ResetPowers ( );
	void ResetCharacter ( unsigned long RetainCustomization );
	void AutoLevelUpPowers ( class ASFXPawn_Player* PlayerPawn );
	class UClass* LoadPower ( struct FString PowerClassName );
	void TransferPowersToPawn ( class ASFXPawn_Player* Pawn );
	void TransferCharacterDataToPawn ( class ASFXPawn_Player* Pawn );
	bool VerifySavedPawnPowers ( class ASFXPawn_Player* Pawn, TArray< struct FName >* SavedPowers );
	void TransferWeaponsToEnginePlayerLoadout ( );
	void InitializeWeaponsFromEnginePlayerLoadout ( );
	void InitializeFromCharacterClass ( struct FString CharacterClassName );
	void SetPowersFromPawn ( class Asfxpawn* Pawn );
	bool IsDeployed ( );
	bool IsUnlocked ( );
	int GetTalentPoints ( );
	void RecalculateTalentPoints ( );
};

UClass* Usfxmpcharacterrecord::pClassPointer = NULL;

// Class SFXGame.sfxmpclassrecord
// 0x0020 (0x005C - 0x003C)
class Usfxmpclassrecord : public UObject
{
public:
	TArray< class Usfxmpcharacterrecord* >             Characters;                                       		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       className;                                        		// 0x0048 (0x0008) [0x0000000000000000]              
	int                                                Level;                                            		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              XPOffset;                                         		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                NumPromotions;                                    		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1426 ];

		return pClassPointer;
	};

	bool HasAnyDeployedCharacters ( );
	bool HaveKitsLeveledUp ( );
	void ResetClass ( unsigned long RetainCustomization );
	bool PromoteClass ( );
	bool CanPromoteClass ( );
	void LevelUpClass ( float fXP, class ABioPlayerController* Controller );
	float GetTotalXP ( );
};

UClass* Usfxmpclassrecord::pClassPointer = NULL;

// Class SFXGame.SFXNav_BlockingPathNode
// 0x0008 (0x02CC - 0x02C4)
class ASFXNav_BlockingPathNode : public APathNode
{
public:
	class ABlockingVolume*                             PathBlockingVolume;                               		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRemovedFromInclusionaryList : 1;                 		// 0x02C8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1427 ];

		return pClassPointer;
	};

	void EndPathMove ( class AActor* Mover );
	void StartPathMove ( class AActor* Mover );
};

UClass* ASFXNav_BlockingPathNode::pClassPointer = NULL;

// Class SFXGame.SFXNav_BoostNode
// 0x0010 (0x02DC - 0x02CC)
class ASFXNav_BoostNode : public ASFXNav_BlockingPathNode
{
public:
	class ANavigationPoint*                            BoostDest;                                        		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostDistX;                                       		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostDistZ;                                       		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTopNode : 1;                                     		// 0x02D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1428 ];

		return pClassPointer;
	};

};

UClass* ASFXNav_BoostNode::pClassPointer = NULL;

// Class SFXGame.SFXNav_ClimbWallNode
// 0x0004 (0x02D0 - 0x02CC)
class ASFXNav_ClimbWallNode : public ASFXNav_BlockingPathNode
{
public:
	class ANavigationPoint*                            ClimbDest;                                        		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1429 ];

		return pClassPointer;
	};

};

UClass* ASFXNav_ClimbWallNode::pClassPointer = NULL;

// Class SFXGame.SFXNav_JumpDownNode
// 0x0014 (0x02E0 - 0x02CC)
class ASFXNav_JumpDownNode : public ASFXNav_BlockingPathNode
{
public:
	class ANavigationPoint*                            JumpDownDest;                                     		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCylinderComponent*                          TouchingCylinder;                                 		// 0x02D0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              JumpDownDistX;                                    		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              JumpDownDistZ;                                    		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTopNode : 1;                                     		// 0x02DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1430 ];

		return pClassPointer;
	};

};

UClass* ASFXNav_JumpDownNode::pClassPointer = NULL;

// Class SFXGame.SFXNav_JumpNode
// 0x0020 (0x02EC - 0x02CC)
class ASFXNav_JumpNode : public ASFXNav_BlockingPathNode
{
public:
	TArray< class ANavigationPoint* >                  JumpDest;                                         		// 0x02CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     LandingOffset;                                    		// 0x02D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UCylinderComponent*                          TouchingCylinder;                                 		// 0x02E4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              JumpDist;                                         		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1431 ];

		return pClassPointer;
	};

};

UClass* ASFXNav_JumpNode::pClassPointer = NULL;

// Class SFXGame.SFXNav_LadderNode
// 0x0014 (0x02E0 - 0x02CC)
class ASFXNav_LadderNode : public ASFXNav_BlockingPathNode
{
public:
	class ANavigationPoint*                            LadderDest;                                       		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXAnimSetCookSpec*                         AnimInfo;                                         		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              LadderDistX;                                      		// 0x02D4 (0x0004) [0x0000000000000000]              
	float                                              MaxJumpHeight;                                    		// 0x02D8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bTopNode : 1;                                     		// 0x02DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisabled : 1;                                    		// 0x02DC (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1432 ];

		return pClassPointer;
	};

	void StartLadderCustomAction ( class ABioPawn* User, int NewAction, class UReachSpec* LadderSpec );
	void OnUse ( class AActor* User );
	bool CanUse ( class AActor* User );
	void PostBeginPlay ( );
};

UClass* ASFXNav_LadderNode::pClassPointer = NULL;

// Class SFXGame.SFXNav_LargeBoostNode
// 0x000C (0x02D8 - 0x02CC)
class ASFXNav_LargeBoostNode : public ASFXNav_BlockingPathNode
{
public:
	class ANavigationPoint*                            BoostDest;                                        		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostDistX;                                       		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostDistZ;                                       		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1433 ];

		return pClassPointer;
	};

};

UClass* ASFXNav_LargeBoostNode::pClassPointer = NULL;

// Class SFXGame.SFXNav_LeapNodeBase
// 0x0018 (0x02E4 - 0x02CC)
class ASFXNav_LeapNodeBase : public ASFXNav_BlockingPathNode
{
public:
	TArray< class ANavigationPoint* >                  LeapDest;                                         		// 0x02CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     LandingOffset;                                    		// 0x02D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1434 ];

		return pClassPointer;
	};

};

UClass* ASFXNav_LeapNodeBase::pClassPointer = NULL;

// Class SFXGame.SFXNav_LeapNodeHumanoid
// 0x0000 (0x02E4 - 0x02E4)
class ASFXNav_LeapNodeHumanoid : public ASFXNav_LeapNodeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1435 ];

		return pClassPointer;
	};

};

UClass* ASFXNav_LeapNodeHumanoid::pClassPointer = NULL;

// Class SFXGame.SFXNav_LeapNodeLarge
// 0x0000 (0x02E4 - 0x02E4)
class ASFXNav_LeapNodeLarge : public ASFXNav_LeapNodeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1436 ];

		return pClassPointer;
	};

};

UClass* ASFXNav_LeapNodeLarge::pClassPointer = NULL;

// Class SFXGame.SFXNav_ForcedPathNode
// 0x0008 (0x02CC - 0x02C4)
class ASFXNav_ForcedPathNode : public ANavigationPoint
{
public:
	float                                              m_fForcedRadius;                                  		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fForcedHeight;                                  		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1437 ];

		return pClassPointer;
	};

};

UClass* ASFXNav_ForcedPathNode::pClassPointer = NULL;

// Class SFXGame.SFXNav_GoalPoint
// 0x000C (0x02D0 - 0x02C4)
class ASFXNav_GoalPoint : public ANavigationPoint
{
public:
	int                                                m_nPriority;                                      		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nOverridePriority;                              		// 0x02C8 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsFinalGoal : 1;                               		// 0x02CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1438 ];

		return pClassPointer;
	};

	int GetPriority ( );
	void ResetPriority ( );
	void OverridePriority ( int nNewPriority );
};

UClass* ASFXNav_GoalPoint::pClassPointer = NULL;

// Class SFXGame.SFXNav_LargeClimbNode
// 0x0008 (0x02CC - 0x02C4)
class ASFXNav_LargeClimbNode : public APathNode
{
public:
	class ANavigationPoint*                            ClimbDest;                                        		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTopNode : 1;                                     		// 0x02C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1439 ];

		return pClassPointer;
	};

};

UClass* ASFXNav_LargeClimbNode::pClassPointer = NULL;

// Class SFXGame.SFXNav_LargeMantleNode
// 0x0004 (0x02C8 - 0x02C4)
class ASFXNav_LargeMantleNode : public APathNode
{
public:
	class ANavigationPoint*                            MantleDest;                                       		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1440 ];

		return pClassPointer;
	};

};

UClass* ASFXNav_LargeMantleNode::pClassPointer = NULL;

// Class SFXGame.SFXNav_SpawnEntrance
// 0x0000 (0x02C4 - 0x02C4)
class ASFXNav_SpawnEntrance : public APathNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1441 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
	void ApplyCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void eventShutDown ( );
	void OnToggle ( class USeqAct_Toggle* inAction );
	bool IsOnDifferentNetwork ( class ANavigationPoint* Nav );
	bool GetAllNavInRadius ( class AActor* ChkActor, struct FVector ChkPoint, float Radius, unsigned long bSkipBlocked, int inNetworkID, struct FCylinder MinSize, TArray< class ANavigationPoint* >* out_NavList );
	class ANavigationPoint* GetNearestNavToPoint ( class AActor* ChkActor, struct FVector ChkPoint, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList );
	class ANavigationPoint* GetNearestNavToActor ( class AActor* ChkActor, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList, float MinDist );
	bool ProceedWithMove ( class APawn* Other );
	bool eventSuggestMovePreparation ( class APawn* Other );
	float eventDetourWeight ( class APawn* Other, float PathWeight );
	bool eventAccept ( class AActor* Incoming, class AActor* Source );
	int eventSpecialCost ( class APawn* Seeker, class UReachSpec* Path );
	bool CanTeleport ( class AActor* A );
	bool IsUsableAnchorFor ( class APawn* P );
	class UReachSpec* GetReachSpecTo ( class ANavigationPoint* Nav, class UClass* SpecClass );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
};

UClass* ASFXNav_SpawnEntrance::pClassPointer = NULL;

// Class SFXGame.SFXNuiSpeech_Combat
// 0x0014 (0x0050 - 0x003C)
class USFXNuiSpeech_Combat : public UObject
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x003C (0x000C) [0x0000000000000000]              
	class AActor*                                      SelectionTarget;                                  		// 0x0048 (0x0004) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1442 ];

		return pClassPointer;
	};

	void* eventGetPlayerClassStringRef ( class ABioPawn* member );
	struct FString eventGetPlayerClassName ( class ABioPawn* member );
	void eventSetWeapon ( class ABioPlayerController* Controller, class ABioPawn* TargetPawn, void* WeaponName );
	void eventCollectWeapons ( class ABioPawn* Pawn, TArray< void* >* WeaponNames );
	void eventHenchmanCleared ( );
	void eventHenchmanSelected ( class ASFXGRI* GRI, TArray< class ABioPawn* >* Pawns );
	void* eventGetSWITCH_WEAPON_STRREF ( );
};

UClass* USFXNuiSpeech_Combat::pClassPointer = NULL;

// Class SFXGame.SFXNuiSpeech_Explore
// 0x0000 (0x003C - 0x003C)
class USFXNuiSpeech_Explore : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1443 ];

		return pClassPointer;
	};

};

UClass* USFXNuiSpeech_Explore::pClassPointer = NULL;

// Class SFXGame.SFXObjectiveDrawSpawnPointComponent
// 0x001C (0x01E8 - 0x01CC)
class USFXObjectiveDrawSpawnPointComponent : public UPrimitiveComponent
{
public:
	TArray< struct FSFXObjectiveSpawnLocationSize >    SpawnLocationExtents;                             		// 0x01CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FLinearColor                                LineColor;                                        		// 0x01D8 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1444 ];

		return pClassPointer;
	};

};

UClass* USFXObjectiveDrawSpawnPointComponent::pClassPointer = NULL;

// Class SFXGame.SFXObjectPool
// 0x00AA (0x02A0 - 0x01F6)
class ASFXObjectPool : public AActor
{
public:
	TArray< struct FSFXObjectPoolTracers >             TracerPool;                                       		// 0x01F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXObjectPoolProjectiles >         ProjectilePool;                                   		// 0x0204 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXObjectPoolDroppedAmmos >        DroppedPool;                                      		// 0x0210 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXObjectPoolImpactPSCs >          ImpactPSCPool;                                    		// 0x021C (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< struct FSFXObjectPoolPSCs >                GenericPSCPool;                                   		// 0x0228 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< struct FSFXObjectPoolEmitters >            EmitterPool;                                      		// 0x0234 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UWwiseAudioComponent*                        WwiseACPool[ 0x14 ];                              		// 0x0240 (0x0050) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                MaxTracers;                                       		// 0x0290 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                MaxImpacts;                                       		// 0x0294 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                WwiseNextIdx;                                     		// 0x0298 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDebugLogOnCleanup : 1;                           		// 0x029C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1445 ];

		return pClassPointer;
	};

	void CleanUpPools ( unsigned long bPreserveRunningEffects, unsigned long bClearAmmo, unsigned long bIsMultiplayerWaveEnd );
	class UWwiseAudioComponent* GetWwiseAudioComponent ( );
	class ASFXEmitter* GetImpactEmitter ( class UParticleSystem* Template, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void PrecacheImpactEmitter ( class UParticleSystem* Template );
	class AEmitter* GetImpactEmitterInternal ( class UParticleSystem* Template, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void eventReusePooledEmitter ( class AEmitter* Emit );
	class AEmitter* eventCreatePooledEmitter ( class UParticleSystem* Template );
	class UParticleSystemComponent* GetGenericParticleSystemComponent ( class UParticleSystem* Template );
	void PrecacheGenericParticleSystemComponent ( class UParticleSystem* Template );
	void ResetPooledPSC ( class UParticleSystemComponent* PSC, unsigned long bHide );
	class UParticleSystemComponent* GetImpactParticleSystemComponent ( class UParticleSystem* Template );
	void PrecacheImpactParticleSystemComponent ( class UParticleSystem* Template, int MinCount );
	class ADroppedPickup* GetDroppedAmmo ( class UClass* DroppedAmmoClass, struct FVector SpawnLocation );
	void eventReusePooledDroppedAmmo ( class ADroppedPickup* Dropped );
	class ADroppedPickup* eventCreatePooledDroppedAmmo ( class UClass* DroppedAmmoClass, struct FVector SpawnLocation );
	class AProjectile* GetProjectile ( class UClass* ProjectileClass, class AActor* ProjOwner, class APawn* ProjInstigator, struct FVector ProjLocation, struct FRotator ProjRotation );
	void PrecacheProjectile ( class UClass* ProjectileClass );
	void eventReusePooledProjectile ( class AProjectile* Proj );
	class AProjectile* eventCreatePooledProjectile ( class UClass* ProjClass, struct FVector SpawnLocation );
	class ASFXTracer* GetTracer ( class UStaticMesh* Mesh, class UParticleSystem* Template );
	void PrecacheTracer ( class UStaticMesh* Mesh, class UParticleSystem* Template, int MinCount );
	void ResetActorParticleSystemComponents ( class AActor* ParOwner );
	void ApplyBloodColor ( class UParticleSystemComponent* PSC, class AActor* HitActor );
	void ApplyLODLevel ( class UParticleSystemComponent* PSC, struct FVector EffectLocation );
	void AttachParticleSystemComponentToSocket ( class UParticleSystemComponent* PSC, class UPrimitiveComponent* HitComponent, struct FName Socket );
	void AttachParticleSystemComponent ( class UParticleSystemComponent* PSC, class AActor* HitActor, class UPrimitiveComponent* HitComponent, struct FName HitBone, struct FVector HitLocation, struct FVector HitNormal, unsigned long bStaticLocation );
};

UClass* ASFXObjectPool::pClassPointer = NULL;

// Class SFXGame.SFXObjectSerializerMT
// 0x0014 (0x0050 - 0x003C)
class USFXObjectSerializerMT : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x14 ];                            		// 0x003C (0x0014) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1446 ];

		return pClassPointer;
	};

};

UClass* USFXObjectSerializerMT::pClassPointer = NULL;

// Class SFXGame.SFXOutlineGlowActorBase
// 0x005A (0x0250 - 0x01F6)
class ASFXOutlineGlowActorBase : public AActor
{
public:
	struct FLinearColor                                CurrentColour;                                    		// 0x01F8 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                SeeThroughSmokeColour;                            		// 0x0208 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     SmokeLineOfSightOffset;                           		// 0x0218 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ColourParam;                                      		// 0x0224 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       MultiplierParam;                                  		// 0x022C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class ABioPawn*                                    Source;                                           		// 0x0234 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   RenderMaterial;                                   		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendTime;                                        		// 0x023C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInterface*                          GlowMaterial;                                     		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              PostDeathGlowDuration;                            		// 0x0244 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastDiedTime;                                     		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bSourceDied : 1;                                  		// 0x024C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1447 ];

		return pClassPointer;
	};

};

UClass* ASFXOutlineGlowActorBase::pClassPointer = NULL;

// Class SFXGame.SFXOutlineGlowActorMP
// 0x0034 (0x0284 - 0x0250)
class ASFXOutlineGlowActorMP : public ASFXOutlineGlowActorBase
{
public:
	struct FLinearColor                                AliveColour;                                      		// 0x0250 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FLinearColor                                DyingColour;                                      		// 0x0260 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FLinearColor                                EnemyColour;                                      		// 0x0270 (0x0010) [0x0000000000000002]              ( CPF_Const )
	float                                              RenderDelay;                                      		// 0x0280 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1448 ];

		return pClassPointer;
	};

};

UClass* ASFXOutlineGlowActorMP::pClassPointer = NULL;

// Class SFXGame.SFXOutlineGlowActorSP
// 0x0020 (0x0270 - 0x0250)
class ASFXOutlineGlowActorSP : public ASFXOutlineGlowActorBase
{
public:
	struct FLinearColor                                EnemyColour;                                      		// 0x0250 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FLinearColor                                HenchmenColour;                                   		// 0x0260 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1449 ];

		return pClassPointer;
	};

};

UClass* ASFXOutlineGlowActorSP::pClassPointer = NULL;

// Class SFXGame.SFXPathWeightLog
// 0x0024 (0x0060 - 0x003C)
class USFXPathWeightLog : public UObject
{
public:
	struct FNavWeight                                  BestWeight;                                       		// 0x003C (0x0018) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FNavWeight >                        NavWeights;                                       		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1450 ];

		return pClassPointer;
	};

	void SetNavWeight ( int NavIndex, float Weight, int ConstraintIndex, unsigned long bRejected );
	int AddNav ( class ANavigationPoint* Nav, int NumConstraints );
};

UClass* USFXPathWeightLog::pClassPointer = NULL;

// Class SFXGame.SFXPickupFactory
// 0x0008 (0x02E8 - 0x02E0)
class ASFXPickupFactory : public APickupFactory
{
public:
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x02E0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1451 ];

		return pClassPointer;
	};

	void PickedUpBy ( class APawn* P );
	void eventSetInitialState ( );
	void Used ( class AActor* User );
	void SpawnCopyFor ( class APawn* Recipient );
	void SetPickupVisible ( );
	void SetPickupHidden ( );
	void SetPickupMesh ( );
	void eventPostBeginPlay ( );
};

UClass* ASFXPickupFactory::pClassPointer = NULL;

// Class SFXGame.SFXRpgPickupFactory
// 0x0000 (0x02E8 - 0x02E8)
class ASFXRpgPickupFactory : public ASFXPickupFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1452 ];

		return pClassPointer;
	};

	void PickedUpBy ( class APawn* P );
	void eventSetInitialState ( );
	void Used ( class AActor* User );
	void SpawnCopyFor ( class APawn* Recipient );
	void SetPickupVisible ( );
	void SetPickupHidden ( );
	void SetPickupMesh ( );
	void eventPostBeginPlay ( );
};

UClass* ASFXRpgPickupFactory::pClassPointer = NULL;

// Class SFXGame.SFXWeaponModFactory
// 0x0010 (0x02F8 - 0x02E8)
class ASFXWeaponModFactory : public ASFXRpgPickupFactory
{
public:
	class UClass*                                      WeaponModClass;                                   		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastUpdateTime;                                   		// 0x02EC (0x0004) [0x0000000000000000]              
	float                                              UpdateFrequency;                                  		// 0x02F0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bStopCustomTicking : 1;                           		// 0x02F4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1453 ];

		return pClassPointer;
	};

	class UPrimitiveComponent* GetPickupMesh ( );
	void SetTooltips ( );
	bool HasPickup ( );
	void Used ( class AActor* User );
	void HideDrop ( );
	void Tick ( float DeltaTime );
	bool DisabilityCheck ( );
	void InitializePickup ( );
};

UClass* ASFXWeaponModFactory::pClassPointer = NULL;

// Class SFXGame.SFXWeaponFactory
// 0x0038 (0x0320 - 0x02E8)
class ASFXWeaponFactory : public ASFXPickupFactory
{
public:
	class UClass*                                      WeaponClass;                                      		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ASFXWeapon*                                  LastWeaponPickedUp;                               		// 0x02EC (0x0004) [0x0000000000000000]              
	float                                              RespawnTime;                                      		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AmmoInClip;                                       		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ReserveAmmo;                                      		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieInfo*                               WeaponSelectionMovieInfo;                         		// 0x02FC (0x0004) [0x0000000000000000]              
	class Usfxgui_weaponselection*                     GUI_WeaponSelection;                              		// 0x0300 (0x0004) [0x0000000000000000]              
	int                                                UpgradeLevels_Normal;                             		// 0x0304 (0x0004) [0x0000000000000000]              
	int                                                UpgradeLevels_NewGamePlus;                        		// 0x0308 (0x0004) [0x0000000000000000]              
	int                                                NewGamePlusID;                                    		// 0x030C (0x0004) [0x0000000000000000]              
	float                                              LastUpdateTime;                                   		// 0x0310 (0x0004) [0x0000000000000000]              
	float                                              UpdateFrequency;                                  		// 0x0314 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 PickupSound;                                      		// 0x0318 (0x0004) [0x0000000000000000]              
	unsigned long                                      ForceRespawn : 1;                                 		// 0x031C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStopCustomTicking : 1;                           		// 0x031C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1454 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	bool DisabilityCheck ( );
	void InitializePickup ( );
	void HideDrop ( );
	void StartWeaponSelection ( );
	void WeaponPickupUIAction ( class UBioSFHandler_MessageBox* oUI, int nSelection );
	void Used ( class AActor* User );
	float GetRespawnTime ( );
	bool DelayRespawn ( );
};

UClass* ASFXWeaponFactory::pClassPointer = NULL;

// Class SFXGame.SFXPlaceableBase
// 0x0014 (0x0270 - 0x025C)
class ASFXPlaceableBase : public AInterpActor
{
public:
	struct FGuid                                       MyGuid;                                           		// 0x025C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsDeactivated : 1;                               		// 0x026C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsDestroyed : 1;                                 		// 0x026C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1455 ];

		return pClassPointer;
	};

	void GetDifficultyDebugStrings ( TArray< struct FString >* DifficultyDebugStrings );
	void GetDebugStrings ( TArray< struct FString >* DebugStrings );
	void SetDestroyed ( );
	void ResetPlaceable ( );
	void PlaceableDestroyed ( );
	void DeactivatePlaceable ( );
	void ActivatePlaceable ( );
	void eventPostBeginPlay ( );
};

UClass* ASFXPlaceableBase::pClassPointer = NULL;

// Class SFXGame.SFXPointOfInterest
// 0x0000 (0x01F6 - 0x01F6)
class ASFXPointOfInterest : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1456 ];

		return pClassPointer;
	};

	struct FVector LocalToWorld ( struct FVector vLocal );
	void eventBioBaseRemovedFromWorld ( );
	void BioRestoreFromStasis ( );
	void BioApplyStasis ( struct FString Cause );
	void eventPlayFootStepSound ( int FootDown );
	void eventSFXSetAudioComponentRTPCs ( class UActorComponent* pWwiseAudioComponent );
	class USkeletalMeshComponent* GetHeadSkelMeshComponent ( );
	class USkeletalMeshComponent* GetPrimarySkelMeshComponent ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	unsigned char GetPowerResistance ( class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, class UClass* DamageType, float* Damage, struct FVector* Force, class AActor** TargetOverride );
	void RemoveSFXModuleIndex ( int nIndex );
	void RemoveSFXModule ( class USFXModule* oModule );
	void AddSFXModule ( class USFXModule* oModule, unsigned long bUserModule );
	void StopAllSounds ( );
	bool WillOverlap ( struct FVector PosA, struct FVector VelA, struct FVector PosB, struct FVector VelB, float StepSize, float Radius, float* Time );
	struct FVector GetAvoidanceVector ( struct FVector GoalLocation, float CollisionRadius, float MaxSpeed, int NumSamples, float VelocityStepRate, float MaxTimeTilOverlap, TArray< class AActor* >* Obstacles );
	bool IsClient ( );
	bool IsServer ( );
	bool IsOwningClient ( );
	void eventReplicationEnded ( );
	void eventPostDemoRewind ( );
	void eventAnimTreeUpdated ( class USkeletalMeshComponent* SkelMesh );
	bool SupportsKismetModification ( class USequenceOp* AskingOp, struct FString* Reason );
	void eventTrailsNotifyEnd ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotifyTick ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotify ( class UAnimNotify_Trails* AnimNotifyData );
	void eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	void GetAimAdhesionExtent ( float* Width, float* Height, struct FVector* Center );
	void GetAimFrictionExtent ( float* Width, float* Height, struct FVector* Center );
	bool IsInPersistentLevel ( );
	void SetActive ( unsigned long bActive );
	class USFXModule* GetModule ( class UClass* ModuleClass );
	void eventExceededPhysicsThreshold ( class AActor* instigatedBy );
	void eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance );
	struct FGuid GetPackageGuid ( struct FName PackageName );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void SetHUDLocation ( struct FVector NewHUDLocation );
	void eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void PickedUpBy ( class APawn* P );
	void eventSpawnedByKismet ( );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	void FindGoodEndView ( class APlayerController* PC, struct FRotator* GoodRotation );
	void NotifyLocalPlayerTeamReceived ( );
	struct FString GetLocationStringFor ( class APlayerReplicationInfo* PRI );
	unsigned char eventScriptGetTeamNum ( );
	unsigned char GetTeamNum ( );
	void PawnBaseDied ( );
	bool IsPlayerOwned ( );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_rotation );
	bool IsStationary ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	bool CanActorPlayFaceFXAnim ( );
	bool IsActorPlayingFaceFXAnim ( );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay );
	void eventFinishMovementControl ( class UInterpGroup* InInterpGroup );
	void eventBeginMovementControl ( class UInterpGroup* InInterpGroup );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnAttachToActor ( class USeqAct_AttachToActor* Action );
	void BioEnqueueDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation );
	void eventBioDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void OnChangeCollision ( class USeqAct_ChangeCollision* Action );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	void OnSetBlockRigidBody ( class USeqAct_SetBlockRigidBody* Action );
	void OnSetVelocity ( class USeqAct_SetVelocity* Action );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnModifyHealth ( class USeqAct_ModifyHealth* Action );
	void BlockForTextureStreaming ( );
	bool TexturePrestreamIsRequired ( );
	void PrestreamTextures ( float Seconds, unsigned long bEnableStreaming, int CinematicTextureGroups );
	void eventShutDown ( );
	void SetNetUpdateTime ( float NewUpdateTime );
	void eventForceNetRelevant ( );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void ClearLatentAction ( class UClass* actionClass, unsigned long bAborted, class USeqAct_Latent* exceptionAction, unsigned long bCancelled );
	bool FindEventsOfClass ( class UClass* EventClass, unsigned long bIncludeDisabled, TArray< class USequenceEvent* >* out_EventList );
	bool ActivateEventClass ( class UClass* InClass, class AActor* inInstigator, unsigned long bTest, TArray< class USequenceEvent* >* EventList, TArray< int >* ActivateIndices, TArray< class USequenceEvent* >* ActivatedEvents );
	bool TriggerGlobalEventClass ( class UClass* InEventClass, class AActor* inInstigator, int ActivateIndex );
	void eventReceivedNewEvent ( class USequenceEvent* Evt );
	bool TriggerEventClass ( class UClass* InEventClass, class AActor* inInstigator, int ActivateIndex, unsigned long bTest, TArray< class USequenceEvent* >* ActivatedEvents );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	bool CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance );
	void ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation );
	bool CanSplash ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	bool IsInPain ( );
	bool IsInVolume ( class AVolume* aVolume );
	void eventReset ( );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventModifyHearSoundComponent ( class UAudioComponent* AC );
	struct FString GetPhysicsName ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FString GetDebugName ( );
	void MatchStarting ( );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void ReplaceText ( struct FString Replace, struct FString With, struct FString* Text );
	struct FString GetHumanReadableName ( );
	struct FString GetItemName ( struct FString FullName );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void eventEndViewTarget ( class APlayerController* PC );
	void eventBecomeViewTarget ( class APlayerController* PC );
	bool CheckForErrors ( );
	void eventDebugFreezeGame ( class AActor* ActorToLookAt );
	float GetGravityZ ( );
	void CheckHitInfo ( class UPrimitiveComponent* FallBackComponent, struct FVector Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation );
	void eventTakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void KilledBy ( class APawn* EventInstigator );
	bool HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool StopsProjectile ( class AProjectile* P );
	void eventNotifySkelControlBeyondLimit ( class USkelControlLookAt* LookAt );
	void eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance );
	void eventSetInitialState ( );
	void eventPostBeginPlay ( );
	void eventBroadcastLocalizedTeamMessage ( int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalizedMessage ( class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventPreBeginPlay ( );
	bool FindActorsOfClass ( class UClass* ActorClass, TArray< class AActor* >* out_Actors );
	bool MoveActorToFloor ( );
	class APlayerController* GetALocalPlayerController ( );
	void LocalPlayerControllers ( class UClass* BaseClass, class APlayerController** PC );
	void AllOwnedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	void ComponentList ( class UClass* BaseClass, class UActorComponent** out_Component );
	void OverlappingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** out_Actor );
	void CollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bUseOverlapCheck, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleCollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, struct FVector Extent, unsigned long bTraceActors, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor );
	void TraceActors ( class UClass* BaseClass, struct FVector End, struct FVector Start, struct FVector Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo );
	void TouchingActors ( class UClass* BaseClass, unsigned long bReverse, class AActor** Actor );
	void BasedActors ( class UClass* BaseClass, class AActor** Actor );
	void ChildActors ( class UClass* BaseClass, class AActor** Actor );
	void DynamicActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	void AllActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	struct FString GetURLMap ( );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	bool PreTeleport ( class ATeleporter* InTeleporter );
	struct FVector GetDestination ( class AController* C );
	bool SuggestTossVelocity ( struct FVector Destination, struct FVector Start, float TossSpeed, float BaseTossZ, float DesiredZPct, struct FVector CollisionSize, float TerminalVelocity, float OverrideGravityZ, unsigned long bOnlyTraceUp, struct FVector* TossVelocity );
	bool PlayerCanSeeMe ( );
	void MakeNoise ( float Loudness, struct FName NoiseType );
	void StopSound ( class UWwiseBaseSoundObject* InSoundEvent );
	void PlaySound ( class UWwiseBaseSoundObject* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	class UAudioComponent* CreateAudioComponent ( class USoundCue* InSoundCue, unsigned long bPlay, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation, unsigned long bAttachToSelf );
	void ResetTimerTimeDilation ( struct FName TimerName, class UObject* inObj );
	void ModifyTimerTimeDilation ( struct FName TimerName, float InTimerTimeDilation, class UObject* inObj );
	float GetRemainingTimeForTimer ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerRate ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerCount ( struct FName inTimerFunc, class UObject* inObj );
	bool IsTimerActive ( struct FName inTimerFunc, class UObject* inObj );
	void PauseTimer ( unsigned long bPause, struct FName inTimerFunc, class UObject* inObj );
	void ClearAllTimers ( class UObject* inObj );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	void eventTornOff ( );
	bool Destroy ( );
	class AActor* Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail, unsigned long bFindSafeLocation );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void GetComponentsBoundingBox ( struct FBox* ActorBox );
	bool IsOverlapping ( class AActor* A );
	bool ContainsPoint ( struct FVector Spot );
	bool FindSpot ( struct FVector BoxExtent, struct FVector* SpotLocation );
	bool TraceAllPhysicsAssetInteractions ( class USkeletalMeshComponent* SkelMeshComp, struct FVector EndTrace, struct FVector StartTrace, struct FVector Extent, TArray< struct FImpactInfo >* out_Hits );
	bool FastTrace ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceBullet );
	bool PointCheckComponent ( class UPrimitiveComponent* InComponent, struct FVector PointLocation, struct FVector PointExtent );
	bool TraceComponent ( class UPrimitiveComponent* InComponent, struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, unsigned long bComplexCollision, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	class AActor* Trace ( struct FVector TraceEnd, struct FVector TraceStart, unsigned long bTraceActors, struct FVector Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	void VolumeBasedDestroy ( class APhysicsVolume* PV );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool UsedBy ( class APawn* User );
	bool eventOverRotated ( struct FRotator* out_Desired, struct FRotator* out_Actual );
	bool ClampRotation ( struct FRotator rBase, struct FRotator rUpperLimits, struct FRotator rLowerLimits, struct FRotator* out_Rot );
	void eventOnSleepRBPhysics ( );
	void eventOnWakeRBPhysics ( );
	void eventRanInto ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void eventCollisionChanged ( );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventBaseChange ( );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void eventUnTouch ( class AActor* Other );
	void eventPostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventFalling ( );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventTimer ( );
	void eventTick ( float DeltaTime );
	void eventLostChild ( class AActor* Other );
	void eventGainedChild ( class AActor* Other );
	void eventDestroyed ( );
	void SetTickIsDisabled ( unsigned long bInDisabled );
	void SetTickGroup ( unsigned char NewTickGroup );
	void ReattachComponent ( class UActorComponent* ComponentToReattach );
	void DetachComponent ( class UActorComponent* ExComponent );
	void AttachComponent ( class UActorComponent* NewComponent );
	void UnClock ( float* Time );
	void Clock ( float* Time );
	void SetPhysics ( unsigned char newPhysics );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetHidden ( unsigned long bNewHidden );
	void ChartData ( struct FString DataName, float DataValue );
	void FlushDebugStrings ( );
	void DrawDebugFrustrum ( unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, struct FMatrix* FrustumToWorld );
	void DrawDebugString ( struct FVector TextLocation, struct FString Text, class AActor* TestBaseActor, struct FColor TextColor, float Duration );
	void DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines );
	void DrawDebugCylinder ( struct FVector Start, struct FVector End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines );
	void DrawDebugStar ( struct FVector Position, float Size, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugBox ( struct FVector Center, struct FVector Extent, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugPoint ( struct FVector Position, float Size, struct FLinearColor PointColor, unsigned long bPersistentLines );
	void DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void FlushPersistentDebugLines ( );
	struct FVector GetBasedPosition ( struct FBasedPosition BP );
	void SetBasedPosition ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	struct FVector BP2Vect ( struct FBasedPosition BP );
	void Vect2BP ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	void SetForcedInitialReplicatedProperty ( class UProperty* PropToReplicate, unsigned long bAdd );
	void eventReplicatedDataBinding ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsOwnedBy ( class AActor* TestActor );
	class AActor* GetBaseMost ( );
	bool IsBasedOn ( class AActor* TestActor );
	void FindBase ( );
	void SetOwner ( class AActor* NewOwner );
	void SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName );
	float GetTerminalVelocity ( );
	void AutonomousPhysics ( float DeltaSeconds );
	bool MoveSmooth ( struct FVector Delta );
	int fixedTurn ( int Current, int Desired, int DeltaRate );
	void SetHardAttach ( unsigned long bNewHardAttach );
	bool SetRelativeLocation ( struct FVector NewLocation );
	bool SetRelativeRotation ( struct FRotator NewRotation );
	void SetZone ( unsigned long bForceRefresh );
	unsigned char MovingWhichWay ( float* Amount );
	bool SetRotation ( struct FRotator NewRotation );
	bool SetLocation ( struct FVector NewLocation, unsigned long bDebugFailure );
	bool Move ( struct FVector Delta );
	void SetDrawScale3D ( struct FVector NewScale3D );
	void SetDrawScale ( float NewScale );
	void SetCollisionType ( unsigned char NewCollisionType );
	void SetCollisionSize ( float NewRadius, float NewHeight );
	void SetCollision ( unsigned long bNewColActors, unsigned long bNewBlockActors, unsigned long bNewIgnoreEncroachers );
	void FinishAnim ( class UAnimNodeSequence* SeqNode );
	void Sleep ( float Seconds );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	void ForceUpdateComponents ( unsigned long bCollisionUpdate, unsigned long bTransformOnly );
};

UClass* ASFXPointOfInterest::pClassPointer = NULL;

// Class SFXGame.SFXPreAsyncWorkTicker
// 0x0026 (0x021C - 0x01F6)
class ASFXPreAsyncWorkTicker : public AActor
{
public:
	TArray< struct FSFXPreAsyncWorkQueuedShot >        QueuedShots;                                      		// 0x01F8 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< struct FSFXPreAsyncWorkQueuedPowerImpact > QueuedPowerImpacts;                               		// 0x0204 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnActorImpacted__Delegate;                      		// 0x0210 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1457 ];

		return pClassPointer;
	};

	bool DoAreaExplosionForActor ( class USFXPowerCustomActionBase* Power, class AActor* Target, struct FVector ExplosionLocation, int ImpactCount, float Damage, class UClass* DamageType, float Force, int MaxRagdollOverride, unsigned long bReplicateCustomAction, struct FScriptDelegate ImpactCallback, class UClass* MaxRagdollDmgTypeOverride, struct FAreaEffectParameters* Params );
	bool OnActorImpacted ( unsigned char Resistance, class AActor* Impacted, int PreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal );
	bool DoPowerDetonationForActor ( class USFXPowerCustomActionBase* Power, class AActor* Target, struct FVector HitLocation, struct FVector HitNormal, int ImpactCount, unsigned long bFirstTarget, unsigned long bReplicateCustomAction, class ASFXProjectile_PowerCustomAction* Projectile );
	void ProcessInstantHit ( class ASFXWeapon_NativeBase* Weapon, unsigned char FiringMode, unsigned long bSuppressAudio, int NumHits, struct FImpactInfo* Impact );
};

UClass* ASFXPreAsyncWorkTicker::pClassPointer = NULL;

// Class SFXGame.SFXPRI_NativeBase
// 0x000C (0x02BA - 0x02AE)
class ASFXPRI_NativeBase : public APlayerReplicationInfo
{
public:
	unsigned long                                      bSquadUsesPowers : 1;                             		// 0x02B0 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bAutoSave : 1;                                    		// 0x02B0 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bAutoLogin : 1;                                   		// 0x02B0 (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bSwapCrossCircle : 1;                             		// 0x02B0 (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bSwapTriggersShoulders : 1;                       		// 0x02B0 (0x0004) [0x0000000000002001] [0x00000010] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bHideCinematicHelmetPreference : 1;               		// 0x02B0 (0x0004) [0x0000000000002001] [0x00000020] ( CPF_Edit | CPF_Transient )
	unsigned char                                      ControllerSensitivityConfig;                      		// 0x02B4 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      TriggerConfig;                                    		// 0x02B5 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      StickConfig;                                      		// 0x02B6 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      AimAssistConfig;                                  		// 0x02B7 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      AutoLevelUp;                                      		// 0x02B8 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      HenchmenHelmetPreference;                         		// 0x02B9 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1458 ];

		return pClassPointer;
	};

	class APawn* eventGetAPawn ( );
};

UClass* ASFXPRI_NativeBase::pClassPointer = NULL;

// Class SFXGame.SFXProfileSettings
// 0x0010 (0x009C - 0x008C)
class USFXProfileSettings : public UOnlineProfileSettings
{
public:
	TArray< struct FBonusPowerUnlockData >             BonusPowerUnlockDataArray;                        		// 0x008C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                MinReadinessRating;                               		// 0x0098 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1459 ];

		return pClassPointer;
	};

	void SetLanguageSpeech ( struct FString Language );
	struct FString GetLanguageSpeech ( );
	void SetLanguageText ( struct FString Language );
	struct FString GetLanguageText ( );
	void SetLanguageVO ( struct FString Language );
	struct FString GetLanguageVO ( );
	bool eventIsPlotStateIDABonusPowerPlotStateID ( int PlotStateID );
	void GetBonusPowerArray ( TArray< struct FBonusPowerUnlockData >* OutBonusPowers );
	bool IsBonusPowerUnlocked ( int BonusPowerID );
	void UpdateBonusPowerProfileSettings ( );
	void UpdateBonusPowerPlotStates ( );
	void UnlockBonusPower ( int BonusPowerID );
	void SaveGalaxyAtWarRatings ( unsigned long bUpdateOverall, unsigned long bUpdateZones, unsigned long bUpdateWarAssets, int OverallReadiness, TArray< int > ZoneRatings, TArray< int > WarAssets );
	void LoadGalaxyAtWarRatings ( int* OverallReadiness, TArray< int >* ZoneRatings, TArray< int >* WarAssets );
	bool GetActionIconHintOption ( );
	unsigned char GetHenchmenHelmetOption ( );
	void SetHenchmenHelmetOption ( unsigned char InValue );
	bool GetHideCinematicHelmet ( );
	void SetHideCinematicHelmet ( unsigned long bHideCinematicHelmet );
	bool GetShowScoreIndicators ( );
	void SetShowScoreIndicators ( unsigned long bShowIndicators );
	void SetLastSelectedCharacter ( struct FString NewValue );
	struct FString GetLastSelectedCharacter ( );
	bool GetSwappedTriggersShoulders ( );
	bool GetSwappedCrossCircle ( );
	void SetToDefaultsEx ( TArray< unsigned char >* lstProfileSettingsToReset );
	void eventSetAutoReplyMode ( int mode );
	int eventGetAutoReplyMode ( );
	bool GetChoseMorinthNotSamara ( );
	void SetChoseMorinthNotSamara ( unsigned long ChoseMorinth );
	bool HasCompletedAccomplishment ( int AccomplishmentIndex );
	bool SetAccomplishmentCompleted ( int AccomplishmentIndex, class ABioPlayerController* PC, unsigned long bSaveProfile );
	bool SetAccomplishmentUncompleted ( int AccomplishmentIndex, class ABioPlayerController* PC, unsigned long bSaveProfile );
	int GetAccomplishmentSettingField ( int AccomplishmentIndex );
	struct FString GetFinishedGameCareerName ( );
	void SetHasSeenKinectTutorialPrompt ( unsigned long bHasSeen );
	bool GetHasSeenKinectTutorialPrompt ( );
	int GetNumGameCompletions ( );
	int GetNumSPMapsInsane ( );
	int GetHighestWeaponLevel ( );
	int GetNumArmorBought ( );
	int GetNumSPMapsComplete ( );
	int GetNumGuardianHeadKilled ( );
	int GetNumPowerCombos ( );
	int GetNumEnemiesOnFire ( );
	int GetNumEnemiesFlying ( );
	int GetNumShieldsOverloaded ( );
	int GetNumMeleeKills ( );
	int GetNumKills ( );
	int GetSPLevel ( );
	int GetNumSalvageFound ( );
	void SetCurrentCareerName ( struct FString CareerName );
	struct FString GetCurrentCareerName ( );
	void SetCurrentDeviceID ( int DeviceID, class ABioPlayerController* PC );
	int GetCurrentDeviceID ( );
	bool GetFilmgrainConfigOption ( );
	bool GetMotionBlurConfigOption ( );
	unsigned char eventGetAudioDynamicRangeOption ( );
	int eventGetDialogVolume ( );
	int eventGetFXVolume ( );
	int eventGetMusicVolume ( );
	float GetDisplayGamma ( );
	void SetShowHints ( unsigned long bEnabled );
	bool eventAreHintsEnabled ( );
	void SetTelemetryCollection ( unsigned long bEnabled );
	bool IsTelemetryCollectionEnabled ( );
	bool GetAutoLoginConfigOption ( );
	void SetAutoSaveConfigOption ( unsigned long bAutoSave );
	bool GetAutoSaveConfigOption ( );
	bool GetSquadPowerConfigOption ( );
	void SetFriendChallengePointBlob ( struct FString userBlob );
	void GetFriendChallengePointBlob ( struct FString* userBlob );
	int GetPreviousChallengePointLocalUser ( );
	void SetPreviousChallengePointLocalUser ( int n7Rating );
	void SetFriendN7RatingBlob ( struct FString userBlob );
	void SetN7RatingLocalUser ( int n7Rating );
	void GetFriendN7RatingBlob ( struct FString* userBlob );
	int GetN7RatingLocalUser ( );
	unsigned char GetMPAutoLevelConfigOption ( );
	unsigned char GetAutoLevelConfigOption ( );
	void SetDifficultyConfigOption ( int Value );
	unsigned char eventGetDifficultyConfigOption ( );
	unsigned char GetAimAssistValue ( );
	bool GetSubtitleConfigOption ( );
	void eventSetTriggerConfigOption ( unsigned char eOption );
	unsigned char eventGetTriggerConfigOption ( );
	unsigned char GetStickConfigOption ( );
	unsigned char GetControllerSensitivityValue ( );
	bool GetInvertYOption ( );
	bool GetControllerVibrationOption ( );
};

UClass* USFXProfileSettings::pClassPointer = NULL;

// Class SFXGame.SFXReachSpecPlaceholderCylinder
// 0x000E (0x0204 - 0x01F6)
class ASFXReachSpecPlaceholderCylinder : public AActor
{
public:
	TArray< class APawn* >                             PawnsToIgnore;                                    		// 0x01F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1460 ];

		return pClassPointer;
	};

};

UClass* ASFXReachSpecPlaceholderCylinder::pClassPointer = NULL;

// Class SFXGame.SFXSavedMove
// 0x0026 (0x010D - 0x00E7)
class USFXSavedMove : public USavedMove
{
public:
	struct FName                                       ControllerState;                                  		// 0x00E8 (0x0008) [0x0000000000000000]              
	int                                                TimeStampMS;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                PawnDesiredYaw;                                   		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              MoveMag;                                          		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                AimDeltaRotYaw;                                   		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                AimDeltaRotPitch;                                 		// 0x0100 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsInStationaryCover : 1;                         		// 0x0104 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWantsToStorm : 1;                                		// 0x0104 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bStorming : 1;                                    		// 0x0104 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCancelStorm : 1;                                 		// 0x0104 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bWantsToCrouch : 1;                               		// 0x0104 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWantsToPortArm : 1;                              		// 0x0104 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bAimAssistActive : 1;                             		// 0x0104 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bIsDead : 1;                                      		// 0x0104 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bIsSniping : 1;                                   		// 0x0104 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned char                                      SavedMoveType;                                    		// 0x0108 (0x0001) [0x0000000000000000]              
	unsigned char                                      CoverType;                                        		// 0x0109 (0x0001) [0x0000000000000000]              
	unsigned char                                      CoverAction;                                      		// 0x010A (0x0001) [0x0000000000000000]              
	unsigned char                                      CoverDirection;                                   		// 0x010B (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentSlotDirection;                             		// 0x010C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1461 ];

		return pClassPointer;
	};

	void CopyFrom ( class USFXSavedMove* PreviousMove );
	bool HasChanges ( class USFXSavedMove* PreviousMove );
	void BioSetFlags ( class ABioPlayerController* BioPC );
	unsigned char SetFlags ( unsigned char Flags, class APlayerController* PC );
	unsigned char CompressedFlags ( );
	void SetMoveFor ( class APlayerController* P, float DeltaTime, struct FVector newAccel, unsigned char InDoubleClick );
	void Clear ( );
};

UClass* USFXSavedMove::pClassPointer = NULL;

// Class SFXGame.SFXSaveGame
// 0x0382 (0x03BE - 0x003C)
class USFXSaveGame : public UObject
{
public:
	struct FPlayerSaveRecord                           PlayerRecord;                                     		// 0x003C (0x01D8) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FPlotTableSaveRecord                        PlotRecord;                                       		// 0x0214 (0x0058) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FME1PlotTableRecord                         ME1PlotRecord;                                    		// 0x026C (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FGalaxyMapSaveRecord                        GalaxyMapRecord;                                  		// 0x0290 (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FDependentDLCRecord >               DependentDLC;                                     		// 0x02A8 (0x000C) [0x0000000000500001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FME2ImportPowerMapping >            ME2ImportPowerMappings;                           		// 0x02B4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     Filename;                                         		// 0x02C0 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     DebugName;                                        		// 0x02CC (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FLevelSaveRecord >                  LevelRecords;                                     		// 0x02D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FStreamingStateSaveRecord >         StreamingRecords;                                 		// 0x02E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FLevelTreasureSaveRecord >          TreasureRecords;                                  		// 0x02F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FKismetBoolSaveRecord >             KismetRecords;                                    		// 0x02FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FDoorSaveRecord >                   DoorRecords;                                      		// 0x0308 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPlaceableSaveRecord >              PlaceableRecords;                                 		// 0x0314 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGuid >                             PawnRecords;                                      		// 0x0320 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGuid >                             UseModuleRecords;                                 		// 0x032C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FHenchmanSaveRecord >               HenchmanRecords;                                  		// 0x0338 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPlayerVariableSaveRecord >         PlayerVariableRecords;                            		// 0x0344 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FObjectiveMarkerSaveRecord >        ObjectiveMarkerRecords;                           		// 0x0350 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FSaveTimeStamp                              TimeStamp;                                        		// 0x035C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SaveLocation;                                     		// 0x036C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    SaveRotation;                                     		// 0x0378 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BaseLevelName;                                    		// 0x0384 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BaseLevelNameDisplayOverrideAsRead;               		// 0x038C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BaseLevelNameDisplayOverrideToWriteAndClear;      		// 0x0394 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                SerializedSize;                                   		// 0x039C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                FileVersion;                                      		// 0x03A0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              SecondsPlayed;                                    		// 0x03A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Disc;                                             		// 0x03A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EndGameState;                                     		// 0x03AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              SavedObjectiveText;                               		// 0x03B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentLoadingTip;                                		// 0x03B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsValid : 1;                                     		// 0x03B8 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned char                                      Difficulty;                                       		// 0x03BC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ConversationMode;                                 		// 0x03BD (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1462 ];

		return pClassPointer;
	};

	bool HasME1PlotData ( );
	void eventSaveTreasure ( );
	void LoadHotKeys ( class ABioPlayerController* PC, TArray< struct FHotKeySaveRecord >* records );
	void LoadWeaponMods ( class ASFXPawn_Player* Player, TArray< struct FWeaponModSaveRecord >* records );
	int LoadAmmo ( class ASFXPawn_Player* Player, class ASFXWeapon* Weapon, struct FWeaponSaveRecord Record );
	void LoadWeaponsNotInInventory ( class ASFXPawn_Player* Player, class ASFXWeapon* Weapon, TArray< struct FWeaponSaveRecord >* records );
	void LoadWeapons ( class ASFXPawn_Player* Player, TArray< struct FWeaponSaveRecord >* records );
	void LoadGAWAssets ( class Asfxpawn* Pawn, TArray< struct FGAWAssetSaveInfo >* records );
	void LoadPowers ( class Asfxpawn* Pawn, TArray< struct FPowerSaveRecord >* records );
	void LoadPawnPowers ( class ABioPawn* Pawn );
	void LoadMorphHead ( class ASFXPawn_Player* InPlayer );
	void LoadAppearance ( class ASFXPawn_Player* Player, struct FAppearanceSaveRecord* Record );
	void eventLoadHenchman ( class ASFXPawn_Henchman* Hench );
	void eventLoadPlayerWeapons ( int PlayerID );
	void eventLoadPlayer ( int PlayerID );
	void GetSpawnData ( int* IsFemale, class UClass** CharacterClass, struct FString* firstName, unsigned char* Origin, unsigned char* Notoriety, int* CombatPawn, int* InjuredPawn, int* CasualAppearance );
	void SaveHotKeys ( class ABioPlayerController* PC, TArray< struct FHotKeySaveRecord >* records );
	void SaveWeapons ( class Asfxpawn* Pawn, TArray< struct FWeaponSaveRecord >* records );
	void SaveGAWAssets ( class ASFXPawn_Player* Pawn, TArray< struct FGAWAssetSaveInfo >* records );
	void SavePowers ( class Asfxpawn* Pawn, TArray< struct FPowerSaveRecord >* records );
	bool SaveMorphHead ( class UBioMorphFace* Morph, struct FMorphHeadSaveRecord* Record );
	void SaveAppearance ( class ASFXPawn_Player* Player, struct FAppearanceSaveRecord* Record );
	void eventSaveHenchmen ( int PlayerID );
	void EnsureHenchmanRecordExists ( class ASFXPawn_Henchman* Hench );
	void eventSavePlayer ( int PlayerID );
	void UpdatePlayerSaveRecord ( struct FPlayerInfoEx PlayerInfo );
	bool GetPlayerRecord ( struct FPlayerSaveRecord* Record );
};

UClass* USFXSaveGame::pClassPointer = NULL;

// Class SFXGame.SFXSaveGameCallback
// 0x000C (0x0048 - 0x003C)
class USFXSaveGameCallback : public UObject
{
public:
	TArray< struct FScriptDelegate >                   SaveCommandCompleteDelegates;                     		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1463 ];

		return pClassPointer;
	};

	void ClearSaveCommandCompleteDelegate ( struct FScriptDelegate SaveCommandCompleteDelegate );
	void AddSaveCommandCompleteDelegate ( struct FScriptDelegate SaveCommandCompleteDelegate );
	void SaveGameCommandComplete ( struct FSFXSaveGameCommandEventArgs Args );
};

UClass* USFXSaveGameCallback::pClassPointer = NULL;

// Class SFXGame.SFXSaveManagerMP
// 0x014C (0x0188 - 0x003C)
class USFXSaveManagerMP : public UObject
{
public:
	struct FMPTutorialPromoMessage                     DefaultTutorialMessage;                           		// 0x003C (0x001C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FMPClassData >                      MPClasses;                                        		// 0x0058 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FMPKitData >                        MPKits;                                           		// 0x0064 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class Usfxmpclassrecord* >                 Classes;                                          		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class Usfxmpcharacterrecord* >             Characters;                                       		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMPFaceCodeData >                   FaceCodes;                                        		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FStartingMPPlayerVariable >         DefaultMPPlayerVariables;                         		// 0x0094 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FNewReinforcementData >             NewReinforcements;                                		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            ValidNewReinforcementCategories;                  		// 0x00AC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FPendingSaveOperation >             PendingSaveOperations;                            		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPendingLoadOperation >             PendingLoadOperations;                            		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FActiveMatchConsumable >            ActiveMatchConsumablesForOfflineTransfer;         		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     NewlyAffordableStoreItemsPlayerVariableName;      		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSaveRecordsDelegate__Delegate;                		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRefreshMPDataDelegate__Delegate;              		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0100 (0x003C) UNKNOWN PROPERTY: MapProperty SFXGame.SFXSaveManagerMP.PlayerVariables
	int                                                MaxMPLevelBonus;                                  		// 0x013C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                AvailableCredits;                                 		// 0x0140 (0x0004) [0x0000000000000000]              
	int                                                NextPackToConsume;                                		// 0x0144 (0x0004) [0x0000000000000000]              
	int                                                NumCopiesToConsume;                               		// 0x0148 (0x0004) [0x0000000000000000]              
	int                                                TotalCreditsSpent;                                		// 0x014C (0x0004) [0x0000000000000000]              
	int                                                TotalPlatformCurrencySpent;                       		// 0x0150 (0x0004) [0x0000000000000000]              
	int                                                SessionCreditsSpent;                              		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SessionCreditsEarned;                             		// 0x0158 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SessionPlatformCurrencySpent;                     		// 0x015C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TotalGamesPlayed;                                 		// 0x0160 (0x0004) [0x0000000000000000]              
	int                                                TotalTimePlayed;                                  		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                LastLevelUpTime;                                  		// 0x0168 (0x0004) [0x0000000000000000]              
	class USFXOnlineSaveGameMP*                        OnlineSave;                                       		// 0x016C (0x0004) [0x0000000000000000]              
	void*                                              srTooNewErrorMessage;                             		// 0x0170 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srTooNewErrorMessageBoxOK;                        		// 0x0174 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USFXMatchResultsData*                        MPMatchResultsData;                               		// 0x0178 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class Usfxmpcharacterrecord*                       CurrentCharacter;                                 		// 0x017C (0x0004) [0x0000000000000000]              
	class Usfxmpcharacterrecord*                       CurrCharacterToModify;                            		// 0x0180 (0x0004) [0x0000000000000000]              
	unsigned long                                      bInitialized : 1;                                 		// 0x0184 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisableSaving : 1;                               		// 0x0184 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bDebugPlayerVariables : 1;                      		// 0x0184 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bSaveInProgress : 1;                            		// 0x0184 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bLoadInProgress : 1;                            		// 0x0184 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1464 ];

		return pClassPointer;
	};

	void DeployCharacter ( class Usfxmpcharacterrecord* Character );
	struct FSFXOnlineMOTDInfo GetPromotionalMessageData ( );
	void ClearLocalPRIMatchConsumablesForOfflineTransfer ( class Asfxpri* PRI );
	void SaveLocalPRIMatchConsumablesForOfflineTransfer ( class Asfxpri* PRI );
	void HandlePendingOperations ( );
	void UnlockAllMPKits ( );
	void ResetMPData ( );
	int FindNewReinforcementIndex ( unsigned char Category, struct FString VariableName );
	bool HasNewReinforcementWithSubstringInName ( unsigned char Category, struct FString Substring );
	bool HasNewReinforcementCategory ( unsigned char Category );
	bool HasNewReinforcement ( unsigned char Category, struct FString VariableName );
	void ClearNewReinforcementCategory ( unsigned char Category );
	void ClearNewReinforcement ( unsigned char Category, struct FString VariableName );
	void AddNewReinforcement ( unsigned char Category, struct FString VariableName );
	bool IsNewReinforcementCategoryValid ( unsigned char Category );
	bool AreAnyCharactersDeployed ( );
	int eventGetCurrentCharacterClassLevel ( );
	struct FString eventGetCurrentCharacterKit ( );
	struct FString eventGetCurrentCharacterClass ( );
	struct FString eventGetCurrentCharacterName ( );
	void ClearFaceCodes ( );
	TArray< struct FMPFaceCodeData > GetFaceCodes ( );
	void SetFaceCodesFromServer ( TArray< struct FMPFaceCodeData >* serverFaceCodes );
	void AddNewFaceCode ( struct FString firstName, struct FString faceCode );
	int eventGetN7Rating ( );
	bool IsKitUnlocked ( struct FName KitName );
	void ResetCharacter ( struct FName KitName, unsigned long RetainCustomization );
	void ResetClass ( struct FName className, unsigned long RetainCustomization );
	bool PromoteClass ( struct FName className );
	bool CanPromoteClass ( struct FName className );
	struct FString GetUniqueCharacterName ( struct FName KitName );
	void* GetKitDefaultName ( struct FName KitName );
	struct FMPKitData GetKitData ( struct FName KitName );
	void* GetClassPrettyName ( struct FName BaseClassName );
	void* GetKitBaseClassPrettyName ( struct FName KitName );
	struct FString GetKitArchetypeReference ( struct FName KitName );
	void LevelUpClass ( struct FName className, float fXP );
	void eventSetupInitialMPPlayerVariables ( );
	void ResetMPPlayerVariables ( );
	void SetupInitialMPCharacters ( );
	void InitializeCharacterNames ( );
	void Initialize ( );
	void RefreshMPData ( );
	void LoadCharacters ( );
	void ReadPlayerStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool RefreshMPDataFromServerImpl ( struct FScriptDelegate RefreshDelegate );
	void RefreshMPDataFromServer ( struct FScriptDelegate RefreshDelegate );
	void SaveRecordsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void OnTooNewErrorMessageInput ( unsigned long bAPressed, int nContext );
	void ShowDataTooNewError ( );
	void SaveRecordsImpl ( unsigned long ForceSaveBase, struct FScriptDelegate SaveDelegate );
	void SaveRecords ( unsigned long ForceSaveBase, struct FScriptDelegate SaveDelegate );
	void SetSavingDisabled ( unsigned long bDisabled );
	int GetClassLevel ( struct FName className );
	TArray< class Usfxmpcharacterrecord* > GetCharacterRecords ( struct FName className );
	class Usfxmpcharacterrecord* GetCharacterRecord ( struct FName KitName );
	TArray< class Usfxmpcharacterrecord* > GetAllCharacterRecords ( );
	class Usfxmpclassrecord* GetClassRecord ( struct FName className );
	TArray< class Usfxmpclassrecord* > GetAllClassRecords ( );
	bool IsCurrentSelectedCharacterRecordValid ( );
	class Usfxmpcharacterrecord* GetCurrentSelectedCharacterRecord ( );
	struct FName GetLastSelectedCharacterRecordName ( );
	unsigned char VerifyNameIsValid ( struct FString CharacterName, class Usfxmpcharacterrecord* RecordToIgnore );
	void ClearCurrentModifiableCharacter ( );
	class Usfxmpcharacterrecord* GetCurrentModifiableCharacter ( );
	bool SetCurrentModifiableCharacter ( struct FName KitName );
	bool SwitchToLastSelectedCharacterRecord ( );
	bool SetCurrentSelectedCharacterRecord ( struct FName KitName );
	void GetAllPlayerVariableIDsAndValues ( TArray< struct FName >* VariableIDs, TArray< int >* VariableValues );
	void SetPlayerVariableFromID ( struct FName VariableID, int nValue );
	struct FName eventGetMPPlayerVariableName ( struct FName VariableID );
	struct FName eventGetMPPlayerVariableID ( struct FName VariableName );
	void QueryPlayerVariables ( struct FString SearchText, TArray< struct FName >* VariableNames );
	int GetPlayerVariable ( struct FName VariableName );
	void SetPlayerVariable ( struct FName VariableName, int nValue );
	void PackConsumed ( );
	bool SetNextPackToConsume ( int nID, int nCopies );
	int GetNumCopiesToConsume ( );
	int GetNextPackToConsume ( );
	void SubtractCredits ( int nCreditAmount, struct FString Transaction );
	void SetCredits ( int nCreditAmount );
	void AddCredits ( int nCreditAmount, struct FString Transaction );
	int GetCredits ( );
	class USFXMatchResultsData* GetMPMatchResultsData ( );
	class ABioPlayerController* GetPC ( );
	void OnRefreshMPDataDelegate ( int nResult );
	void OnSaveRecordsDelegate ( int nResult );
};

UClass* USFXSaveManagerMP::pClassPointer = NULL;

// Class SFXGame.SFXSelectionLensFlareComponent
// 0x0000 (0x0204 - 0x0204)
class USFXSelectionLensFlareComponent : public ULensFlareComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1465 ];

		return pClassPointer;
	};

	void SetIsActive ( unsigned long bInIsActive );
	void SetSourceColor ( struct FLinearColor InSourceColor );
	void SetTemplate ( class ULensFlare* NewTemplate );
};

UClass* USFXSelectionLensFlareComponent::pClassPointer = NULL;

// Class SFXGame.SFXSelectionModule
// 0x0041 (0x0089 - 0x0048)
class USFXSelectionModule : public USFXModule
{
public:
	struct FString                                     m_GameName;                                       		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     m_TargetOffset;                                   		// 0x0054 (0x000C) [0x0000000004000009]              ( CPF_Edit | CPF_ExportObject | CPF_EditInline )
	struct FName                                       m_nmNonPawnBoneName;                              		// 0x0060 (0x0008) [0x0000000004000009]              ( CPF_Edit | CPF_ExportObject | CPF_EditInline )
	void*                                              m_srGameName;                                     		// 0x0068 (0x0004) [0x0000000004000009]              ( CPF_Edit | CPF_ExportObject | CPF_EditInline )
	float                                              m_fSelectionRadius;                               		// 0x006C (0x0004) [0x0000000004000009]              ( CPF_Edit | CPF_ExportObject | CPF_EditInline )
	float                                              m_fMaxSelectionRangeSqr;                          		// 0x0070 (0x0004) [0x0000000004000009]              ( CPF_Edit | CPF_ExportObject | CPF_EditInline )
	class USFXSelectionLensFlareComponent*             LensFlareComp;                                    		// 0x0074 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULensFlare*                                  LensFlareTemplate;                                		// 0x0078 (0x0004) [0x0000000000000000]              
	class USeqVar_Bool*                                TargetSaveBool;                                   		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USeqVar_Bool*                                CombatTargetSaveBool;                             		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bTargetable : 1;                                		// 0x0084 (0x0004) [0x0000000004000009] [0x00000001] ( CPF_Edit | CPF_ExportObject | CPF_EditInline )
	unsigned long                                      m_bCombatTargetable : 1;                          		// 0x0084 (0x0004) [0x0000000004000009] [0x00000002] ( CPF_Edit | CPF_ExportObject | CPF_EditInline )
	unsigned long                                      OldCombatTargetable : 1;                          		// 0x0084 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      OldTargeTable : 1;                                		// 0x0084 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bIgnoreFacing : 1;                                		// 0x0084 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bHighPriority : 1;                                		// 0x0084 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned char                                      m_TargetTipText;                                  		// 0x0088 (0x0001) [0x0000000004000009]              ( CPF_Edit | CPF_ExportObject | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1466 ];

		return pClassPointer;
	};

	void RestoreSelection ( );
	void DisableSelection ( );
	void eventHandlePostBeginPlay ( );
	void SetCombatTargetable ( unsigned long bTargetable, unsigned long bSetTargetSave );
	void SetTargetable ( unsigned long bTargetable, unsigned long bSetTargetSave );
	struct FVector GetSelectionPoint ( );
};

UClass* USFXSelectionModule::pClassPointer = NULL;

// Class SFXGame.SFXSimpleUseModule
// 0x0017 (0x00A0 - 0x0089)
class USFXSimpleUseModule : public USFXSelectionModule
{
public:
	struct FScriptDelegate                             __OnUsed__Delegate;                               		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fUseRange;                                        		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStickForward : 1;                                		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDeactivated : 1;                                 		// 0x009C (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bPlayUseAnimation : 1;                            		// 0x009C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1467 ];

		return pClassPointer;
	};

	bool eventIsDefaultActionPossible ( );
	void eventHandlePostBeginPlay ( );
	void ReInitialize ( class AActor* oHost );
	void OnUsed ( class AActor* User );
};

UClass* USFXSimpleUseModule::pClassPointer = NULL;

// Class SFXGame.SFXModule_AimAssistTarget
// 0x0018 (0x00B8 - 0x00A0)
class USFXModule_AimAssistTarget : public USFXSimpleUseModule
{
public:
	TArray< struct FName >                             AimNodes;                                         		// 0x00A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FAimAssistBox >                     AimAssistRegions;                                 		// 0x00AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1468 ];

		return pClassPointer;
	};

	bool eventIsDefaultActionPossible ( );
	void eventHandlePostBeginPlay ( );
};

UClass* USFXModule_AimAssistTarget::pClassPointer = NULL;

// Class SFXGame.SFXModule_SavedUse
// 0x0010 (0x00B0 - 0x00A0)
class USFXModule_SavedUse : public USFXSimpleUseModule
{
public:
	struct FGuid                                       UseModuleGUID;                                    		// 0x00A0 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1469 ];

		return pClassPointer;
	};

	bool HasBeenUsed ( );
	void Used ( class AActor* User );
	void OnUsed ( class AActor* User );
};

UClass* USFXModule_SavedUse::pClassPointer = NULL;

// Class SFXGame.SFXWeaponUseModule
// 0x0030 (0x00E0 - 0x00B0)
class USFXWeaponUseModule : public USFXModule_SavedUse
{
public:
	class UClass*                                      WeaponClass;                                      		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x00B4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      PickupMesh;                                       		// 0x00B8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UGFxMovieInfo*                               WeaponSelectionMovieInfo;                         		// 0x00BC (0x0004) [0x0000000000000000]              
	class Usfxgui_weaponselection*                     GUI_WeaponSelection;                              		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                UpgradeLevels_Normal;                             		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                UpgradeLevels_NewGamePlus;                        		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                NewGamePlusID;                                    		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              LastUpdateTime;                                   		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              UpdateFrequency;                                  		// 0x00D4 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 PickupSound;                                      		// 0x00D8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bStopCustomTicking : 1;                           		// 0x00DC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1470 ];

		return pClassPointer;
	};

	void StartWeaponSelection ( );
	void WeaponAwardUIAction ( class UBioSFHandler_MessageBox* oUI, int nSelection );
	void WeaponUseModuleOnUsed ( class AActor* User );
	void OnUsed ( class AActor* User );
	void DisableWeaponUseModule ( );
	void Tick ( float DeltaTime );
	bool DisabilityCheck ( );
	void WeaponUseModuleInit ( );
	void eventHandlePostBeginPlay ( );
};

UClass* USFXWeaponUseModule::pClassPointer = NULL;

// Class SFXGame.SFXVersionDependentSelectionModule
// 0x0007 (0x0090 - 0x0089)
class USFXVersionDependentSelectionModule : public USFXSelectionModule
{
public:
	unsigned long                                      selectable : 1;                                   		// 0x008C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1471 ];

		return pClassPointer;
	};

	void eventHandlePostBeginPlay ( );
	bool IsEnglishBuild ( );
};

UClass* USFXVersionDependentSelectionModule::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_AwardResource
// 0x0009 (0x00B9 - 0x00B0)
class USFXSeqAct_AwardResource : public USequenceAction
{
public:
	int                                                ResourcePercent;                                  		// 0x00B0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAbsoluteAmount : 1;                              		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsSalvage : 1;                                   		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      TreasureType;                                     		// 0x00B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1472 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* USFXSeqAct_AwardResource::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_HarvesterLand
// 0x000C (0x00CC - 0x00C0)
class USFXSeqAct_HarvesterLand : public USeqAct_Latent
{
public:
	class AActor*                                      AnchorActor;                                      		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      EndMarker;                                        		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTakeOff : 1;                                     		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1473 ];

		return pClassPointer;
	};

	bool Update ( float DeltaTime );
	int GetObjClassVersion ( );
};

UClass* USFXSeqAct_HarvesterLand::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_LookupHenchmenFromPlotManager
// 0x0010 (0x00C0 - 0x00B0)
class USFXSeqAct_LookupHenchmenFromPlotManager : public USequenceAction
{
public:
	TArray< int >                                      SelectedIndices;                                  		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                NumHenchmen;                                      		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1474 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* USFXSeqAct_LookupHenchmenFromPlotManager::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_WheelController_NativeBase
// 0x001C (0x00DC - 0x00C0)
class USFXSeqAct_WheelController_NativeBase : public USeqAct_Latent
{
public:
	TArray< struct FWheelInfo >                        Wheels;                                           		// 0x00C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      Chassis;                                          		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      SteeringWheel;                                    		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SteeringLimit;                                    		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionVariance;                               		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1475 ];

		return pClassPointer;
	};

	void UpdateWheels ( float LocalChassisVelocityX, struct FRotator WheelTargetFacing );
	void ProcessWheels ( );
};

UClass* USFXSeqAct_WheelController_NativeBase::pClassPointer = NULL;

// Class SFXGame.SFXSmokeActorBase
// 0x000E (0x0204 - 0x01F6)
class ASFXSmokeActorBase : public AActor
{
public:
	class UParticleSystemComponent*                    PSC_Smoke;                                        		// 0x01F8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              SmokeDuration;                                    		// 0x01FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bActive : 1;                                      		// 0x0200 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1476 ];

		return pClassPointer;
	};

	void Reset ( );
	void Destroyed ( );
	void Deactivate ( );
	void PostBeginPlay ( );
};

UClass* ASFXSmokeActorBase::pClassPointer = NULL;

// Class SFXGame.SFXVocalizationBank
// 0x0018 (0x0054 - 0x003C)
class USFXVocalizationBank : public UObject
{
public:
	TArray< struct FSFXVocalizationRole >              Vocalizations;                                    		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSFXVocalizationEventV2 >           VocalizationsV2;                                  		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1477 ];

		return pClassPointer;
	};

	void eventMakeEntry ( struct FName Role, struct FName Event, struct FName Type, struct FName Variation, class UWwiseEvent* Sound );
	void ImportBadOldType ( struct FName* Type, struct FName* Variation );
	void EnsureArrays ( int i, int J );
};

UClass* USFXVocalizationBank::pClassPointer = NULL;

// Class SFXGame.SFXVocalizationManagerNativeBase
// 0x0032 (0x0228 - 0x01F6)
class ASFXVocalizationManagerNativeBase : public AActor
{
public:
	TArray< class ABioPawn* >                          m_aIgnorePawn;                                    		// 0x01F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSFXVocalizationEventProperties >   EventProperties;                                  		// 0x0204 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXVocalizationEvent >             QueuedEvents;                                     		// 0x0210 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USFXVocalizationBank*                        OverridesAllIfSet;                                		// 0x021C (0x0004) [0x0000000000000000]              
	int                                                DebugCounter;                                     		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDebugging : 1;                                   		// 0x0224 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bAlwaysPlay : 1;                                  		// 0x0224 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1478 ];

		return pClassPointer;
	};

	void eventTickEvents ( float DeltaTime );
	struct FString eventDebugOutput ( int Type, int Value );
	void QueueReplicatedVocalization ( struct FSFXVocalizationEvent VocEvent );
	bool SpecificNameMatches ( unsigned char Type, class ABioPawn* Pawn );
	bool SpecificChallengeMatches ( unsigned char Type, class ABioPawn* Pawn );
	bool SpecificWeaponMatches ( unsigned char Type, class ABioPawn* Pawn );
	bool SpecificGenderMatches ( unsigned char Type, class ABioPawn* Pawn );
	bool SpecificAffiliationMatches ( int idx, class ABioPawn* Pawn );
	bool SpecificCharacterTypeMatches ( unsigned char Type, class ABioPawn* Pawn );
	bool SpecificLocationMatches ( unsigned char Type, class ABioPawn* BP, class ABioPawn* Speaker );
	bool HandleSFXVocalizationEvent ( struct FSFXVocalizationEvent* Event );
	void RemoveFromIgnoreList ( class ABioPawn* oPawn );
	void AddToIgnoreList ( class ABioPawn* oPawn );
	class USFXVocalizationBank* eventGetPawnVocalizationBank ( class ABioPawn* P );
	bool eventPlaySFXVocalizationSLineInternal ( class ABioPawn* Speaker, float DelaySec, struct FSFXVocalizationEvent* Event, struct FSFXVocalizationLine* LineToPlay );
};

UClass* ASFXVocalizationManagerNativeBase::pClassPointer = NULL;

// Class SFXGame.SFXVocalizationTypes
// 0x000C (0x0048 - 0x003C)
class USFXVocalizationTypes : public UObject
{
public:
	TArray< class UObject* >                           EnumForType;                                      		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1479 ];

		return pClassPointer;
	};

};

UClass* USFXVocalizationTypes::pClassPointer = NULL;

// Class SFXGame.Bio2DA
// 0x00D8 (0x0114 - 0x003C)
class UBio2DA : public UObject
{
public:
	struct FMap_Mirror                                 m_CellDataMap;                                    		// 0x003C (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 m_MasterRowNameToIndex;                           		// 0x0078 (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_ColumnIndex;                                    		// 0x00B4 (0x003C) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FBio2DACellData >                   m_CellData;                                       		// 0x00F0 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FBio2daMasterRowIndexRec >          m_MasterRowIndex;                                 		// 0x00FC (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FName >                             m_sRowLabel;                                      		// 0x0108 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1480 ];

		return pClassPointer;
	};

	int GetRowNumber ( int nRowIndex );
	TArray< struct FName > GetRowNames ( );
	struct FName GetRowName ( int nRowIndex );
	int GetNumberedRowIndex ( int nRowID );
	int GetRowIndex ( struct FName nmRowLabel );
	TArray< struct FName > GetColumnNames ( );
	struct FName GetColumnName ( int nColumn );
	int GetColumnIndex ( struct FName nmColumnLabel );
	bool GetFloatEntryNumN ( int nRowID, struct FName sColumn, float* fEntry );
	bool GetFloatEntryNumI ( int nRowID, int nColumn, float* fEntry );
	bool GetFloatEntryNN ( struct FName sRow, struct FName sColumn, float* fEntry );
	bool GetFloatEntryNI ( struct FName sRow, int nColumn, float* fEntry );
	bool GetFloatEntryIN ( int nRow, struct FName sColumn, float* fEntry );
	bool GetFloatEntryII ( int nRow, int nColumn, float* fEntry );
	bool GetIntEntryNumN ( int nRowID, struct FName sColumn, int* nEntry );
	bool GetIntEntryNumI ( int nRowID, int nColumn, int* nEntry );
	bool GetIntEntryNN ( struct FName sRow, struct FName sColumn, int* nEntry );
	bool GetIntEntryNI ( struct FName sRow, int nColumn, int* nEntry );
	bool GetIntEntryIN ( int nRow, struct FName sColumn, int* nEntry );
	bool GetIntEntryII ( int nRow, int nColumn, int* nEntry );
	bool GetNameEntryNumN ( int nRowID, struct FName sColumn, struct FName* nEntry );
	bool GetNameEntryNumI ( int nRowID, int nColumn, struct FName* nEntry );
	bool GetNameEntryNN ( struct FName sRow, struct FName sColumn, struct FName* nEntry );
	bool GetNameEntryNI ( struct FName sRow, int nColumn, struct FName* nEntry );
	bool GetNameEntryIN ( int nRow, struct FName sColumn, struct FName* nEntry );
	bool GetNameEntryII ( int nRow, int nColumn, struct FName* nEntry );
	bool GetStringEntryNumN ( int nRowID, struct FName sColumn, struct FString* sEntry );
	bool GetStringEntryNumI ( int nRowID, int nColumn, struct FString* sEntry );
	bool GetStringEntryNN ( struct FName sRow, struct FName sColumn, struct FString* sEntry );
	bool GetStringEntryNI ( struct FName sRow, int nColumn, struct FString* sEntry );
	bool GetStringEntryIN ( int nRow, struct FName sColumn, struct FString* sEntry );
	bool GetStringEntryII ( int nRow, int nColumn, struct FString* sEntry );
	int GetNumRows ( );
	int GetNumColumns ( );
};

UClass* UBio2DA::pClassPointer = NULL;

// Class SFXGame.Bio2DANumberedRows
// 0x0054 (0x0168 - 0x0114)
class UBio2DANumberedRows : public UBio2DA
{
public:
	struct FMap_Mirror                                 m_MasterRowNumberToArrayIndex;                    		// 0x0114 (0x003C) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FBio2daMasterRowIndexRec >          m_MasterNumberedRowIndex;                         		// 0x0150 (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< int >                                      m_lstRowNumbers;                                  		// 0x015C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1481 ];

		return pClassPointer;
	};

};

UClass* UBio2DANumberedRows::pClassPointer = NULL;

// Class SFXGame.BioAnim_TurnInPlace_Rotator
// 0x0017 (0x00D4 - 0x00BD)
class UBioAnim_TurnInPlace_Rotator : public UAnimNodeBlendBase
{
public:
	TArray< class UBioAnimNodeBlend_TurnInPlace* >     TurnInPlaceNodes;                                 		// 0x00C0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class ABioPawn*                                    BioPawnOwner;                                     		// 0x00CC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UBioAnimNodeBlend_TurnInPlace*               ActiveTurnInPlaceNode;                            		// 0x00D0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1482 ];

		return pClassPointer;
	};

};

UClass* UBioAnim_TurnInPlace_Rotator::pClassPointer = NULL;

// Class SFXGame.BioAnimCheckBlendOut
// 0x0014 (0x0050 - 0x003C)
class UBioAnimCheckBlendOut : public UObject
{
public:
	struct FBioAnimCheckBlendOutPath                   PathsLL;                                          		// 0x003C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UAnimNode*                                   Parent;                                           		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1483 ];

		return pClassPointer;
	};

};

UClass* UBioAnimCheckBlendOut::pClassPointer = NULL;

// Class SFXGame.BioAnimMovementSync
// 0x0010 (0x004C - 0x003C)
class UBioAnimMovementSync : public UObject
{
public:
	TArray< struct FBioAnimMovementSyncNode >          MovementNodes;                                    		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bInitialized : 1;                                 		// 0x0048 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1484 ];

		return pClassPointer;
	};

};

UClass* UBioAnimMovementSync::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeAimOffset
// 0x0040 (0x0151 - 0x0111)
class UBioAnimNodeAimOffset : public UAnimNodeAimOffset
{
public:
	TArray< unsigned char >                            BoneToAimMap;                                     		// 0x0114 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector2D                                   LastAimOffset;                                    		// 0x0120 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector2D                                   LastPostProcessedAimOffset;                       		// 0x0128 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector2D                                   MotionAimOffset;                                  		// 0x0130 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      OwningActor;                                      		// 0x0138 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              TurnInPlaceOffset;                                		// 0x013C (0x0004) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	float                                              TurnAroundTimeToGo;                               		// 0x0140 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              TurnAroundBlendTime;                              		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngVelAimOffsetChangeSpeed;                       		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngVelAimOffsetScale;                             		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AimInput;                                         		// 0x0150 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1485 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeAimOffset::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlend_TurnInPlace
// 0x0054 (0x012C - 0x00D8)
class UBioAnimNodeBlend_TurnInPlace : public UAnimNodeBlendList
{
public:
	TArray< class UBioAnimNodeAimOffset* >             OffsetNodes;                                      		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRotTransitionInfo >                RotTransitions;                                   		// 0x00E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                LastPawnYaw;                                      		// 0x00F0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              PawnRotationRate;                                 		// 0x00F4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                LastRootBoneYaw;                                  		// 0x00F8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                YawOffset;                                        		// 0x00FC (0x0004) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	float                                              RelativeOffset;                                   		// 0x0100 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class ABioPawn*                                    BioPawnOwner;                                     		// 0x0104 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UBioAnim_TurnInPlace_Rotator*                TIPRotator;                                       		// 0x0108 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              TransitionBlendInTime;                            		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TransitionBlendOutTime;                           		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentTransitionIndex;                           		// 0x0114 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TransitionThresholdAngle;                         		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRotationResetRate;                               		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              AbortThresholdPercentage;                         		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AbortTransitionBlendTime;                         		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInitialized : 1;                                 		// 0x0128 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bRootRotInitialized : 1;                          		// 0x0128 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDelayBlendOutToPlayAnim : 1;                     		// 0x0128 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPlayingTurnTransition : 1;                       		// 0x0128 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bTransitioningToIdle : 1;                         		// 0x0128 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1486 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlend_TurnInPlace::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendBase
// 0x001F (0x00DC - 0x00BD)
class UBioAnimNodeBlendBase : public UAnimNodeBlendBase
{
public:
	float                                              m_fBlendTime;                                     		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              m_fRemainingTime;                                 		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              m_fTotalBlendTime;                                		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              m_fTargetWeight;                                  		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                m_nLastChild;                                     		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                m_nTargetChild;                                   		// 0x00D4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsBlending : 1;                                		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bTriggerTimeBlend : 1;                          		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bBlendDirect : 1;                               		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bShowSlider : 1;                                		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1487 ];

		return pClassPointer;
	};

	void SetChildAnimTime ( class UAnimNode* oChild, float fTime );
};

UClass* UBioAnimNodeBlendBase::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendAdditive
// 0x0000 (0x00DC - 0x00DC)
class UBioAnimNodeBlendAdditive : public UBioAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1488 ];

		return pClassPointer;
	};

	void SetChildAnimTime ( class UAnimNode* oChild, float fTime );
};

UClass* UBioAnimNodeBlendAdditive::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendAdditiveCover
// 0x0008 (0x00E4 - 0x00DC)
class UBioAnimNodeBlendAdditiveCover : public UBioAnimNodeBlendAdditive
{
public:
	float                                              BlendInDuration;                                  		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutDuration;                                 		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1489 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendAdditiveCover::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendAdditiveDamage
// 0x001C (0x00F8 - 0x00DC)
class UBioAnimNodeBlendAdditiveDamage : public UBioAnimNodeBlendAdditive
{
public:
	struct FVector                                     m_vDamageDir;                                     		// 0x00DC (0x000C) [0x0000000000000000]              
	int                                                DamageNodeIndex;                                  		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDamageThreshold;                               		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nDamageIndex;                                   		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bLastDamageNode : 1;                              		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProcessDamage : 1;                               		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1490 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendAdditiveDamage::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendByDeath
// 0x0050 (0x012C - 0x00DC)
class UBioAnimNodeBlendByDeath : public UBioAnimNodeBlendBase
{
public:
	struct FName                                       Head;                                             		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LeftArm;                                          		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RightArm;                                         		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LeftLeg;                                          		// 0x00F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RightLeg;                                         		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DeathEventName;                                   		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nHeadRoot;                                      		// 0x010C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nLeftArmRoot;                                   		// 0x0110 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nRightArmRoot;                                  		// 0x0114 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nLeftLegRoot;                                   		// 0x0118 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nRightLegRoot;                                  		// 0x011C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fTimeToRagdoll;                                 		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentTime;                                   		// 0x0124 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bEventTriggered : 1;                            		// 0x0128 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1491 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendByDeath::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendByIncline
// 0x0014 (0x00F0 - 0x00DC)
class UBioAnimNodeBlendByIncline : public UBioAnimNodeBlendBase
{
public:
	float                                              BlendDuration;                                    		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInclineUpAngle;                                		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInclineDownAngle;                              		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInclineAngle;                                  		// 0x00E8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bForceLevelReferenceAngle : 1;                    		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1492 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendByIncline::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendByLean
// 0x0018 (0x00F4 - 0x00DC)
class UBioAnimNodeBlendByLean : public UBioAnimNodeBlendBase
{
public:
	float                                              BlendDuration;                                    		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendAcrossDuration;                              		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxLeanAngle;                                     		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLeanAngle;                                     		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              m_fLastLeanAngle;                                 		// 0x00EC (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSwitchingLean : 1;                             		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1493 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendByLean::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendDirectional
// 0x0014 (0x00F0 - 0x00DC)
class UBioAnimNodeBlendDirectional : public UBioAnimNodeBlendBase
{
public:
	float                                              DirDegreesPerSecond;                              		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForeBackBlendTime;                                		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationDeadzone;                                 		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDirAngle;                                      		// 0x00E8 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bForward : 1;                                   		// 0x00EC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bWasMoving : 1;                                 		// 0x00EC (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1494 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendDirectional::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendDirStart
// 0x0010 (0x00EC - 0x00DC)
class UBioAnimNodeBlendDirStart : public UBioAnimNodeBlendBase
{
public:
	float                                              m_fStartHeading;                                  		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              LeftStartTime;                                    		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RightStartTime;                                   		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsStarting : 1;                                		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1495 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendDirStart::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendGetUp
// 0x0000 (0x00DC - 0x00DC)
class UBioAnimNodeBlendGetUp : public UBioAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1496 ];

		return pClassPointer;
	};

	void SetChildAnimTime ( class UAnimNode* oChild, float fTime );
};

UClass* UBioAnimNodeBlendGetUp::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendMoveStop
// 0x0000 (0x00DC - 0x00DC)
class UBioAnimNodeBlendMoveStop : public UBioAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1497 ];

		return pClassPointer;
	};

	void SetChildAnimTime ( class UAnimNode* oChild, float fTime );
};

UClass* UBioAnimNodeBlendMoveStop::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendMultiAdditive
// 0x0044 (0x0120 - 0x00DC)
class UBioAnimNodeBlendMultiAdditive : public UBioAnimNodeBlendBase
{
public:
	struct FMap_Mirror                                 m_mapActivateTimes;                               		// 0x00DC (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                m_nNumAdditiveChildren;                           		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bBasePoseForEachChild : 1;                      		// 0x011C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1498 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendMultiAdditive::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendEyeNoiseAndBlink
// 0x000C (0x012C - 0x0120)
class UBioAnimNodeBlendEyeNoiseAndBlink : public UBioAnimNodeBlendMultiAdditive
{
public:
	int                                                m_nBlinkState;                                    		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              m_fCachedRegularBlinkWeight;                      		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              m_fBlinkBlendOutTime;                             		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1499 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendEyeNoiseAndBlink::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendPoseAndGestures
// 0x0024 (0x0144 - 0x0120)
class UBioAnimNodeBlendPoseAndGestures : public UBioAnimNodeBlendMultiAdditive
{
public:
	TArray< struct FName >                             m_aChildAnimsets;                                 		// 0x0120 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             m_aRefPoseAnimsets;                               		// 0x012C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBioChildPinData >                  m_aChildPinData;                                  		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1500 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendPoseAndGestures::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendPose
// 0x0018 (0x00F4 - 0x00DC)
class UBioAnimNodeBlendPose : public UBioAnimNodeBlendBase
{
public:
	TArray< struct FName >                             m_aChildAnimsets;                                 		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fTransEndTime;                                  		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              m_fEndBlendDuration;                              		// 0x00EC (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bTransIsOneShot : 1;                            		// 0x00F0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1501 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendPose::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendScalar
// 0x0048 (0x0124 - 0x00DC)
class UBioAnimNodeBlendScalar : public UBioAnimNodeBlendBase
{
public:
	TArray< struct FBioScalarBlendParams >             m_aChildBlendParams;                              		// 0x00DC (0x000C) [0x0000000004420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	struct FString                                     m_sDescription;                                   		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBioScalarPrecomputedValues >       m_aChildPrecomputes;                              		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fBlendPctPerSecond;                             		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBlendSpanTime;                                 		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRangeMin;                                      		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              m_fRangeMax;                                      		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              m_fUnitsPerSecond;                                		// 0x0110 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentScalar;                                 		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              m_fTargetScalar;                                  		// 0x0118 (0x0004) [0x0000000000000000]              
	class UBioAnimNodeBlendScalarBehavior*             m_oBehavior;                                      		// 0x011C (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      m_bBlendInstant : 1;                              		// 0x0120 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bUseBlendSpanTime : 1;                          		// 0x0120 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1502 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendScalar::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendSkidTurn
// 0x0020 (0x00FC - 0x00DC)
class UBioAnimNodeBlendSkidTurn : public UBioAnimNodeBlendBase
{
public:
	float                                              m_fSkidHeading;                                   		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              RightNearAngle;                                   		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RightFarAngle;                                    		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeftNearAngle;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeftFarAngle;                                     		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeftStartTime;                                    		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RightStartTime;                                   		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsSkidding : 1;                                		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bFinishSkidStarted : 1;                         		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1503 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendSkidTurn::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendSpeed
// 0x002D (0x0109 - 0x00DC)
class UBioAnimNodeBlendSpeed : public UBioAnimNodeBlendBase
{
public:
	float                                              BlendTimeToIdle;                                  		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTimeFromIdle;                                		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTimeMoving;                                  		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WalkSpeed;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RunSpeed;                                         		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WalkRateScaled;                                   		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RunRateScaled;                                    		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fStartSpeed;                                    		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentSpeed;                                  		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              m_fStartCheckTime;                                		// 0x0100 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsStarting : 1;                                		// 0x0104 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIsStarted : 1;                                 		// 0x0104 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      SpeedType;                                        		// 0x0108 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1504 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendSpeed::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendState
// 0x0018 (0x00F4 - 0x00DC)
class UBioAnimNodeBlendState : public UBioAnimNodeBlendBase
{
public:
	TArray< struct FBioAnimBlendParams >               m_aChildBlendParams;                              		// 0x00DC (0x000C) [0x0000000004420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_nActiveChild;                                   		// 0x00E8 (0x0004) [0x0000000000000000]              
	class UBioAnimCheckBlendOut*                       m_oBlendOut;                                      		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioAnimNodeBlendStateBehavior*              m_oBehavior;                                      		// 0x00F0 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1505 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendState::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeCombatMode
// 0x0015 (0x00F1 - 0x00DC)
class UBioAnimNodeCombatMode : public UBioAnimNodeBlendBase
{
public:
	float                                              m_blendIntoTransitionDuration;                    		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_blendOutOfTransitionDuration;                   		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_blendFromNonCombatToCombatDuration;             		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_blendFromCombatToNonCombatDuration;             		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_isInitialStateDetermined : 1;                   		// 0x00EC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      m_currentState;                                   		// 0x00F0 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1506 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeCombatMode::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendByAction
// 0x03F9 (0x04D1 - 0x00D8)
class UBioAnimNodeBlendByAction : public UAnimNodeBlendList
{
public:
	struct FBlendTimeFrom                              m_aBlendTimeNode[ 0xB ];                          		// 0x00D8 (0x03F4) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bHesitateAvailable : 1;                         		// 0x04CC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bFallingAvailable : 1;                          		// 0x04CC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      m_eCurrentAnimNode;                               		// 0x04D0 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1507 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendByAction::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendByAim
// 0x003F (0x00FC - 0x00BD)
class UBioAnimNodeBlendByAim : public UAnimNodeBlendBase
{
public:
	struct FBioAnimNodeBlendByAimLimits                LimitsDefault;                                    		// 0x00C0 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBioAnimNodeBlendByAimLimits                LimitsMirrored;                                   		// 0x00D0 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AimBlendOutDuration;                              		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              YawRate;                                          		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Yaw;                                              		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Pitch;                                            		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RemainingBlendDuration;                           		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseMirrored : 1;                                 		// 0x00F8 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1508 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendByAim::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendByCustomAnim
// 0x0000 (0x00D0 - 0x00D0)
class UBioAnimNodeBlendByCustomAnim : public UAnimNodeBlend
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1509 ];

		return pClassPointer;
	};

	void SetBlendTarget ( float BlendTarget, float BlendTime );
};

UClass* UBioAnimNodeBlendByCustomAnim::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendByDamage
// 0x0008 (0x00E0 - 0x00D8)
class UBioAnimNodeBlendByDamage : public UAnimNodeBlendList
{
public:
	int                                                m_nLastDamageIndex;                               		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAdditiveMode : 1;                                		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1510 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendByDamage::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendByFireSequence
// 0x0034 (0x010C - 0x00D8)
class UBioAnimNodeBlendByFireSequence : public UAnimNodeBlendList
{
public:
	TArray< class UAnimNodeSequence* >                 CachedAnimSeqLoop;                                		// 0x00D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UAnimNodeSequence* >                 CachedAnimSeqEnd;                                 		// 0x00E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     FlashLocation;                                    		// 0x00F0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendDuration;                                    		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                QueuedTransition;                                 		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                FlashCount;                                       		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      CacheUpdated : 1;                                 		// 0x0108 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1511 ];

		return pClassPointer;
	};

	float eventGetPlayRate ( class UAnimNodeSequence* Seq );
	void eventNotifyWeaponAnimationPlaying ( unsigned long Playing );
};

UClass* UBioAnimNodeBlendByFireSequence::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendByPosture
// 0x0004 (0x00D4 - 0x00D0)
class UBioAnimNodeBlendByPosture : public UAnimNodeBlend
{
public:
	float                                              BlendDuration;                                    		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1512 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendByPosture::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendByPower
// 0x0005 (0x00DD - 0x00D8)
class UBioAnimNodeBlendByPower : public UAnimNodeBlendList
{
public:
	int                                                LastTag;                                          		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      NotifyActive;                                     		// 0x00DC (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1513 ];

		return pClassPointer;
	};

	void SendPowerNotification ( );
};

UClass* UBioAnimNodeBlendByPower::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendByReload
// 0x0000 (0x00D8 - 0x00D8)
class UBioAnimNodeBlendByReload : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1514 ];

		return pClassPointer;
	};

	void SetActiveChild ( int ChildIndex, float BlendTime );
};

UClass* UBioAnimNodeBlendByReload::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendByStorm
// 0x000C (0x00E4 - 0x00D8)
class UBioAnimNodeBlendByStorm : public UAnimNodeBlendList
{
public:
	float                                              Idle2StormBlendDuration;                          		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Storm2IdleBlendDuration;                          		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioAnimMovementSync*                        MovementSync;                                     		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1515 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendByStorm::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendByWeaponAction
// 0x0000 (0x00D8 - 0x00D8)
class UBioAnimNodeBlendByWeaponAction : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1516 ];

		return pClassPointer;
	};

	void SetActiveChild ( int ChildIndex, float BlendTime );
};

UClass* UBioAnimNodeBlendByWeaponAction::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendByWeaponEquip
// 0x0014 (0x00EC - 0x00D8)
class UBioAnimNodeBlendByWeaponEquip : public UAnimNodeBlendList
{
public:
	float                                              IdleToDrawBlendDuration;                          		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IdleToHolsterBlendDuration;                       		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HolsterToDrawBlendDuration;                       		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HolsterToIdleBlendDuration;                       		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisabledIK : 1;                                  		// 0x00E8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1517 ];

		return pClassPointer;
	};

	void eventDrawAnimEnd ( );
	void eventHolsterAnimEnd ( );
};

UClass* UBioAnimNodeBlendByWeaponEquip::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendFall
// 0x000C (0x00E4 - 0x00D8)
class UBioAnimNodeBlendFall : public UAnimNodeBlendList
{
public:
	float                                              BlendIntoFallingTime;                             		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendIntoLandingTime;                             		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRootMotionOverridden : 1;                        		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1518 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendFall::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendMovement
// 0x005C (0x0134 - 0x00D8)
class UBioAnimNodeBlendMovement : public UAnimNodeBlendList
{
public:
	struct FName                                       WalkSynchGroupName;                               		// 0x00D8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       RunSynchGroupName;                                		// 0x00E0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleSpeed;                                        		// 0x00E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinWalkSpeed;                                     		// 0x00EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MidWalkSpeed;                                     		// 0x00F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxWalkSpeed;                                     		// 0x00F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinRunSpeed;                                      		// 0x00F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MidRunSpeed;                                      		// 0x00FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxRunSpeed;                                      		// 0x0100 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleTimeout;                                      		// 0x0104 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendTimeIdle2Walk;                               		// 0x0108 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendTimeIdle2Run;                                		// 0x010C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendTimeWalk2Idle;                               		// 0x0110 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendTimeWalk2Run;                                		// 0x0114 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendTimeRun2Idle;                                		// 0x0118 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendTimeRun2Walk;                                		// 0x011C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleTimer;                                        		// 0x0120 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentSpeed;                                     		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentAcceleration;                              		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentWalkRate;                                  		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentRunRate;                                   		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1519 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendMovement::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendPerBone
// 0x0025 (0x011D - 0x00F8)
class UBioAnimNodeBlendPerBone : public UAnimNodeBlendPerBone
{
public:
	TArray< struct FName >                             BioBranchStartBoneName;                           		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       BlendName;                                        		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverblendFactor;                                  		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeInTime;                                       		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutTime;                                      		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bNotifiedBlendComplete : 1;                     		// 0x0118 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bBoneSwitchOn : 1;                              		// 0x0118 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      BoneBlendType;                                    		// 0x011C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1520 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendPerBone::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendScalarBehavior
// 0x000C (0x0048 - 0x003C)
class UBioAnimNodeBlendScalarBehavior : public UObject
{
public:
	TArray< struct FBioAnimScalarNodeBehaviorDef >     m_aNodeDefinitions;                               		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1521 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendScalarBehavior::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendScalarMovementBehavior
// 0x0008 (0x0050 - 0x0048)
class UBioAnimNodeBlendScalarMovementBehavior : public UBioAnimNodeBlendScalarBehavior
{
public:
	unsigned long                                      bUseSprint : 1;                                   		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSnapshotSpeed : 1;                            		// 0x0048 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseSnapshotStartSpeed : 1;                       		// 0x0048 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseLocalSpace : 1;                               		// 0x0048 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      MovementBehavior;                                 		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MoveAxis;                                         		// 0x004D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AxisDir;                                          		// 0x004E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AxisDirMode;                                      		// 0x004F (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1522 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendScalarMovementBehavior::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendStateBehavior
// 0x0010 (0x004C - 0x003C)
class UBioAnimNodeBlendStateBehavior : public UObject
{
public:
	TArray< struct FBioAnimStateNodeBehaviorDef >      m_aNodeDefinitions;                               		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fQueryPlayTime;                                 		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1523 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendStateBehavior::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendStateActionBehavior
// 0x0005 (0x0051 - 0x004C)
class UBioAnimNodeBlendStateActionBehavior : public UBioAnimNodeBlendStateBehavior
{
public:
	unsigned long                                      m_bPlayedRecoverAnim : 1;                         		// 0x004C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      ActionBehavior;                                   		// 0x0050 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1524 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendStateActionBehavior::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendStateCombatBehavior
// 0x0005 (0x0051 - 0x004C)
class UBioAnimNodeBlendStateCombatBehavior : public UBioAnimNodeBlendStateBehavior
{
public:
	unsigned long                                      bUseCoverAnimState : 1;                           		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyDuringWeaponSwitch : 1;                      		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyDuringNoOffensiveAction : 1;                 		// 0x004C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      CombatBehavior;                                   		// 0x0050 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1525 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendStateCombatBehavior::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendStateMovementBehavior
// 0x0023 (0x006F - 0x004C)
class UBioAnimNodeBlendStateMovementBehavior : public UBioAnimNodeBlendStateBehavior
{
public:
	float                                              BlendDownPerc;                                    		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleByValue;                                     		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WalkRate;                                         		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RunRate;                                          		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendResetWeight;                                 		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fStartCheckTime;                                		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                m_nLastPhys;                                      		// 0x0064 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseSprint : 1;                                   		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSnapshotSpeed : 1;                            		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseSnapshotStartSpeed : 1;                       		// 0x0068 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseDirStartControl : 1;                          		// 0x0068 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bIsStarted : 1;                                 		// 0x0068 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bInTakeoff : 1;                                 		// 0x0068 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bInLanding : 1;                                 		// 0x0068 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bPlayedAnim : 1;                                		// 0x0068 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bRootMotionOn : 1;                              		// 0x0068 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned char                                      MovementBehavior;                                 		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AxisDir;                                          		// 0x006D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AxisDirMode;                                      		// 0x006E (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1526 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendStateMovementBehavior::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendStrafe
// 0x001F (0x00DC - 0x00BD)
class UBioAnimNodeBlendStrafe : public UAnimNodeBlendBase
{
public:
	struct FName                                       SynchGroupName;                                   		// 0x00C0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendSpeed;                                       		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleRelativePos;                                  		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleAngle;                                        		// 0x00D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DirAngle;                                         		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioAnimMovementSync*                        MovementSync;                                     		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1527 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendStrafe::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendStuntActor
// 0x0004 (0x00DC - 0x00D8)
class UBioAnimNodeBlendStuntActor : public UAnimNodeBlendList
{
public:
	int                                                m_nCurrentAnimNode;                               		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1528 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendStuntActor::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendTurn
// 0x000C (0x00E4 - 0x00D8)
class UBioAnimNodeBlendTurn : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              YawTurnTriggerDegrees;                            		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1529 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeBlendTurn::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeCover2Actions
// 0x0034 (0x010C - 0x00D8)
class UBioAnimNodeCover2Actions : public UAnimNodeBlendList
{
public:
	float                                              Default2LeanBlendDuration;                        		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Lean2DefaultBlendDuration;                        		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Default2PopupBlendDuration;                       		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Popup2DefaultBlendDuration;                       		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Default2PeekBlendDuration;                        		// 0x00E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Peek2DefaultBlendDuration;                        		// 0x00EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Default2PartialLeanBlendDuration;                 		// 0x00F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PartialLean2DefaultBlendDuration;                 		// 0x00F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Default2PartialPopUpBlendDuration;                		// 0x00F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PartialPopUp2DefaultBlendDuration;                		// 0x00FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Default2AimbackBlendDuration;                     		// 0x0100 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Aimback2DefaultBlendDuration;                     		// 0x0104 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1530 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeCover2Actions::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeCover2ChangeDirection
// 0x000E (0x00E6 - 0x00D8)
class UBioAnimNodeCover2ChangeDirection : public UAnimNodeBlendList
{
public:
	float                                              IdleToTransitionBlendDuration;                    		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TransitionToIdleBlendDuration;                    		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bBlocking : 1;                                    		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      CurrentCoverDirection;                            		// 0x00E4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PendingCoverDirection;                            		// 0x00E5 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1531 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeCover2ChangeDirection::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeCover2Move
// 0x000C (0x00E4 - 0x00D8)
class UBioAnimNodeCover2Move : public UAnimNodeBlendList
{
public:
	float                                              Idle2MoveBlendDuration;                           		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Move2IdleBlendDuration;                           		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1532 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeCover2Move::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeCover2Neutral
// 0x0004 (0x00DC - 0x00D8)
class UBioAnimNodeCover2Neutral : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1533 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeCover2Neutral::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeCover2Transition
// 0x001F (0x00F7 - 0x00D8)
class UBioAnimNodeCover2Transition : public UAnimNodeBlendList
{
public:
	float                                              Intro2BodyBlendDuration;                          		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Body2OutroBlendDuration;                          		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Intro2OutroBlendDuration;                         		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Outro2IntroBlendDuration;                         		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      IntroIsBlocking : 1;                              		// 0x00EC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      OutroIsBlocking : 1;                              		// 0x00EC (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bStopInputOnBlockingTransitions : 1;              		// 0x00EC (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRequestedBlendOut : 1;                           		// 0x00EC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bCanceledBlendOut : 1;                            		// 0x00EC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bSkipIntro : 1;                                   		// 0x00EC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bBlocking : 1;                                    		// 0x00EC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned char                                      IntroRootMotionMode;                              		// 0x00F0 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      IntroRootRotationMode;                            		// 0x00F1 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      OutroRootMotionMode;                              		// 0x00F2 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      OutroRootRotationMode;                            		// 0x00F3 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      CurrentState;                                     		// 0x00F4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      RootMotionMode;                                   		// 0x00F5 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      RootRotationMode;                                 		// 0x00F6 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1534 ];

		return pClassPointer;
	};

	void eventIgnorePlayerInput ( class ABioPawn* pPawn, unsigned long bIgnore );
};

UClass* UBioAnimNodeCover2Transition::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeCover2Type
// 0x0001 (0x00D9 - 0x00D8)
class UBioAnimNodeCover2Type : public UAnimNodeBlendList
{
public:
	unsigned char                                      LastCoverAction;                                  		// 0x00D8 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1535 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeCover2Type::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeFrame
// 0x0013 (0x00BC - 0x00A9)
class UBioAnimNodeFrame : public UAnimNode
{
public:
	TArray< struct FBoneAtom >                         m_FrameBoneData;                                  		// 0x00AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      m_bIsFrameDataValid : 1;                          		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bCaptureOnRelevant : 1;                         		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1536 ];

		return pClassPointer;
	};

	void CaptureAnimFrame ( );
};

UClass* UBioAnimNodeFrame::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeLocomotion
// 0x0018 (0x00F0 - 0x00D8)
class UBioAnimNodeLocomotion : public UAnimNodeBlendList
{
public:
	float                                              ToIdleBlendDuration;                              		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ToMovingBlendDuration;                            		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ToStopBlendDuration;                              		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleToStartBlendDuration;                         		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StopToStartBlendDuration;                         		// 0x00E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1537 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeLocomotion::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeLocomotionMoving
// 0x003F (0x00FC - 0x00BD)
class UBioAnimNodeLocomotionMoving : public UAnimNodeBlendBase
{
public:
	struct FName                                       SynchGroupName;                                   		// 0x00C0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendSpeed;                                       		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendSpeedLeanIn;                                 		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendSpeedLeanOut;                                		// 0x00D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngleLeanLeft;                                    		// 0x00D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngleLeanRight;                                   		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngleAscend;                                      		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngleDescend;                                     		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinSpeed;                                         		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MidSpeed;                                         		// 0x00E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxSpeed;                                         		// 0x00EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioAnimMovementSync*                        MovementSync;                                     		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Lean;                                             		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Incline;                                          		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1538 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeLocomotionMoving::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeLocomotionSpeed
// 0x0010 (0x00E8 - 0x00D8)
class UBioAnimNodeLocomotionSpeed : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RunSpeed;                                         		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WalkSpeed;                                        		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1539 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeLocomotionSpeed::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeLocomotionStart
// 0x0057 (0x0114 - 0x00BD)
class UBioAnimNodeLocomotionStart : public UAnimNodeBlendBase
{
public:
	float                                              BlendOutRelPos[ 0x6 ];                            		// 0x00C0 (0x0018) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FreeRotationRelPos[ 0x6 ];                        		// 0x00D8 (0x0018) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SynchGroupName;                                   		// 0x00F0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LeftFootNormalizedRange[ 0x2 ];                   		// 0x00F8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioAnimMovementSync*                        MovementSync;                                     		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendAngle;                                       		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                StateTag;                                         		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bBlendingOut : 1;                                 		// 0x0110 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bOverrideRMM : 1;                                 		// 0x0110 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bOverrideRMR : 1;                                 		// 0x0110 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1540 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeLocomotionStart::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeLocomotionStop
// 0x0018 (0x00F0 - 0x00D8)
class UBioAnimNodeLocomotionStop : public UAnimNodeBlendList
{
public:
	float                                              LeftFootNormalizedRange[ 0x2 ];                   		// 0x00D8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendOutTime;                                     		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioAnimMovementSync*                        MovementSync;                                     		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bOverrideRootMotion : 1;                          		// 0x00EC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1541 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeLocomotionStop::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeRandom
// 0x0008 (0x00F4 - 0x00EC)
class UBioAnimNodeRandom : public UAnimNodeRandom
{
public:
	int                                                nChildOnActive;                                   		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceChildOnActive : 1;                          		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1542 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeRandom::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeSequence
// 0x0036 (0x0128 - 0x00F2)
class UBioAnimNodeSequence : public UAnimNodeSequence
{
public:
	struct FPointer                                    m_pDFCurTimeProp;                                 		// 0x00F4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pDFRateProp;                                    		// 0x00F8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pDFSeqLenProp;                                  		// 0x00FC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     m_vTotalTranslation;                              		// 0x0100 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       DF_CurrentTime;                                   		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DF_Rate;                                          		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DF_SequenceLength;                                		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRandomizeStartTime : 1;                          		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1543 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeSequence::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeSequenceByBoneRotation
// 0x0017 (0x0109 - 0x00F2)
class UBioAnimNodeSequenceByBoneRotation : public UAnimNodeSequence
{
public:
	TArray< struct FAnimByRotation >                   AnimList;                                         		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       BoneName;                                         		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneAxis;                                         		// 0x0108 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1544 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeSequenceByBoneRotation::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeSequenceMirror
// 0x001E (0x0110 - 0x00F2)
class UBioAnimNodeSequenceMirror : public UAnimNodeSequence
{
public:
	struct FName                                       MirroredAnimSeqName;                              		// 0x00F4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimSequence*                               MirroredAnimSeq;                                  		// 0x00FC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                MirroredAnimLinkupIndex;                          		// 0x0100 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UAnimSequence*                               DefaultAnimSeq;                                   		// 0x0104 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                DefaultAnimLinkupIndex;                           		// 0x0108 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseMirrored : 1;                                 		// 0x010C (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1545 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNodeSequenceMirror::pClassPointer = NULL;

// Class SFXGame.BioAnimNotifyEvent
// 0x000C (0x0048 - 0x003C)
class UBioAnimNotifyEvent : public UAnimNotify
{
public:
	struct FName                                       EventName;                                        		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      IsGlobal : 1;                                     		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1546 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNotifyEvent::pClassPointer = NULL;

// Class SFXGame.BioAnimNotifyVFX
// 0x0008 (0x0044 - 0x003C)
class UBioAnimNotifyVFX : public UAnimNotify
{
public:
	struct FName                                       m_nmVisualEffectLabel;                            		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1547 ];

		return pClassPointer;
	};

};

UClass* UBioAnimNotifyVFX::pClassPointer = NULL;

// Class SFXGame.BioSkelControl_TurretConstrained
// 0x0032 (0x00FC - 0x00CA)
class UBioSkelControl_TurretConstrained : public USkelControlSingleBone
{
public:
	struct FTurretConstraintData                       MaxAngle;                                         		// 0x00CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FTurretConstraintData                       MinAngle;                                         		// 0x00D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    DesiredBoneRotation;                              		// 0x00E4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              LagDegreesPerSecond;                              		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLagScale;                                      		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bConstrainPitch : 1;                              		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bConstrainYaw : 1;                                		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bConstrainRoll : 1;                               		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bInvertPitch : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bInvertYaw : 1;                                   		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bInvertRoll : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1548 ];

		return pClassPointer;
	};

};

UClass* UBioSkelControl_TurretConstrained::pClassPointer = NULL;

// Class SFXGame.BioSkelControlAdditiveLookAt
// 0x0008 (0x0118 - 0x0110)
class UBioSkelControlAdditiveLookAt : public USkelControlLookAt
{
public:
	float                                              MaxAngleUpDown;                                   		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSeparateUpDownLimit : 1;                         		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1549 ];

		return pClassPointer;
	};

};

UClass* UBioSkelControlAdditiveLookAt::pClassPointer = NULL;

// Class SFXGame.BioActorLookAtController
// 0x0077 (0x018F - 0x0118)
class UBioActorLookAtController : public UBioSkelControlAdditiveLookAt
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0118 (0x0008) MISSED OFFSET
	struct FMatrix                                     m_mControlledRefPose;                             		// 0x0120 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    mc_pDefinition;                                   		// 0x0160 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FVector                                     LastOrigin;                                       		// 0x0164 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pTargetActor;                                   		// 0x0170 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nTargetBoneIndex;                               		// 0x0174 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDelayTimer;                                    		// 0x0178 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nRootAnimBoneIndex;                             		// 0x017C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPrevAngVelocity;                               		// 0x0180 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLimitZoneAngle;                                		// 0x0184 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bDoAdditive : 1;                                		// 0x0188 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bAnimFirst : 1;                                 		// 0x0188 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bResetTargetLocation : 1;                       		// 0x0188 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bDisabling : 1;                                 		// 0x0188 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_RootAnimBoneLookAtInverted : 1;                 		// 0x0188 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_RootAnimBoneUpInverted : 1;                     		// 0x0188 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bTargetReached : 1;                             		// 0x0188 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bRootBoneYawOnly : 1;                           		// 0x0188 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bHasValidLastOrigin : 1;                          		// 0x0188 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bTransitioningFromDisabled : 1;                   		// 0x0188 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned char                                      m_RootAnimBoneLookAtAxis;                         		// 0x018C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_RootAnimBoneUpAxis;                             		// 0x018D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      nTransitionType;                                  		// 0x018E (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1550 ];

		return pClassPointer;
	};

};

UClass* UBioActorLookAtController::pClassPointer = NULL;

// Class SFXGame.SFXAnimNodeBlendByMoveTransition
// 0x0024 (0x00FC - 0x00D8)
class USFXAnimNodeBlendByMoveTransition : public UAnimNodeBlendList
{
public:
	TArray< struct FMoveToIdleTransitionBlend >        MoveToIdleBlends;                                 		// 0x00D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       MoveSyncGroup;                                    		// 0x00E4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleSpeed;                                        		// 0x00EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleTimer;                                        		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ActiveMoveToIdleTrans;                            		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIdle : 1;                                        		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1551 ];

		return pClassPointer;
	};

};

UClass* USFXAnimNodeBlendByMoveTransition::pClassPointer = NULL;

// Class SFXGame.SFXAnimNodeBlendStrafe
// 0x0023 (0x00E0 - 0x00BD)
class USFXAnimNodeBlendStrafe : public UAnimNodeBlendBase
{
public:
	struct FName                                       SynchGroupName;                                   		// 0x00C0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendSpeed;                                       		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleRelativePos;                                  		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleAngle;                                        		// 0x00D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DirAngle;                                         		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                HighestIndex;                                     		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioAnimMovementSync*                        MovementSync;                                     		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1552 ];

		return pClassPointer;
	};

};

UClass* USFXAnimNodeBlendStrafe::pClassPointer = NULL;

// Class SFXGame.SFXAnimNodeBlendStrafeBySpeed
// 0x0020 (0x0100 - 0x00E0)
class USFXAnimNodeBlendStrafeBySpeed : public USFXAnimNodeBlendStrafe
{
public:
	float                                              BaseSpeeds[ 0x8 ];                                		// 0x00E0 (0x0020) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1553 ];

		return pClassPointer;
	};

};

UClass* USFXAnimNodeBlendStrafeBySpeed::pClassPointer = NULL;

// Class SFXGame.SFXAnimNotify_Exertion
// 0x0004 (0x0040 - 0x003C)
class USFXAnimNotify_Exertion : public UAnimNotify
{
public:
	class UWwiseEvent*                                 ExertionEvent;                                    		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1554 ];

		return pClassPointer;
	};

};

UClass* USFXAnimNotify_Exertion::pClassPointer = NULL;

// Class SFXGame.SFXAnimSetCookSpec
// 0x0004 (0x0040 - 0x003C)
class USFXAnimSetCookSpec : public UObject
{
public:
	class UAnimSet*                                    AnimSet;                                          		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1555 ];

		return pClassPointer;
	};

};

UClass* USFXAnimSetCookSpec::pClassPointer = NULL;

// Class SFXGame.SFXDoor
// 0x00C7 (0x02F3 - 0x022C)
class ASFXDoor : public ASkeletalMeshActor
{
public:
	TArray< class ASFXDoorMarker* >                    m_aDoorMarker;                                    		// 0x022C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             m_aIconSocket;                                    		// 0x0238 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FClientEffectWithGUID >             m_ActiveIconEffects;                              		// 0x0244 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGuid                                       MyGuid;                                           		// 0x0250 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FGuid                                       OmniGuid;                                         		// 0x0260 (0x0010) [0x0000000000000000]              
	struct FName                                       m_TransitionOpen;                                 		// 0x0270 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_TransitionClose;                                		// 0x0278 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nIndex;                                         		// 0x0280 (0x0004) [0x0000000000000000]              
	class URvrClientEffectInterface*                   CE_IconClosed;                                    		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_IconHackable;                                  		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_IconPlotLocked;                                		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_IconDelayed;                                   		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_IconDelayedActive;                             		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_IconPlotHacking;                               		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_Transition_Open;                          		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_Transition_Close;                         		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Success_Opening;                      		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Delayed_Opening;                      		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Failure_PlotLocked;                   		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Failure_HackLocked;                   		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Kismet_Locked;                        		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Kismet_UnLocked;                      		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Kismet_Enabled;                       		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Kismet_Disabled;                      		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Kismet_Delayed;                       		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HackDuration;                                     		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   OmniToolTemplate;                                 		// 0x02CC (0x0004) [0x0000000000000000]              
	class ASFXPawn_Player*                             LastUser;                                         		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              HackStartTime;                                    		// 0x02D4 (0x0004) [0x0000000000000000]              
	float                                              HackRange;                                        		// 0x02D8 (0x0004) [0x0000000000000000]              
	float                                              HackUpdateTime;                                   		// 0x02DC (0x0004) [0x0000000000000000]              
	float                                              HackAnimTime;                                     		// 0x02E0 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bOpenWhenInteractedWhileUnlocked : 1;           		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIsTransitioning : 1;                           		// 0x02E4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bCollisionTemporarilyDisabled : 1;                		// 0x02E4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bSaveMe : 1;                                      		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRevertToDelayed : 1;                             		// 0x02E4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      m_CurrentDoorState;                               		// 0x02E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_PreviousDoorState;                              		// 0x02E9 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_DoorType;                                       		// 0x02EA (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Region;                                           		// 0x02EB (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x02EC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlotInt;                                          		// 0x02ED (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_TargetTipTextClosed;                            		// 0x02EE (0x0001) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	unsigned char                                      m_TargetTipTextHackLocked;                        		// 0x02EF (0x0001) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	unsigned char                                      m_TargetTipTextPlotLocked;                        		// 0x02F0 (0x0001) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	unsigned char                                      m_TargetTipTextDelayed;                           		// 0x02F1 (0x0001) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	unsigned char                                      m_PendingDoorState;                               		// 0x02F2 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1556 ];

		return pClassPointer;
	};

	void CheckInterrupt ( );
	void FinishHack ( );
	void RefreshCustomAction ( );
	void StopHacking ( );
	void StartHacking ( );
	bool PlayerTookDamageRecently ( );
	void eventRestoreDoorStates ( );
	void SaveDoorStates ( );
	void PlayWiseEvent ( class UWwiseEvent* oWwiseEvent );
	void SetDoorMarkerState ( unsigned long bOpen );
	void eventOnTransitionEnd ( );
	void eventSetDoorIcon ( class URvrClientEffectInterface* ClientEffect );
	TArray< class URvrClientEffectInterface* > GetActiveClientEffects ( );
	void TriggerInteraction ( class AActor* EventInstigator );
	void TriggerStateChange ( class AActor* EventInstigator );
	void PostBeginPlay ( );
	bool CloseDoor ( unsigned long bInstant );
	bool OpenDoor ( unsigned long bInstant );
	void eventSetDoorState ( unsigned char ToState, class AActor* User, unsigned long bInstantTransition );
	void PlayAnim ( struct FName InAnimSeqName, unsigned long bSkipToEnd );
	void OnUse ( class AActor* User );
};

UClass* ASFXDoor::pClassPointer = NULL;

// Class SFXGame.SFXGoreActor
// 0x0000 (0x022C - 0x022C)
class ASFXGoreActor : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1557 ];

		return pClassPointer;
	};

	class USkeletalMeshComponent* GetHeadSkelMeshComponent ( );
	class USkeletalMeshComponent* GetPrimarySkelMeshComponent ( );
	void SkelMeshActorOnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	void ApplyCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void eventOnSetSkelControlTarget ( class USeqAct_SetSkelControlTarget* Action );
	void eventOnUpdatePhysBonesFromAnim ( class USeqAct_UpdatePhysBonesFromAnim* Action );
	void eventOnSetMesh ( class USeqAct_SetMesh* Action );
	bool IsActorPlayingFaceFXAnim ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	void OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay );
	void MAT_FinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void MAT_BeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void UpdateAnimSetList ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void OnSetAimTarget ( class USFXSeqAct_SetAimTarget* inAction );
};

UClass* ASFXGoreActor::pClassPointer = NULL;

// Class SFXGame.SFXSkelControlLimb
// 0x0010 (0x00EC - 0x00DC)
class USFXSkelControlLimb : public USkelControlLimb
{
public:
	TArray< struct FSkelControlProfile >               SkelControlProfiles;                              		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                CurrentProfile;                                   		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1558 ];

		return pClassPointer;
	};

	void SetSkelControlProfile ( int idx );
};

UClass* USFXSkelControlLimb::pClassPointer = NULL;

// Class SFXGame.SFXSkelControlSingleBoneByGender
// 0x0006 (0x00D0 - 0x00CA)
class USFXSkelControlSingleBoneByGender : public USkelControlSingleBone
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x00CC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bGenderMatch : 1;                                 		// 0x00CC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bFemale : 1;                                      		// 0x00CC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1559 ];

		return pClassPointer;
	};

};

UClass* USFXSkelControlSingleBoneByGender::pClassPointer = NULL;

// Class SFXGame.SFXSkelCtrl_AnimatedFootPlacement
// 0x0037 (0x0118 - 0x00E1)
class USFXSkelCtrl_AnimatedFootPlacement : public USkelControl_CCD_IK
{
public:
	struct FVector                                     LockFootLoc;                                      		// 0x00E4 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     LockedFootWorldLoc;                               		// 0x00F0 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LockAlphaBlendTime;                               		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HitZOffset;                                       		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LockAlphaBlendTimeToGo;                           		// 0x0104 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LockAlpha;                                        		// 0x0108 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LockAlphaTarget;                                  		// 0x010C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LastDeltaTime;                                    		// 0x0110 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bLockFoot : 1;                                    		// 0x0114 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1560 ];

		return pClassPointer;
	};

};

UClass* USFXSkelCtrl_AnimatedFootPlacement::pClassPointer = NULL;

// Class SFXGame.SFXSkelCtrl_FootPlanting
// 0x0044 (0x0120 - 0x00DC)
class USFXSkelCtrl_FootPlanting : public USkelControlLimb
{
public:
	struct FVector                                     LockFootLoc;                                      		// 0x00DC (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     LockedFootWorldLoc;                               		// 0x00E8 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FName                                       FootBoneName;                                     		// 0x00F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       IKFootBoneName;                                   		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              FootLockZThreshold;                               		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LockAlphaBlendTime;                               		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LockAlphaBlendTimeToGo;                           		// 0x010C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LockAlpha;                                        		// 0x0110 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LockAlphaTarget;                                  		// 0x0114 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LastDeltaTime;                                    		// 0x0118 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bDoFootLocking : 1;                               		// 0x011C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLockFoot : 1;                                    		// 0x011C (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1561 ];

		return pClassPointer;
	};

};

UClass* USFXSkelCtrl_FootPlanting::pClassPointer = NULL;

// Class SFXGame.SFXSkeletalMeshActor
// 0x0038 (0x0264 - 0x022C)
class ASFXSkeletalMeshActor : public ASkeletalMeshActor
{
public:
	TArray< struct FSMAVectorParameter >               VectorParameters;                                 		// 0x022C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSMAScalarParameter >               ScalarParameters;                                 		// 0x0238 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSMATextureParameter >              TextureParameters;                                		// 0x0244 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      HeadMesh;                                         		// 0x0250 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HairMesh;                                         		// 0x0254 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HeadGearMesh;                                     		// 0x0258 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioMorphFace*                               MorphHead;                                        		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAnimFrozen : 1;                                  		// 0x0260 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UpdateSkelWhenNotRendered : 1;                    		// 0x0260 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bHasWrinkles : 1;                                 		// 0x0260 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1562 ];

		return pClassPointer;
	};

	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void eventPostBeginPlay ( );
	class USkeletalMeshComponent* GetHeadSkelMeshComponent ( );
	class USkeletalMeshComponent* GetPrimarySkelMeshComponent ( );
};

UClass* ASFXSkeletalMeshActor::pClassPointer = NULL;

// Class SFXGame.SFXSkeletalMeshActorMAT
// 0x0034 (0x026C - 0x0238)
class ASFXSkeletalMeshActorMAT : public ASkeletalMeshActorMAT
{
public:
	TArray< struct FSMAVectorParameter >               VectorParameters;                                 		// 0x0238 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSMAScalarParameter >               ScalarParameters;                                 		// 0x0244 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSMATextureParameter >              TextureParameters;                                		// 0x0250 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      HeadMesh;                                         		// 0x025C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HairMesh;                                         		// 0x0260 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioMorphFace*                               MorphHead;                                        		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UpdateSkelWhenNotRendered : 1;                    		// 0x0268 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHasWrinkles : 1;                                 		// 0x0268 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1563 ];

		return pClassPointer;
	};

	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
};

UClass* ASFXSkeletalMeshActorMAT::pClassPointer = NULL;

// Class SFXGame.SFXStuntActor
// 0x0022 (0x0218 - 0x01F6)
class ASFXStuntActor : public AActor
{
public:
	class USkeletalMeshComponent*                      BodyMesh;                                         		// 0x01F8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HeadMesh;                                         		// 0x01FC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HairMesh;                                         		// 0x0200 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HeadGearMesh;                                     		// 0x0204 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioMorphFace*                               MorphHead;                                        		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBioDynamicLightEnvironmentComponent*        LightEnvironment;                                 		// 0x020C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AActor*                                      AimTarget;                                        		// 0x0210 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHelmetHidesHead : 1;                             		// 0x0214 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHelmetHidesHair : 1;                             		// 0x0214 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bUpdateSkelWhenNotRendered : 1;                 		// 0x0214 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bActive : 1;                                    		// 0x0214 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCausesPlayerPortArms : 1;                        		// 0x0214 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1564 ];

		return pClassPointer;
	};

	void SetHeadGearVisibility ( unsigned long bShow );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	void eventStopActorFaceFXAnim ( );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	class USkeletalMeshComponent* GetHeadSkelMeshComponent ( );
	class USkeletalMeshComponent* GetPrimarySkelMeshComponent ( );
	void eventPlayFootStepSound ( int FootDown );
	void eventSFXSetAudioComponentRTPCs ( class UActorComponent* pWwiseAudioComponent );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void PostBeginPlay ( );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void OnSetAimTarget ( class USFXSeqAct_SetAimTarget* inAction );
};

UClass* ASFXStuntActor::pClassPointer = NULL;

// Class SFXGame.BioPathNodeVolume
// 0x001E (0x024A - 0x022C)
class ABioPathNodeVolume : public AVolume
{
public:
	float                                              fMaxNodeSeparation;                               		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMargin;                                          		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNodeTargetRadius;                                		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxSlope;                                        		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nLevels;                                          		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLevelHeight;                                     		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDeleteNodesOnPopulate : 1;                       		// 0x0244 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDoNotGenerateGroundNodes : 1;                    		// 0x0244 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      eAlignment;                                       		// 0x0248 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ePathNodeGenerator;                               		// 0x0249 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1565 ];

		return pClassPointer;
	};

};

UClass* ABioPathNodeVolume::pClassPointer = NULL;

// Class SFXGame.BioTierInfo
// 0x0018 (0x0054 - 0x003C)
class UBioTierInfo : public UObject
{
public:
	TArray< struct FPointer >                          Triggers;                                         		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    CurrentTrigger;                                   		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                Priority;                                         		// 0x004C (0x0004) [0x0000000000000000]              
	unsigned long                                      Enabled : 1;                                      		// 0x0050 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IsFloor : 1;                                      		// 0x0050 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      IsGlobal : 1;                                     		// 0x0050 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      IsDynamic : 1;                                    		// 0x0050 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      ValidCurrentTrigger : 1;                          		// 0x0050 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1566 ];

		return pClassPointer;
	};

};

UClass* UBioTierInfo::pClassPointer = NULL;

// Class SFXGame.BioTierManager
// 0x0025 (0x0061 - 0x003C)
class UBioTierManager : public UObject
{
public:
	TArray< struct FTierDetails_t >                    TierDetails;                                      		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class UBioTierInfo* >                      TierInfo;                                         		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       DefaultTier;                                      		// 0x0054 (0x0008) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bReevaluateStreaming : 1;                         		// 0x005C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      FloorTierIndex;                                   		// 0x0060 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1567 ];

		return pClassPointer;
	};

	void ConvertPlotStreaming ( struct FName fnVirtualChunk, TArray< struct FPlotStreamingElement >* aRealChunks );
	void UnregisterPlotStreaming ( TArray< struct FPlotStreamingSet >* PlotStreaming );
	void RegisterPlotStreaming ( TArray< struct FPlotStreamingSet >* PlotStreaming );
	void ForegroundStreamingDone ( class APawn* PlayerPawn, TArray< class USequence* >* Sequences );
	void BackgroundStreamingDone ( class APawn* PlayerPawn, TArray< class USequence* >* Sequences );
	class UBioTierInfo* GetFloorTier ( );
	class UBioTierInfo* GetTier ( unsigned char Index );
	struct FName GetTierName ( unsigned char Index );
	unsigned char GetNumTiers ( );
};

UClass* UBioTierManager::pClassPointer = NULL;

// Class SFXGame.BioTriggerStream
// 0x002D (0x0259 - 0x022C)
class ABioTriggerStream : public ATriggerVolume
{
public:
	TArray< struct FBioStreamingState >                StreamingStates;                                  		// 0x022C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       TierName;                                         		// 0x0238 (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                m_StoredStateIndex;                               		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPriorityLevel;                                 		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBioTierInfo*                                TierInfo;                                         		// 0x0248 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UGFxMovieInfo*                               m_oAreaMapOverride;                               		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                bInPlotStreaming;                                 		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bErrorsLogged : 1;                                		// 0x0254 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bIgnoreForStreamingCoverage : 1;                		// 0x0254 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      Tier;                                             		// 0x0258 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1568 ];

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void ForegroundStreamingDone ( TArray< class USequence* > Sequences, class APawn* PlayerPawn );
	void BackgroundStreamingDone ( TArray< class USequence* > Sequences, class APawn* PlayerPawn );
	void DoUntouch ( class AActor* Other );
	void DoTouch ( class AActor* Other );
};

UClass* ABioTriggerStream::pClassPointer = NULL;

// Class SFXGame.BioWorldInfo
// 0x0181 (0x07D3 - 0x0652)
class ABioWorldInfo : public AWorldInfo
{
public:
	TArray< class ASFXSmokeActorBase* >                SmokeList;                                        		// 0x0654 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UBioSeqAct_FaceOnlyVO* >             m_aCurrentFaceOnlyVOs;                            		// 0x0660 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sFriendlyName;                                  		// 0x066C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_sCinematicSkipEvent;                            		// 0x0678 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< float >                                    m_fLookAtDelays;                                  		// 0x0684 (0x000C) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	TArray< class AActor* >                            SelectableActors;                                 		// 0x0690 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AActor* >                            RadarActors;                                      		// 0x069C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ASFXNav_LadderNode* >                Ladders;                                          		// 0x06A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPlotStreamingSet >                 PlotStreaming;                                    		// 0x06B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FWorldStreamingState >              m_WorldStreamingStates;                           		// 0x06C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_sDestinationAreaMap;                            		// 0x06CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      m_pScannedClusters;                               		// 0x06D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      m_pScannedSystems;                                		// 0x06E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      m_pScannedPlanets;                                		// 0x06F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSubPageState >                     SubPageStateOverrides;                            		// 0x06FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FEffectsMaterialPriority >          EffectsMaterialPriorities;                        		// 0x0708 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< class UObject* >                           m_AutoPersistentObjects;                          		// 0x0714 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     m_vDestination;                                   		// 0x0720 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmPS3RubberMouthAnimName;                       		// 0x072C (0x0008) [0x0000000000004000]              ( CPF_Config )
	class ABioBaseSquad*                               m_playerSquad;                                    		// 0x0734 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioTimerList*                               TimerList;                                        		// 0x0738 (0x0004) [0x0000000000000000]              
	class UBioQuestProgressionMap*                     m_oQuestProgress;                                 		// 0x073C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioDiscoveredCodexMap*                      m_oDiscoveredCodex;                               		// 0x0740 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nJournalLastSelectedMission;                    		// 0x0744 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nJournalLastSelectedAssignment;                 		// 0x0748 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCodexLastSelectedPrimary;                      		// 0x074C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCodexLastSelectedSecondary;                    		// 0x0750 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioConversationController*                  m_pConvCondCheckOverride;                         		// 0x0754 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ABioPlayerController*                        LocalPlayerController;                            		// 0x0758 (0x0004) [0x0000000000000000]              
	int                                                m_nRichPresenceContextStringIndex;                		// 0x075C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieInfo*                               m_oAreaMap;                                       		// 0x0760 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieInfo*                               m_oParentAreaMap;                                 		// 0x0764 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fConversationInterruptDistance;                 		// 0x0768 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fIdleCameraSpeed;                               		// 0x076C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fNoSkipBuffer;                                  		// 0x0770 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fConvLookAtMaxRange;                            		// 0x0774 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              m_srProfileNotSignedInWarningMsg;                 		// 0x0778 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nAutoBotMPKit;                                  		// 0x077C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nAutoBotLevel;                                  		// 0x0780 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nAutoBotEnemyDifficulty;                        		// 0x0784 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fAutoBotAttackPowerPercent;                     		// 0x0788 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fAutoBotDefensePowerPercent;                    		// 0x078C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fTimeLevelBecameLive;                           		// 0x0790 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ForcedCasualAppearanceID;                         		// 0x0794 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBioInGamePropertyEditor*                    m_oPropertyEditor;                                		// 0x0798 (0x0004) [0x0000000000000000]              
	float                                              m_fGameOverPauseTime;                             		// 0x079C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	class UWwiseEventPairObject*                       m_pEndGameMusicEvent;                             		// 0x07A0 (0x0004) [0x0000000000000000]              
	class AWwiseEnvironmentVolume*                     HighestPriorityAudioEnvVolume;                    		// 0x07A4 (0x0004) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	class UBioConversationManager*                     m_pConversationManager;                           		// 0x07A8 (0x0004) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class UBioEventNotifier*                           EventNotifier;                                    		// 0x07AC (0x0004) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class USFXPlotTreasure*                            m_oTreasure;                                      		// 0x07B0 (0x0004) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class UBioSubtitles*                               m_pSubtitles;                                     		// 0x07B4 (0x0004) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class UBioPhysicsSounds*                           m_PhysicsSound;                                   		// 0x07B8 (0x0004) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class UBioUIWorld*                                 m_UIWorld;                                        		// 0x07BC (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioPowerManager*                            m_oPowerManager;                                  		// 0x07C0 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      m_bJournalShowingMissions : 1;                    		// 0x07C4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bCodexShowingPrimary : 1;                       		// 0x07C4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bInvokesHintMessages : 1;                       		// 0x07C4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bPlayerRequiresFullHelmet : 1;                  		// 0x07C4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bCinematicSkip : 1;                             		// 0x07C4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bDisableCinematicSkip : 1;                      		// 0x07C4 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bForceCinematicDamage : 1;                      		// 0x07C4 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bFlushSFHud : 1;                                		// 0x07C4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bDebugCameras : 1;                              		// 0x07C4 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      m_bPartyMembersImmuneToExternalForce : 1;         		// 0x07C4 (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      m_bAutoBotUseMin1Health : 1;                      		// 0x07C4 (0x0004) [0x0000000000006000] [0x00000400] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bLevelIsLive : 1;                               		// 0x07C4 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bCombatLevel : 1;                                 		// 0x07C4 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bCreateAndShowWeapons : 1;                        		// 0x07C4 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bUseCasualAppearance : 1;                         		// 0x07C4 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      m_bGameWasPaused : 1;                             		// 0x07C4 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bKismetShowHUD : 1;                               		// 0x07C4 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      m_bAllowBrowserWheel : 1;                         		// 0x07C4 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bSupportsPrecomputedLightVolumes : 1;             		// 0x07C4 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned char                                      m_lstBrowserAlerts[ 0xA ];                        		// 0x07C8 (0x000A) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_nJournalSortMethod;                             		// 0x07D2 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1569 ];

		return pClassPointer;
	};

	void MakeLevelLive ( );
	void ShowDebugMessage ( struct FString Message );
	void AllControllersCloseToSegment ( class UClass* BaseClass, struct FVector LineStart, struct FVector LineEnd, float MaxDistance, class AController** C );
	void PreBeginPlay ( );
	void eventServerTravel ( struct FString URL, unsigned long bAbsolute, unsigned long bShouldSkipGameNotify );
	void PauseGame ( unsigned long bPause );
	void eventSetPlayersControllerId ( class ULocalPlayer* Player, int ControllerId );
	void ClearBrowserWheelStateOverride ( );
	void AddBrowserWheelStateOverride ( struct FSubPageState i_SubStateOverride );
	void StartMatch ( );
	void GetGlobalEvents ( class UClass* EventClass, TArray< class USequenceEvent* >* aEvents );
	void SetRenderStateOfPlayerToDefault ( unsigned char RenderState );
	void SetRenderStateOfPlayer ( unsigned char RenderState, float fValue );
	float GetRenderStateOfPlayer ( unsigned char RenderState );
	void SetGlobalTlk ( unsigned long bMale, unsigned long bPurge );
	void PostBeginPlay ( );
	bool eventCheckState ( int nState );
	bool IsAmbientOKToStart ( );
	void SetFOVOAsPlaying ( class UBioSeqAct_FaceOnlyVO* pFOVO );
	bool IsFOVOPlaying ( class UBioSeqAct_FaceOnlyVO* pFOVO, unsigned long bAnyFOVO );
	bool IsOKToStartFOVO ( class UBioSeqAct_FaceOnlyVO* pFOVO );
	void EndAllFOVOs ( unsigned long bLowPriorityOnly );
	void EndFOVO ( class UBioSeqAct_FaceOnlyVO* pFOVO );
	class UBioConversationManager* SimGetConversationManager ( );
	class UBioConversationManager* GetConversationManager ( );
	void eventClearCurrentGame ( );
	class UBioGlobalVariableTable* GetGlobalVariables ( );
	void Tick ( float fDeltaT );
	void TickLocal ( float DeltaTime );
	class ABioPlayerController* GetLocalPlayerController ( );
	int GetAutoBotsLobbyWaitTime ( );
	void SetAutoBotsEnabled ( unsigned long bEnabled );
	bool GetAutoBotsEnabled ( );
	bool IsActorHenchman ( class AActor* Actor );
	bool IsActorPlayer ( class AActor* Actor );
	bool GetCurrentStreamingChunkName ( struct FName* nmStreamingChunkName );
	void PlayEndGameMusic ( );
	struct FString GetDetailedVersionString ( );
	struct FString GetEpicVersionString ( );
	struct FString GetVersionString ( );
	void MoveToArea ( struct FName sAreaName, struct FName sNextAreaStartPoint, struct FString sArguments );
	bool GetLocalBoolVariable ( unsigned char eObjectType, struct FName GetFunctionName, struct FName sTag, int nParam );
	float GetLocalFloatVariable ( unsigned char eObjectType, struct FName GetFunctionName, struct FName sTag, int nParam );
	int GetLocalIntegerVariable ( unsigned char eObjectType, struct FName GetFunctionName, struct FName sTag, int nParam );
	void ExecuteConsequence ( int nConsequence, int nParam );
	void ExecuteStateTransition ( int nTransition, int nParam );
	bool CheckConditional ( int nConditional, int nParam );
	bool HasConditional ( int nConditional );
	void eventCauseEvent ( struct FName EventName );
	bool GetGuiInputPermission ( unsigned char nEvent );
	void RequestStartNewGame ( unsigned long bFemale, struct FName RemoteEvent, unsigned long bLegacySave, unsigned long bImportSave );
	void RequestStartPlusGame ( );
	void RequestStartLegacyGame ( );
	void OnNewGameStartRequest ( struct FName RemoteEvent );
	bool TriggerCinematicSkippedEvent ( );
	void SetStreamingState ( struct FName StateName, unsigned long bValue );
};

UClass* ABioWorldInfo::pClassPointer = NULL;

// Class SFXGame.SFXGalaxyMapGameData
// 0x0354 (0x0390 - 0x003C)
class USFXGalaxyMapGameData : public UObject
{
public:
	struct FSFXGalaxyTemplates_Planet                  PlanetTemplates;                                  		// 0x003C (0x009C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FSFXGalaxyAudioData                         AudioData;                                        		// 0x00D8 (0x0090) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FSFXGalaxyTemplates_Cluster                 ClusterTemplates;                                 		// 0x0168 (0x0078) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FSFXGalaxyTemplates_System                  SystemTemplates;                                  		// 0x01E0 (0x00F0) [0x0000000000000001]              ( CPF_Edit )
	struct FSFXGalaxyTemplates_Galaxy                  GalaxyTemplates;                                  		// 0x02D0 (0x0090) [0x0000000000000001]              ( CPF_Edit )
	struct FSFXGalaxyTemplates_SystemScanning          ScanningTemplates;                                		// 0x0360 (0x0030) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1570 ];

		return pClassPointer;
	};

	void ClearPersistentLevelReferences ( );
	void CachePersistentLevelReferences ( );
};

UClass* USFXGalaxyMapGameData::pClassPointer = NULL;

// Class SFXGame.SFXGameChoiceGUIData
// 0x0035 (0x0071 - 0x003C)
class USFXGameChoiceGUIData : public UObject
{
public:
	TArray< struct FSFXTokenMapping >                  m_mapTokenIDToActual;                             		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSFXChoiceEntry >                   lstChoices;                                       		// 0x0048 (0x000C) [0x0000000000424001]              ( CPF_Edit | CPF_Config | CPF_EditConst | CPF_NeedCtorLink )
	void*                                              m_srTitle;                                        		// 0x0054 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              m_srSubTitle;                                     		// 0x0058 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              m_srAText;                                        		// 0x005C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              m_srBText;                                        		// 0x0060 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              m_srOptionalPaneTitleText;                        		// 0x0064 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              m_srOptionalPaneItemValuePrefixText;              		// 0x0068 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      m_ShowOptionalPane : 1;                           		// 0x006C (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned char                                      m_eOptionalPaneResourceType;                      		// 0x0070 (0x0001) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1571 ];

		return pClassPointer;
	};

	void RemoveTokenMapping ( int nTokenID, struct FSFXChoiceEntry* Data );
	void SetTokenMapping ( int nTokenID, struct FString sValue, struct FSFXChoiceEntry* Data );
	void ClearChoiceList ( );
	bool AddChoice ( struct FSFXChoiceEntry Params );
	void SetupOptionalPane ( unsigned long bShowOptionalPane, void* srOptionalPaneTitleText, void* srOptionalPaneItemValuePrefixText, void* srOptionalPaneValuePrefixText );
	void SetDisplayText ( void* srTitle, void* srSubTitle, void* srAText, void* srBText );
};

UClass* USFXGameChoiceGUIData::pClassPointer = NULL;

// Class SFXGame.SFXGameChoiceGUIData_PRCShop
// 0x000F (0x0080 - 0x0071)
class USFXGameChoiceGUIData_PRCShop : public USFXGameChoiceGUIData
{
public:
	TArray< struct FSFXChoiceEntryNoStrRef >           lstChoicesNoStrRef;                               		// 0x0074 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1572 ];

		return pClassPointer;
	};

	void AddChoiceNoStrRef ( struct FSFXChoiceEntryNoStrRef oChoice );
};

UClass* USFXGameChoiceGUIData_PRCShop::pClassPointer = NULL;

// Class SFXGame.SFXGUIData_Elevator
// 0x0033 (0x00A4 - 0x0071)
class USFXGUIData_Elevator : public USFXGameChoiceGUIData
{
public:
	TArray< struct FElevatorDestinationData >          ElevatorDestinations;                             		// 0x0074 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultImage;                                     		// 0x0080 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FName                                       ElevatorName;                                     		// 0x008C (0x0008) [0x0000000000004000]              ( CPF_Config )
	void*                                              srElevatorTitle;                                  		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srElevatorDescription;                            		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srDefaultAButtonText;                             		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srDefaultBButtonText;                             		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1573 ];

		return pClassPointer;
	};

	void DestinationDescString ( class USFXGUIMovie* Elevator, struct FElevatorDestinationData Destination, struct FString* Desc );
	void DestinationTitleString ( class USFXGUIMovie* Elevator, struct FElevatorDestinationData Destination, struct FString* Title );
};

UClass* USFXGUIData_Elevator::pClassPointer = NULL;

// Class SFXGame.SFXGUIData_Store
// 0x015C (0x01CD - 0x0071)
class USFXGUIData_Store : public USFXGameChoiceGUIData
{
public:
	struct FStoreItemData                              IntelSummary;                                     		// 0x0074 (0x00FC) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FStoreItemData >                    StoreItemArray;                                   		// 0x0170 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultImage;                                     		// 0x017C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class USFXGUIData_Store* >                 MallStoreArray;                                   		// 0x0188 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StoreHeaderImageRef;                              		// 0x0194 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FName                                       StoreName;                                        		// 0x01A0 (0x0008) [0x0000000000004000]              ( CPF_Config )
	int                                                DiscoveryID;                                      		// 0x01A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DiscountUnlockID;                                 		// 0x01AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DiscountPercent;                                  		// 0x01B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MarkupPercent;                                    		// 0x01B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srStoreDescription;                               		// 0x01B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              ConfirmationMessageATextOverride;                 		// 0x01BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srOutOfStock;                                     		// 0x01C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srOutOfStockDescription;                          		// 0x01C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bApplyIntelSummary : 1;                           		// 0x01C8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bUseChoiceNameAsConfirmationMessage : 1;          		// 0x01C8 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned char                                      ItemType;                                         		// 0x01CC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1574 ];

		return pClassPointer;
	};

	bool IsStoreDiscovered ( );
};

UClass* USFXGUIData_Store::pClassPointer = NULL;

// Class SFXGame.SFXGUIData_Terminal
// 0x0033 (0x00A4 - 0x0071)
class USFXGUIData_Terminal : public USFXGameChoiceGUIData
{
public:
	TArray< struct FTerminalItemData >                 TerminalItemArray;                                		// 0x0074 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultImage;                                     		// 0x0080 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FName                                       TerminalName;                                     		// 0x008C (0x0008) [0x0000000000004000]              ( CPF_Config )
	void*                                              srTerminalTitle;                                  		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srTerminalDescription;                            		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srDefaultAButtonText;                             		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srDefaultBButtonText;                             		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1575 ];

		return pClassPointer;
	};

};

UClass* USFXGUIData_Terminal::pClassPointer = NULL;

// Class SFXGame.SFXGUI_MainMenu_Message
// 0x003E (0x007A - 0x003C)
class USFXGUI_MainMenu_Message : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     Message;                                          		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Title;                                            		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMessageDataLoaded__Delegate;                  		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxValue*                                   MovieClip;                                        		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                Id;                                               		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                ServerID;                                         		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                DLC_ID;                                           		// 0x0070 (0x0004) [0x0000000000000000]              
	unsigned long                                      bGFxClassLoaded : 1;                              		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTelemetryFired : 1;                              		// 0x0074 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      Status;                                           		// 0x0078 (0x0001) [0x0000000000000000]              
	unsigned char                                      MessageType;                                      		// 0x0079 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1576 ];

		return pClassPointer;
	};

	void AS_SetDataLoadStatus ( int nStatus );
	void OnDisplayed ( );
	void Cleanup ( );
	void eventOnLoadComplete ( );
	void LoadComplete ( );
	void eventOnLoad ( );
	void Load ( struct FScriptDelegate aFunction );
	unsigned char GetStatus ( );
	void OnMessageDataLoaded ( class USFXGUI_MainMenu_Message* aMessageThatFinishedLoading );
};

UClass* USFXGUI_MainMenu_Message::pClassPointer = NULL;

// Class SFXGame.SFXGUI_MainMenu_RightComputer
// 0x0064 (0x00A0 - 0x003C)
class USFXGUI_MainMenu_RightComputer : public UObject
{
public:
	TArray< unsigned char >                            MessagePriorities;                                		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class USFXGUI_MainMenu_Message* >          Messages;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFXGUI_MainMenu_Message* >          TickerMessages;                                   		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< void* >                                    DisconnectedTickerMessages;                       		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnComputerDisplayRegistered__Delegate;          		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnConnectButtonExecuted__Delegate;              		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nNextMessageID;                                   		// 0x0084 (0x0004) [0x0000000000000000]              
	class USFXGUI_MainMenu_RTT_RC*                     ComputerDisplay;                                  		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                nCurrentlySelectedMessageIndex;                   		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                nLastTickerMessageIDDisplayed;                    		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                nCurrentlyDisplayedTickerMessageIndex;            		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                MaxNumberOfImages;                                		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bComputerOpen : 1;                                		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1577 ];

		return pClassPointer;
	};

	void FailImageAssets ( );
	void LoadPendingMessageData ( );
	struct FString GetLocalizedNewsItemCount ( int nCurrentlySelectedIndex );
	void OnConnectButton ( );
	struct FString GetNextTickerMessage ( );
	void MessageAboutToDisplay ( int nMessageId, int nArrayIndexLocation );
	void OnGFXClassLoaded ( int nID );
	void SetConnectButtonState ( struct FString sMessage, unsigned long bVisible );
	bool IsComputerOpen ( );
	void CloseComputer ( );
	void OpenComputer ( );
	void SyncronizeGameAndGFxMessages ( );
	void eventOnResortMessages ( );
	void ResortMessages ( );
	void ResortTickerMessages ( );
	void OnShutdown ( );
	void SetImageForMessage ( class USFXGUI_MainMenu_Message_Image* anImageMessage );
	void UpdateNavigationButtons ( );
	int FindIndex ( class USFXGUI_MainMenu_Message* oMessageToFind );
	class USFXGUI_MainMenu_Message* FindTickerMessageByServerId ( int nServerID );
	class USFXGUI_MainMenu_Message* FindMessageByServerId ( int nServerID );
	class USFXGUI_MainMenu_Message* FindMessage ( int nID );
	void AddGalaxyAtWarMessage ( );
	void OnImageMessageDataLoaded ( class USFXGUI_MainMenu_Message* oMessageThatFinishedLoading );
	void AddNetworkImageMessage ( struct FString i_sTitle, struct FString i_sInfo, struct FString i_sImagePath, unsigned char Type, int nDLC_ID, int ServerID );
	void StartMessageTicker ( );
	void AddTickerMessageInternal ( class USFXGUI_MainMenu_Message_Text* aTickerMessage );
	void AddTickerMessage ( unsigned char Type, struct FString i_sMessage, int nDLC_ID, int ServerID );
	int CountImageMessagesThatAreLoading ( );
	bool CanLoadImages ( );
	void AddDownloadPromtMessageItem ( struct FString i_sTitle, struct FString i_sInfo, struct FString i_sImage, unsigned char Type, int nDLC_ID, int ServerID );
	void OutputMessages ( );
	void ClearNotifications ( TArray< unsigned char > MessageTypesToClear );
	void ClearDisconnectedTickerMessages ( );
	void AddDisconnectedTickerMessages ( );
	void PrevMessage ( );
	void NextMessage ( );
	class USFXGUI_MainMenu_RTT_RC* GetDisplayComputer ( );
	void SetDisplayComputer ( class USFXGUI_MainMenu_RTT_RC* oRC );
	int GetNextMessageID ( );
	void OnConnectButtonExecuted ( );
	void OnComputerDisplayRegistered ( );
};

UClass* USFXGUI_MainMenu_RightComputer::pClassPointer = NULL;

// Class SFXGame.SFXGUIMovie
// 0x0106 (0x0261 - 0x015B)
class USFXGUIMovie : public UGFxMovie
{
public:
	TArray< struct FScriptDelegate >                   m_OnCloseCallbacks;                               		// 0x015C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      m_aPressedKeys;                                   		// 0x0168 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class USFXGUIMovieExtension* >             m_aMovieExtensions;                               		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMovieClosedDelegate__Delegate;                		// 0x0180 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_UpdateTimes[ 0xA ];                             		// 0x018C (0x0028) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_RenderTimes[ 0xA ];                             		// 0x01B4 (0x0028) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_AdvanceTimes[ 0xA ];                            		// 0x01DC (0x0028) [0x0000000000002000]              ( CPF_Transient )
	struct FScreenRect                                 MouseCaptureRect;                                 		// 0x0204 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    m_UIWorldMPPawnInitialRotation;                   		// 0x0214 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     m_UIWorldMPPawnInitialLocation;                   		// 0x0220 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       nmTag;                                            		// 0x022C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       OpenSound;                                        		// 0x0234 (0x0008) [0x0000000000000000]              
	struct FName                                       CloseSound;                                       		// 0x023C (0x0008) [0x0000000000000000]              
	class ABioWorldInfo*                               oWorldInfo;                                       		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nUpdateFrame;                                   		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nFSCommandHandlerID;                            		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSavedAspectRatio;                              		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              m_srNuiSpeechCommandFormatting;                   		// 0x0254 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MovieAlpha;                                       		// 0x0258 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bCache : 1;                                       		// 0x025C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bInCache : 1;                                   		// 0x025C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bInAdvanceCall : 1;                             		// 0x025C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bPendingClose : 1;                              		// 0x025C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bUnloadInPendingClose : 1;                      		// 0x025C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bFocusOnStart : 1;                              		// 0x025C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bDesiresFocus : 1;                              		// 0x025C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bHandleKeyPresses : 1;                          		// 0x025C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bUseThumbstickAsDPad : 1;                       		// 0x025C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      m_bRequiresUIWorld : 1;                           		// 0x025C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      m_bMouseVisibleWhenFocused : 1;                   		// 0x025C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      m_bApplyLeftThumbstickDeadzone : 1;               		// 0x025C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      m_bApplyRightThumbstickDeadzone : 1;              		// 0x025C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      m_bAcceptingFSCommands : 1;                       		// 0x025C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      m_bBeingUnitTested : 1;                           		// 0x025C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      ProcessMouseMovementWithRTT : 1;                  		// 0x025C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      AllowRTTMouseInputWithLowerZOrder : 1;            		// 0x025C (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      m_InputEnabled : 1;                               		// 0x025C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned char                                      ScreenLayout;                                     		// 0x0260 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1578 ];

		return pClassPointer;
	};

	void SetBackgroundAlpha ( float F );
	void PreloadImages ( TArray< struct FString > Images );
	void StopHandlingKeyPresses ( );
	void StartHandlingKeyPresses ( );
	void GetProfileTimes ( float* fUpdate, float* fRender, float* fAdvance );
	void PauseMenuAdditionalProcessing ( );
	struct FString GetNuiPawnCommandString ( struct FString TargetPawn, struct FString Rule );
	bool IsNuiSpeechEnabled ( );
	struct FString GetBoundKeyString ( struct FString sAlias, unsigned long bWrapNonTokenInParentheses, unsigned char eGameMode );
	void eventOnControllerProfileSettingChange ( );
	void eventOnLanguageChanged ( );
	void AttachToASFunction ( struct FString sASObjectPath, struct FString sASFuncName, struct FName nmFuncToCall, unsigned long bCallOriginalAS, unsigned long bInsertBeforeAS, class UObject* oCallbackObj );
	bool IsOpen ( );
	void PostProjectionToScreen ( struct FVector4* vPostProjectPos, struct FVector2D* vScreenLocation );
	bool WorldToScreen ( struct FVector vWorld, unsigned long bEnforceScreenEdge, struct FVector2D* vScreenLocation, struct FVector4* vPostProject );
	bool WorldToScreenFast ( struct FVector vWorld, unsigned long bEnforceScreenEdge, struct FVector2D vAdditionalScreenEdgeBorderBL, struct FVector2D vAdditionalScreenEdgeBorderTR, struct FSFXGUISceneView* SceneView, struct FVector2D* vScreenLocation, struct FVector4* vPostProject );
	bool WorldToSafePostProjectionFast ( struct FVector vWorld, unsigned long bEnforceScreenEdge, struct FVector2D vAdditionalScreenEdgeBorderBL, struct FVector2D vAdditionalScreenEdgeBorderTR, struct FSFXGUISceneView* SceneView, struct FVector4* vSafePostProjectPos, struct FVector4* vUnsafePostProjectPos );
	struct FSFXGUISceneView GetGUISceneView ( );
	struct FString UIStrRef ( void* sr );
	struct FString GetTokenizedUIString ( void* sr, TArray< struct FSFXTokenMapping >* aTokens );
	struct FString GetUIString ( void* sr, unsigned long bParse );
	void SetVariableStringRef ( struct FString Path, void* sr );
	bool IsMPGame ( );
	bool IsMPClient ( );
	unsigned char GetScreenLayout ( );
	void HandleInputConfigurations ( unsigned long bMenuAdvanceSwapped, unsigned long bStickSouthpaw, unsigned long bTriggerSouthpaw, unsigned long bTriggersShouldersSwapped );
	void SetGameMode ( unsigned long bEnable, unsigned char eGameMode );
	void PlayGuiError ( );
	bool StopGuiSound ( struct FName nmSound );
	bool PlayGuiSound ( struct FName nmSound );
	void StopGuiVoice ( );
	void PlayGuiVoice ( struct FName nmVoice );
	void StopGuiMusic ( );
	void PlayGuiMusic ( struct FName nmMusic, unsigned long bRestart );
	void eventOnAspectRatioChanged ( float fNewAspectRatio );
	float UpdateAspectRatio ( unsigned long bForce, unsigned long bHorizontal );
	float GetMovieAspectRatio ( );
	float GetViewportAspectRatio ( );
	bool IsTriggerShoulderSwapped ( );
	bool IsTriggerSouthpaw ( );
	bool IsStickSouthpaw ( );
	bool IsEnterMenuButtonAssignmentSwapped ( );
	void SetMouseVisible ( unsigned long bVisible );
	void SendMouseEvent ( unsigned char nEventID );
	bool eventHandleInputEvent ( unsigned char nEventID, float fValue );
	class USFXGUIInteraction* GetSFXUIController ( );
	struct FASValue Invoke0 ( struct FString sFuncPath );
	void RemoveExtension ( class UClass* classObj );
	class USFXGUIMovieExtension* GetExtension ( class UClass* classObj );
	class USFXGUIMovieExtension* AddExtension ( class UClass* classObj );
	void GetRequiresUIWorld ( );
	void SetRequiresUIWorld ( unsigned long bUIWorldRequired );
	bool GetInputEnabled ( );
	void SetInputEnabled ( unsigned long bEnabled );
	bool GetEnabled ( );
	void SetEnabled ( unsigned long bEnabled );
	bool GetUpdate ( );
	void SetUpdate ( unsigned long bUpdate );
	bool GetVisible ( );
	void SetVisible ( unsigned long bVisible );
	bool HasFocus ( );
	void SetAllowFSCommands ( unsigned long bAllowFSCommands );
	void SetFocus ( unsigned long bCapture, unsigned long bFocus );
	void SetMovieFocus ( unsigned long Focus );
	void eventUpdate ( float fDeltaT );
	void eventPostAdvance ( float tDelta );
	void Advance ( float Time );
	void eventInvokeOnCloseDelegates ( );
	void eventOnClose ( );
	void Close ( unsigned long Unload );
	void eventOnStart ( );
	bool eventStart ( unsigned long StartPaused );
	void eventUpdateInputConfigurations ( );
	void ClearAllDelegates ( );
	void ClearOnMovieClosedDelegate ( struct FScriptDelegate i_OnMovieClosedDelegate );
	void AddOnMovieClosedDelegate ( struct FScriptDelegate i_OnMovieClosedDelegate );
	bool OnMovieClosedDelegate ( class USFXGUIMovie* i_ScreenToClose );
};

UClass* USFXGUIMovie::pClassPointer = NULL;

// Class SFXGame.SFXGUIMovieLegacyAdapter
// 0x002C (0x028D - 0x0261)
class USFXGUIMovieLegacyAdapter : public USFXGUIMovie
{
public:
	struct FSFXGUILegacyScaleformResource              MovieResource;                                    		// 0x0264 (0x000C) [0x0000000000000000]              
	TArray< struct FBioSFQueuedCommand >               lstQueuedCommands;                                		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXGUIMovieLegacyAdapter*                   oPanel;                                           		// 0x027C (0x0004) [0x0000000000000000]              
	class USFXGUIInteraction*                          oParentManager;                                   		// 0x0280 (0x0004) [0x0000000000000000]              
	int                                                nHandlerID;                                       		// 0x0284 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSetGameMode : 1;                                 		// 0x0288 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIgnoreGCOnPanelCleanup : 1;                      		// 0x0288 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPipeDirectInputToGFx : 1;                        		// 0x0288 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      eGameMode;                                        		// 0x028C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1579 ];

		return pClassPointer;
	};

	void QueueCommand ( struct FBioSFQueuedCommand* stQueuedCommand );
	bool SetExternalTextureOnPanel ( struct FString Resource, class UTexture* Texture );
	void GameSessionEnded ( );
	void SendMouseToScaleForm ( unsigned char nEvent );
	void SetMouseShown ( unsigned long showIt );
	bool IsMouseShown ( );
	void eventOnPanelRemoved ( );
	void SetMenuAdvanceSwapped ( unsigned long bSwapped );
	void eventOnPanelAdded ( );
	void eventHandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments );
	class USFXGUIMovie* GetDefaultHandler ( );
	struct FVector2D GetStageViewportOffset ( );
	void SetMovieVisibility ( unsigned long bVisible );
	void SetEventsDisabled ( unsigned long bDisabled );
	void SetInputDisabled ( unsigned long bDisabled );
	float GetVariableFloat ( struct FString sPath );
	void SetVariableFloat ( struct FString sPath, float fVar );
	void SetTextFieldText ( struct FString sPath, struct FString sText, unsigned long bHTML );
	void SetClipLocation ( struct FString sPath, float fX, float fY );
	void SetClipHeight ( struct FString sPath, float fHeight );
	void SetClipWidth ( struct FString sPath, float fWidth );
	void SetClipVisibility ( struct FString sPath, unsigned long bVisible );
	void GotoLabelAndPlay ( struct FString sPath, struct FString sLabel );
	void GotoFrameAndPlay ( struct FString sPath, int nFrame );
	void GotoLabelAndStop ( struct FString sPath, struct FString sLabel );
	void GotoFrameAndStop ( struct FString sPath, int nFrame );
	void InvokeMethodArgs ( struct FString sMethodName, TArray< struct FASParams >* lstArguments );
	void InvokeMethod ( struct FString sMethodName );
	void eventUpdate ( float fDeltaT );
};

UClass* USFXGUIMovieLegacyAdapter::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_Options
// 0x00E1 (0x036E - 0x028D)
class UBioSFHandler_Options : public USFXGUIMovieLegacyAdapter
{
public:
	TArray< class USFXGUI_OptionsObject* >             m_aContentOptions;                                		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_lstOptsToReset;                                 		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FOptionTelemetryInfo >              TelemetryInfo;                                    		// 0x02A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTextSliderOption >                 TextSliderOptions;                                		// 0x02B4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FRadioGroupOption >                 RadioGroupOptions;                                		// 0x02C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSliderOption >                     SliderOptions;                                    		// 0x02CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FGamePopulatedOptionPage >          GamePopulatedOptionPages;                         		// 0x02D8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FOptionPage >                       OptionPages;                                      		// 0x02E4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FOptionPage >                       NewGameOptionPages;                               		// 0x02F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FOptionPage >                       MPOptionPages;                                    		// 0x02FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             IgnoreDifficultyMapNames;                         		// 0x0308 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __AddTelem__Delegate;                             		// 0x0314 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCloseCallback__Delegate;                      		// 0x0320 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	void*                                              ResetToDefaultsText;                              		// 0x032C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              ConfirmResetToDefaultsText;                       		// 0x0330 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              CancelResetToDefaultsText;                        		// 0x0334 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              ExitConfirmText;                                  		// 0x0338 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              ConfirmExitFromMenuText;                          		// 0x033C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              CancelExitFromMenuText;                           		// 0x0340 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              srSkipConfirm;                                    		// 0x0344 (0x0004) [0x0000000000000000]              
	void*                                              srYes;                                            		// 0x0348 (0x0004) [0x0000000000000000]              
	void*                                              srNo;                                             		// 0x034C (0x0004) [0x0000000000000000]              
	void*                                              ResolutionStory;                                  		// 0x0350 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                GammaLevels;                                      		// 0x0354 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              GammaStory;                                       		// 0x0358 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              VCInputStory;                                     		// 0x035C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              VCOutputStory;                                    		// 0x0360 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USFXProfileSettings*                         NewSettings;                                      		// 0x0364 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      m_bSelfPanelClose : 1;                            		// 0x0368 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWaitingOnMsgBox : 1;                             		// 0x0368 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      GuiMode;                                          		// 0x036C (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      CachedDifficulty;                                 		// 0x036D (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1580 ];

		return pClassPointer;
	};

	void SaveAndExit ( );
	void MovieLoaded ( );
	void OnPanelAdded ( );
	void CloseGui ( );
	void eventOnStart ( );
	void InitSystemSettingsCache ( );
	void SendTelemetryDump ( struct FName Hook );
	void SendTelemetryChanges ( );
	void eventAddTelemetryInfo ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes );
	void AddTelem_Language ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void AddTelem_VCOutput ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void AddTelem_VCInput ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void AddTelem_Resolution ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void AddTelem_Brightness ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void AddTelem_InvBool ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void AddTelem_Bool ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void AddTelem_Int ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void UpdateAudioVolumeSettings ( class USFXProfileSettings* ReadFrom );
	void UpdateDisplayGamma ( class USFXProfileSettings* ReadFrom );
	void GetProfileSettingsForOptions ( TArray< unsigned char >* lstProfSettings, TArray< int >* lstTypes );
	unsigned char GetProfileSettingForOption ( int Type );
	void SetOption ( int Type, int Value );
	void SetOptionsOnGUI ( class USFXProfileSettings* Settings );
	void UpdateSpeechLanguageOptions ( class USFXGUI_Option_TextLanguage* TextOption );
	void Callback_ResetToDefaults ( unsigned long bAPressed, int Context );
	void ResetToDefaults ( struct FString sPackedIDs );
	void Helper_ExtractPackedOptIDs ( struct FString sPackedIDs, TArray< int >* lstOptIDs );
	void Helper_CreateResetConfirmPopup ( class USFXGUIInteraction* GuiMan, struct FScriptDelegate pInputDelegate );
	void SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate );
	void OnCloseCallback ( );
	void AddTelem ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
};

UClass* UBioSFHandler_Options::pClassPointer = NULL;

// Class SFXGame.SFXGUI_OptionsObject
// 0x0001 (0x003D - 0x003C)
class USFXGUI_OptionsObject : public UObject
{
public:
	unsigned char                                      OptionId;                                         		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1581 ];

		return pClassPointer;
	};

	void eventResetToDefault ( );
	void eventSaveOption ( );
	void eventApplyOptionValue ( int nValue );
	int eventGetOptionValue ( );
	void eventConstructTextSliderOption ( struct FTextSliderOption* Option );
	void eventConstructSliderOption ( struct FSliderOption* Option );
	void eventConstructRadioGroupOption ( struct FRadioGroupOption* Option );
	bool eventOptionIsAvailable ( );
};

UClass* USFXGUI_OptionsObject::pClassPointer = NULL;

// Class SFXGame.SFXGUI_Option_LanguageBase
// 0x0018 (0x0055 - 0x003D)
class USFXGUI_Option_LanguageBase : public USFXGUI_OptionsObject
{
public:
	TArray< struct FLanguageOptionInfo >               Languages;                                        		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nCurrentValue;                                    		// 0x004C (0x0004) [0x0000000000000000]              
	unsigned long                                      bInitialized : 1;                                 		// 0x0050 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      LanguageType;                                     		// 0x0054 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1582 ];

		return pClassPointer;
	};

	void GetAvailableSKULanguages ( TArray< struct FLanguageOptionInfo >* aReturnLangs );
	struct FString GetLanguage ( unsigned long bGetDefault );
	void eventResetToDefault ( );
	void eventApplyOptionValue ( int nValue );
	int eventGetOptionValue ( );
	void eventConstructTextSliderOption ( struct FTextSliderOption* Option );
	void RebuildSliderOptions ( struct FString SelectedLanguageCode, struct FTextSliderOption* Option );
	bool eventOptionIsAvailable ( );
};

UClass* USFXGUI_Option_LanguageBase::pClassPointer = NULL;

// Class SFXGame.SFXGUI_Option_SpeechLanguage
// 0x000F (0x0064 - 0x0055)
class USFXGUI_Option_SpeechLanguage : public USFXGUI_Option_LanguageBase
{
public:
	struct FString                                     CurrentTextLanguage;                              		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1583 ];

		return pClassPointer;
	};

	void GetAvailableSKULanguages ( TArray< struct FLanguageOptionInfo >* aReturnLangs );
	void eventSaveOption ( );
	bool eventOptionIsAvailable ( );
};

UClass* USFXGUI_Option_SpeechLanguage::pClassPointer = NULL;

// Class SFXGame.SFXGUI_Option_TextLanguage
// 0x0000 (0x0055 - 0x0055)
class USFXGUI_Option_TextLanguage : public USFXGUI_Option_LanguageBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1584 ];

		return pClassPointer;
	};

	void GetAvailableSKULanguages ( TArray< struct FLanguageOptionInfo >* aReturnLangs );
	struct FString GetLanguage ( unsigned long bGetDefault );
	void eventResetToDefault ( );
	void eventApplyOptionValue ( int nValue );
	int eventGetOptionValue ( );
	void eventConstructTextSliderOption ( struct FTextSliderOption* Option );
	void RebuildSliderOptions ( struct FString SelectedLanguageCode, struct FTextSliderOption* Option );
	bool eventOptionIsAvailable ( );
};

UClass* USFXGUI_Option_TextLanguage::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_Reticle
// 0x006F (0x02FC - 0x028D)
class USFXSFHandler_Reticle : public USFXGUIMovieLegacyAdapter
{
public:
	TArray< class AActor* >                            m_aTargets;                                       		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFXSF_ReticleBase* >                m_aReticles;                                      		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFXGUI_WeaponReticleBase* >         m_aWeaponReticles;                                		// 0x02A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            m_aLoadingReticles;                               		// 0x02B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ASFXCameraNativeBase*                        m_pCameraManager;                                 		// 0x02C0 (0x0004) [0x0000000000000000]              
	class ABioPlayerController*                        m_pPlayerController;                              		// 0x02C4 (0x0004) [0x0000000000000000]              
	class UBioPlayerInput*                             m_pPlayerInput;                                   		// 0x02C8 (0x0004) [0x0000000000000000]              
	class ABioBaseSquad*                               m_pPlayerSquad;                                   		// 0x02CC (0x0004) [0x0000000000000000]              
	float                                              m_fTargetHitIndicatorCooldown;                    		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              m_fRemainingTargetHitIndicatorCooldownTime;       		// 0x02D4 (0x0004) [0x0000000000000000]              
	float                                              m_fSFWidth;                                       		// 0x02D8 (0x0004) [0x0000000000000000]              
	float                                              m_fSFHeight;                                      		// 0x02DC (0x0004) [0x0000000000000000]              
	float                                              m_fScrn2SF_YOffset;                               		// 0x02E0 (0x0004) [0x0000000000000000]              
	float                                              m_fScrn2SF_YScale;                                		// 0x02E4 (0x0004) [0x0000000000000000]              
	float                                              m_fScrn2SF_XScale;                                		// 0x02E8 (0x0004) [0x0000000000000000]              
	class USFXGUI_WeaponReticleBase*                   m_oCurrentWeaponReticle;                          		// 0x02EC (0x0004) [0x0000000000000000]              
	float                                              m_fUpdateInterval;                                		// 0x02F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fScreenChangeDelta;                             		// 0x02F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bSelectionInvalidated : 1;                      		// 0x02F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bReticleVisible : 1;                            		// 0x02F8 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1585 ];

		return pClassPointer;
	};

	void AS_CleanupReferences ( );
	void AS_PlayTargetImpact ( );
	void OnTargetImpact ( );
	void WeaponReticleHasLoaded ( class UGFxValue* oReticleMC, struct FString sClass );
	void AS_LoadWeaponReticle ( struct FString sID, struct FString sResource );
	void eventLoadWeaponReticle ( class UClass* oReticleClass );
	void ExInt_ReticleVisible ( );
	void ExInt_OutTransitionComplete ( struct FString sPath );
	void ExInt_InTransitionComplete ( struct FString sPath );
	int eventGetWeaponAmmo ( unsigned long bClipOnly );
	class UClass* eventGetWeaponReticleClass ( );
	void GameSessionEnded ( );
	void CleanupReferences ( );
	void eventOnPanelRemoved ( );
};

UClass* USFXSFHandler_Reticle::pClassPointer = NULL;

// Class SFXGame.SFXGUI_WeaponReticleBase
// 0x0020 (0x008C - 0x006C)
class USFXGUI_WeaponReticleBase : public UGFxValue
{
public:
	class UGFxMovieInfo*                               m_oMovieResource;                                 		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCachedDistance;                                		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nCachedAmmo;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nCachedZoom;                                    		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              m_srWeaponDistanceUnit;                           		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class ASFXWeapon*                                  m_oWeapon;                                        		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              m_fWeaponRange;                                   		// 0x0084 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsVisible : 1;                                 		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bInShowTransition : 1;                          		// 0x0088 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bInHideTransition : 1;                          		// 0x0088 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bMonitorDistance : 1;                           		// 0x0088 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bMonitorAmmo : 1;                               		// 0x0088 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bMonitorZoom : 1;                               		// 0x0088 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bMonitorCanHitTarget : 1;                       		// 0x0088 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bCachedCanHitTarget : 1;                        		// 0x0088 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bScriptUpdate : 1;                              		// 0x0088 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      m_bSubscribeToImpacts : 1;                        		// 0x0088 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1586 ];

		return pClassPointer;
	};

	void eventSetWeapon ( class ABioPawn* aPawn );
	void ProcessWeaponImpact ( class ASFXWeapon* oWeap, struct FImpactInfo HitInfo );
	void OnWeaponImpact ( );
	void eventUpdate ( float fDeltaT );
	void eventResetReticle ( unsigned long bUnsubscribe );
	void OnReticleLoaded ( );
	void eventTargetCanHitChanged ( unsigned long bInSights );
	void eventZoomChanged ( int nZoom );
	void eventWeaponAmmoChanged ( int nAmmo );
	void eventDistanceToTargetChanged ( float fDistance );
	void eventPerformReticleHide ( unsigned long bInstant );
	void eventPerformReticleShow ( unsigned long bInstant );
	void SetReticleVisible ( unsigned long bVisible, unsigned long bInstant );
};

UClass* USFXGUI_WeaponReticleBase::pClassPointer = NULL;

// Class SFXGame.SFXGUI_CrosshairReticle
// 0x0030 (0x00BC - 0x008C)
class USFXGUI_CrosshairReticle : public USFXGUI_WeaponReticleBase
{
public:
	float                                              m_aCrosshairRawBuffer[ 0x3 ];                     		// 0x008C (0x000C) [0x0000000000000000]              
	class UGFxValue*                                   m_oActualReticle;                                 		// 0x0098 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   m_oCrosshairTop;                                  		// 0x009C (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   m_oCrosshairRight;                                		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   m_oCrosshairBottom;                               		// 0x00A4 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   m_oCrosshairLeft;                                 		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              m_fCacheCrosshairRadius;                          		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                m_nCrosshairBufferIndex;                          		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              m_fCrosshairAccuracyModifier;                     		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_fCacheTargetInSights : 1;                       		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1587 ];

		return pClassPointer;
	};

	void AS_TriggerImpactVisualization ( );
	void eventTargetCanHitChanged ( unsigned long bInSights );
	float eventGetCrosshairRadius ( );
	void OnReticleLoaded ( );
	void eventPerformReticleHide ( unsigned long bInstant );
	void eventPerformReticleShow ( unsigned long bInstant );
};

UClass* USFXGUI_CrosshairReticle::pClassPointer = NULL;

// Class SFXGame.SFXGUIHelper_ConsoleKeyboard
// 0x0038 (0x0074 - 0x003C)
class USFXGUIHelper_ConsoleKeyboard : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     sTitle;                                           		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     sDescription;                                     		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     sInputValue;                                      		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnKeyboardEntryComplete__Delegate;              		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bKeyboardVisible : 1;                             		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1588 ];

		return pClassPointer;
	};

	void eventKeyboardEntryComplete ( unsigned long EntryOK, struct FString EntryText );
	void DisplayKeyboard ( void* srTitle, void* srDescription, unsigned char nOptions, int nMaxLength, struct FString sDefault );
	void OnKeyboardEntryComplete ( unsigned long EntryOK, struct FString EntryText );
};

UClass* USFXGUIHelper_ConsoleKeyboard::pClassPointer = NULL;

// Class SFXGame.SFXGUIInteraction
// 0x0365 (0x03D5 - 0x0070)
class USFXGUIInteraction : public UGFxInteraction
{
public:
	struct FMap_Mirror                                 m_PlayerData;                                     		// 0x0070 (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_UnrealKeyToGfxKeyMap;                           		// 0x00AC (0x003C) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FString >                           AdditionalResourcesLibrary;                       		// 0x00E8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFXGUIMovieData >                  MovieLibrary;                                     		// 0x00F4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFXSharedAssetMap >                SharedAssetLibrary;                               		// 0x0100 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFXFontMap >                       FontMap;                                          		// 0x010C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFXSFControlToken >                ControlTokens;                                    		// 0x0118 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFXControlTokenAlias >             ControlTokenAliases;                              		// 0x0124 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXStringMap >                     StringMappings;                                   		// 0x0130 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFXKeyNameControlToken >           SFXKeyNameControlTokens;                          		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FGUIDependency >                    GUIDependencies;                                  		// 0x0148 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UBioSFHandler_MessageBox* >          m_aHintStack;                                     		// 0x0154 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCloseCallback__Delegate;                      		// 0x0160 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDependencyEvent__Delegate;                    		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       MovieTag_Reticle;                                 		// 0x0178 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_PowerWheel;                              		// 0x0180 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_HUD;                                     		// 0x0188 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Conversation;                            		// 0x0190 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_BlackScreen;                             		// 0x0198 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_SkillGameDecryption;                     		// 0x01A0 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_SkillGameBypass;                         		// 0x01A8 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_IntroText;                               		// 0x01B0 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_LoadMovieDefault;                        		// 0x01B8 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_SniperOverlay;                           		// 0x01C0 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MenuBrowser;                             		// 0x01C8 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MainMenu;                                		// 0x01D0 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MissionCompletion;                       		// 0x01D8 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_PRCStore;                                		// 0x01E0 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Store;                                   		// 0x01E8 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Terminal;                                		// 0x01F0 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Training;                                		// 0x01F8 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Elevator;                                		// 0x0200 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Mail;                                    		// 0x0208 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Splash;                                  		// 0x0210 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_GalaxyMap;                               		// 0x0218 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_ChoiceGUI;                               		// 0x0220 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_PartySelect;                             		// 0x0228 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Personalization;                         		// 0x0230 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_NewCharacter;                            		// 0x0238 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Options;                                 		// 0x0240 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Journal;                                 		// 0x0248 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Codex;                                   		// 0x0250 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Manual;                                  		// 0x0258 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Accomplishments;                         		// 0x0260 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_NetworkRegistration;                     		// 0x0268 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_GameOver;                                		// 0x0270 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_SquadRecord;                             		// 0x0278 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Credits;                                 		// 0x0280 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_DesignerUI;                              		// 0x0288 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Specialization;                          		// 0x0290 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Save;                                    		// 0x0298 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Load;                                    		// 0x02A0 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_AreaMap;                                 		// 0x02A8 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MessageBox;                              		// 0x02B0 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_QueuedMessageBox;                        		// 0x02B8 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_HintBox;                                 		// 0x02C0 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Slideshow;                               		// 0x02C8 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Markers;                                 		// 0x02D0 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_ObjectiveText;                           		// 0x02D8 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_WeaponSelect;                            		// 0x02E0 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_PlayerCountdown;                         		// 0x02E8 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_GalaxyAtWar;                             		// 0x02F0 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_WarAssets;                               		// 0x02F8 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_OpeningTitles;                           		// 0x0300 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_SaveIndicatorMessage;                    		// 0x0308 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_AtlasHUD;                                		// 0x0310 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPEndOfMatch;                            		// 0x0318 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPLobby;                                 		// 0x0320 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPAppearance;                            		// 0x0328 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPMatchResults;                          		// 0x0330 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPSelectKit;                             		// 0x0338 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_Leaderboard;                             		// 0x0340 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPScoretags;                             		// 0x0348 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPPauseMenu;                             		// 0x0350 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPOptions;                               		// 0x0358 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPMatchConsumables;                      		// 0x0360 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPStore;                                 		// 0x0368 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPReinforcementsReveal;                  		// 0x0370 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPHUD;                                   		// 0x0378 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPNewLobby;                              		// 0x0380 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPLobbyStatusBars;                       		// 0x0388 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPPromotion;                             		// 0x0390 (0x0008) [0x0000000000000000]              
	struct FName                                       MovieTag_MPWeaponSelect;                          		// 0x0398 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmCurrentVoice;                                 		// 0x03A0 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmCurrentMusic;                                 		// 0x03A8 (0x0008) [0x0000000000000000]              
	class UBioSFResources*                             m_oSFResources;                                   		// 0x03B0 (0x0004) [0x0000000000000000]              
	class USFXGUIInputHandler*                         InputHandler;                                     		// 0x03B4 (0x0004) [0x0000000000000000]              
	class UWwiseAudioComponent*                        m_wwiseComponent;                                 		// 0x03B8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ASFXPawn_Player*                             ImportedTemplatePawn;                             		// 0x03BC (0x0004) [0x0000000000000000]              
	class USFXSaveLoadWidgetProxy*                     m_oSavingLoadingDisplayProxy;                     		// 0x03C0 (0x0004) [0x0000000000000000]              
	class USFXAreaMapData*                             m_CurrentAreaMap;                                 		// 0x03C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMaxHintStackHeight;                            		// 0x03C8 (0x0004) [0x0000000000000000]              
	class UBioSFHandler_MessageBox*                    m_oPreloadedHint;                                 		// 0x03CC (0x0004) [0x0000000000000000]              
	unsigned long                                      ReplaceRegisteredTMWithFullHeightChar : 1;        		// 0x03D0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bDesiredMouseVisibility : 1;                    		// 0x03D0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFullGuiSoundLogging : 1;                         		// 0x03D0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bGameWasPaused : 1;                             		// 0x03D0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      HACK_IgnoreTurnBlackScreenOffForMP : 1;           		// 0x03D0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      m_eLastBrowserWheelSubPage;                       		// 0x03D4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1589 ];

		return pClassPointer;
	};

	void MPToggleReady ( class APlayerController* oPlayerController );
	void ShowLeaderboard ( class APlayerController* oPlayerController, struct FScriptDelegate LeaderboardClosedDelegate );
	void ReturnToMainMenu ( class APlayerController* PC );
	bool IsInMPLobby ( );
	void eventHideClimbMantleWidget ( class APlayerController* oPlayerController );
	void eventShowClimbMantleWidget ( unsigned long bMantle, class APlayerController* oPlayerController );
	void eventHideCoverWidget ( class APlayerController* oPlayerController );
	void eventShowCoverWidget ( class APlayerController* oPlayerController );
	class USFXGUI_Elevator* CreateElevatorGUI ( struct FName nmTag, class APlayerController* oPlayerController, unsigned long bForceNewInstance );
	class USFXGUI_Terminal* CreateTerminalGUI ( struct FName nmTag, class APlayerController* oPlayerController, unsigned long bForceNewInstance );
	class USFXGUI_Store* CreateStoreGUI ( struct FName nmTag, class APlayerController* oPlayerController, unsigned long bForceNewInstance );
	void CancelLeaderActive ( class APlayerController* oPlayerController );
	void ForceSquadCommandFeedback ( unsigned char Command, int MemberIdx, unsigned long bCommandSuccess, class APlayerController* oPlayerController );
	class UBioSFHandler_DesignerUI* GetDUIHandler ( class APlayerController* oPlayerController );
	class USFXSFHandler_HUD* GetCachedHudHandler ( class APlayerController* oPlayerController );
	class UBioSFHandler_BrowserWheel* GetBrowserHandler ( class APlayerController* oPlayerController );
	void SetWheelState ( unsigned char nPage, unsigned char nState );
	class UBioSFHandler_ChoiceGUI* CreateChoiceGUI ( struct FName nmTag, class APlayerController* oPlayerController, unsigned long bForceNewInstance );
	void HackReloadMainMenu ( );
	void OnPlayerDeath ( class APlayerController* oPlayerController );
	class UBioSFHandler_GalaxyMap* GetGalaxyMap ( class APlayerController* oPlayerController );
	void eventHideSkillGameBypass ( class APlayerController* oPlayerController );
	class UBioSkillGame_Bypass_Handler* eventShowSkillGameBypass ( class APlayerController* oPlayerController );
	void eventHideSkillGameDecryption ( class APlayerController* oPlayerController );
	class UBioSkillGame_Decryption_Handler* eventShowSkillGameDecryption ( class APlayerController* oPlayerController );
	void eventInterruptActiveSkillGame ( class APlayerController* oPlayerController );
	void eventHideSkillGames ( class APlayerController* oPlayerController );
	class UBioSFHandler_NewCharacter* FinishInitCharacterCreation ( TArray< class UAnimSet* > a_AnimSets, TArray< class UClass* > a_CharacterClasses, class USFXMorphFaceFrontEndDataSource* a_MaleDataSource, class USFXMorphFaceFrontEndDataSource* a_FemaleDataSource, class APlayerController* oPlayerController, struct FMorphHeadSaveRecord* InDefaultFemaleME2Record );
	bool eventIsCharacterCreationStillBlocking ( );
	bool eventBeginInitCharacterCreation ( );
	void HidePartySelect ( class APlayerController* oPlayerController );
	class USFXGUI_TeamSelect* ShowPartySelect ( class APlayerController* oPlayerController );
	class UBioSkillGame_Decryption_Handler* GetDecryptionHandler ( class APlayerController* oPlayerController );
	void HidePersonalizationGUI ( class APlayerController* oPlayerController );
	void ShowPersonalizationGUI ( class APlayerController* oPlayerController );
	void SetDistanceOnSniperOverlay ( int nDistance, class APlayerController* oPlayerController );
	void HideSniperOverlay ( class APlayerController* oPlayerController );
	void ShowSniperOverlay ( class APlayerController* oPlayerController );
	bool HideAreaMap ( class APlayerController* oPlayerController );
	bool ShowAreaMap ( class APlayerController* oPlayerController );
	class USFXAreaMapData* GetAreaMapData ( );
	void SetAreaMapData ( class USFXAreaMapData* oMapData );
	class USFXSFHandler_AreaMap* GetAreaMapHandler ( class APlayerController* oPlayerController );
	class USFXSFHandler_Slideshow* GetSlideshowHandler ( class APlayerController* oPlayerController );
	class USFXGUI_Credits* PlayCredits ( class APlayerController* oPlayerController );
	void HideGameOverGui ( class APlayerController* oPlayerController );
	void ShowGameOverGui ( void* srGameOverString, class APlayerController* oPlayerController );
	class UBioSFHandler_MainMenu* GetMainMenuHandler ( class APlayerController* oPlayerController );
	void HideAchievementGui ( class APlayerController* oPlayerController );
	void ShowAchievementGui ( class APlayerController* oPlayerController );
	class USFXSaveLoadWidgetProxy* eventGetSaveLoadWidget ( );
	void ShowNewGameOptions ( class APlayerController* oPlayerController, struct FScriptDelegate CloseCallback );
	void HideMPOptions ( class APlayerController* oPlayerController );
	void ShowMPOptions ( class APlayerController* oPlayerController, struct FScriptDelegate CloseCallback );
	void HideMPPauseMenu ( class APlayerController* oPlayerController );
	void ShowMPPauseMenu ( class APlayerController* oPlayerController, unsigned long bShouldAnimate );
	void eventHideBrowserWheel ( class USFXGUIMovie* oCurrentPanel, class APlayerController* oPlayerController );
	void eventReturnToBrowserWheel ( class USFXGUIMovie* oCurrentPanel, unsigned long bExitImmediately, class APlayerController* oPlayerController );
	void eventShowBrowserWheel ( class APlayerController* oPlayerController );
	void SetupBackground ( );
	void DestroyPRCStore ( class APlayerController* oController );
	class USFXSFHandler_PRCShop* CreatePRCStore ( class APlayerController* oController );
	void eventDestroyNetworkGUI ( struct FName HandlerId, class APlayerController* oPlayerController );
	class USFXSFHandler_EANetworking* eventCreateNetworkGUI ( struct FName HandlerId, class APlayerController* oPlayerController );
	class UBioSFHandler_MainMenu* eventShowMainMenu ( class APlayerController* oPlayerController );
	void eventHideMainMenu ( unsigned long bDestroy, class APlayerController* oPlayerController );
	void eventRevokeGUIDependency ( struct FName SourceGUI );
	bool eventRetrieveGUIDependent ( struct FName SourceGUI, struct FGUIDependency* GD );
	void eventAddGUIDependency ( struct FName SourceGUI, struct FName DependentGUI, int OptContext, struct FScriptDelegate OnDependencyEvent );
	void eventNullDependency ( unsigned long bRescanCareers );
	bool eventIsInSplashScreen ( );
	bool BlackScreenFadeFinished ( class APlayerController* oPlayerController );
	void eventHideBlackScreen ( class APlayerController* oPlayerController, unsigned long bWithFade, float FadeTime );
	void eventShowBlackScreen ( class APlayerController* oPlayerController, unsigned long bWithFade, float FadeTime );
	void UpdateNamedMessageBox ( struct FName nmName, void* srMessage, class APlayerController* pPlayerController );
	void QueuedMessageBoxCallback ( unsigned long bAPressed, int nContext );
	void HideQueuedMessageBoxes ( class APlayerController* pPlayerController );
	void HideMessageBoxes ( class APlayerController* pPlayerController );
	void RemoveNamedMessageBox ( struct FName nmName, class APlayerController* pPlayerController );
	bool QueueNamedMessageBoxEx ( struct FName nmName, int nPriority, struct FString sMessage, struct FScriptDelegate pCallback, int nContext, class APlayerController* pPlayerController, unsigned long persistThroughTravel, struct FBioMessageBoxOptionalParams* stParams );
	bool QueueNamedMessageBox ( struct FName nmName, int nPriority, void* srMessage, struct FScriptDelegate pCallback, int nContext, class APlayerController* pPlayerController, unsigned long persistThroughTravel, struct FBioMessageBoxOptionalParams* stParams );
	bool QueueWeaponBox ( struct FName nmName, int nPriority, struct FString sWeaponClass, struct FScriptDelegate pCallback );
	void UpdateHint ( float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox );
	void eventRestoreHint ( class APlayerController* oPlayerController );
	void eventHideHint ( class APlayerController* oPlayerController );
	void eventCancelHint ( class APlayerController* oPlayerController );
	void eventShowHint ( void* srText, float fDisplayTime, int nIcon, unsigned char ePosition, unsigned long bCache, unsigned long bForceVisible, class APlayerController* oPlayerController );
	void eventShowPlatformSpecificHint ( void* srDefaultText, void* srPS3Text, void* srPCText, float fDisplayTime, unsigned char ePosition, unsigned long bCached, unsigned long bForceVisible, class APlayerController* oPlayerController );
	class UBioSFHandler_MessageBox* CreateQueuedMessageBox ( class APlayerController* oPlayerController );
	class UBioSFHandler_MessageBox* CreateMessageBox ( class APlayerController* oPlayerController );
	class UBioSFHandler_Conversation* GetConversationHandler ( class APlayerController* oPlayerController );
	void eventHideConversationGui ( class APlayerController* oPlayerController );
	void eventShowConversationGui ( class APlayerController* oPlayerController, unsigned long bIsAmbient );
	void RemovePanel ( class USFXGUIMovie* pMovie );
	class AWorldInfo* GetWorldInfo ( );
	class USFXGUIInteraction* GetInstance ( );
	void ReloadFontlib ( );
	void ReSortMovies ( );
	void AddLogEntry ( float fTimeToLive, struct FString* sMessage, struct FColor* Clr );
	class USFXGUIMovie* GetFocusMovieForPlayerController ( class APlayerController* oPlayerController );
	void UpdateProfileSettings ( class USFXProfileSettings* oSettings );
	bool IsControllerTriggerShoulderSwapped ( class APlayerController* oPlayerController );
	bool IsControllerTriggerSouthpaw ( class APlayerController* oPlayerController );
	bool IsControllerStickSouthpaw ( class APlayerController* oPlayerController );
	bool IsEnterMenuButtonAssignmentSwapped ( );
	void ShowGFxLog ( unsigned long bShow );
	class APlayerController* ValidatePlayerController ( class APlayerController* oPC );
	void SetMovieGameMode ( class USFXGUIMovie* oMovie, unsigned long bEnable, unsigned char eGameMode );
	void SetDesiredMouseCursorVisibility ( class UObject* oRequestSource, class APlayerController* PC, unsigned long bVisible );
	class APlayerController* GetPlayerControllerFromControllerId ( int nControllerId );
	void HandleInputEvent ( int ControllerId, unsigned char Event, float fCooldown, float fValue, float fDeadzoneValue );
	bool StopGuiSound ( struct FName nmSound );
	bool PlayGuiSound ( struct FName nmSound );
	void StopGuiVoice ( );
	void PlayGuiVoice ( struct FName nmVoice );
	void StopGuiMusic ( );
	void PlayGuiMusic ( struct FName nmMusic, unsigned long bRestart );
	void InitializeStartupGuiForPlayer ( class APlayerController* oPlayer, class UClass* newHUDType );
	void PostBeginPlay ( );
	void NotifyLanguageChanged ( );
	void ClearAll ( );
	void CleanupMessageBoxQueues ( );
	void NotifyGameSessionEnded ( );
	bool OnMovieClosed ( class USFXGUIMovie* i_MovieToClose );
	class USFXGUIMovie* CastGetMovie ( class UClass* Type, class APlayerController* i_pOwningPlayer, struct FName nmMovieTag );
	class USFXGUIMovie* CastOpenMovie ( class UClass* Type, class APlayerController* i_pOwningPlayer, struct FName nmMovieTag, unsigned long bStart, unsigned long bStartPaused, unsigned long bForceNewInstance );
	void GetAllMovies ( TArray< class USFXGUIMovie* >* aOpen, TArray< class USFXGUIMovie* >* aTexture );
	void RemoveMoviesForPlayer ( class APlayerController* oPlayerController );
	void RemoveMovie ( class APlayerController* oPlayerController, struct FName nmMovieTag );
	void GetMovies ( class APlayerController* i_pOwningPlayer, struct FName nmMovieTag, TArray< class USFXGUIMovie* >* aMovies );
	class USFXGUIMovie* GetMovie ( class APlayerController* i_pOwningPlayer, struct FName nmMovieTag );
	class USFXGUIMovie* OpenMovie ( class APlayerController* i_pOwningPlayer, struct FName nmMovieTag, unsigned long bStart, unsigned long bStartPaused, unsigned long bForceNewInstance );
	void OnDependencyEvent ( unsigned long bRescanCareers );
	void OnCloseCallback ( );
};

UClass* USFXGUIInteraction::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_Splash
// 0x0000 (0x0261 - 0x0261)
class UBioSFHandler_Splash : public USFXGUIMovie
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1590 ];

		return pClassPointer;
	};

	void SetBackgroundAlpha ( float F );
	void PreloadImages ( TArray< struct FString > Images );
	void StopHandlingKeyPresses ( );
	void StartHandlingKeyPresses ( );
	void GetProfileTimes ( float* fUpdate, float* fRender, float* fAdvance );
	void PauseMenuAdditionalProcessing ( );
	struct FString GetNuiPawnCommandString ( struct FString TargetPawn, struct FString Rule );
	bool IsNuiSpeechEnabled ( );
	struct FString GetBoundKeyString ( struct FString sAlias, unsigned long bWrapNonTokenInParentheses, unsigned char eGameMode );
	void eventOnControllerProfileSettingChange ( );
	void eventOnLanguageChanged ( );
	void AttachToASFunction ( struct FString sASObjectPath, struct FString sASFuncName, struct FName nmFuncToCall, unsigned long bCallOriginalAS, unsigned long bInsertBeforeAS, class UObject* oCallbackObj );
	bool IsOpen ( );
	void PostProjectionToScreen ( struct FVector4* vPostProjectPos, struct FVector2D* vScreenLocation );
	bool WorldToScreen ( struct FVector vWorld, unsigned long bEnforceScreenEdge, struct FVector2D* vScreenLocation, struct FVector4* vPostProject );
	bool WorldToScreenFast ( struct FVector vWorld, unsigned long bEnforceScreenEdge, struct FVector2D vAdditionalScreenEdgeBorderBL, struct FVector2D vAdditionalScreenEdgeBorderTR, struct FSFXGUISceneView* SceneView, struct FVector2D* vScreenLocation, struct FVector4* vPostProject );
	bool WorldToSafePostProjectionFast ( struct FVector vWorld, unsigned long bEnforceScreenEdge, struct FVector2D vAdditionalScreenEdgeBorderBL, struct FVector2D vAdditionalScreenEdgeBorderTR, struct FSFXGUISceneView* SceneView, struct FVector4* vSafePostProjectPos, struct FVector4* vUnsafePostProjectPos );
	struct FSFXGUISceneView GetGUISceneView ( );
	struct FString UIStrRef ( void* sr );
	struct FString GetTokenizedUIString ( void* sr, TArray< struct FSFXTokenMapping >* aTokens );
	struct FString GetUIString ( void* sr, unsigned long bParse );
	void SetVariableStringRef ( struct FString Path, void* sr );
	bool IsMPGame ( );
	bool IsMPClient ( );
	unsigned char GetScreenLayout ( );
	void HandleInputConfigurations ( unsigned long bMenuAdvanceSwapped, unsigned long bStickSouthpaw, unsigned long bTriggerSouthpaw, unsigned long bTriggersShouldersSwapped );
	void SetGameMode ( unsigned long bEnable, unsigned char eGameMode );
	void PlayGuiError ( );
	bool StopGuiSound ( struct FName nmSound );
	bool PlayGuiSound ( struct FName nmSound );
	void StopGuiVoice ( );
	void PlayGuiVoice ( struct FName nmVoice );
	void StopGuiMusic ( );
	void PlayGuiMusic ( struct FName nmMusic, unsigned long bRestart );
	void eventOnAspectRatioChanged ( float fNewAspectRatio );
	float UpdateAspectRatio ( unsigned long bForce, unsigned long bHorizontal );
	float GetMovieAspectRatio ( );
	float GetViewportAspectRatio ( );
	bool IsTriggerShoulderSwapped ( );
	bool IsTriggerSouthpaw ( );
	bool IsStickSouthpaw ( );
	bool IsEnterMenuButtonAssignmentSwapped ( );
	void SetMouseVisible ( unsigned long bVisible );
	void SendMouseEvent ( unsigned char nEventID );
	bool eventHandleInputEvent ( unsigned char nEventID, float fValue );
	class USFXGUIInteraction* GetSFXUIController ( );
	struct FASValue Invoke0 ( struct FString sFuncPath );
	void RemoveExtension ( class UClass* classObj );
	class USFXGUIMovieExtension* GetExtension ( class UClass* classObj );
	class USFXGUIMovieExtension* AddExtension ( class UClass* classObj );
	void GetRequiresUIWorld ( );
	void SetRequiresUIWorld ( unsigned long bUIWorldRequired );
	bool GetInputEnabled ( );
	void SetInputEnabled ( unsigned long bEnabled );
	bool GetEnabled ( );
	void SetEnabled ( unsigned long bEnabled );
	bool GetUpdate ( );
	void SetUpdate ( unsigned long bUpdate );
	bool GetVisible ( );
	void SetVisible ( unsigned long bVisible );
	bool HasFocus ( );
	void SetAllowFSCommands ( unsigned long bAllowFSCommands );
	void SetFocus ( unsigned long bCapture, unsigned long bFocus );
	void SetMovieFocus ( unsigned long Focus );
	void eventUpdate ( float fDeltaT );
	void eventPostAdvance ( float tDelta );
	void Advance ( float Time );
	void eventInvokeOnCloseDelegates ( );
	void eventOnClose ( );
	void Close ( unsigned long Unload );
	void eventOnStart ( );
	bool eventStart ( unsigned long StartPaused );
	void eventUpdateInputConfigurations ( );
	void ClearAllDelegates ( );
	void ClearOnMovieClosedDelegate ( struct FScriptDelegate i_OnMovieClosedDelegate );
	void AddOnMovieClosedDelegate ( struct FScriptDelegate i_OnMovieClosedDelegate );
	bool OnMovieClosedDelegate ( class USFXGUIMovie* i_ScreenToClose );
};

UClass* UBioSFHandler_Splash::pClassPointer = NULL;

// Class SFXGame.SFXGUI_SplashScreen
// 0x0043 (0x02A4 - 0x0261)
class USFXGUI_SplashScreen : public UBioSFHandler_Splash
{
public:
	float                                              fAttractModeTimeout;                              		// 0x0264 (0x0004) [0x0000000000000000]              
	float                                              fLegalTimeout;                                    		// 0x0268 (0x0004) [0x0000000000000000]              
	float                                              fAttractModeDelay;                                		// 0x026C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fShowLegalTime;                                   		// 0x0270 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srNotificationAdvanceOrigin;                      		// 0x0274 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srNotifificationOriginDRMFail;                    		// 0x0278 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srNotificationOptionQuitGame;                     		// 0x027C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srConnectingToOrigin;                             		// 0x0280 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srNoLoginStart;                                   		// 0x0284 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srConfirmNoLoginStart;                            		// 0x0288 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srCancelNoLoginStart;                             		// 0x028C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srStartText;                                      		// 0x0290 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srLegalText;                                      		// 0x0294 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srDemo;                                           		// 0x0298 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UBioSFHandler_MessageBox*                    connectingMessageBox;                             		// 0x029C (0x0004) [0x0000000000000000]              
	unsigned long                                      bSuppressAttractMode : 1;                         		// 0x02A0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bPressedStart : 1;                                		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bWaitingForOrigin : 1;                            		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1591 ];

		return pClassPointer;
	};

	void Callback_NoLoginStart ( unsigned long bAPressed, int Context );
	void DisplayNoProfileConfirmation ( );
	void Callback_LoginComplete ( unsigned long bIsOpening );
	void CheckLogin ( );
	void OnTransitionOutComplete ( );
	void OnTransitionInComplete ( );
	void FadeToBlack ( unsigned long bSkipTransition );
	void FadeLegal ( );
	void TransitionOut ( );
	void TransitionIn ( unsigned long bShowLegal );
	void InitSplashScreen ( int nStartText, int nLegalText );
	void SetBackgroundMovie ( class UTextureMovie* movie );
	void StartTimeout ( unsigned long bShowLegal );
	void Update ( float fDeltaT );
	void Initialize ( );
	void eventOnClose ( );
	void eventOnStart ( );
	void OnHandleOriginErrorUserResponse ( unsigned long bAPressed, int nContext );
	void eventAdvanceScreen ( );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
};

UClass* USFXGUI_SplashScreen::pClassPointer = NULL;

// Class SFXGame.SFXGUI_PCSplashScreen
// 0x0000 (0x02A4 - 0x02A4)
class USFXGUI_PCSplashScreen : public USFXGUI_SplashScreen
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1592 ];

		return pClassPointer;
	};

	void Callback_NoLoginStart ( unsigned long bAPressed, int Context );
	void DisplayNoProfileConfirmation ( );
	void Callback_LoginComplete ( unsigned long bIsOpening );
	void CheckLogin ( );
	void OnTransitionOutComplete ( );
	void OnTransitionInComplete ( );
	void FadeToBlack ( unsigned long bSkipTransition );
	void FadeLegal ( );
	void TransitionOut ( );
	void TransitionIn ( unsigned long bShowLegal );
	void InitSplashScreen ( int nStartText, int nLegalText );
	void SetBackgroundMovie ( class UTextureMovie* movie );
	void StartTimeout ( unsigned long bShowLegal );
	void Update ( float fDeltaT );
	void Initialize ( );
	void eventOnClose ( );
	void eventOnStart ( );
	void OnHandleOriginErrorUserResponse ( unsigned long bAPressed, int nContext );
	void eventAdvanceScreen ( );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
};

UClass* USFXGUI_PCSplashScreen::pClassPointer = NULL;

// Class SFXGame.SFXGUI_Credits
// 0x0080 (0x02E1 - 0x0261)
class USFXGUI_Credits : public USFXGUIMovie
{
public:
	TArray< struct FSFXCreditEntry >                   Credits;                                          		// 0x0264 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFXCreditEntry >                   DLCCredits;                                       		// 0x0270 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFXCreditEntry >                   EndCredits;                                       		// 0x027C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCreditsFinished__Delegate;                    		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       m_nmCreditMusic;                                  		// 0x0294 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              FadeInTime;                                       		// 0x029C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HoldTime;                                         		// 0x02A0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              FadeOutTime;                                      		// 0x02A4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              BreakSpace;                                       		// 0x02A8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ColumnPadding;                                    		// 0x02AC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TotalRunningTime;                                 		// 0x02B0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ScrollingCreditStartTime;                         		// 0x02B4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              ConfirmExitMessage;                               		// 0x02B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              ExitYes;                                          		// 0x02BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              ExitNo;                                           		// 0x02C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fElapsedPlayTime;                               		// 0x02C4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                m_nCreditIndex;                                   		// 0x02C8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              m_fScrollingCreditsEpoch;                         		// 0x02CC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              m_fTransitionTime;                                		// 0x02D0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              m_fTargetTransitionTime;                          		// 0x02D4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UGFxValue*                                   m_oFlashingCredit;                                		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bPlaying : 1;                                   		// 0x02DC (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bPlayingScrollingCredits : 1;                   		// 0x02DC (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bFromMainMenu : 1;                              		// 0x02DC (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bFromAdditionalContent : 1;                     		// 0x02DC (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bFromPRCChoiceGUI : 1;                          		// 0x02DC (0x0004) [0x0000000000002001] [0x00000010] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bGameWasPausedOnStart : 1;                      		// 0x02DC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bGameWasUsingVSync : 1;                         		// 0x02DC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned char                                      m_eFlashingCreditState;                           		// 0x02E0 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1593 ];

		return pClassPointer;
	};

	void ScrollToPosition ( float fScrollPct );
	void AddScrollingCreditHeading ( struct FString sTitle, float fSpace, float fFontScale );
	void AddScrollingCreditLineBreak ( float fSpace );
	void AddScrollingCreditSection ( struct FString sTitle, struct FString sNames, int nColumns, float fSpace, float fFontScale );
	void SetParameters ( float fColumnPadding );
	class UGFxValue* SetFlashingCredit ( struct FString sTitle, struct FString sNames, float fFontScale );
	void SetVSync ( unsigned long bVsync );
	bool GetVSync ( );
	void eventSetFromPRCChoiceGUI ( );
	void eventSetFromAdditionalContent ( );
	void SetFromMainMenu ( );
	void ConfirmButtonPressed ( unsigned long bAPressed, int nContext );
	void TryExitCredits ( );
	void PauseDisplay ( unsigned long bPause );
	void CreditsFinished ( );
	void AppendScrollingCredit ( struct FSFXCreditEntry credit );
	void InitializeScrollingCredits ( );
	float InitializeFlashingCredits ( );
	void InitializeCredits ( );
	void OnCreditsMovieLoaded ( );
	void UpdateScrollingCredits ( float fDeltaT );
	void UpdateFlashingCredits ( float fDeltaT );
	void eventUpdate ( float fDeltaT );
	void eventOnClose ( );
	void eventOnStart ( );
	void OnCreditsFinished ( class USFXGUI_Credits* creditsMovie );
};

UClass* USFXGUI_Credits::pClassPointer = NULL;

// Class SFXGame.SFXGUI_Elevator
// 0x0027 (0x0288 - 0x0261)
class USFXGUI_Elevator : public USFXGUIMovie
{
public:
	struct FScriptDelegate                             __OnRequestExitDelegate__Delegate;                		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRequestDestinationDelegate__Delegate;         		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXGUIData_Elevator*                        ElevatorData;                                     		// 0x027C (0x0004) [0x0000000000000000]              
	int                                                DefaultDestination;                               		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsFinished : 1;                                  		// 0x0284 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsAborted : 1;                                   		// 0x0284 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bWasPaused : 1;                                   		// 0x0284 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsFlashLoaded : 1;                               		// 0x0284 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bIsScriptLoaded : 1;                              		// 0x0284 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bDestinationRequested : 1;                        		// 0x0284 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1594 ];

		return pClassPointer;
	};

	void eventASAddDestination ( unsigned long KeepAlive, struct FString Title, struct FString SubTitle, struct FString Desc, struct FString Image, unsigned long Default, unsigned long Able );
	void eventASSetTitles ( struct FString sTitle, struct FString sSubtitle, struct FString sAText, struct FString sBText );
	void eventASNativeReady ( );
	void eventOnClose ( );
	void eventOnStart ( );
	void ShutDown ( );
	void ExGo ( int nRequest );
	void ExExit ( );
	void SetOnRequestDestinationCallback ( struct FScriptDelegate fn_OnRequestDestinationDelegate );
	void SetOnRequestExitCallback ( struct FScriptDelegate fn_OnRequestExitDelegate );
	void ExPullElevatorDestinations ( );
	void ExPullElevatorTitles ( );
	void Initialize ( class USFXGUIData_Elevator* InitialElevatorGUIData, int InitialDefaultDestination );
	void OnRequestDestinationDelegate ( int DestinationID );
	void OnRequestExitDelegate ( );
};

UClass* USFXGUI_Elevator::pClassPointer = NULL;

// Class SFXGame.SFXGUI_JournalCodex
// 0x00BB (0x031C - 0x0261)
class USFXGUI_JournalCodex : public USFXGUIMovie
{
public:
	TArray< struct FJCEntry >                          lstJCQuests;                                      		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FJCEntry >                          lstJCCodexPrimary;                                		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FJCEntry >                          lstJCCodexSecondary;                              		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FCodexImageDetails >                lstImages;                                        		// 0x0288 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     sDefaultCodexImage;                               		// 0x0294 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPointer                                    m_pJCDisplayList;                                 		// 0x02A0 (0x0004) [0x0000000000001000]              ( CPF_Native )
	void*                                              lstSortLabels[ 0x3 ];                             		// 0x02A4 (0x000C) [0x0000000000004000]              ( CPF_Config )
	void*                                              lstSortTitles[ 0x3 ];                             		// 0x02B0 (0x000C) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nCurrentDisplayCategory;                        		// 0x02BC (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentListEntry;                              		// 0x02C0 (0x0004) [0x0000000000000000]              
	int                                                m_nQuestPrimaryUpdatedCount;                      		// 0x02C4 (0x0004) [0x0000000000000000]              
	int                                                m_nQuestSecondaryUpdatedCount;                    		// 0x02C8 (0x0004) [0x0000000000000000]              
	int                                                m_nCodexPrimaryUpdatedCount;                      		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                m_nCodexSecondaryUpdatedCount;                    		// 0x02D0 (0x0004) [0x0000000000000000]              
	void*                                              srMarkAllCompleteMessage;                         		// 0x02D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srMarkAllCompleteMessageConfirm;                  		// 0x02D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srMarkAllCompleteMessageCancel;                   		// 0x02DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nVoiceOverPage;                                 		// 0x02E0 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeUntilVoiceOver;                            		// 0x02E4 (0x0004) [0x0000000000000000]              
	class UWwiseAudioComponent*                        m_oVoiceOver;                                     		// 0x02E8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              fVoiceOverDelay;                                  		// 0x02EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fVoiceOverCancelFadeOut;                          		// 0x02F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nUpStamp;                                       		// 0x02F4 (0x0004) [0x0000000000000000]              
	void*                                              TitleText;                                        		// 0x02F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              ExitText;                                         		// 0x02FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              BackText;                                         		// 0x0300 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              CloseSubListText;                                 		// 0x0304 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              Tab1Text;                                         		// 0x0308 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              Tab2Text;                                         		// 0x030C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              Tab3Text;                                         		// 0x0310 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              MarkAllViewedText;                                		// 0x0314 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              ViewText;                                         		// 0x0318 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1595 ];

		return pClassPointer;
	};

	void eventAS_MarkAllViewedConfirmed ( );
	void eventAS_SetDetails ( struct FString sInfo, struct FString sImgResource );
	void eventAS_EndDisplayList ( int nLastEntryID );
	void eventAS_SetSubItems ( TArray< struct FJCItem > aSubItems );
	void eventAS_AddListItems ( TArray< struct FJCUIListItem > aItems );
	void eventAS_StartDisplayList ( struct FString sLabel, struct FString sTitle, int nListLen );
	void eventAS_SetUnreadItemCounts ( int nQuestPrimary, int nQuestSecondary, int nCodexPrimary, int nCodexSecondary );
	void eventAS_SetupVisualState ( int nForceTab );
	void eventAS_ScrollDetailsAnalog ( float fScroll );
	void ExSetItemRead ( int nID, int nSubID );
	void ExPlayEntryVO ( );
	void ExExitEntries ( );
	void ExInitializeJournal ( );
	void ExSetLastEntry ( int nEntry );
	void ExMarkAllDataViewed ( );
	void ExSortList ( );
	void ExFocusOnTab ( int nTab );
	void ExExpandEntry ( );
	void ExFocusOnSubentry ( int nSublistSelection );
	void ExFocusOnEntry ( );
	void NativeMarkAllDataViewed ( unsigned long bAPressed, int nContext );
	void MarkAllDataViewed ( unsigned long bAPressed, int nContext );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
};

UClass* USFXGUI_JournalCodex::pClassPointer = NULL;

// Class SFXGame.SFXGUI_Leaderboard
// 0x003F (0x02A0 - 0x0261)
class USFXGUI_Leaderboard : public USFXGUIMovie
{
public:
	TArray< struct FLeaderboardMapGroup >              LeaderboardGroups;                                		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FLeaderboardRecord >                CachedRecords;                                    		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXLeaderboardRequestData                  RequestedData;                                    		// 0x027C (0x0008) [0x0000000000000000]              
	struct FSFXLeaderboardRequestData                  CurrentData;                                      		// 0x0284 (0x0008) [0x0000000000000000]              
	int                                                RecordsPerRequest;                                		// 0x028C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                RowsInTable;                                      		// 0x0290 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                SeamlessRankToMoveTo;                             		// 0x0294 (0x0004) [0x0000000000000000]              
	int                                                SeamlessRankToSelect;                             		// 0x0298 (0x0004) [0x0000000000000000]              
	float                                              StartTime;                                        		// 0x029C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1596 ];

		return pClassPointer;
	};

	struct FString GetLocalUsername ( );
	void eventAS_SetLeaderboardHeaderText ( struct FString sNewTitle );
	void eventAS_AddRecords ( TArray< struct FLeaderboardRecord > records, int NumRanks, int TopRank, int RankToMoveTo, int RankToSelect, unsigned long bFriends );
	void eventAS_DefineColumns ( TArray< struct FLeaderboardColumn > columnDefinitions );
	void eventAS_ClearRows ( );
	void eventAS_ClearHeader ( );
	void Ext_GetLeaderboardDataCentredOnLocalPlayer ( );
	void Ext_GetNewLeaderboardData ( int Rank );
	void Ext_CancelLeaderboardRequests ( );
	void Ext_ShowGamerCard ( int RowNumber );
	void Ext_PrevSecondaryIndex ( );
	void Ext_NextSecondaryIndex ( );
	void Ext_PrevPrimaryIndex ( );
	void Ext_NextPrimaryIndex ( );
	void Ext_LeaderboardInitalized ( );
	void AddRecords ( TArray< struct FLeaderboardRecord > NewRecords, int NumRanks, int TopRank, int RankToMoveTo, int RankToSelect, unsigned long bFriends );
	void ClearRecords ( );
	void CancelLeaderboardRequests ( );
	void OnCenteredLeaderboardResultsRetrieved ( TArray< struct FLeaderboardColumn > aColumnInfo, TArray< struct FLeaderboardRecord > aResults, int iTotalRanks, struct FUniqueNetId uidEntity, unsigned char nErrorCode, struct FPointer pExternalData );
	void OnLeaderboardResultsRetrieved ( TArray< struct FLeaderboardColumn > aColumnInfo, TArray< struct FLeaderboardRecord > aResults, int iTotalRanks, struct FUniqueNetId uidEntity, unsigned char nErrorCode, struct FPointer pExternalData );
	void PopulateLeaderboardFromRank ( int PrimaryIndex, int SecondaryIndex, int nRank, int nRange );
	void PopulateLeaderboardCenteredData ( int PrimaryIndex, int SecondaryIndex, int nRange, struct FUniqueNetId iPlayerID );
	void ExitScreen ( );
	void eventOnClose ( );
	void eventOnStart ( );
};

UClass* USFXGUI_Leaderboard::pClassPointer = NULL;

// Class SFXGame.SFXGUI_Manual
// 0x00AF (0x0310 - 0x0261)
class USFXGUI_Manual : public USFXGUIMovie
{
public:
	struct FManualCategory                             Category1;                                        		// 0x0264 (0x0018) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FManualCategory                             Category2;                                        		// 0x027C (0x0018) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FManualCategory                             Category3;                                        		// 0x0294 (0x0018) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FManualChapter >                    Chapters;                                         		// 0x02AC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FManualPage >                       Pages;                                            		// 0x02B8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      m_aCurrentChapterIndicies;                        		// 0x02C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	void*                                              TitleText;                                        		// 0x02D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              ExitText;                                         		// 0x02D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              BackText;                                         		// 0x02D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              CloseSubListText;                                 		// 0x02DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              Tab1Text;                                         		// 0x02E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              Tab2Text;                                         		// 0x02E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              Tab3Text;                                         		// 0x02E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              ViewText;                                         		// 0x02EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              ContinueText;                                     		// 0x02F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nCurrentChapterIndex;                           		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurrentTab;                                    		// 0x02F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                KinectStartTabOverride;                           		// 0x02FC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                KinectStartChapterOverride;                       		// 0x0300 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nStartTabOverride;                              		// 0x0304 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nStartChapterOverride;                          		// 0x0308 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bInitialized : 1;                               		// 0x030C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bOpenedFromMainMenu : 1;                        		// 0x030C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1597 ];

		return pClassPointer;
	};

	void eventAS_SetDetails ( struct FString sInfo, struct FString sImgResource );
	void eventAS_EndDisplayList ( int nLastEntryID );
	void eventAS_SetSubItems ( TArray< struct FManualListItem > aSubItems );
	void eventAS_AddListItems ( TArray< struct FManualListItem > aItems );
	void eventAS_StartDisplayList ( struct FString sLabel, struct FString sTitle, int nListLen );
	void eventAS_SetupVisualState ( int nForceTab );
	void eventAS_ScrollDetailsAnalog ( float fScroll );
	void eventAS_SetUnreadItemCounts ( int nQuestPrimary, int nQuestSecondary, int nCodexPrimary, int nCodexSecondary );
	void eventAS_ShowFullScreenController ( );
	bool ShouldRemoveKinectManualChapter ( );
	bool CallScriptExclusionFunction ( struct FName Fnc );
	void ReturnToBrowser ( );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void ExExpandEntry ( );
	void ExFocusOnSubentry ( int nPageIndex );
	void ExSetLastEntry ( int nListIndex );
	void DisplayManualChapters ( TArray< int > aChapterIndices, int nSelectChapterId );
	void ExFocusOnTab ( int nTab );
	void ExInitializeJournal ( );
	TArray< int > GetChapterIndices ( TArray< int > ChapterIDs );
	void CheckInitializeData ( );
	bool HasStartupOverride ( );
	void ResetStartupOverrides ( );
	void StartOnKinectChapter ( );
	void SetFromMainMenu ( );
	void eventOnStart ( );
};

UClass* USFXGUI_Manual::pClassPointer = NULL;

// Class SFXGame.SFXGUI_Markers
// 0x001B (0x027C - 0x0261)
class USFXGUI_Markers : public USFXGUIMovie
{
public:
	TArray< class USFXGUIValue_Marker* >               Markers;                                          		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	void*                                              ObjectiveText;                                    		// 0x0270 (0x0004) [0x0000000000000000]              
	class AActor*                                      ObjectiveTextActor;                               		// 0x0274 (0x0004) [0x0000000000000000]              
	float                                              TextStayUpDuration;                               		// 0x0278 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1598 ];

		return pClassPointer;
	};

	void ASFadeOutObjectiveText ( );
	void ASPlayObjectiveText ( struct FString Text, float StayUpDuration );
	void ASPlayTextPopupAnimation ( struct FString Text );
	void ASRemoveMarker ( class UGFxValue* MovieClip );
	class UGFxValue* ASAddMarker ( );
	void HideObjectiveText ( );
	void DisplayObjectiveText ( );
	void SetObjectiveText ( void* NewObjectiveText, class AActor* NewObjectiveTextActor );
	void DisplayTextPopup ( struct FString Text );
	void FadeOutMarkers ( );
	void BeginOnDemandPulse ( );
	void eventOnClose ( );
	void MarkerManagerDestroyed ( );
	void ConnectToMarkerManager ( );
	void DeferredConnectToMarkerManager ( );
	void eventOnStart ( );
	void RemoveMarker ( class AActor* MarkerActorToRemove );
	void DelayedGFxInitialize ( );
	void AddMarker ( class AActor* NewMarkerActor );
};

UClass* USFXGUI_Markers::pClassPointer = NULL;

// Class SFXGame.SFXGUI_MPScoretags
// 0x0027 (0x0288 - 0x0261)
class USFXGUI_MPScoretags : public USFXGUIMovie
{
public:
	TArray< struct FSFXGUIScoreTag >                   QueuedTags;                                       		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXGUIValue_ManualAnimController*           ActiveScoreTagAnim;                               		// 0x0270 (0x0004) [0x0000000000000000]              
	float                                              LocationX;                                        		// 0x0274 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LocationY;                                        		// 0x0278 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Lifetime;                                         		// 0x027C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ScreenLocationX;                                  		// 0x0280 (0x0004) [0x0000000000000000]              
	float                                              ScreenLocationY;                                  		// 0x0284 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1599 ];

		return pClassPointer;
	};

	void AS_SetScoreTagText ( struct FString ScoreText );
	void UpdateEnabledState ( );
	void FinishScoreTagClip ( );
	void eventDisplayScoreTag ( );
	void QueueScoretag ( int Amount, struct FString Message );
	void eventOnStart ( );
};

UClass* USFXGUI_MPScoretags::pClassPointer = NULL;

// Class SFXGame.SFXGUI_Store
// 0x01FF (0x0460 - 0x0261)
class USFXGUI_Store : public USFXGUIMovie
{
public:
	struct FStoreItemData                              ChosenStoreItem;                                  		// 0x0264 (0x00FC) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FStoreItemData >                    StoreItems;                                       		// 0x0360 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FStoreItemData >                    UnsortedMPItems_Weapons;                          		// 0x036C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FStoreItemData >                    UnsortedMPItems_Mods;                             		// 0x0378 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sResourceCostColorHTML_CanAfford;               		// 0x0384 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sResourceCostColorHTML_CantAfford;              		// 0x0390 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_DefaultStoreHeaderImageRef;                     		// 0x039C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FModStrings >                       ModStringsArray;                                  		// 0x03A8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FComparisonStat >                   CompStats;                                        		// 0x03B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FGlobalStoreDiscount >              GlobalStoreDiscounts;                             		// 0x03C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      WeaponUpgradeCosts;                               		// 0x03CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      RespecCosts;                                      		// 0x03D8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      Achievement_UniqueArmorPlotIDs;                   		// 0x03E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCloseCallback__Delegate;                      		// 0x03F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ABioPawn*                                    Customer;                                         		// 0x03FC (0x0004) [0x0000000000000000]              
	class USFXGUIData_Store*                           StoreGUIData;                                     		// 0x0400 (0x0004) [0x0000000000000000]              
	class USFXGUIData_Store*                           NestedStoreGUIData;                               		// 0x0404 (0x0004) [0x0000000000000000]              
	class UBioSFHandler_MessageBox*                    ConfirmationMessageBox;                           		// 0x0408 (0x0004) [0x0000000000000000]              
	void*                                              srPurchaseConfirm;                                		// 0x040C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srPurchaseCancel;                                 		// 0x0410 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srPurchaseConfirmMessage;                         		// 0x0414 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srMoreInformation;                                		// 0x0418 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srBack;                                           		// 0x041C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srNewFlag;                                        		// 0x0420 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResourceTextCredits;                          		// 0x0424 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResourceCostFormat;                           		// 0x0428 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResourceAvailFormat;                          		// 0x042C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInfoScrollSpeed;                               		// 0x0430 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DisplayCap_Mods;                                  		// 0x0434 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DisplayCap_Weapons;                               		// 0x0438 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ModPriorityModifier;                              		// 0x043C (0x0004) [0x0000000000000000]              
	int                                                NewGamePlusID;                                    		// 0x0440 (0x0004) [0x0000000000000000]              
	int                                                MaxWeaponLevel_Normal;                            		// 0x0444 (0x0004) [0x0000000000000000]              
	int                                                MaxWeaponLevel_NGP;                               		// 0x0448 (0x0004) [0x0000000000000000]              
	int                                                WeaponLevelIncrease_Normal;                       		// 0x044C (0x0004) [0x0000000000000000]              
	int                                                WeaponLevelIncrease_NGP;                          		// 0x0450 (0x0004) [0x0000000000000000]              
	void*                                              ArmorEffectDescriptionFormatter;                  		// 0x0454 (0x0004) [0x0000000000000000]              
	class USFXWeaponUIDataManager*                     WeaponDataManager;                                		// 0x0458 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bAllItemsUnlocked : 1;                            		// 0x045C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bIsFinished : 1;                                  		// 0x045C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsAborted : 1;                                   		// 0x045C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bWasPaused : 1;                                   		// 0x045C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bIsFlashLoaded : 1;                               		// 0x045C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bUIIsInitialized : 1;                             		// 0x045C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bStopScroll : 1;                                		// 0x045C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bMessageBoxActivated : 1;                         		// 0x045C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bResetTalents : 1;                                		// 0x045C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bInNestedStore : 1;                               		// 0x045C (0x0004) [0x0000000000000000] [0x00000200] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1600 ];

		return pClassPointer;
	};

	struct FString GetStoreHeaderImageRef ( );
	void GrantIntelReward ( );
	int eventGetResourceCount ( int nResource );
	struct FString GetResourceText ( unsigned char eResource );
	void ASInitializationFinished ( );
	void eventASRefreshChoiceEntry ( int p_index, struct FString p_ChoiceName, struct FString p_ChoiceTitle, struct FString p_ChoiceImageTitle, struct FString p_ChoiceDescription, struct FString p_ChoiceOptionalPanelItemValue, int p_ChoiceColor, int p_ChoiceResource, struct FString p_ActionText, struct FString p_ImagePath, unsigned long p_DefaultSelection, unsigned long p_Disabled, unsigned char p_DisplayType, struct FString p_Stat1Name, int p_Stat1Base, int p_Stat1Bonus, int p_Stat1Comp, struct FString p_Stat2Name, int p_Stat2Base, int p_Stat2Bonus, int p_Stat2Comp, struct FString p_Stat3Name, int p_Stat3Base, int p_Stat3Bonus, int p_Stat3Comp, struct FString p_Stat4Name, int p_Stat4Base, int p_Stat4Bonus, int p_Stat4Comp, struct FString p_Stat5Name, int p_Stat5Base, int p_Stat5Bonus, int p_Stat5Comp );
	void eventASAddChoiceEntry ( int p_index, struct FString p_ChoiceName, struct FString p_ChoiceTitle, struct FString p_ChoiceImageTitle, struct FString p_ChoiceDescription, struct FString p_ChoiceOptionalPanelItemValue, int p_ChoiceColor, int p_ChoiceResource, struct FString p_ActionText, struct FString p_ImagePath, unsigned long p_DefaultSelection, unsigned long p_Disabled, unsigned char p_DisplayType, struct FString p_Stat1Name, int p_Stat1Base, int p_Stat1Bonus, int p_Stat1Comp, struct FString p_Stat2Name, int p_Stat2Base, int p_Stat2Bonus, int p_Stat2Comp, struct FString p_Stat3Name, int p_Stat3Base, int p_Stat3Bonus, int p_Stat3Comp, struct FString p_Stat4Name, int p_Stat4Base, int p_Stat4Bonus, int p_Stat4Comp, struct FString p_Stat5Name, int p_Stat5Base, int p_Stat5Bonus, int p_Stat5Comp );
	void eventASSetInitialListSize ( int p_numItems );
	void eventASSetTitles ( struct FString sTitle, struct FString sSubtitle, struct FString sAText, struct FString sBText, struct FString sYText, int nCreditsAvailable );
	void eventASSetPlatformLayout ( int iPlatformId );
	void ASScrollInfoText ( float fValue );
	void ASStopInfoScroll ( );
	void eventOnClose ( );
	void eventOnStart ( );
	void ScrollText ( float fValue );
	void* eventGetBButtonText ( );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void DiscoverStore ( );
	void RefreshStoreGUI ( );
	void AddBonusPower ( class UClass* PowerClass );
	void ConfirmationMessageBoxInputPressed ( unsigned long bAPressed, int nContext );
	void ShowConfirmationMessageBox ( );
	void ExBuy ( int nListIndexSelected );
	bool ShouldItemBeDisabled ( struct FStoreItemData ItemData );
	int GetCalculatedItemCost ( int BaseCost );
	class UTexture2D* GetStoreItemImage ( struct FString Path );
	void OutOfStock ( );
	bool eventGetWeaponDataStats ( struct FName WeaponClassPath, TArray< struct FComparisonStat >* lstDisplayStats );
	class UClass* FindPowerClass ( struct FString PowerClassString );
	void FlagNewItems ( );
	bool ItemIsNew ( struct FStoreItemData ItemData );
	struct FName GetItemDisplayVariable ( struct FStoreItemData ItemData );
	void TalentResetHelper ( struct FString PawnName );
	struct FString FloatToString ( float Number );
	void NestedStockStore ( );
	void StockStore ( );
	void onScreenClosed ( );
	void ShutDown ( );
	void ExExitStore ( );
	void SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate );
	void PrepareStorefront ( unsigned long bInitFromScratch );
	void FinishStorePreparation ( );
	void OnWeaponUIDataLoaded ( );
	void ExPostLoad ( );
	void eventUpdate ( float fDeltaT );
	void Initialize ( class USFXGUIData_Store* InitialStoreChoiceGUIData, struct FName StoreName, class ABioPawn* PlayerPawn );
	void OnCloseCallback ( );
};

UClass* USFXGUI_Store::pClassPointer = NULL;

// Class SFXGame.SFXGUI_Terminal
// 0x002F (0x0290 - 0x0261)
class USFXGUI_Terminal : public USFXGUIMovie
{
public:
	TArray< struct FScriptDelegate >                   OnRequestActionCallbacks;                         		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRequestExitCallback__Delegate;                		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRequestActionDelegate__Delegate;              		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXGUIData_Terminal*                        TerminalData;                                     		// 0x0288 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsFinished : 1;                                  		// 0x028C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsAborted : 1;                                   		// 0x028C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bWasPaused : 1;                                   		// 0x028C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsFlashLoaded : 1;                               		// 0x028C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bIsScriptLoaded : 1;                              		// 0x028C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1601 ];

		return pClassPointer;
	};

	void eventASAddSelectionTitles ( struct FString sTitle, struct FString sDesc, unsigned long bDisabled );
	void eventASSetTitles ( struct FString sTitle, struct FString sAText, struct FString sBText );
	void eventOnClose ( );
	void eventOnStart ( );
	void ShutDown ( );
	void ExRequestAction ( int nRequest );
	void ExRequestLogoff ( );
	void ClearActionDelegates ( );
	void AddOnRequestActionDelegate ( struct FScriptDelegate fn_OnRequestActionDelegate );
	void SetOnRequestExitCallback ( struct FScriptDelegate fn_OnRequestExitDelegate );
	void PostInit ( );
	void ExPostLoad ( );
	void Initialize ( class USFXGUIData_Terminal* InitialTerminalGUIData );
	void OnRequestActionDelegate ( );
	void OnRequestExitCallback ( );
};

UClass* USFXGUI_Terminal::pClassPointer = NULL;

// Class SFXGame.SFXGUIMovieKismet
// 0x0013 (0x0274 - 0x0261)
class USFXGUIMovieKismet : public USFXGUIMovie
{
public:
	TArray< class UGFxMovieInfo* >                     ReferencedMovies;                                 		// 0x0264 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      KismetMonitored : 1;                              		// 0x0270 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      CloseRequested : 1;                               		// 0x0270 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      UnloadOnClose : 1;                                		// 0x0270 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1602 ];

		return pClassPointer;
	};

	void eventOnClose ( );
	void eventKismetClose ( );
	void Close ( unsigned long bUnload );
	void eventOnStart ( );
};

UClass* USFXGUIMovieKismet::pClassPointer = NULL;

// Class SFXGame.SFXGUI_MainMenu_RTT
// 0x010E (0x0382 - 0x0274)
class USFXGUI_MainMenu_RTT : public USFXGUIMovieKismet
{
public:
	struct FDouble                                     CheckingDataStartTime;                            		// 0x0274 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FMMListSequences                            Cursor_SeqEntry;                                  		// 0x027C (0x002C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FMMListSequences                            Display_SeqEntry;                                 		// 0x02A8 (0x002C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMMListEntry >                      ListEntries;                                      		// 0x02D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FMMListSequences >                  ListSequences;                                    		// 0x02E0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     Cursor_SeqID;                                     		// 0x02EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_MPSelectedMapStr;                               		// 0x02F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __MsgBoxInputCallback__Delegate;                  		// 0x0304 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       ExitToMainMenuSound;                              		// 0x0310 (0x0008) [0x0000000000000000]              
	int                                                Cursor_SeqStep;                                   		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              Cursor_Heading;                                   		// 0x031C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeSinceLastListUpdate;                          		// 0x0320 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ListUpdateInterval;                               		// 0x0324 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                DLCBeginMountingAttempts;                         		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CheckingDataMessageDelay;                         		// 0x032C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CheckingDataMessageMinimum;                       		// 0x0330 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              CheckingDLCMessage;                               		// 0x0334 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              CheckingSaveDataMessage;                          		// 0x0338 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              NoLoginStart;                                     		// 0x033C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              ConfirmNoLoginStart;                              		// 0x0340 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              CancelNoLoginStart;                               		// 0x0344 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srExitConfirm;                                    		// 0x0348 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srYes;                                            		// 0x034C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srNo;                                             		// 0x0350 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srOK;                                             		// 0x0354 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srCancel;                                         		// 0x0358 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srConnect;                                        		// 0x035C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srNoSpaceForCareer;                               		// 0x0360 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srContinueWithoutSaving;                          		// 0x0364 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srCancelNewCareer;                                		// 0x0368 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srDemoNetworkRequired;                            		// 0x036C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srViewKinectManual;                               		// 0x0370 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srViewKinectManual_Ok;                            		// 0x0374 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srViewKinectManual_Cancel;                        		// 0x0378 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bHasSaves : 1;                                    		// 0x037C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bHasNewGamePlusSaves : 1;                         		// 0x037C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bCurrentCareerHasSaves : 1;                       		// 0x037C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bComputerOpen : 1;                                		// 0x037C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bDefaultToFemale : 1;                             		// 0x037C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bDelayedNewGameRequested : 1;                     		// 0x037C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bFemaleSelected : 1;                            		// 0x037C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bWaitingForDLC : 1;                               		// 0x037C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bWaitingForSaves : 1;                             		// 0x037C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bWaitingForDigitalRights : 1;                     		// 0x037C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bWaitingToRefreshDigitalRights : 1;               		// 0x037C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bDigitalRightsRefreshActive : 1;                  		// 0x037C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bCheckForDLCMessage : 1;                          		// 0x037C (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bCheckingDataComplete : 1;                        		// 0x037C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bCheckingDataMessageVisible : 1;                  		// 0x037C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bDisplayingDLCErrorMessage : 1;                   		// 0x037C (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      IsKinectTunerShown : 1;                           		// 0x037C (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned char                                      GameType;                                         		// 0x0380 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PendingCommand;                                   		// 0x0381 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1603 ];

		return pClassPointer;
	};

	void AS_MenuBack ( );
	void AS_MenuExecute ( );
	void AS_MenuDown ( );
	void AS_MenuUp ( );
	void AS_Initialize ( );
	void AS_SetRepeatingText ( struct FString strText );
	void eventASClearLists ( );
	void eventASRefreshList ( );
	void eventASShowSubList ( int SublistHeading );
	void eventASShowPrimaryList ( );
	void eventAS_SetEntry ( unsigned long bHasHeading, struct FMMListEntry oListEntry, int nListIndex );
	bool eventHandleInputEvent ( unsigned char nEventID, float fValue );
	bool IsValidKinectSpeechLanguageSetup ( );
	bool IsKinectEnabled ( );
	void CerberusConnectPopupInputCallback ( unsigned long bAPressed, int Context );
	bool CheckLogin ( );
	void Callback_NoLoginStart ( unsigned long bAPressed, int Context );
	bool UpdateCheckingDataMessage ( void* Message, unsigned long bShouldDisplayMessage );
	void ResumeGame_PromptToDisplayKinectManualCompleted ( unsigned long bAPressed, int Context );
	void LoadGame_PromptToDisplayKinectManualCompleted ( unsigned long bAPressed, int Context );
	void NewGame_PromptToDisplayKinectManualCompleted ( unsigned long bAPressed, int Context );
	bool PromptToDisplayKinectManual ( struct FScriptDelegate aCallback );
	void StartNewGameInternal ( unsigned long bFemaleSelected );
	bool EnterNewGameList ( );
	void InsufficientSpaceCallback ( unsigned long bAPressed, int Context );
	void DisplayInsufficientSpaceMessage ( int AdditionalBytesNeeded );
	void StartNewGameFreeSpaceCallback ( struct FSFXSaveGameCommandEventArgs Args );
	void BeginNewGame ( unsigned long bFemaleSelected );
	void DelayedBeginNewGame ( unsigned long bFemaleSelected );
	void eventOnLanguageChanged ( );
	void ReturnFromManualGui ( unsigned long bRescanCareers );
	void ReturnFromLoadGui ( unsigned long bRescanCareers );
	class USFXGUIMovie* OpenMainMenuSubMovie ( struct FName nmMovieTag, unsigned long bNewInstance, unsigned long bStart );
	void ShowKinectTuner ( );
	void ShowGameManual ( unsigned long bShowKinectPage );
	bool StartConnectingFlow ( );
	void InternalConnect ( );
	void Connect ( );
	void ShowCredits ( );
	void ShowOptions ( );
	void ShowAchievements ( );
	void ExitConfirm ( unsigned long bAPressed, int nContext );
	void ExitGame ( );
	void ShowPendingInvites ( );
	void EnterExtrasSequence ( );
	void eventStartMultiplayerFlow ( );
	void LoadGame ( );
	void LegacyImport ( );
	void NewGamePlus ( );
	void NewGameFemale ( );
	void NewGameMale ( );
	void ShowDemoLoginPopup_Input ( unsigned long bAPressed, int nContext );
	void ShowDemoLoginPopup ( );
	void EnterNewGameSequence ( );
	void ResumeGameCallback ( unsigned long bWasSuccessful );
	void ResumeGame ( );
	bool CanShowShowOnlineStorePS3 ( );
	bool CanShowShowOnlineStoreXBox ( );
	bool CanShowShowOnlineStorePC ( );
	void ShowOnlineStore ( );
	bool EnterExtrasList ( );
	bool EnterRootSequence ( );
	bool EnterRootList ( );
	bool LegacyReady ( );
	bool CanShowGameManual ( );
	bool CanShowXboxLIVE ( );
	bool CanShowMultiplayer ( );
	bool CanShowExitGame ( );
	bool CurrentCareerHasSaves ( );
	bool HasNewGamePlusSaves ( );
	bool HasSaves ( );
	bool CallListFnc ( struct FName Fnc );
	void ShowList ( struct FString ListID, void* SublistHeading );
	void EnterList ( struct FMMListSequences SeqEntry );
	void StepSeq ( int Step );
	bool PrevStep ( );
	void NextStep ( );
	void eventEnterSequence ( struct FString SeqID );
	bool IsComputerOpen ( );
	void CloseComputer ( );
	void OpenComputer ( );
	void eventPostAdvance ( float tDelta );
	void eventAsynchGameDataRecieved ( );
	void UpdateCheckingDataState ( );
	void RefreshDigitalRightsComplete ( int nResult );
	void DLCErrorClosed ( unsigned long bAPressed, int nContext );
	void ConditionalDisplayDLCError ( );
	void BeginInitDownloadableContent ( );
	bool HasStartupSequenceDLCMountStepCompleted ( );
	bool IsEnumeratingDownloadableContent ( );
	void EndEnumerateCareers ( struct FSFXSaveGameCommandEventArgs Args );
	void BeginEnumerateCareers ( );
	void eventOnClose ( );
	void eventOnStart ( );
	void MsgBoxInputCallback ( unsigned long bAPressed, int Context );
};

UClass* USFXGUI_MainMenu_RTT::pClassPointer = NULL;

// Class SFXGame.SFXGUI_MainMenu_RTT_RC
// 0x000C (0x0280 - 0x0274)
class USFXGUI_MainMenu_RTT_RC : public USFXGUIMovieKismet
{
public:
	struct FString                                     ReplacementTextureSymbol;                         		// 0x0274 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1604 ];

		return pClassPointer;
	};

	void AS_UpdateImageMessage ( struct FString strTitle, struct FString strBody, int nMessageId );
	void AS_SetNextButtonVisible ( unsigned long bVisible );
	void AS_SetPrevButtonVisible ( unsigned long bVisible );
	void AS_SetConnectButtonState ( struct FString sMessage, unsigned long bVisible );
	void AS_SetRepeatingText ( struct FString Value );
	int AS_SynchMessageArrays ( TArray< int > OrderedMessageIds );
	void AS_DisplayPendingMessage ( );
	void AS_NextMessage ( );
	void AS_PrevMessage ( );
	class UGFxValue* AS_AddGalaxyAtWarMessage ( struct FString strTitle, struct FString strBody, int nMessageId );
	class UGFxValue* AS_AddImageMessage ( struct FString strTitle, struct FString strBody, int nMessageId );
	void AddGalaxyAtWarMessage ( class USFXGUI_MainMenu_Message_GAW* aMessage );
	void UpdateImageMessage ( class USFXGUI_MainMenu_Message_Image* aMessage );
	void AddImageMessage ( class USFXGUI_MainMenu_Message_Image* aMessage );
	void eventOnStart ( );
};

UClass* USFXGUI_MainMenu_RTT_RC::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_BlackScreen
// 0x001C (0x02A9 - 0x028D)
class UBioSFHandler_BlackScreen : public USFXGUIMovieLegacyAdapter
{
public:
	struct FString                                     m_ASPath;                                         		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_CurrentAlpha;                                   		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              m_AccumulatedFadeTime;                            		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              m_FadeTime;                                       		// 0x02A4 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eDisplayMode;                                   		// 0x02A8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1605 ];

		return pClassPointer;
	};

	void eventOnStart ( );
	bool IsFading ( );
	void Show ( unsigned long bWithFade, float FadeTime );
	void Hide ( unsigned long bWithFade, float FadeTime );
	void OnPanelAdded ( );
};

UClass* UBioSFHandler_BlackScreen::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_BrowserWheel
// 0x0033 (0x02C0 - 0x028D)
class UBioSFHandler_BrowserWheel : public USFXGUIMovieLegacyAdapter
{
public:
	TArray< struct FBWPageStruct >                     lstPages;                                         		// 0x0290 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FVector                                     vInput;                                           		// 0x029C (0x000C) [0x0000000000000000]              
	float                                              fLastRadius;                                      		// 0x02A8 (0x0004) [0x0000000000000000]              
	void*                                              srExitConfirm;                                    		// 0x02AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srMainMenuConfirm;                                		// 0x02B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srConfirm;                                        		// 0x02B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srCancel;                                         		// 0x02B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USFXPowerLevelUpHelper*                      m_Helper;                                         		// 0x02BC (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1606 ];

		return pClassPointer;
	};

	void AS_SetButtonAdvanceSwap ( unsigned long bMenuAdvanceSwapped );
	void AS_SetResourceCounts ( int nCredits, int nMedigel, int nGrenades );
	void AS_SetArrowPosition ( int nDegrees );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void ExitGame ( );
	void MainMenuConfirm ( unsigned long bAPressed, int nContext );
	void SetResourceValues ( );
	void InitializeBrowser ( );
	void DetermineJournalCodexUpdateStatus ( );
	void DetermineSquadUpdateStatus ( );
	void Update ( float fDeltaT );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void CloseBrowser ( );
	void SelectSegment ( int nSegment );
	void eventShowSelectedPanel ( int nPanel, class USFXGUIInteraction* oManager );
	struct FName RedirectTag ( struct FName fnTag );
};

UClass* UBioSFHandler_BrowserWheel::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_ChoiceGUI
// 0x006F (0x02FC - 0x028D)
class UBioSFHandler_ChoiceGUI : public USFXGUIMovieLegacyAdapter
{
public:
	struct FString                                     m_sResourceCostColorHTML_CanAfford;               		// 0x0290 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sResourceCostColorHTML_CantAfford;              		// 0x029C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __InputCallback__Delegate;                        		// 0x02A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateCallback__Delegate;                       		// 0x02B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateCallbackEx__Delegate;                     		// 0x02C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXGameChoiceGUIData*                       m_ChoiceData;                                     		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                nInputCallbackContext;                            		// 0x02D0 (0x0004) [0x0000000000000000]              
	void*                                              m_srResourceTextCredits;                          		// 0x02D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResourceTextEzo;                              		// 0x02D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResourceTextIridium;                          		// 0x02DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResourceTextPalladium;                        		// 0x02E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResourceTextPlatinum;                         		// 0x02E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResourceTextProbes;                           		// 0x02E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResourceCostFormat;                           		// 0x02EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResourceAvailFormat;                          		// 0x02F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInfoScrollSpeed;                               		// 0x02F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bStopScroll : 1;                                		// 0x02F8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1607 ];

		return pClassPointer;
	};

	void CleanUpDelegateReferences ( );
	void GameSessionEnded ( );
	int eventGetResourceCount ( int nResource );
	void eventonExIntUpdateOptionValues ( int nResource );
	void eventOnPanelRemoved ( );
	void eventOnPanelAdded ( );
	void ScrollText ( float fValue );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	struct FString GetResourceText ( unsigned char eResource );
	void Initialize ( class USFXGameChoiceGUIData* ChoiceData );
	void HideChoiceGUI ( unsigned long bRemove );
	void RefreshChoiceGUI ( );
	void ShowChoiceGUI ( );
	void SetUpdateDelegate ( struct FScriptDelegate pDelegate );
	void SetInputDelegate ( struct FScriptDelegate pDelegate, int nContext );
	void UpdateCallbackEx ( float fDeltaT, class UObject* oChoiceGUI );
	void UpdateCallback ( float fDeltaT, class UBioSFHandler_ChoiceGUI* oChoiceGUI );
	void InputCallback ( unsigned long bAPressed, int nContext );
};

UClass* UBioSFHandler_ChoiceGUI::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_PRCShop
// 0x0010 (0x030C - 0x02FC)
class USFXSFHandler_PRCShop : public UBioSFHandler_ChoiceGUI
{
public:
	TArray< struct FPRCInfo_t >                        PRCInfo;                                          		// 0x02FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class USFXGameChoiceGUIData_PRCShop*               m_ChoiceDataNoStrRef;                             		// 0x0308 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1608 ];

		return pClassPointer;
	};

	void ShowChoiceGUI ( );
};

UClass* USFXSFHandler_PRCShop::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_Conversation
// 0x00BB (0x0348 - 0x028D)
class UBioSFHandler_Conversation : public USFXGUIMovieLegacyAdapter
{
public:
	int                                                m_aReplyLocations[ 0x6 ];                         		// 0x0290 (0x0018) [0x0000000000000000]              
	int                                                m_aInvestigateLocations[ 0x6 ];                   		// 0x02A8 (0x0018) [0x0000000000000000]              
	int                                                m_nSlotsUsed[ 0x6 ];                              		// 0x02C0 (0x0018) [0x0000000000000000]              
	struct FVector                                     vInput;                                           		// 0x02D8 (0x000C) [0x0000000000000000]              
	struct FName                                       InterruptAppearRenegade;                          		// 0x02E4 (0x0008) [0x0000000000000000]              
	struct FName                                       InterruptDisappearRenegade;                       		// 0x02EC (0x0008) [0x0000000000000000]              
	struct FName                                       InterruptAppearParagon;                           		// 0x02F4 (0x0008) [0x0000000000000000]              
	struct FName                                       InterruptDisappearParagon;                        		// 0x02FC (0x0008) [0x0000000000000000]              
	void*                                              m_srTextInvestigate;                              		// 0x0304 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srTextReturn;                                   		// 0x0308 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationMiddleLeft;                       		// 0x030C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationTopLeft;                          		// 0x0310 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationBottomLeft;                       		// 0x0314 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationTopRight;                         		// 0x0318 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationBottomRight;                      		// 0x031C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationMiddleRight;                      		// 0x0320 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationMiddleLeft;                 		// 0x0324 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationTopLeft;                    		// 0x0328 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationBottomLeft;                 		// 0x032C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationTopRight;                   		// 0x0330 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationBottomRight;                		// 0x0334 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationMiddleRight;                		// 0x0338 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fLastRadius;                                      		// 0x033C (0x0004) [0x0000000000000000]              
	int                                                m_nLastArrowPosition;                             		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bDisplayInvestigateSubMenu : 1;                 		// 0x0344 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDisplayingWheel : 1;                           		// 0x0344 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bDisplayingParagonInterrupt : 1;                		// 0x0344 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bDisplayingRenegadeInterrupt : 1;               		// 0x0344 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bMonitor16x9Enforcement : 1;                    		// 0x0344 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bWasTriggered : 1;                              		// 0x0344 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bEnforcing16x9 : 1;                             		// 0x0344 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1609 ];

		return pClassPointer;
	};

	void eventAS_Enforce16x9 ( unsigned long bTrue );
	void AS_SetConversationOptions ( struct FString sMiddleRight, int nMiddleRightMode, struct FString sBottomRight, int nBottomRightMode, struct FString sBottomLeft, int nBottomLeftMode, struct FString sMiddleLeft, int nMiddleLeftMode, struct FString sTopLeft, int nTopLeftMode, struct FString sTopRight, int nTopRightMode );
	void eventAS_SetArrowPosition ( int nDegrees, unsigned long bNuiSpeechEnabled );
	void eventAS_HideWheel ( );
	void eventAS_SetParagonInterrupt ( unsigned long bTurnOn );
	void eventAS_SetRenegadeInterrupt ( unsigned long bTurnOn );
	bool eventIsVisible ( );
	void eventSetVisible ( unsigned long bVal );
	int GetInvestigateReplyCount ( class UBioConversationController* oConversation );
	unsigned char GetReplyLocation ( int nReplyCategory );
	unsigned char GetInvestigateReplyLocation ( int nInvestigateSlot );
	bool SelectConversationEntry ( unsigned char nWheelLocation );
	int MapGuiStyleToOptionMode ( unsigned char eGUIStyle );
	void eventUpdateConversationOptions ( class UBioConversationController* oConversation );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void eventSelectInterrupt ( unsigned long bParagon );
	void QueueEntry ( int nEntry );
	void ShowReplyWheel ( );
	void eventSelectEntry ( int nEntry );
	void SkipNode ( );
	void NuiSpeechClearOptions ( );
	void NuiSpeechUpdateOptions ( TArray< void* > ReplyOptions, TArray< int > ReplyOptionPositions );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	int GetNumReplies ( class UBioConversationController* oConversation );
	void InterruptRenegade ( );
	void InterruptParagon ( );
	void SkipConversation ( );
	void SelectConversationSegment ( );
	void HighlightDefaultConvSegment ( );
};

UClass* UBioSFHandler_Conversation::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_PCConversation
// 0x0010 (0x0358 - 0x0348)
class UBioSFHandler_PCConversation : public UBioSFHandler_Conversation
{
public:
	struct FVector                                     vMouseInput;                                      		// 0x0348 (0x000C) [0x0000000000000000]              
	float                                              AccumulationDivisor;                              		// 0x0354 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1610 ];

		return pClassPointer;
	};

	void HighlightDefaultConvSegment ( );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void OnPanelAdded ( );
};

UClass* UBioSFHandler_PCConversation::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_DesignerUI
// 0x009B (0x0328 - 0x028D)
class UBioSFHandler_DesignerUI : public USFXGUIMovieLegacyAdapter
{
public:
	TArray< struct FBioDUIPulseDetails >               lstPulsingElements;                               		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioDUIElementStatus                        lstElementStatus[ 0x16 ];                         		// 0x029C (0x0058) [0x0000000000000000]              
	struct FBioDUITimerDetails                         stModalTimer;                                     		// 0x02F4 (0x0014) [0x0000000000000000]              
	struct FBioDUITimerDetails                         stPassiveTimer;                                   		// 0x0308 (0x0014) [0x0000000000000000]              
	int                                                nElementVisibleCount;                             		// 0x031C (0x0004) [0x0000000000000000]              
	int                                                m_nLayout;                                        		// 0x0320 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bCanInvoke : 1;                                 		// 0x0324 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1611 ];

		return pClassPointer;
	};

	void OnPanelAdded ( );
	void ExIntInitialize ( );
	float GetTimerValue ( unsigned long bModalTimer );
	void SetTimerDetails ( unsigned long bModalTimer, unsigned long bVisible, float fStartTime, float fEndTime, float fInterval );
	bool IsQuasarLayout ( );
	void SetQuasarLayout ( unsigned long bShow );
	void SetBarFillDirection ( unsigned long bModalBar, unsigned long bLeftToRight );
	void SetBarFillPercent ( unsigned long bModalBar, int nPercent );
	void SetBarMarkerPoints ( unsigned long bModalBar, int nMarker1, int nMarker2 );
	void SetCounterValue ( unsigned long bModalCounter, int nValue );
	void SetElementText ( unsigned char nElement, struct FString* sText );
	void SetTextStringRef ( unsigned char nElement, void* srText );
	void ClearElementPulse ( unsigned char nElement );
	int SetupElementPulse ( unsigned char nElement, float fMinAlpha, float fCycleTime );
	void SetElementAlpha ( unsigned char nElement, float fAlpha );
	void SetElementColor ( unsigned char nElement, struct FColor* stColor );
	void SetElementVisible ( unsigned char nElement, unsigned long bVisible, float fFadeTime );
	bool IsActive ( unsigned long bModal );
	void ClearAll ( unsigned long bModal );
};

UClass* UBioSFHandler_DesignerUI::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_GalaxyMap
// 0x0227 (0x04B4 - 0x028D)
class UBioSFHandler_GalaxyMap : public USFXGUIMovieLegacyAdapter
{
public:
	struct FScriptDelegate                             aUIActionCallbacks[ 0xC ];                        		// 0x0290 (0x0090) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sDisplayedFuel;                                 		// 0x0320 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sDisplayedCash;                                 		// 0x032C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCallbackEvent__Delegate;                      		// 0x0338 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXUIControlState                          aActions[ 0xC ];                                  		// 0x0344 (0x0090) [0x0000000000000000]              
	struct FSFXUIControlState                          BackControlState;                                 		// 0x03D4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FSFXUIControlState                          ActionControlState;                               		// 0x03E0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FSFXUIControlState                          AltActionControlState;                            		// 0x03EC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FSFXUIControlState                          AltAction2ControlState;                           		// 0x03F8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fScrollValue;                                   		// 0x0404 (0x0004) [0x0000000000000000]              
	float                                              m_fLeftStickX;                                    		// 0x0408 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLeftStickY;                                    		// 0x040C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              AButtonText;                                      		// 0x0410 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              BButtonText;                                      		// 0x0414 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              XButtonText;                                      		// 0x0418 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              YButtonText;                                      		// 0x041C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              TitleText;                                        		// 0x0420 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nDiscoveredPercent;                             		// 0x0424 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              LTriggerText;                                     		// 0x0428 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              RTriggerText;                                     		// 0x042C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              TextTravelMessage;                                		// 0x0430 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextTravelConfirm;                                		// 0x0434 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextTravelCancel;                                 		// 0x0438 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextPlanetEventConfirm;                           		// 0x043C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextGalaxyTitle;                                  		// 0x0440 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextUnknownObj;                                   		// 0x0444 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextRefueling;                                    		// 0x0448 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextTravel;                                       		// 0x044C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextLand;                                         		// 0x0450 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextBack;                                         		// 0x0454 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextExit;                                         		// 0x0458 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextScan;                                         		// 0x045C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextScanStart;                                    		// 0x0460 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextScanClose;                                    		// 0x0464 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextMassRelayJump;                                		// 0x0468 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextMassRelay;                                    		// 0x046C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextOrbit;                                        		// 0x0470 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextFuelDepot;                                    		// 0x0474 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextFuel;                                         		// 0x0478 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextProbes;                                       		// 0x047C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextEmergencyFuel;                                		// 0x0480 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextLaunchProbe;                                  		// 0x0484 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextCancel;                                       		// 0x0488 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              TextExploredPercent;                              		// 0x048C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              DescriptionTabText;                               		// 0x0490 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              MissionTabText;                                   		// 0x0494 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              FuelDisplayTextTemplate;                          		// 0x0498 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              FuelAwardDisplayTime;                             		// 0x049C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fRemainingFuelAwardTime;                        		// 0x04A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fFuelAwardStartValue;                           		// 0x04A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fFuelAwardEndValue;                             		// 0x04A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioCameraBehaviorGalaxy*                    oGalaxyCam;                                       		// 0x04AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bClosingPlanet : 1;                             		// 0x04B0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bClosingScan : 1;                               		// 0x04B0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bWaitingForMsgBox : 1;                          		// 0x04B0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      AButtonEnabled : 1;                               		// 0x04B0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      BButtonEnabled : 1;                               		// 0x04B0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      XButtonEnabled : 1;                               		// 0x04B0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      YButtonEnabled : 1;                               		// 0x04B0 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bLTriggerOn : 1;                                  		// 0x04B0 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bRTriggerOn : 1;                                  		// 0x04B0 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bIsMultiLand : 1;                               		// 0x04B0 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bForceControlUpdate : 1;                          		// 0x04B0 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      m_bDisplayingFuelAwardAnim : 1;                   		// 0x04B0 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      m_bInitialized : 1;                               		// 0x04B0 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      m_bFullCleanupOnClose : 1;                        		// 0x04B0 (0x0004) [0x0000000000000000] [0x00002000] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1612 ];

		return pClassPointer;
	};

	void eventAS_HidePlanetTag ( int nIndex );
	void eventAS_ShowPlanetTag ( int nIndex );
	void AS_SetSelectorState ( int nIndex, unsigned long bVisible, int nPlanetType, int nPlanetDisplay, int nPctVisited, struct FString sName, struct FString sText );
	void eventAS_SetPlanetTagSelection ( int nIndex );
	void eventAS_UpdateSystemSelectors ( int nStartIndex, TArray< struct FVector2D > aLocations );
	void eventAS_SetReaperAlert ( float fAlertLevel );
	void AS_SetLTriggerLabelVisible ( unsigned long bVisible, struct FString sText );
	void AS_SetRTriggerLabelVisible ( unsigned long bVisible, struct FString sText );
	void eventAS_SystemScanUsed ( );
	void eventAS_HideSystemScan ( );
	void eventAS_ShowSystemScan ( struct FString sText );
	void eventAS_UpdateFuelRemaining ( struct FString sFuel, struct FString sCash );
	void eventAS_DisplayStageFrame ( unsigned long bDisplay );
	void eventAS_HideAllPlanetTags ( );
	void AS_InitializePlanetTags ( int nNumTags );
	void AS_DisplayPlanetPanel ( struct FString sDisplayName, struct FString sDescription, struct FString sImageResource, struct FString sInfoHeader );
	void eventAS_HidePlanetPanel ( );
	void eventAS_LeavePlanetScan ( struct FString sCallback );
	void eventAS_EnterPlanetScan ( struct FString sCallback );
	void AS_SetTitleStrings ( struct FString sTitle, struct FString sDisplayName );
	void eventAS_SetAltAction2Button ( struct FString sTitle, struct FString sCallbackFn, unsigned long bEnabled );
	void eventAS_SetAltActionButton ( struct FString sTitle, struct FString sCallbackFn, unsigned long bEnabled );
	void eventAS_SetActionButton ( struct FString sTitle, struct FString sCallbackFn, unsigned long bEnabled );
	void eventAS_SetBackButton ( struct FString sTitle, struct FString sCallbackFn, unsigned long bEnabled );
	void AS_ClearControls ( );
	void PlanetInfoPanelHidden ( );
	void PlanetInfoPanelVisible ( );
	void SetFuelAndCashDisplay ( struct FString sFuel, struct FString sCash );
	void UpdateFuelAndCashDisplay ( float fCurrentFuel, float fMaxFuel, int nCredits, unsigned long bDisplayCredits );
	void UpdateFuelAward ( float fDeltaT );
	void FuelAwarded ( float fInitialFuel, float fFuel );
	void OnEscapeAction ( );
	void eventSelectGalaxyItem ( );
	void CloseUI ( );
	void ExitPlanet ( );
	void CloseScan ( );
	void Scan ( );
	void ExitGalaxyMap ( unsigned long bForcedExit );
	void SaveCurrentGalaxyLocation ( struct FVector vLoc );
	void SaveGalaxyState ( unsigned char eState );
	void eventInitialize ( );
	void SetLTriggerLabel ( unsigned long bShow, void* srText );
	void SetRTriggerLabel ( unsigned long bShow, void* srText );
	void eventBuyFuel ( );
	bool eventHandleInputEvent ( unsigned char nEvent, float fValue );
	void eventInitializePlanetTags ( int nNumTags );
	void eventHidePlanetPanel ( );
	void eventDisplayPlanetPanel ( class UBioPlanet* oPlanet, unsigned long bStartOnMission );
	void eventSetSelectorState ( int nIndex, unsigned long bVisible, int nType, int nDisplay, int nPctVisited, void* srName, struct FString* sText );
	void eventSetTitleStrings ( void* srTitle, int nPercentDiscovered );
	void eventTravelPrompt ( );
	void TravelConfirm ( unsigned long bAPressed, int nContext );
	void eventUpdate ( float fDeltaT );
	void eventOnClose ( );
	void eventOnStart ( );
	void OnCallbackEvent ( );
};

UClass* UBioSFHandler_GalaxyMap::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_PCGalaxyMap
// 0x0020 (0x04D4 - 0x04B4)
class UBioSFHandler_PCGalaxyMap : public UBioSFHandler_GalaxyMap
{
public:
	struct FSFXUIControlState                          PrimaryAction;                                    		// 0x04B4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FSFXUIControlState                          EscapeAction;                                     		// 0x04C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	void*                                              ActionTokenString;                                		// 0x04CC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	unsigned long                                      bMoveToMouse : 1;                                 		// 0x04D0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bMouseMovementEnabled : 1;                        		// 0x04D0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bActionTextVisible : 1;                         		// 0x04D0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1613 ];

		return pClassPointer;
	};

	void AS_SetPCEscapeAction ( struct FString sText );
	void AS_SetPCPrimaryAction ( struct FString sText );
	void eventSetPCEscapeAction ( unsigned long bVisible );
	void eventSetPCPrimaryAction ( unsigned long bVisible );
	void AllowMouseMovement ( unsigned long bAllow );
	void PerformEscapeAction ( );
	void PerformPrimaryAction ( );
	void RepeatBuyFuel ( );
	void eventBuyFuel ( );
	bool eventHandleInputEvent ( unsigned char nEvent, float fValue );
};

UClass* UBioSFHandler_PCGalaxyMap::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_MainMenu
// 0x0044 (0x02D1 - 0x028D)
class UBioSFHandler_MainMenu : public USFXGUIMovieLegacyAdapter
{
public:
	struct FName                                       ConnectionMessageBoxId;                           		// 0x0290 (0x0008) [0x0000000000000000]              
	class USFXOnlineComponentUI*                       m_BlazeUI;                                        		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              srDemo;                                           		// 0x029C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srCerb_ActivateCerb;                              		// 0x02A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srCerb_ConnectTo;                                 		// 0x02A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srCerb_ConnectingToCerb;                          		// 0x02A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srCerb_ConnectedToCerb;                           		// 0x02AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srNotificationOriginSignin;                       		// 0x02B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srFriendBeatMe;                                   		// 0x02B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srFriendBeatByMe;                                 		// 0x02B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fTimeSinceLastPendingLoadMessageCheck;            		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fPendingLoadMessageCheckThreshold;                		// 0x02C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USFXGUI_MainMenu_RightComputer*              MessagingComputer;                                		// 0x02C4 (0x0004) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class USFXGUI_MainMenu_RTT*                        MenuComputer;                                     		// 0x02C8 (0x0004) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bEARegistrationScreenVisible : 1;                 		// 0x02CC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bConnectButtonVisible : 1;                        		// 0x02CC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bProcessedRankChanges : 1;                        		// 0x02CC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      m_CerbConnectState;                               		// 0x02D0 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1614 ];

		return pClassPointer;
	};

	void ProcessRankChangeNotifications ( );
	void eventUpdate ( float fDeltaT );
	void OutputMessages ( );
	void SetEnabled ( unsigned long bVal );
	void MainMenu_FailImageAssets ( );
	bool eventHandleInputEvent ( unsigned char nEventID, float fValue );
	void OnMessagingComputerConnectButton ( );
	void SetConnectButtonState ( struct FString sMessage, unsigned long bVisible );
	void eventCerberusConnect ( unsigned char connectMode );
	void OnEANetworkingVisibilityChange ( unsigned long bNewValue );
	void OnRankMessageReceived ( TArray< struct FRankBypassNotification > RankBypassNotifications );
	void RequestAdditionalNetworkMessages ( );
	void ClearDisconnectedTickerMessages ( );
	void AddDisconnectedTickerMessages ( );
	void SetOnlineState ( unsigned char eState );
	void RemoveConnectingMessageBox ( );
	void UpdateConnectingMessageBox ( void* srMessage );
	void QueueConnectingMessageBox ( void* srMessage );
	void CloseMessagingComputer ( );
	void OpenMessagingComputer ( );
	void OpenMenuComputer ( );
	void AddTickerMessage ( unsigned char Type, struct FString MessageData, int nDLC_ID, int ServerID );
	void AddDownloadPromtMessageItem ( struct FString i_sTitle, struct FString i_sInfo, struct FString i_sImage, unsigned char Type, int nDLC_ID, int ServerID );
	void AddNetworkImageMessageItem ( struct FString i_sTitle, struct FString i_sInfo, struct FString i_sImage, unsigned char Type, int nDLC_ID, int ServerID );
	void OnDisplayNotification ( unsigned char Type, struct FString MessageData, struct FString Title, struct FString Image, int DLC_ID, int ServerID );
	void CloseEANetworking ( );
	void ClearNotifications ( TArray< unsigned char > MessageTypesToClear );
	void ClearAllConnectedNotifications ( );
	void PrevCerberusItem ( );
	void NextCerberusItem ( );
	void InitCerberus ( );
	bool eventIsFromGameEntryFlow ( );
	void OnPanelRemoved ( );
	void OnMessagingSystemReady ( );
	void OnPanelAdded ( );
};

UClass* UBioSFHandler_MainMenu::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_PCMainMenu
// 0x0000 (0x02D1 - 0x02D1)
class UBioSFHandler_PCMainMenu : public UBioSFHandler_MainMenu
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1615 ];

		return pClassPointer;
	};

	void ProcessRankChangeNotifications ( );
	void eventUpdate ( float fDeltaT );
	void OutputMessages ( );
	void SetEnabled ( unsigned long bVal );
	void MainMenu_FailImageAssets ( );
	bool eventHandleInputEvent ( unsigned char nEventID, float fValue );
	void OnMessagingComputerConnectButton ( );
	void SetConnectButtonState ( struct FString sMessage, unsigned long bVisible );
	void eventCerberusConnect ( unsigned char connectMode );
	void OnEANetworkingVisibilityChange ( unsigned long bNewValue );
	void OnRankMessageReceived ( TArray< struct FRankBypassNotification > RankBypassNotifications );
	void RequestAdditionalNetworkMessages ( );
	void ClearDisconnectedTickerMessages ( );
	void AddDisconnectedTickerMessages ( );
	void SetOnlineState ( unsigned char eState );
	void RemoveConnectingMessageBox ( );
	void UpdateConnectingMessageBox ( void* srMessage );
	void QueueConnectingMessageBox ( void* srMessage );
	void CloseMessagingComputer ( );
	void OpenMessagingComputer ( );
	void OpenMenuComputer ( );
	void AddTickerMessage ( unsigned char Type, struct FString MessageData, int nDLC_ID, int ServerID );
	void AddDownloadPromtMessageItem ( struct FString i_sTitle, struct FString i_sInfo, struct FString i_sImage, unsigned char Type, int nDLC_ID, int ServerID );
	void AddNetworkImageMessageItem ( struct FString i_sTitle, struct FString i_sInfo, struct FString i_sImage, unsigned char Type, int nDLC_ID, int ServerID );
	void OnDisplayNotification ( unsigned char Type, struct FString MessageData, struct FString Title, struct FString Image, int DLC_ID, int ServerID );
	void CloseEANetworking ( );
	void ClearNotifications ( TArray< unsigned char > MessageTypesToClear );
	void ClearAllConnectedNotifications ( );
	void PrevCerberusItem ( );
	void NextCerberusItem ( );
	void InitCerberus ( );
	bool eventIsFromGameEntryFlow ( );
	void OnPanelRemoved ( );
	void OnMessagingSystemReady ( );
	void OnPanelAdded ( );
};

UClass* UBioSFHandler_PCMainMenu::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_MessageBox
// 0x005F (0x02EC - 0x028D)
class UBioSFHandler_MessageBox : public USFXGUIMovieLegacyAdapter
{
public:
	struct FScriptDelegate                             __InputCallback__Delegate;                        		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateCallback__Delegate;                       		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateCallbackEx__Delegate;                     		// 0x02A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ChoiceDialogCallback__Delegate;                 		// 0x02B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __WeaponChoiceCallback__Delegate;                 		// 0x02C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nInputCallbackContext;                            		// 0x02CC (0x0004) [0x0000000000000000]              
	float                                              m_fRScrollValue;                                  		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fHintTimeRemaining;                             		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              WeaponPickupUITitle;                              		// 0x02D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              WeaponPickupAddToInventoryText;                   		// 0x02DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              WeaponPickupOpenInventoryText;                    		// 0x02E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              WeaponPickupEquipText;                            		// 0x02E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bHandleInput : 1;                                 		// 0x02E8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowMouse : 1;                                   		// 0x02E8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bIsModal : 1;                                   		// 0x02E8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bForcePlayersOnly : 1;                          		// 0x02E8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bInitialPlayersOnly : 1;                        		// 0x02E8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bCached : 1;                                    		// 0x02E8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bForceVisible : 1;                              		// 0x02E8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bDisplayingHint : 1;                            		// 0x02E8 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bCurrentlyActive : 1;                           		// 0x02E8 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bPausedPriorToWeaponChoice : 1;                 		// 0x02E8 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1616 ];

		return pClassPointer;
	};

	void AS_ShowWeaponChoiceDialog ( unsigned long bSkipTransition );
	void AS_SetWeaponChoiceDialogOptions ( struct FString sOption1, int nOption1ID, struct FString sOption2, int nOption2ID, struct FString sOption3, int nOption3ID );
	void AS_SetWeaponChoiceDisplay ( struct FString sTitle, struct FString sDesc, struct FString sIconResource, int nIconIndex );
	void eventAS_ShowChoiceDialog ( unsigned long bSkipTransition );
	void eventAS_SetChoiceDialogOptions ( struct FString sMessage, struct FString sCancelText, struct FString srOption1, int nOption1ID, unsigned long bOption1Enabled, struct FString sOption2, int nOption2ID, unsigned long bOption2Enabled, struct FString sOption3, int nOption3ID, unsigned long bOption3Enabled );
	void eventAS_ShowHintMessage ( struct FString sMessage, int nPosition );
	void eventAS_ShowMessageBox ( struct FString sMessage, struct FString sAText, struct FString sBText, unsigned long bNoFade, int nIconSet, int nIconIndex, int nSkinType, int nTextAlign );
	void eventAS_HideMessageBox ( unsigned long bSkipFade );
	void WeaponChoiceSelected ( int nChoice );
	void CloseWeaponChoice ( );
	void eventShowWeaponChoiceDialogEx ( struct FString sTitle, struct FString sDesc, struct FString sIconResource, int nIconIndex, struct FString sOption1, int nOption1ID, struct FString sOption2, int nOption2ID, struct FString sOption3, int nOption3ID );
	void eventShowWeaponChoiceDialog ( void* srTitle, void* srDesc, struct FString sIconResource, int nIconIndex, void* srOption1, int nOption1ID, void* srOption2, int nOption2ID, void* srOption3, int nOption3ID );
	void SetWeaponChoiceResultCallback ( struct FScriptDelegate oCallback );
	void eventShowWeaponChoiceDialogForClass ( class UClass* oWeapClass );
	void ShowWeaponPickupUIForWeapon ( class UClass* oWeapClass, struct FScriptDelegate oCallback );
	void CloseChoice ( );
	void CancelChoice ( );
	void ChoiceSelected ( int nChoiceID );
	void eventShowChoiceDialogEx ( struct FString sMessage, struct FString sCancelText, struct FString sOption1, int nOption1ID, unsigned long bOption1Enabled, struct FString sOption2, int nOption2ID, unsigned long bOption2Enabled, struct FString sOption3, int nOption3ID, unsigned long bOption3Enabled );
	void eventShowChoiceDialog ( void* srMessage, void* srCancelText, void* srOption1, int nOption1ID, unsigned long bOption1Enabled, void* srOption2, int nOption2ID, unsigned long bOption2Enabled, void* srOption3, int nOption3ID, unsigned long bOption3Enabled );
	void SetChoiceResultCallback ( struct FScriptDelegate oCallback );
	void InvokeNativeCallback ( unsigned long bAPressed );
	void InvokeCallback ( unsigned long bAPressed );
	void MessageBoxRemoved ( );
	void MessageBoxBPressed ( );
	void MessageBoxAPressed ( );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void OnPanelAdded ( );
	void DisplayHintMessage ( void* srMessage, int nIcon, unsigned char ePosition );
	void HideMessageBox ( unsigned long bRemove, unsigned long bSkipFade );
	void DisplayMessageBoxEx ( struct FString sMessage, struct FBioMessageBoxOptionalParams* stParams );
	void DisplayMessageBox ( void* srMessage, struct FBioMessageBoxOptionalParams* stParams );
	void SetUpdateDelegate ( struct FScriptDelegate pDelegate );
	void SetInputDelegate ( struct FScriptDelegate pDelegate, int nContext );
	void WeaponChoiceCallback ( class UBioSFHandler_MessageBox* oMsgBox, int nChoiceID );
	void ChoiceDialogCallback ( class UBioSFHandler_MessageBox* oMsgBox, int nChoiceID, unsigned long bCancelled );
	void UpdateCallbackEx ( float fDeltaT, class UObject* oMsgBox );
	void UpdateCallback ( float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox );
	void InputCallback ( unsigned long bAPressed, int nContext );
};

UClass* UBioSFHandler_MessageBox::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_PCMessageBox
// 0x0000 (0x02EC - 0x02EC)
class UBioSFHandler_PCMessageBox : public UBioSFHandler_MessageBox
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1617 ];

		return pClassPointer;
	};

	void AS_ShowWeaponChoiceDialog ( unsigned long bSkipTransition );
	void AS_SetWeaponChoiceDialogOptions ( struct FString sOption1, int nOption1ID, struct FString sOption2, int nOption2ID, struct FString sOption3, int nOption3ID );
	void AS_SetWeaponChoiceDisplay ( struct FString sTitle, struct FString sDesc, struct FString sIconResource, int nIconIndex );
	void eventAS_ShowChoiceDialog ( unsigned long bSkipTransition );
	void eventAS_SetChoiceDialogOptions ( struct FString sMessage, struct FString sCancelText, struct FString srOption1, int nOption1ID, unsigned long bOption1Enabled, struct FString sOption2, int nOption2ID, unsigned long bOption2Enabled, struct FString sOption3, int nOption3ID, unsigned long bOption3Enabled );
	void eventAS_ShowHintMessage ( struct FString sMessage, int nPosition );
	void eventAS_ShowMessageBox ( struct FString sMessage, struct FString sAText, struct FString sBText, unsigned long bNoFade, int nIconSet, int nIconIndex, int nSkinType, int nTextAlign );
	void eventAS_HideMessageBox ( unsigned long bSkipFade );
	void WeaponChoiceSelected ( int nChoice );
	void CloseWeaponChoice ( );
	void eventShowWeaponChoiceDialogEx ( struct FString sTitle, struct FString sDesc, struct FString sIconResource, int nIconIndex, struct FString sOption1, int nOption1ID, struct FString sOption2, int nOption2ID, struct FString sOption3, int nOption3ID );
	void eventShowWeaponChoiceDialog ( void* srTitle, void* srDesc, struct FString sIconResource, int nIconIndex, void* srOption1, int nOption1ID, void* srOption2, int nOption2ID, void* srOption3, int nOption3ID );
	void SetWeaponChoiceResultCallback ( struct FScriptDelegate oCallback );
	void eventShowWeaponChoiceDialogForClass ( class UClass* oWeapClass );
	void ShowWeaponPickupUIForWeapon ( class UClass* oWeapClass, struct FScriptDelegate oCallback );
	void CloseChoice ( );
	void CancelChoice ( );
	void ChoiceSelected ( int nChoiceID );
	void eventShowChoiceDialogEx ( struct FString sMessage, struct FString sCancelText, struct FString sOption1, int nOption1ID, unsigned long bOption1Enabled, struct FString sOption2, int nOption2ID, unsigned long bOption2Enabled, struct FString sOption3, int nOption3ID, unsigned long bOption3Enabled );
	void eventShowChoiceDialog ( void* srMessage, void* srCancelText, void* srOption1, int nOption1ID, unsigned long bOption1Enabled, void* srOption2, int nOption2ID, unsigned long bOption2Enabled, void* srOption3, int nOption3ID, unsigned long bOption3Enabled );
	void SetChoiceResultCallback ( struct FScriptDelegate oCallback );
	void InvokeNativeCallback ( unsigned long bAPressed );
	void InvokeCallback ( unsigned long bAPressed );
	void MessageBoxRemoved ( );
	void MessageBoxBPressed ( );
	void MessageBoxAPressed ( );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void OnPanelAdded ( );
	void DisplayHintMessage ( void* srMessage, int nIcon, unsigned char ePosition );
	void HideMessageBox ( unsigned long bRemove, unsigned long bSkipFade );
	void DisplayMessageBoxEx ( struct FString sMessage, struct FBioMessageBoxOptionalParams* stParams );
	void DisplayMessageBox ( void* srMessage, struct FBioMessageBoxOptionalParams* stParams );
	void SetUpdateDelegate ( struct FScriptDelegate pDelegate );
	void SetInputDelegate ( struct FScriptDelegate pDelegate, int nContext );
	void WeaponChoiceCallback ( class UBioSFHandler_MessageBox* oMsgBox, int nChoiceID );
	void ChoiceDialogCallback ( class UBioSFHandler_MessageBox* oMsgBox, int nChoiceID, unsigned long bCancelled );
	void UpdateCallbackEx ( float fDeltaT, class UObject* oMsgBox );
	void UpdateCallback ( float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox );
	void InputCallback ( unsigned long bAPressed, int nContext );
};

UClass* UBioSFHandler_PCMessageBox::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_NewCharacter
// 0x0215 (0x04A2 - 0x028D)
class UBioSFHandler_NewCharacter : public USFXGUIMovieLegacyAdapter
{
public:
	struct FMorphHeadSaveRecord                        DefaultFemaleME2SaveProperties;                   		// 0x0290 (0x0080) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sMaleName;                                      		// 0x0310 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sFemaleName;                                    		// 0x031C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     sImportedFaceCode;                                		// 0x0328 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sCustomFaceCode;                                  		// 0x0334 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          lstClassAnimSetRefs;                              		// 0x0340 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            lstCharacterClasses;                              		// 0x034C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            lstSpawnableClasses;                              		// 0x0358 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBonusTalentData >                  BonusTalents;                                     		// 0x0364 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FBonusTalentData >                  UnlockedBonusTalents;                             		// 0x0370 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      NewGameStartingCodexEntries;                      		// 0x037C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           MalePregeneratedHeadCodes;                        		// 0x0388 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           FemalePregeneratedHeadCodes;                      		// 0x0394 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultFemaleME2HeadCode;                         		// 0x03A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCloseCallback__Delegate;                      		// 0x03AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FTemplateGenderPair                         lstTemplates[ 0x3 ];                              		// 0x03B8 (0x0048) [0x0000000000000000]              
	struct FName                                       m_nmAllianceComputerPleaseLogin;                  		// 0x0400 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmClassAnimSet;                                 		// 0x0408 (0x0008) [0x0000000000000000]              
	float                                              fLookAtUpDownValue;                               		// 0x0410 (0x0004) [0x0000000000000000]              
	float                                              fLookAtLeftRightValue;                            		// 0x0414 (0x0004) [0x0000000000000000]              
	void*                                              srCustomMaleName;                                 		// 0x0418 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srCustomFemaleName;                               		// 0x041C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srNewCharConfirm;                                 		// 0x0420 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srNewCharCancel;                                  		// 0x0424 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srNewCharQuestion;                                		// 0x0428 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srFacialCategoryDescription;                      		// 0x042C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srConfirm;                                        		// 0x0430 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srSetName;                                        		// 0x0434 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srSetCode;                                        		// 0x0438 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srFailedToFindFaceCode;                           		// 0x043C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nDefaultOrigin;                                 		// 0x0440 (0x0004) [0x0000000000000000]              
	int                                                m_nDefaultNotoriety;                              		// 0x0444 (0x0004) [0x0000000000000000]              
	int                                                m_nDefaultClass;                                  		// 0x0448 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srNameTitle;                                      		// 0x044C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nMaxNameLength;                                   		// 0x0450 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srCodeTitle;                                      		// 0x0454 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nMaxCodeLength;                                   		// 0x0458 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInfoScrollSpeed;                               		// 0x045C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              NoSaveDevice;                                     		// 0x0460 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              ConfirmSelectDevice;                              		// 0x0464 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              CancelSelectDevice;                               		// 0x0468 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class USFXMorphFaceFrontEndDataSource*             MaleDataSource;                                   		// 0x046C (0x0004) [0x0000000000000000]              
	class USFXMorphFaceFrontEndDataSource*             FemaleDataSource;                                 		// 0x0470 (0x0004) [0x0000000000000000]              
	class URvrClientEffectInterface*                   CE_SchematicEffect;                               		// 0x0474 (0x0004) [0x0000000000000000]              
	class UAnimSet*                                    SchematicAnimSet;                                 		// 0x0478 (0x0004) [0x0000000000000000]              
	class USFXGUIHelper_ConsoleKeyboard*               oKeyboard;                                        		// 0x047C (0x0004) [0x0000000000000000]              
	int                                                CurrentPregeneratedHeadIndex;                     		// 0x0480 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioMorphFace*                               CurrentMorphFace;                                 		// 0x0484 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ImportedCharmSkill;                               		// 0x0488 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ImportedIntimidateSkill;                          		// 0x048C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentScarIndex;                                 		// 0x0490 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioMorphFaceFrontEnd*                       m_oBioMorphFrontEnd;                              		// 0x0494 (0x0004) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bLookAtLeftRightNulling : 1;                      		// 0x0498 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLookAtUpDownNulling : 1;                         		// 0x0498 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bZoomedInOnFace : 1;                              		// 0x0498 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bOpenedFromMainMenu : 1;                          		// 0x0498 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bSpecialTriggerDeviceSelection : 1;             		// 0x0498 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bSkipCharacterCreation : 1;                       		// 0x0498 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bXboxStorageDeviceSelected : 1;                   		// 0x0498 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bMaleSelected : 1;                              		// 0x0498 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bStopScroll : 1;                                		// 0x0498 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      AssumeUIBlocking : 1;                             		// 0x0498 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bCustomShepard : 1;                             		// 0x0498 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bValidateImportedHead : 1;                        		// 0x0498 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bEnsureValidFaceCodeOnImport : 1;                 		// 0x0498 (0x0004) [0x0000000000004000] [0x00001000] ( CPF_Config )
	unsigned long                                      ImportedCosmeticSurgery : 1;                      		// 0x0498 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned char                                      m_ePlotChoice;                                    		// 0x049C (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nDataOrigin;                                    		// 0x049D (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nCurrentTemplate;                               		// 0x049E (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nLastInitializedTemplate;                       		// 0x049F (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentLookAtTarget;                              		// 0x04A0 (0x0001) [0x0000000000000000]              
	unsigned char                                      NextLookAtTarget;                                 		// 0x04A1 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1618 ];

		return pClassPointer;
	};

	void SetDefaultFemaleME2SaveProperties ( struct FMorphHeadSaveRecord* InProperties );
	void CalculateCurrentScar ( );
	void AS_InitializeScreen ( );
	int GetBestBonusTalentID ( struct FName ClassLabel );
	unsigned char GetGender ( );
	void UpdateLookAtTarget ( );
	void Callback_NoDevice ( unsigned long bAPressed, int Context );
	void OnDeviceSelectionComplete ( unsigned long bWasSuccessful, unsigned long bWasBlocked );
	void OnCreatePlaceholderCareer ( struct FSFXSaveGameCommandEventArgs Args );
	void OnUIUnblock ( unsigned long Unblocked );
	void ChooseStorageDevice ( );
	int GetSpawnableClassIndexFromClass ( class UClass* aClass );
	void eventProcessExternalStates ( class ABioWorldInfo* BWI );
	bool IsDefaultME2Player ( struct FPlayerSaveRecord* InRecord );
	void eventTriggerClassOverlay ( );
	void SelectPreviousPregeneratedHead ( );
	void SelectNextPregeneratedHead ( );
	void InsertDefaultPregeneratedHead ( struct FString InCode );
	void ConfirmDeviceSelection_Fallback ( unsigned long bAPressed, int nContext );
	void OnDeviceSelectionComplete_Fallback ( unsigned long bWasSuccessful, unsigned long bWasBlocked );
	void ChooseStorageDevice_Fallback ( );
	void AS_ConfirmCharacterCreationEnd ( unsigned long bAPressed );
	void ConfirmCharacterCreationEnd ( unsigned long bAPressed, int nContext );
	void ConfirmComplete ( );
	void ClearModels ( );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void PopulateCustomFaceList ( );
	void HandleSliderChange ( int nCategory, int nSlider, int nValue );
	void UpdateCurrentMorphAppearance ( );
	void UpdateUIWorldMorphFace ( class UObject* InData );
	void DoCategoryReset ( int nCategory );
	void SetSliderPositions ( );
	void SetCustomModel ( );
	void ApplyManualScar ( class UObject* InData );
	void Update3DModel ( unsigned char nTemplate, class ABioPawn* SwapoutPawn );
	void Update3DModelState ( unsigned char nTemplate, class ABioPawn* PrevPawn );
	void SetPlotChoices ( );
	void FinalCommit ( );
	void RefitBonusTalent ( struct FName BonusTalent );
	void GetAllUnlockedBonusTalentInfo ( TArray< struct FBonusTalentData >* aUnlockedBonusTalentInfo );
	void UpdateBonusTalentList ( );
	void SetSquadMemberPlotChoice ( int nChoice );
	void SetGameTypeSettings ( int GameType );
	void SetPlayerCharacter ( TArray< struct FString >* playerSettings );
	void SetupIconicCharacter ( TArray< struct FString >* lstSettings );
	void UpdateCustomClassChoice ( class UClass* PlayerClass, int Row );
	void UpdateCustomClassList ( );
	void SetupSummary ( );
	void ClearCurrentCareer ( );
	void SetCustomName ( struct FString sMaleName, struct FString sFemaleName );
	void UpdateCode ( );
	void ApplyNewCode ( struct FString sInputCode );
	void KeyboardCodeEntryComplete ( unsigned long bOK, struct FString sCode );
	void KeyboardNameEntryComplete ( unsigned long bOK, struct FString sName );
	void Update ( float fDeltaT );
	void ResetLookAt ( );
	void HandleLookAtLeftRight ( float fValue );
	void HandleLookAtUpDown ( float fValue );
	void HandleRotate ( float fValue );
	void ScrollText ( float fValue );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void SetUIPawnCasual ( unsigned long bCasual );
	void HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments );
	void DisableSchematicAnim ( class UObject* InData );
	void EnableSchematicAnim ( class UObject* InData );
	void SetBackgroundMaterial ( class UMaterialInterface* Material );
	void SetSchematicResources ( class URvrClientEffectInterface* CE_NewSchematicEffect, class UAnimSet* NewSchematicAnimSet );
	void SetClassClientEffects ( class URvrClientEffectInterface* CE_FullBiotic, class URvrClientEffectInterface* CE_HalfBiotic, class URvrClientEffectInterface* CE_OmniTool );
	void AddKismetNamedObject ( struct FName KismetVariableName, class UObject* ObjectValue );
	void SetMaleSelected ( unsigned long bSelected );
	class UClass* eventGetCharacterClassByName ( struct FName nmClass );
	void ClearEffects ( );
	void Update3DModelByClass ( struct FName nmClass, class ABioPawn* pTemplate, unsigned char nTemplate, unsigned long bUpdate, unsigned long bForce, unsigned long bAttachVFXandUpdatePose );
	class ABioPawn* eventGenderTemplatePawn ( unsigned char BNCT );
	void SpawnPawns ( );
	void EnsureMICs ( class AActor* InActor );
	void eventOnClose ( );
	void eventOnStart ( );
	void Setup3DModel ( );
	void SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate );
	void OnCloseCallback ( );
};

UClass* UBioSFHandler_NewCharacter::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_PCNewCharacter
// 0x0016 (0x04B8 - 0x04A2)
class UBioSFHandler_PCNewCharacter : public UBioSFHandler_NewCharacter
{
public:
	float                                              fScrollValueMouse;                                		// 0x04A4 (0x0004) [0x0000000000000000]              
	float                                              fLookAtThresholdAhead;                            		// 0x04A8 (0x0004) [0x0000000000000000]              
	float                                              fLookAtThreshold;                                 		// 0x04AC (0x0004) [0x0000000000000000]              
	float                                              fLookAtLimit;                                     		// 0x04B0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bHeadLookEnabled : 1;                             		// 0x04B4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1619 ];

		return pClassPointer;
	};

	void UpdateLookAtTarget ( );
	void eventUpdate ( float fDeltaT );
	void HandleLookAtLeftRight ( float fValue );
	void HandleLookAtUpDown ( float fValue );
	void HandleLookAtLeftRightMouse ( float fValue );
	void HandleLookAtUpDownMouse ( float fValue );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments );
	struct FString ClipboardPaste ( );
	void ClipboardCopy ( struct FString sString );
};

UClass* UBioSFHandler_PCNewCharacter::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_PCOptions
// 0x005A (0x03C8 - 0x036E)
class UBioSFHandler_PCOptions : public UBioSFHandler_Options
{
public:
	TArray< struct FKeyBind >                          KeyBinds;                                         		// 0x0370 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGuiBind >                          AliasMap;                                         		// 0x037C (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FNonBindableKeyDefinition >         UnBindableKeys;                                   		// 0x0388 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	void*                                              KeyHasBeenBound;                                  		// 0x0394 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              KeyHasBeenUnbound;                                		// 0x0398 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              ResetPCBindingsText;                              		// 0x039C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              ConfirmResetPCBindingsText;                       		// 0x03A0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              CancelResetPCBindingsText;                        		// 0x03A4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              CannotBindConstantKey;                            		// 0x03A8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              DisplayChangeText;                                		// 0x03AC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              ConfirmDisplayChangeText;                         		// 0x03B0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              CancelDisplayChangeText;                          		// 0x03B4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                DisplayChangeTimeoutSeconds;                      		// 0x03B8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UBioSFHandler_MessageBox*                    ConfirmDisplayMessageBox;                         		// 0x03BC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CaptureBindIndex;                                 		// 0x03C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CaptureBindNumber;                                		// 0x03C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1620 ];

		return pClassPointer;
	};

	void RevertSettings ( );
	void ApplySettings ( );
	bool WillChangeDisplay ( );
	void ResetPCToDefaults ( TArray< int >* lstOptsToReset );
	void InitPCBindings ( unsigned long Defaults );
	void ApplyPCBindings ( );
	void RefreshGUIBindings ( );
	bool ProcessInput ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	void Callback_ConfirmDisplayChange ( unsigned long bAPressed, int Context );
	void Callback_DisplayChangeTimeout ( );
	void ConfirmDisplayChange ( );
	void SaveAndExit ( );
	void ResetPCBindings ( );
	void CaptureNewBinding ( int BindIndex, int BindNumber );
	void BuildControlBindingList ( class UGFxValue* optionData );
	void Callback_ResetPCToDefaults ( unsigned long bAPressed, int Context );
	void Helper_DoPCBindingReset ( );
	void Callback_ResetPCBindings ( unsigned long bAPressed, int Context );
	void ResetToDefaults ( struct FString sPackedIDs );
	void MovieLoaded ( );
	void OnPanelAdded ( );
};

UClass* UBioSFHandler_PCOptions::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_XBoxMessageBox
// 0x000B (0x0298 - 0x028D)
class UBioSFHandler_XBoxMessageBox : public USFXGUIMovieLegacyAdapter
{
public:
	int                                                nSelectedButton;                                  		// 0x0290 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMessageBoxVisible : 1;                           		// 0x0294 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1621 ];

		return pClassPointer;
	};

	void DisplayMessageBox ( void* srTitle, void* srMessage, unsigned char nIcon, int nDefaultButton, TArray< void* >* srButtons );
};

UClass* UBioSFHandler_XBoxMessageBox::pClassPointer = NULL;

// Class SFXGame.BioSkillGame_Base_Handler
// 0x0057 (0x02E4 - 0x028D)
class UBioSkillGame_Base_Handler : public USFXGUIMovieLegacyAdapter
{
public:
	struct FString                                     m_sBackgroundMusic;                               		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSuccessCallback__Delegate;                    		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFailureCallback__Delegate;                    		// 0x02A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCancelCallback__Delegate;                     		// 0x02B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       m_sTecPlotStateName;                              		// 0x02C0 (0x0008) [0x0000000000000000]              
	float                                              m_fTecTimeMultiplier;                             		// 0x02C8 (0x0004) [0x0000000000000000]              
	int                                                m_nStartingResource;                              		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                m_nPhase2Resource;                                		// 0x02D0 (0x0004) [0x0000000000000000]              
	int                                                m_nPhase2Time;                                    		// 0x02D4 (0x0004) [0x0000000000000000]              
	class UObject*                                     m_oDependent;                                     		// 0x02D8 (0x0004) [0x0000000000000000]              
	class ABioPawn*                                    m_oUsingPawn;                                     		// 0x02DC (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bRewardOnTimeFail : 1;                          		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bSuccessfulEndGame : 1;                         		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bCanceled : 1;                                  		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1622 ];

		return pClassPointer;
	};

	void Cancel ( );
	void ExIntGameOver ( unsigned long bGameWon, int nRemainingResource );
	void ExIntStartGame ( );
	void ExIntInitGame ( );
	void ExIntCancelGame ( );
	void ExIntStartLoopingSound ( );
	void ExIntStopLoopingSound ( );
	void ExIntInterruptGame ( );
	void OnCancelCallback ( int n_TimeTaken );
	void OnFailureCallback ( int n_TimeTaken );
	void OnSuccessCallback ( int n_TimeTaken );
};

UClass* UBioSkillGame_Base_Handler::pClassPointer = NULL;

// Class SFXGame.BioSkillGame_Bypass_Handler
// 0x0024 (0x0308 - 0x02E4)
class UBioSkillGame_Bypass_Handler : public UBioSkillGame_Base_Handler
{
public:
	struct FVector                                     m_vRightInput;                                    		// 0x02E4 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vLeftInput;                                     		// 0x02F0 (0x000C) [0x0000000000000000]              
	int                                                m_nNumToSpawn;                                    		// 0x02FC (0x0004) [0x0000000000000000]              
	int                                                m_nPCBurnDown;                                    		// 0x0300 (0x0004) [0x0000000000000000]              
	int                                                m_nConsoleBurnDown;                               		// 0x0304 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1623 ];

		return pClassPointer;
	};

	void OnPanelAdded ( );
	void Update ( float fDeltaT );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
};

UClass* UBioSkillGame_Bypass_Handler::pClassPointer = NULL;

// Class SFXGame.BioSkillGame_Decryption_Handler
// 0x000C (0x02F0 - 0x02E4)
class UBioSkillGame_Decryption_Handler : public UBioSkillGame_Base_Handler
{
public:
	int                                                m_nPercentDanger;                                 		// 0x02E4 (0x0004) [0x0000000000000000]              
	int                                                m_nPercentGood;                                   		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              m_fSpeed;                                         		// 0x02EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1624 ];

		return pClassPointer;
	};

	void OnPanelAdded ( );
	void Update ( float fDeltaT );
	void onSelectPressed ( );
	void onRightPressed ( );
	void onLeftPressed ( );
	void onUpPressed ( );
	void onDownPressed ( );
};

UClass* UBioSkillGame_Decryption_Handler::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_EANetworking
// 0x00E3 (0x0370 - 0x028D)
class USFXSFHandler_EANetworking : public USFXGUIMovieLegacyAdapter
{
public:
	struct FScriptDelegate                             __GuiCallback_SubmitIntroPage__Delegate;          		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitNucleusLogin__Delegate;       		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitMessageBox__Delegate;         		// 0x02A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitRedeemCodeConfirmation__Delegate;		// 0x02B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitCreateNucleusAccount__Delegate;		// 0x02C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitTermsOfService__Delegate;     		// 0x02CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitNucleusWelcomeMessage__Delegate;		// 0x02D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitCerberusIntro__Delegate;      		// 0x02E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitRedeemCode__Delegate;         		// 0x02F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitCerberusWelcomeMessage__Delegate;		// 0x02FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitCreateNucleusAccountEx__Delegate;		// 0x0308 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitEmailPasswordMismatch__Delegate;		// 0x0314 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitAccountDemographics__Delegate;		// 0x0320 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitParentEmail__Delegate;        		// 0x032C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGFxScreenVisibilityChange__Delegate;          		// 0x0338 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXGUIHelper_ConsoleKeyboard*               m_oKeyboard;                                      		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              m_srKeyboardEmailTitle;                           		// 0x0348 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srKeyboardPasswordTitle;                        		// 0x034C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCerberusCodeTitle;                            		// 0x0350 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxEmailLength;                                		// 0x0354 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxPasswordLength;                             		// 0x0358 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxCerberusCodeLength;                         		// 0x035C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srOk;                                           		// 0x0360 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	void*                                              m_srCancel;                                       		// 0x0364 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	void*                                              m_srConfirmCodeRedemptionTitle;                   		// 0x0368 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	void*                                              m_srConfirmCodeRedemptionText;                    		// 0x036C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1625 ];

		return pClassPointer;
	};

	void AS_SetActiveInputField ( struct FString sText );
	void GFxScreenVisibilityChange ( unsigned long bNewValue );
	void OnRedeemCodeConfirmationResult ( unsigned char eReturnEnum );
	void KeyboardEntryComplete ( unsigned long bOK, struct FString sText );
	void EnterCode ( struct FString sDefault );
	void EnterPassword ( struct FString sDefault );
	void EnterEmail ( struct FString sDefault );
	void eventOnPanelRemoved ( );
	void eventOnPanelAdded ( );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void onExternalInitialize ( );
	void ClearDelegates ( );
	void SubmitCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, unsigned long bSubmit );
	void SubmitCerberusWelcomeMessage ( );
	void SubmitParentEmail ( unsigned long bContinue, struct FString ParentEmail );
	void SubmitAccountDemographics ( unsigned long bContinue, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode );
	void SubmitRedeemCode ( unsigned long bContinue, struct FString i_sCode );
	void SubmitCerberusIntro ( unsigned char eReturnCode );
	void SubmitNucleusWelcomeMessage ( );
	void SubmitTermsOfService ( unsigned long bAccept );
	void SubmitCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bSubmit );
	void SubmitEmailPasswordMismatch ( struct FString email, struct FString Password, unsigned char eReturnCode );
	void SubmitMessageBox ( unsigned char eReturnEnum );
	void SubmitNucleusLogin ( struct FString email, struct FString Password, unsigned char eReturnCode );
	void SubmitIntroPage ( unsigned long bContinue );
	void OnGFxScreenVisibilityChange ( unsigned long bNewValue );
	void GuiCallback_SubmitParentEmail ( unsigned long bContinue, struct FString ParentEmail );
	void GuiCallback_SubmitAccountDemographics ( unsigned long bContinue, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode );
	void GuiCallback_SubmitEmailPasswordMismatch ( struct FString email, struct FString Password, unsigned char eReturnCode );
	void GuiCallback_SubmitCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, unsigned long bSubmit );
	void GuiCallback_SubmitCerberusWelcomeMessage ( );
	void GuiCallback_SubmitRedeemCode ( unsigned long bContinue, struct FString i_sCode );
	void GuiCallback_SubmitCerberusIntro ( unsigned char eReturnCode );
	void GuiCallback_SubmitNucleusWelcomeMessage ( );
	void GuiCallback_SubmitTermsOfService ( unsigned long bAccept );
	void GuiCallback_SubmitCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bSubmit );
	void GuiCallback_SubmitRedeemCodeConfirmation ( unsigned char eReturnEnum );
	void GuiCallback_SubmitMessageBox ( unsigned char eReturnEnum );
	void GuiCallback_SubmitNucleusLogin ( struct FString email, struct FString Password, unsigned char eReturnCode );
	void GuiCallback_SubmitIntroPage ( unsigned long bContinue );
	void ShowParentEmail ( );
	void ShowAccountDemographics ( TArray< struct FString > m_CountryCodeList, TArray< struct FString > m_CountryDisplayList );
	void ShowEmailPasswordMismatch ( struct FString email, struct FString Password );
	void ShowCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, TArray< struct FString > m_CountryCodeList, TArray< struct FString > m_CountryDisplayList );
	void ShowCerberusWelcomeMessage ( );
	void ShowRedeemCode ( );
	void ShowCerberusIntro ( );
	void ShowNucleusWelcomeMessage ( );
	void ShowTermsOfService ( struct FString i_sTermsOfService, struct FString i_sPrivacyPolicy, unsigned long bTOSChanged );
	void ShowCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bUnderage );
	void eventShowRedeemCodeConfirmation ( );
	void ShowMessageBox ( struct FString sTitle, struct FString sMessage, struct FString sButton1Text, struct FString sButton2Text, struct FString sButton3Text );
	void ShowNucleusLogin ( struct FString email, struct FString Password, int eScreenState );
	void ShowIntroPage ( );
};

UClass* USFXSFHandler_EANetworking::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_HUD
// 0x0441 (0x06CE - 0x028D)
class USFXSFHandler_HUD : public USFXGUIMovieLegacyAdapter
{
public:
	struct FSFXHUDSquadMemberInfo                      m_oShepardInfo;                                   		// 0x0290 (0x0098) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXHUDSquadMemberInfo                      m_oHench1Info;                                    		// 0x0328 (0x0098) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXHUDSquadMemberInfo                      m_oHench2Info;                                    		// 0x03C0 (0x0098) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXMPTargetUIState                         MPTargetUIState[ 0x4 ];                           		// 0x0458 (0x0050) [0x0000000000000000]              
	struct FString                                     m_sStatusText;                                    		// 0x04A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sResistanceText;                                		// 0x04B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXHudDmgIndicatorPaths >          m_aDamageIndicatorPaths;                          		// 0x04C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    m_aDamageIndicatorAlphas;                         		// 0x04CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_nCurrentWeaponResource;                         		// 0x04D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            m_lstQueuedPOIStates;                             		// 0x04E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXHUDMiniNotification >           MiniNotifications;                                		// 0x04F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sShields;                                       		// 0x04FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sArmour;                                        		// 0x0508 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sBarrier;                                       		// 0x0514 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sHealth;                                        		// 0x0520 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sOverheat;                                      		// 0x052C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sNoAmmo;                                        		// 0x0538 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnNotificationCompleted__Delegate;              		// 0x0544 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXHUDResistances                          m_CurrentResistances;                             		// 0x0550 (0x0014) [0x0000000000000000]              
	struct FSFXHUDResistances                          m_ResistanceBarDisplayValues;                     		// 0x0564 (0x0014) [0x0000000000000000]              
	struct FSFXHUDNotification                         Notification;                                     		// 0x0578 (0x0010) [0x0000000000000000]              
	float                                              LastAmmoPulseTime;                                		// 0x0588 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pCurrentTarget;                                 		// 0x058C (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentBarCount;                               		// 0x0590 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentBarBackgroundX;                         		// 0x0594 (0x0004) [0x0000000000000000]              
	int                                                m_nNumMiniNotifications;                          		// 0x0598 (0x0004) [0x0000000000000000]              
	class ABioPlayerController*                        m_pPlayerController;                              		// 0x059C (0x0004) [0x0000000000000000]              
	class ABioBaseSquad*                               m_pPlayerSquad;                                   		// 0x05A0 (0x0004) [0x0000000000000000]              
	float                                              m_fEffectivelyZero;                               		// 0x05A4 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentWeaponIcon;                             		// 0x05A8 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentWeaponSpareAmmo;                        		// 0x05AC (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentClipAmmo;                               		// 0x05B0 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSinceLastWeaponUpdate;                     		// 0x05B4 (0x0004) [0x0000000000000000]              
	class AActor*                                      m_pCurrentDisplayTarget;                          		// 0x05B8 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentOverheatValue;                          		// 0x05BC (0x0004) [0x0000000000000000]              
	float                                              m_fMiniClipHeight;                                		// 0x05C0 (0x0004) [0x0000000000000000]              
	float                                              m_fMiniClipBaselineY;                             		// 0x05C4 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentGrenadeCount;                           		// 0x05C8 (0x0004) [0x0000000000000000]              
	float                                              m_fSuperRegenThreshold;                           		// 0x05CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fHealthShieldUpdateDelta;                       		// 0x05D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fDamageIndicatorAlphaUpdateDelta;               		// 0x05D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fLowHealthWarning;                              		// 0x05D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fWeaponUpdateInterval;                          		// 0x05DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fBarAnimRate;                                   		// 0x05E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fFullStatFadeTime;                              		// 0x05E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMiniNotificationAnimTime;                      		// 0x05E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMiniNotificationPadding;                       		// 0x05EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UGFxValue*                                   WeaponIcon;                                       		// 0x05F0 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   WeaponAmmo;                                       		// 0x05F4 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   WeaponClip;                                       		// 0x05F8 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   GrenadeAmmo;                                      		// 0x05FC (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   TargetName;                                       		// 0x0600 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   TargetStatus;                                     		// 0x0604 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   ButtonA;                                          		// 0x0608 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   TargetBackground;                                 		// 0x060C (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   HealthBar;                                        		// 0x0610 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   ArmourBar;                                        		// 0x0614 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   BioticBar;                                        		// 0x0618 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   ShieldBar;                                        		// 0x061C (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   ResistanceText;                                   		// 0x0620 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   ResistanceBar;                                    		// 0x0624 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   CenterStatus;                                     		// 0x0628 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   CenterStatusText;                                 		// 0x062C (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   OverheatIndicator;                                		// 0x0630 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   OverheatIndicatorTextAnim;                        		// 0x0634 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   OverheatIndicatorTextAnimText;                    		// 0x0638 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   PlayerPowerLeft;                                  		// 0x063C (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   PlayerPowerRight;                                 		// 0x0640 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   AmmoFull;                                         		// 0x0644 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   ActionIcon;                                       		// 0x0648 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   POI;                                              		// 0x064C (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   MPTargetBarMain;                                  		// 0x0650 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   MPTargetHitDisplay;                               		// 0x0654 (0x0004) [0x0000000000000000]              
	void*                                              m_srStatusBarrierText;                            		// 0x0658 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srStatusBleedoutText;                           		// 0x065C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srStatusHardenedShieldsText;                    		// 0x0660 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srStatusHeavyArmourText;                        		// 0x0664 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srStatusMinimalDamageText;                      		// 0x0668 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srStatusSuperRegenText;                         		// 0x066C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srShields;                                      		// 0x0670 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srArmour;                                       		// 0x0674 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srBarrier;                                      		// 0x0678 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srHealth;                                       		// 0x067C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srOverheat;                                     		// 0x0680 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srNoAmmo;                                       		// 0x0684 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srAmmoFull;                                     		// 0x0688 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCoverEnterAction;                             		// 0x068C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCoverClimbAction;                             		// 0x0690 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCoverMantleAction;                            		// 0x0694 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCover90RightAction;                           		// 0x0698 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCover90LeftAction;                            		// 0x069C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCoverSlipRightAction;                         		// 0x06A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCoverSlipLeftAction;                          		// 0x06A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCoverSwatRightAction;                         		// 0x06A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCoverSwatLeftAction;                          		// 0x06AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCoverGrabAction;                              		// 0x06B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srLadderUpAction;                               		// 0x06B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srLadderDownAction;                             		// 0x06B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srGapJumpAction;                                		// 0x06BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srAtlasSuitAction;                              		// 0x06C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nNotificationBodyLength;                        		// 0x06C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bInteractive : 1;                               		// 0x06C8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bInRange : 1;                                   		// 0x06C8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bTargetStatusVisible : 1;                       		// 0x06C8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bProcessSquadHenchmen : 1;                      		// 0x06C8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bInSquadCommandMode : 1;                        		// 0x06C8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bInitializedPlayerResistance : 1;               		// 0x06C8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bWeaponVisible : 1;                             		// 0x06C8 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bWeaponOverheatBarVisible : 1;                  		// 0x06C8 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bHealthDisplayVisible : 1;                      		// 0x06C8 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bForceUpdateDisplayNextTick : 1;                		// 0x06C8 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bHadNoAmmo : 1;                                 		// 0x06C8 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      m_bGrenadesVisible : 1;                           		// 0x06C8 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bDisplayWeaponOverride : 1;                     		// 0x06C8 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bHideShieldBarWhenFull : 1;                     		// 0x06C8 (0x0004) [0x0000000000004000] [0x00002000] ( CPF_Config )
	unsigned long                                      m_bDisablePlayerHealth : 1;                       		// 0x06C8 (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	unsigned long                                      m_bUseMPHealthDisplay : 1;                        		// 0x06C8 (0x0004) [0x0000000000004000] [0x00008000] ( CPF_Config )
	unsigned char                                      m_eCurrentActionIcon;                             		// 0x06CC (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eCurrentPOIState;                               		// 0x06CD (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1626 ];

		return pClassPointer;
	};

	void AS_SetTargetNuiSpeechEnabled ( unsigned long bEnabled );
	void eventSetTargetNuiSpeechEnabled ( unsigned long bEnabled );
	void AS_PlayNuiSpeech_ExploreFeedback ( unsigned long bSuccessful );
	void eventPlayNuiSpeech_ExploreFeedback ( unsigned long Successful );
	void eventPlayNuiSpeech_CombatFeedback ( unsigned long Successful, struct FString TargetPawn, void* Rule );
	void AS_PlayNuiSpeech_GenericFeedback ( unsigned long bSuccessful, struct FString Text );
	void eventPlayNuiSpeech_GenericFeedback ( unsigned long Successful, void* Rule );
	void eventAS_SetNotificationImage ( struct FString sResourcePath );
	struct FString GetActionIconString ( unsigned char eActionIcon );
	void HideActionIndicator ( );
	void SetActionIndicator ( unsigned char eActionIcon );
	void SetPOIHintDisplay ( );
	void eventUpdatePOIState ( );
	void SetPOIState ( unsigned char eState );
	void PulseFullAmmoMessage ( unsigned long bGrenade );
	void eventOnMiniNotificationComplete ( int nID );
	void OnNotificationComplete ( );
	bool eventShouldDisplayWeaponIcon ( );
	void eventUpdateWeaponDisplay ( unsigned long bVisible, class AWeapon* pWeap );
	void PlayTargetHitIndication ( class APawn* pTargetPawn, float fDamage, class AController* instigatedBy, class UClass* DamageType, class AActor* DamageCauser );
	void eventUpdateResistanceDisplay ( struct FSFXHUDResistances oResistValues );
	void eventUpdateTargetStatusDisplay ( struct FSFXHUDTargetInfo* oTargetInfo );
	void eventTargetChanged ( class AActor* pOldTarget, class AActor* pNewTarget );
	void UpdateResistanceTextDisplay ( struct FString NewResistanceBarText );
	void UpdateMPResistanceBarDisplay ( float fPips, class UGFxValue* oBarClip );
	void UpdateResistanceBarDisplay ( float fResistPercent, class UGFxValue* oBarClip );
	void UpdateTargetStatusVisibility ( struct FSFXHUDTargetInfo* oTargetInfo );
	void AS_SetTargetStatus ( struct FString sStatus, unsigned long bInteractive, unsigned long bInRange );
	void SetTargetStatus ( struct FString sStatus, unsigned long bInteractive, unsigned long bInRange );
	void AS_SetTargetName ( struct FString sTargetName, unsigned long bHostile );
	void SetTargetName ( struct FString sTargetName, unsigned long bHostile );
	void SetOverheat ( float fOverheatPct, struct FString sCenterText, unsigned long bForce );
	void SetCenterStatus ( struct FString sText );
	struct FString eventGetStatusText ( class ABioPawn* pTarget, int nStatusFlags );
	int eventGetTargetStatusFlags ( class AActor* pTarget );
	void eventGetResistances ( class AActor* pTarget, struct FSFXHUDResistances* oResistances );
	void PowerIconCooldownDone ( class UGFxValue* oPowerIcon );
	void OnPawnPowerUsed ( class Usfxpowercustomaction* oPower );
	void eventUnregisterFromPowerManager ( class ABioPawn* pPawn );
	void RemoveHenchman ( class ABioPawn* pPawn );
	void eventRegisterToPowerManager ( class ABioPawn* pPawn );
	void eventSetupHenchPowers ( );
	void eventInitDisplay ( );
	void eventOnAspectRatioChanged ( float fNewAspectRatio );
	void GameSessionEnded ( );
	void CleanupNativeReferences ( );
	void CleanupReferences ( );
	void eventOnPanelRemoved ( );
	void ClearMiniNotification ( int nIndex );
	void ShowMiniNotification ( struct FSFXNotification* oNotifyParams );
	void ClearNotification ( );
	void ShowNotification ( int nNumRemainingNotifications, struct FSFXNotification* oNotifyParams );
	void OnNotificationCompleted ( int nID );
};

UClass* USFXSFHandler_HUD::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_Personalization
// 0x0120 (0x03AD - 0x028D)
class USFXSFHandler_Personalization : public USFXGUIMovieLegacyAdapter
{
public:
	TArray< class UClass* >                            CachedBonusGameEffectClasses;                     		// 0x0290 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UObject* >                           m_ApperanceAssetCache;                            		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< void* >                                    srBonus;                                          		// 0x02A8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           ArmorBonusClassName;                              		// 0x02B4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     srRotate;                                         		// 0x02C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     srButtonRevertChanges;                            		// 0x02CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     srButtonShowInfo;                                 		// 0x02D8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     srButtonHideInfo;                                 		// 0x02E4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     srButtonBack;                                     		// 0x02F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     srButtonSelect;                                   		// 0x02FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     srButtonExpand;                                   		// 0x0308 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __ExternalCallback_OnComplete__Delegate;          		// 0x0314 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ABioWorldInfo*                               m_WorldInfo;                                      		// 0x0320 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFXPawn_Player*                             m_oUIWorldPawn;                                   		// 0x0324 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFXPawn_Player*                             m_oPlayerPawn;                                    		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nRotating;                                      		// 0x032C (0x0004) [0x0000000000000000]              
	float                                              RotationDegreesPerSecond;                         		// 0x0330 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AssetReleaseMemoryThreshold;                      		// 0x0334 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ForceGCMemoryThreshold;                           		// 0x0338 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              CasualOptionTitle;                                		// 0x033C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              TypeOptionTitle;                                  		// 0x0340 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              HelmetOptionTitle;                                		// 0x0344 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              TorsoOptionTitle;                                 		// 0x0348 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              ShoulderOptionTitle;                              		// 0x034C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              ArmOptionTitle;                                   		// 0x0350 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              LegOptionTitle;                                   		// 0x0354 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              SpecOptionTitle;                                  		// 0x0358 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              Tint1OptionTitle;                                 		// 0x035C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              Tint2OptionTitle;                                 		// 0x0360 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              PatternOptionTitle;                               		// 0x0364 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              PatternColorOptionTitle;                          		// 0x0368 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              EmissiveOptionTitle;                              		// 0x036C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CasualID;                                         		// 0x0370 (0x0004) [0x0000000000000000]              
	int                                                FullBodyID;                                       		// 0x0374 (0x0004) [0x0000000000000000]              
	int                                                HelmetID;                                         		// 0x0378 (0x0004) [0x0000000000000000]              
	int                                                TorsoID;                                          		// 0x037C (0x0004) [0x0000000000000000]              
	int                                                ShoulderID;                                       		// 0x0380 (0x0004) [0x0000000000000000]              
	int                                                ArmID;                                            		// 0x0384 (0x0004) [0x0000000000000000]              
	int                                                LegID;                                            		// 0x0388 (0x0004) [0x0000000000000000]              
	int                                                SpecID;                                           		// 0x038C (0x0004) [0x0000000000000000]              
	int                                                Tint1ID;                                          		// 0x0390 (0x0004) [0x0000000000000000]              
	int                                                Tint2ID;                                          		// 0x0394 (0x0004) [0x0000000000000000]              
	int                                                PatternID;                                        		// 0x0398 (0x0004) [0x0000000000000000]              
	int                                                PatternColorID;                                   		// 0x039C (0x0004) [0x0000000000000000]              
	int                                                EmissiveID;                                       		// 0x03A0 (0x0004) [0x0000000000000000]              
	void*                                              ArmorEffectDescriptionFormatter;                  		// 0x03A4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bStopScroll : 1;                                		// 0x03A8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bLoadingWidgetVisible : 1;                      		// 0x03A8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bGameEffectLoadingComplete : 1;                 		// 0x03A8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned char                                      CombatAppearance;                                 		// 0x03AC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1627 ];

		return pClassPointer;
	};

	void ASSetDetailedCustomizationVisible ( unsigned long bVisible );
	void ASSetSwatchOptions ( int nOptionNumber, struct FString sTitle, TArray< struct FTintSwatchData > oSwatches, int nActiveIndex );
	void ASSetDetailOptions ( int nOptionNumber, struct FString sTitle, struct FString sOptions, int nActiveIndex );
	void ASStopScroll ( );
	void ASScrollInfoText ( float nScroll );
	void ASUpdateStatsInfo ( struct FString sTitle, struct FString sInfo );
	void ASSetInfoText ( struct FString sDetailText );
	void ASDeferredInitialization ( );
	void* GetPersonalizationTitle ( int PersOpt );
	TArray< float > onExIntGetBonusValues ( );
	struct FString onExIntGetBonusString ( int BonusIndex );
	void ConditionalReleaseAssetCacheAndGC ( );
	void OnPawnApperanceChanged ( TArray< class UObject* >* LoadedAssets );
	void UpdateAppearanceOnPawn ( class ASFXPawn_Player* oPawn );
	void onExIntDetailItemChange ( int nOptIndex, int nOptionIndex );
	int GetIdxByAppearanceID ( int Id, unsigned long CheckAvailability, TArray< struct FCustomizableElement >* AppearanceData );
	int GetAppearanceIDByIdx ( int Index, TArray< struct FCustomizableElement >* AppearanceData );
	void onExIntExit ( );
	void onExIntDoInitialize ( );
	void ResetOptions ( );
	bool CanUndoChanges ( );
	void CancelChanges ( );
	void ApplyChanges ( );
	void SendAppearanceChangedTelemetry ( int nCasualID, int nFullBodyID, int nHelmetID, int nTorsoID, int nShoulderID, int nArmID, int nLegID, int nSpecID, int nTint1ID, int nTint2ID, int nPatternID, int nPatternColorID, int nEmissiveID );
	void AddSwatchEntry ( unsigned char nEntryIndex, TArray< struct FCustomizableElement > Elements, int nIndex );
	void AddDetailEntry ( unsigned char nEntryIndex, int nIndex, TArray< struct FCustomizableElement >* Elements );
	bool IsAvailable ( struct FCustomizableElement Element );
	class ASFXPawn_Player* GetUIWorldPlayerPawn ( );
	void eventUpdate ( float fDeltaT );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void InitializeUIWorld ( );
	void ReleaseGameEffects ( TArray< struct FCustomizableElement > Elements );
	bool LoadGameEffectsFromElements ( TArray< struct FCustomizableElement > Elements );
	bool LoadGameEffects ( );
	void OnPanelRemoved ( );
	void eventOnPanelAdded ( );
	void ClearDelegates ( );
	void SetExternalCallback_OnComplete ( struct FScriptDelegate pDelegate );
	void ExternalCallback_OnComplete ( );
};

UClass* USFXSFHandler_Personalization::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_PowerWheel
// 0x03CC (0x0659 - 0x028D)
class USFXSFHandler_PowerWheel : public USFXGUIMovieLegacyAdapter
{
public:
	struct FString                                     m_aMappingIconPaths[ 0x9 ];                       		// 0x0290 (0x006C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelPawnIndices                   m_oPowerIndices;                                  		// 0x02FC (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelPawnIndices                   m_oWeaponIndices;                                 		// 0x0320 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelButtonIcon                    m_oMapTextIcon1;                                  		// 0x0344 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelButtonIcon                    m_oMapTextIcon2;                                  		// 0x0354 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXPowerIconData >                 m_aPowerIconInfo;                                 		// 0x0364 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFXGUIValue_PowerIcon* >            m_aPowerIcons;                                    		// 0x0370 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXPowerWheelIconWeapon >          m_aWeaponIcons;                                   		// 0x037C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXRadarElementData >              m_aRadarElementData;                              		// 0x0388 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sWheelPath;                                     		// 0x0394 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sWheelInnerPath;                                		// 0x03A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sTitleTextPath;                                 		// 0x03AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sNameTextPath;                                  		// 0x03B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sInfoTextPath;                                  		// 0x03C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sInfoTextBGPath;                                		// 0x03D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sUseButtonPath;                                 		// 0x03DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sUseTextPath;                                   		// 0x03E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sMapButton1Path;                                		// 0x03F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sMapText1Path;                                  		// 0x0400 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sMapButton2Path;                                		// 0x040C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sMapText2Path;                                  		// 0x0418 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sMapText3Path;                                  		// 0x0424 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sMapButton3Path;                                		// 0x0430 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           m_aRadarIconFramePaths;                           		// 0x043C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sShepardBlockerPath;                            		// 0x0448 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sHench1BlockerPath;                             		// 0x0454 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sHench2BlockerPath;                             		// 0x0460 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sRadarPath;                                     		// 0x046C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sTeam1StatusTextPath;                           		// 0x0478 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sTeam1PowerTextPath;                            		// 0x0484 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sHench1PortraitImagePath;                       		// 0x0490 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sHench1PortraitMovieClipPath;                   		// 0x049C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sTeam2StatusTextPath;                           		// 0x04A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sTeam2PowerTextPath;                            		// 0x04B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sHench2PortraitImagePath;                       		// 0x04C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sHench2PortraitMovieClipPath;                   		// 0x04CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sWheelArrowPath;                                		// 0x04D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sNuiSpeechIconPath;                             		// 0x04E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sNotSuggestedPrefix;                            		// 0x04F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sNotSuggestedSuffix;                            		// 0x04FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMap1Token;                                     		// 0x0508 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMap2Token;                                     		// 0x0514 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMap3Token;                                     		// 0x0520 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMapHench1Token;                                		// 0x052C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMapHench2Token;                                		// 0x0538 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __WeaponSort__Delegate;                           		// 0x0544 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_aWeaponStateFrames[ 0x4 ];                      		// 0x0550 (0x0010) [0x0000000000000000]              
	struct FVector                                     m_vLStickInput;                                   		// 0x0560 (0x000C) [0x0000000000000000]              
	struct FVector2D                                   m_vViewportOffsets;                               		// 0x056C (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_vCacheRadarBoundaryTopLeft;                     		// 0x0574 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_vCacheRadarBoundaryBottomRight;                 		// 0x057C (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_vBoundaryDimensions;                            		// 0x0584 (0x0008) [0x0000000000004000]              ( CPF_Config )
	class ABioPlayerController*                        m_pPlayerController;                              		// 0x058C (0x0004) [0x0000000000000000]              
	class ABioBaseSquad*                               m_pPlayerSquad;                                   		// 0x0590 (0x0004) [0x0000000000000000]              
	float                                              m_fButtonTextPadding;                             		// 0x0594 (0x0004) [0x0000000000000000]              
	float                                              m_fMovieWidth;                                    		// 0x0598 (0x0004) [0x0000000000000000]              
	float                                              m_fMovieHeight;                                   		// 0x059C (0x0004) [0x0000000000000000]              
	float                                              m_fRemainingRadarPulseTime;                       		// 0x05A0 (0x0004) [0x0000000000000000]              
	float                                              m_fInfoTextChangeDelay;                           		// 0x05A4 (0x0004) [0x0000000000000000]              
	float                                              m_fRemainingInfoTextChangeDelay;                  		// 0x05A8 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeToNextVehicleRadarUpdate;                  		// 0x05AC (0x0004) [0x0000000000000000]              
	float                                              m_fTimeToNextObjectiveUpdate;                     		// 0x05B0 (0x0004) [0x0000000000000000]              
	float                                              m_fLastProcessedStickAngle;                       		// 0x05B4 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentProcessedStickAngle;                    		// 0x05B8 (0x0004) [0x0000000000000000]              
	float                                              m_fThumbstickInterpSpeed;                         		// 0x05BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fLastStickDeflection;                           		// 0x05C0 (0x0004) [0x0000000000000000]              
	float                                              m_fLStickAngleDeltaDeg;                           		// 0x05C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fLStickStickyIconAngle;                         		// 0x05C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nCurrentPowerIconIndex;                         		// 0x05CC (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentWeaponIconIndex;                        		// 0x05D0 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentSelectedWeapon;                         		// 0x05D4 (0x0004) [0x0000000000000000]              
	class ABioPawn*                                    m_pShepardPawn;                                   		// 0x05D8 (0x0004) [0x0000000000000000]              
	class ABioPawn*                                    m_pHench1Pawn;                                    		// 0x05DC (0x0004) [0x0000000000000000]              
	class ABioPawn*                                    m_pHench2Pawn;                                    		// 0x05E0 (0x0004) [0x0000000000000000]              
	class AActor*                                      m_pCurrentPlayerSelection;                        		// 0x05E4 (0x0004) [0x0000000000000000]              
	float                                              m_fCacheTargetDirection;                          		// 0x05E8 (0x0004) [0x0000000000000000]              
	float                                              m_fCacheNorthDirection;                           		// 0x05EC (0x0004) [0x0000000000000000]              
	float                                              m_fCachePathDirection;                            		// 0x05F0 (0x0004) [0x0000000000000000]              
	float                                              m_fCacheRadarBoundaryRotation;                    		// 0x05F4 (0x0004) [0x0000000000000000]              
	void*                                              m_srBlocked;                                      		// 0x05F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srPawnIncapacitated;                            		// 0x05FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srWeaponSwitching;                              		// 0x0600 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srWeaponOverheating;                            		// 0x0604 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srWeaponReloading;                              		// 0x0608 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srDisplayTitle;                                 		// 0x060C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srWeaponWheelDisplayTitle;                      		// 0x0610 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srPowerWheelDisplayTitle;                       		// 0x0614 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srEquip;                                        		// 0x0618 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srUse;                                          		// 0x061C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srMap;                                          		// 0x0620 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srOverheated;                                   		// 0x0624 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srRecharging;                                   		// 0x0628 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srUnavailable;                                  		// 0x062C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srRadarRangeUnits;                              		// 0x0630 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srNorthText;                                    		// 0x0634 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srObjective;                                    		// 0x0638 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRadarDirectionChangeDelta;                     		// 0x063C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRadarElementLocationChangeDelta;               		// 0x0640 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRadarRadius;                                   		// 0x0644 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fBoundaryShrinkFactor;                          		// 0x0648 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fVehicleRadarUpdateInterval;                    		// 0x064C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRadarObjectiveUpdateInterval;                  		// 0x0650 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bVisible : 1;                                   		// 0x0654 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bRadarVisible : 1;                              		// 0x0654 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bRadarOn : 1;                                   		// 0x0654 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bInOutTransition : 1;                           		// 0x0654 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bProcessSquadHenchmen : 1;                      		// 0x0654 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bCanMapPlayerPowers : 1;                        		// 0x0654 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bHavePathAssistGoal : 1;                        		// 0x0654 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bPingPathAssistArrow : 1;                       		// 0x0654 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bInfoTextBackgroundVisible : 1;                 		// 0x0654 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bDesiredInfoTextBackgroundVisibility : 1;       		// 0x0654 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bWheelArrowVisible : 1;                         		// 0x0654 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bObjectiveRadarOn : 1;                          		// 0x0654 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bPulsingRadar : 1;                              		// 0x0654 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bShowUseMapText : 1;                            		// 0x0654 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      m_bSquadChanged : 1;                              		// 0x0654 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned char                                      m_ePowerWheelMode;                                		// 0x0658 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1628 ];

		return pClassPointer;
	};

	void AS_ShowWheel ( unsigned long bMakeVisible );
	bool eventSetHenchmanMappedPower ( class ABioPawn* pPawn, struct FName nmPower );
	struct FName eventGetHenchmanMappedPower ( class ABioPawn* pPawn );
	void SetMappingIcon ( unsigned char eNewIcon, unsigned long bClear, struct FSFXPowerWheelButtonIcon* oIcon );
	void ExInt_WheelTransitionOutDone ( );
	bool GetMapBoundaryValues ( struct FVector2D* vTopLeft, struct FVector2D* vBottomRight, float* fBoundaryRotation );
	void GetRadarDirectionValues ( float* fArrowDirection, float* fNorthDirection, float* fPathingArrowDirection );
	void CollectRadarElementData ( TArray< struct FSFXRadarElementData >* aRadarData );
	void PulseRadar ( float fPulseTime );
	void eventUpdateRadarMapBoundaries ( );
	void eventUpdateRadarArrows ( );
	void eventUpdateRadarElementPositions ( TArray< struct FSFXRadarElementData >* aRadarData );
	void eventUpdateRadarDisplay ( unsigned long bObjectiveMode );
	void eventRadarVisibilityChanged ( unsigned long bVisible, unsigned long bObjectiveMode );
	void SelectCurrentWheelItem ( unsigned char eMode );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void SelectCurrentWeapon ( );
	int WeaponSort ( class ASFXWeapon* A, class ASFXWeapon* B );
	void SortWeapons ( class ABioPawn* pPawn, TArray< class ASFXWeapon* >* aWeapons );
	void SetWeaponIcon ( class ASFXWeapon* pWeap, int nSlotIndex, class ABioPawn* pPawn );
	void eventSetupWeaponDisplayForPawn ( class ABioPawn* pPawn, unsigned char ePawn );
	void eventLeaveWeaponIcon ( int nIconIndex );
	void eventHoverWeaponIcon ( int nIconIndex, unsigned long bForceUpdate );
	void eventUpdateWeaponIconDisplay ( struct FSFXPowerWheelIconWeapon oIcon, struct FString sAltPath );
	void SelectWeapon ( int nWeaponIndex );
	void eventSetWeaponState ( int nWeapIndex, unsigned char eNewWeapState );
	void SetWeaponTypeDisplay ( class USFXGUIMovieLegacyAdapter* pPanel, class UGFxValue* oIcon, struct FString sIconResource, int nNewType );
	void eventSetWeaponType ( int nWeapIndex, struct FString sWeaponIconResource, int nNewWeapIcon );
	void MapCurrentPower ( unsigned char eIcon );
	void SelectCurrentPower ( );
	struct FName eventGetCurrentHenchmanOrder ( class ABioPawn* pPawn );
	void eventLeavePowerIcon ( int nIconIndex, unsigned long bSkipTransition );
	void SetInformationText ( struct FString sName, struct FString sDesc, unsigned long bDisplayNuiSpeechIcon );
	void eventUpdatePowerInformationText ( class USFXGUIValue_PowerIcon* oIcon );
	void eventUpdateTextDisplayForIcon ( int nIconIndex );
	void eventHoverPowerIcon ( int nIconIndex, unsigned long bSkipTransition );
	void eventSetMapText ( struct FString sText1, unsigned char eIcon1, struct FString sText2, unsigned char eIcon2, struct FString sText3, unsigned char eIcon3 );
	void eventSetUseText ( struct FString sText );
	void SetStatusAndPowerText ( class ABioPawn* pPawn, unsigned char ePawnID );
	void SetSquadPawnDisplay ( struct FString sPortraitImagePath, struct FString sPortraitMovieClipPath, class ABioPawn* HenchPawn );
	void eventWheelVisibilityChanged ( unsigned long bVisible );
	void HideWeaponIcon ( class USFXGUIMovieLegacyAdapter* pPanel, class UGFxValue* Icon );
	bool IsPawnBlocked ( class ABioPawn* pPawn );
	void InitPowerIcons ( );
	void eventInitDisplay ( );
	bool HaveHenchmen ( );
	void eventdoHotKey ( int nIndex );
	bool eventCanIssueQueuedOrder ( class APawn* pPawn );
	void eventUsePower ( struct FName PowerName, class APawn* Pawn );
	bool eventCanIssueImmediateOrder ( class APawn* pPawn );
	class ABioPawn* GetPawnFromName ( struct FName nmPawn );
	void RemoveHenchman ( class ABioPawn* pPawn );
	void OnAllowCameraRotation ( unsigned long i_bValue );
	void GameSessionEnded ( );
	void eventOnPanelRemoved ( );
	void CleanupReferences ( );
	void SetupPlayerPowers ( );
	void SetWheelVisible ( unsigned long bVisible );
};

UClass* USFXSFHandler_PowerWheel::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_PCPowerWheel
// 0x0354 (0x09AD - 0x0659)
class USFXSFHandler_PCPowerWheel : public USFXSFHandler_PowerWheel
{
public:
	struct FSFXPowerIconData                           m_aQuickSlotIconInfo[ 0x8 ];                      		// 0x065C (0x01C0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelIconWeapon                    m_oCenterWeaponIcon;                              		// 0x081C (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelIconWeapon                    m_oHench1WeaponIcon;                              		// 0x0884 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelIconWeapon                    m_oHench2WeaponIcon;                              		// 0x08EC (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXGUIValue_QuickSlotPowerIcon*             m_aQuickSlotIcons[ 0x8 ];                         		// 0x0954 (0x0020) [0x0000000000000000]              
	struct FVector2D                                   m_vMouseDownPos;                                  		// 0x0974 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_vDragOffsets;                                   		// 0x097C (0x0008) [0x0000000000000000]              
	int                                                m_nDraggingIcon;                                  		// 0x0984 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentDropTarget;                             		// 0x0988 (0x0004) [0x0000000000000000]              
	float                                              m_fQuickslotIconUpdateInterval;                   		// 0x098C (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentQuickSlot;                              		// 0x0990 (0x0004) [0x0000000000000000]              
	class USFXGUIValue_PowerIcon*                      m_oDragPowerIcon;                                 		// 0x0994 (0x0004) [0x0000000000000000]              
	class USFXGUIValue_QuickSlotPowerIcon*             m_oDragSlotIcon;                                  		// 0x0998 (0x0004) [0x0000000000000000]              
	void*                                              m_srMaximizeText;                                 		// 0x099C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srMinimizeText;                                 		// 0x09A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fDragStartThreshold;                            		// 0x09A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bDashboardWeaponsOpen : 1;                      		// 0x09A8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDraggingPower : 1;                             		// 0x09A8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bDraggingKey : 1;                               		// 0x09A8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bDoingDrag : 1;                                 		// 0x09A8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bQuickSlotExpanded : 1;                         		// 0x09A8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bQuickSlotVisible : 1;                          		// 0x09A8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bEvalQuickSlotPowers : 1;                       		// 0x09A8 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned char                                      m_ShepardPreviousPhysics;                         		// 0x09AC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1629 ];

		return pClassPointer;
	};

	void ExInt_CollapsePlayerWeapons ( );
	void doHotKey ( int nIndex );
	void LeaveQuickSlot ( int nSlotID );
	void HoverQuickSlot ( int nSlotID );
	bool HandleQuickSlotMouseDown ( struct FString sIconID );
	void ExInt_IconMouseDown ( struct FString sIconID );
	bool HandleQuickSlotMouseUp ( struct FString sIconID );
	void ExInt_IconMouseUp ( struct FString sIconID );
	bool HandleQuickSlotRollOut ( struct FString sIconID );
	void ExInt_IconRollOut ( struct FString sIconID );
	bool HandleQuickSlotRollOver ( struct FString sIconID );
	void ExInt_IconRollOver ( struct FString sIconID );
	unsigned char FindIconIndexFromPath ( struct FString sIconID, int* nFoundIcon );
	void SetupQuickSlotPowers ( );
	void SetupQuickSlotKeys ( );
	void SetQuickSlotState ( unsigned long bExpand, unsigned long bSkipTransition );
	void SwapHenchmanWeapon ( class ABioPawn* pHench );
	void ExpandPlayerWeapons ( );
	void ClosePlayerWeapons ( );
	void SelectWeapon ( int nWeaponIndex );
	void eventSetWeaponState ( int nWeapIndex, unsigned char eNewWeapState );
	void SortWeapons ( class ABioPawn* pPawn, TArray< class ASFXWeapon* >* aWeapons );
	void eventSetMapText ( struct FString sText1, unsigned char eIcon1, struct FString sText2, unsigned char eIcon2, struct FString sText3, unsigned char eIcon3 );
	void eventSetUseText ( struct FString sText );
	void eventWheelVisibilityChanged ( unsigned long bVisible );
	void InitPowerIcons ( );
	void eventInitDisplay ( );
	void OnAllowCameraRotation ( unsigned long i_bValue );
	void CleanupReferences ( );
	void RemoveHenchman ( class ABioPawn* pPawn );
	void MoveQuickSlotPowerByName ( int nSlot, struct FName nmPowerToMove );
	void NewSetQuickSlotPower ( int nSlot, int nDraggingIconID, unsigned long bDraggingPower, unsigned long bSilently );
};

UClass* USFXSFHandler_PCPowerWheel::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_Save
// 0x00BC (0x0349 - 0x028D)
class USFXSFHandler_Save : public USFXGUIMovieLegacyAdapter
{
public:
	struct FDouble                                     CheckingDataStartTime;                            		// 0x0290 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	TArray< struct FSaveGUIAreaInfo >                  AreaData;                                         		// 0x0298 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultImageName;                                 		// 0x02A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSaveGUIRecord >                    SaveList;                                         		// 0x02B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ImagePackageName;                                 		// 0x02BC (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       ME3ImportSaveAreaOverride;                        		// 0x02C8 (0x0008) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	class UTexture2D*                                  DefaultAreaImage;                                 		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxSaves;                                         		// 0x02D4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                PendingOverwriteIndex;                            		// 0x02D8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                PreparedSaveSize;                                 		// 0x02DC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	void*                                              DefaultAreaNameText;                              		// 0x02E0 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              AutoSaveText;                                     		// 0x02E4 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              ChapterSaveText;                                  		// 0x02E8 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              QuickSaveText;                                    		// 0x02EC (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              SaveGameText;                                     		// 0x02F0 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              SaveDisplayText;                                  		// 0x02F4 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              NewGameText;                                      		// 0x02F8 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              TimePlayedText;                                   		// 0x02FC (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              LastPlayedText;                                   		// 0x0300 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              LastPlayedTimeText;                               		// 0x0304 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              OverwriteSaveGameText;                            		// 0x0308 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              ConfirmOverwriteSaveGameText;                     		// 0x030C (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              CancelOverwriteSaveGameText;                      		// 0x0310 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              DeleteGameText;                                   		// 0x0314 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              ConfirmDeleteGameText;                            		// 0x0318 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              CancelDeleteGameText;                             		// 0x031C (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              InsufficentSpaceText;                             		// 0x0320 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              InsufficentSpaceTextPC;                           		// 0x0324 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              InsufficentSpaceTextPS3;                          		// 0x0328 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              InsufficentSpaceOverwriteTextPS3;                 		// 0x032C (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              InsufficentSpaceAcknowledgedText;                 		// 0x0330 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              SaveActionText;                                   		// 0x0334 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              CheckingSaveDataText;                             		// 0x0338 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	float                                              CheckingDataMessageDelay;                         		// 0x033C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              CheckingDataMessageMinimum;                       		// 0x0340 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bWaitingOnMsgBox : 1;                             		// 0x0344 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bEnumeratingSaves : 1;                            		// 0x0344 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bCheckingDataComplete : 1;                        		// 0x0344 (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bCheckingDataMessageVisible : 1;                  		// 0x0344 (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned char                                      GuiMode;                                          		// 0x0348 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1630 ];

		return pClassPointer;
	};

	void SetLoadSave ( unsigned long bIsSave, unsigned long bLegacySave, unsigned long ME2Import, int nLastGUI, int nLayout, unsigned long bCarreerSelection );
	bool UpdateCheckingDataMessage ( void* Message );
	void DisplayInsufficientSpaceMessage ( int AdditionalBytesNeeded );
	void SaveGameCompleted ( struct FSFXSaveGameCommandEventArgs Args );
	void CheckFreeSpace ( struct FSFXSaveGameCommandEventArgs Args );
	void eventOnClose ( );
	void QueryFreeSpace ( struct FSFXSaveGameCommandEventArgs Args );
	void PrepareSaveGame ( );
	int GetNewSaveIdx ( );
	bool eventGetPlayerData ( struct FString* firstName, void** LastName, void** className, int* Level );
	void DeleteGame ( int SaveIdx );
	void Initialize ( );
	void SaveGame ( int nIndex );
	void Callback_DeviceSelectionComplete ( unsigned long bWasSuccessful, unsigned long bWasBlocked );
	void ResetGui ( struct FSFXSaveGameCommandEventArgs Args );
	void Callback_ConfirmDelete ( unsigned long bAPressed, int Context );
	void Callback_ConfirmOverwrite ( unsigned long bAPressed, int Context );
	void EndInitializeSaveList ( struct FSFXSaveGameCommandEventArgs Args );
	void BeginInitializeSaveList ( );
};

UClass* USFXSFHandler_Save::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_Load
// 0x00D0 (0x0419 - 0x0349)
class USFXSFHandler_Load : public USFXSFHandler_Save
{
public:
	TArray< struct FSaveGUICareerRecord >              CareerList;                                       		// 0x034C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSFXSaveDescriptor >                CorruptedSaveGames;                               		// 0x0358 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	void*                                              LoadGameLoseProgressText;                         		// 0x0364 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              ConfirmLoadGameText;                              		// 0x0368 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              CancelLoadGameText;                               		// 0x036C (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              CharNameText;                                     		// 0x0370 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              DeleteCareerText;                                 		// 0x0374 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              ConfirmDeleteCareerText;                          		// 0x0378 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              CancelDeleteCareerText;                           		// 0x037C (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              CorruptSaveWarningText;                           		// 0x0380 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              ConfirmDeleteCorruptText;                         		// 0x0384 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              CancelDeleteCorruptText;                          		// 0x0388 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              LoadActionText;                                   		// 0x038C (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              CareerActionText;                                 		// 0x0390 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              SearchingForCareers;                              		// 0x0394 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srNewGamePlusLoadCareerConfirmation;              		// 0x0398 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srSavedRachniiQueen;                              		// 0x039C (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srKilledRachniiQueen;                             		// 0x03A0 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srAshSurvivedVirimire;                            		// 0x03A4 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srKaidenSurvivedVirimire;                         		// 0x03A8 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srSavedTheCouncil;                                		// 0x03AC (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srSacrificedTheCouncil;                           		// 0x03B0 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srDestroyedMaelonsData;                           		// 0x03B4 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srNotDestroyedMaelonsData;                        		// 0x03B8 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srWrexAlive;                                      		// 0x03BC (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srWrexDead;                                       		// 0x03C0 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srWrexIgnored;                                    		// 0x03C4 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srHeretics_Rewrite;                               		// 0x03C8 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srHeretics_Destroyed;                             		// 0x03CC (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srCollectorBase_Irradiate;                        		// 0x03D0 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srCollectorBase_Destroyed;                        		// 0x03D4 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srNumberSurvivors;                                		// 0x03D8 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srME1_SFXRomanced_Ashley;                         		// 0x03DC (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srME1_SFXRomanced_Kaidan;                         		// 0x03E0 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srME1_SFXRomanced_Liara;                          		// 0x03E4 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srME1_SFXRomanced_NO_ONE;                         		// 0x03E8 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srME2_SFXRomanced_Tali;                           		// 0x03EC (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srME2_SFXRomanced_Jack;                           		// 0x03F0 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srME2_SFXRomanced_Thane;                          		// 0x03F4 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srME2_SFXRomanced_Jacob;                          		// 0x03F8 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srME2_SFXRomanced_Garrus;                         		// 0x03FC (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srME2_SFXRomanced_Miranda;                        		// 0x0400 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	void*                                              srME2_SFXRomanced_NO_ONE;                         		// 0x0404 (0x0004) [0x0000000000006001]              ( CPF_Edit | CPF_Transient | CPF_Config )
	int                                                CurrentCareerIndex;                               		// 0x0408 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UBioGlobalVariableTable*                     ImportPlotTable;                                  		// 0x040C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBioSFHandler_MessageBox*                    loadingCareerMessageBox;                          		// 0x0410 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShouldRescanCareers : 1;                         		// 0x0414 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShowingSearchingCharacterOverlay : 1;            		// 0x0414 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      LoadMode;                                         		// 0x0418 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1631 ];

		return pClassPointer;
	};

	void eventAS_ScrollDetailsAnalog ( float fScroll );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	struct FString GetPlotSummary ( int nSaveIndex );
	void GameSessionEnded ( );
	void OnStorageDeviceChanged ( );
	void eventOnPanelRemoved ( );
	void eventOnPanelAdded ( );
	void QuitToMainMenu ( );
	void eventHideImportSearchOverlay ( );
	void eventShowImportSearchOverlay ( );
	void InitImportManager ( );
	void Initialize ( );
	void Callback_ConfirmNGPlusLoadGame ( unsigned long bAPressed, int Context );
	void LaunchNGPlusSaveFromCareer ( int nCareerIdx );
	struct FString GetNewGamePlusSaveSummary ( class USFXSaveGame* aSave );
	void SelectCareer ( int nCareerIdx );
	void DeleteGame ( int nIndex );
	void DeleteCareer ( int nCareerIdx );
	void LoadGame ( int nIndex );
	void eventCheckForCorruptSaves ( );
	void Callback_ConfirmDeleteCorruptSaves ( unsigned long bAPressed, int Context );
	void ResetGui ( struct FSFXSaveGameCommandEventArgs Args );
	void SaveCommandCallback_InitializeCareers ( struct FSFXSaveGameCommandEventArgs Args );
	void Callback_ConfirmDeleteCareer ( unsigned long bAPressed, int CareerIdx );
	void LoadGameCallback ( struct FSFXSaveGameCommandEventArgs Args );
	void Callback_ConfirmLoadGame ( unsigned long bAPressed, int Context );
	void FillCareerListCallback_InitializeLoadList ( );
	void EndInitializeLoadList ( struct FSFXSaveGameCommandEventArgs Args );
	void BeginInitializeLoadList ( );
	void InitializeLoadList ( int CareerIdx );
	void EndInitializeCareers ( struct FSFXSaveGameCommandEventArgs Args );
	void BeginInitializeCareers ( );
	void eventOnStart ( );
};

UClass* USFXSFHandler_Load::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_Slideshow
// 0x0063 (0x02F0 - 0x028D)
class USFXSFHandler_Slideshow : public USFXGUIMovieLegacyAdapter
{
public:
	struct FSFXSlideshowEntry                          m_CurrentSlide;                                   		// 0x0290 (0x0028) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXSlideshowParams                         m_ShowParams;                                     		// 0x02B8 (0x001C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SlideshowFinished__Delegate;                    		// 0x02D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fCurrentSlideElapsedTime;                       		// 0x02E0 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentSlideIndex;                             		// 0x02E4 (0x0004) [0x0000000000000000]              
	int                                                m_nAdjacentPreloadCount;                          		// 0x02E8 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bWaitingForInit : 1;                            		// 0x02EC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bBeginWhenDoneInit : 1;                         		// 0x02EC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bCanGoNext : 1;                                 		// 0x02EC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bCanGoPrev : 1;                                 		// 0x02EC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bCanExit : 1;                                   		// 0x02EC (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1632 ];

		return pClassPointer;
	};

	void TryExitShow ( );
	void TryAdvanceShow ( unsigned long bForward );
	void ExInt_OnInitializationComplete ( );
	void ExInt_OnTransitionComplete ( );
	void EndSlideshow ( unsigned long bFadeToBlack );
	void BeginSlideshow ( );
	void PreloadAdjacentSlides ( );
	void AdvanceShow ( unsigned long bForward, unsigned long bAutoAdvanced );
	void UpdateNavButtonDisplay ( unsigned long bCanGoNext, unsigned long bCanGoPrev, unsigned long bCanExit );
	void Update ( float fDeltaT );
	void OnPanelAdded ( );
	void SetTransitionOptions ( unsigned long bFadeIn, unsigned long bFadeOut, float fFadeScalar );
	void PlaySlideshow ( struct FScriptDelegate OnFinished, struct FSFXSlideshowParams* oParams );
	void SlideshowFinished ( class USFXSFHandler_Slideshow* slideshow );
};

UClass* USFXSFHandler_Slideshow::pClassPointer = NULL;

// Class SFXGame.SFXGUIMovieExtension
// 0x0004 (0x0040 - 0x003C)
class USFXGUIMovieExtension : public UObject
{
public:
	int                                                m_nFSHandlerID;                                   		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1633 ];

		return pClassPointer;
	};

	void eventUpdate ( float fDeltaT );
	void eventHandleFSCommand ( unsigned char nCommandID, TArray< struct FString >* aArgs );
	bool eventHandleInputEvent ( unsigned char nEventID, float fValue );
	void eventOnClosed ( );
	void eventOnRemoved ( );
	void eventOnAdded ( );
};

UClass* USFXGUIMovieExtension::pClassPointer = NULL;

// Class SFXGame.SFXGUIValue_ManualAnimController
// 0x0038 (0x00A4 - 0x006C)
class USFXGUIValue_ManualAnimController : public UGFxValue
{
public:
	struct FScriptDelegate                             __OnAnimStarted__Delegate;                        		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAnimAborted__Delegate;                        		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAnimFinished__Delegate;                       		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                StartFrame;                                       		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                EndFrame;                                         		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              ElapsedAnimationTime;                             		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              TotalAnimationTime;                               		// 0x009C (0x0004) [0x0000000000000000]              
	unsigned long                                      IsActive : 1;                                     		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IsPlaying : 1;                                    		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      AbortRequested : 1;                               		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1634 ];

		return pClassPointer;
	};

	void UpdateAnimation ( float DeltaTime );
	void ResumeAnimation ( );
	void PauseAnimation ( );
	void AbortAnimation ( );
	void BeginAnimation ( float AnimationLength );
	void Initialize ( );
	void OnAnimFinished ( );
	void OnAnimAborted ( );
	void OnAnimStarted ( );
};

UClass* USFXGUIValue_ManualAnimController::pClassPointer = NULL;

// Class SFXGame.SFXGUIValue_Marker
// 0x0129 (0x0195 - 0x006C)
class USFXGUIValue_Marker : public UGFxValue
{
public:
	struct FString                                     CurrentTitle;                                     		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FASDisplayInfo                              MarkerRootDI;                                     		// 0x0078 (0x002C) [0x0000000000000000]              
	struct FASDisplayInfo                              MarkerReticuleFreeArrowClipDI;                    		// 0x00A4 (0x002C) [0x0000000000000000]              
	struct FASDisplayInfo                              MarkerReticuleClipDI;                             		// 0x00D0 (0x002C) [0x0000000000000000]              
	struct FASDisplayInfo                              MarkerMiscTextClipAnimDI;                         		// 0x00FC (0x002C) [0x0000000000000000]              
	struct FASDisplayInfo                              MarkerTitleTextClipAnimDI;                        		// 0x0128 (0x002C) [0x0000000000000000]              
	struct FVector2D                                   ScreenEdgeBorder[ 0x2 ];                          		// 0x0154 (0x0010) [0x0000000000004000]              ( CPF_Config )
	class AActor*                                      Actor;                                            		// 0x0164 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      SkelMeshComponent;                                		// 0x0168 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                BoneIndex;                                        		// 0x016C (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   MarkerClip;                                       		// 0x0170 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   MarkerReticuleFreeArrowClip;                      		// 0x0174 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   MarkerReticuleClip;                               		// 0x0178 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   MarkerIconClip;                                   		// 0x017C (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   MarkerMiscTextClipAnim;                           		// 0x0180 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   MarkerTitleTextClipAnim;                          		// 0x0184 (0x0004) [0x0000000000000000]              
	float                                              UpdateDeltaT;                                     		// 0x0188 (0x0004) [0x0000000000000000]              
	float                                              OffscreenDirectionDampenPower;                    		// 0x018C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      FullyInitialized : 1;                             		// 0x0190 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      MarkerReticuleArrowClipDIDirty : 1;               		// 0x0190 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      MarkerMiscTextClipAnimDIDirty : 1;                		// 0x0190 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      MarkerTitleTextClipAnimDIDirty : 1;               		// 0x0190 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      PreviousIsOffscreen : 1;                          		// 0x0190 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      TitleVisible : 1;                                 		// 0x0190 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned char                                      DefaultPawnAimNodeToAttachTo;                     		// 0x0194 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1635 ];

		return pClassPointer;
	};

	void eventAS_FadeOutTitle ( );
	void eventAS_FadeInTitle ( float TimeVisible );
	void eventAS_SetTitleText ( struct FString NewTitle );
	void AS_SetArrowStyle ( struct FString sArrowFrame, struct FString sOffscreenArrowFrame );
	void AS_SetText ( struct FString NewText );
	void AS_FadeOutMiscText ( );
	void AS_FadeOut ( );
	void AS_FadeInMiscText ( float TimeVisible );
	void AS_FadeIn ( float TimeVisible );
	void HideTitleText ( );
	void ShowTitleText ( struct FString* Title );
	void FadeOutMarker ( );
	void PulseMarker ( );
	void UpdateReticuleArrows ( unsigned long MarkerIsOffscreen, struct FVector4* OffscreenDirection );
	void CalculateMarkerPosition ( struct FVector WorldLocation, struct FSFXGUISceneView* SceneView, struct FVector2D* ScreenCoords, struct FVector4* PostProjectCoords, int* LocationIsOffscreen, int* LocationIsBehindView );
	struct FVector GetMarkerWorldPosition ( class USFXModule_Marker* Module );
	void Update ( struct FSFXGUISceneView* SceneView );
	void Initialize ( );
	void ImmediateInitialize ( class AActor* NewActor, class USFXModule_Marker* Module );
};

UClass* USFXGUIValue_Marker::pClassPointer = NULL;

// Class SFXGame.SFXGUIValue_MarkerGrenade
// 0x0017 (0x01AC - 0x0195)
class USFXGUIValue_MarkerGrenade : public USFXGUIValue_Marker
{
public:
	struct FVector2D                                   MarkerScale;                                      		// 0x0198 (0x0008) [0x0000000000004000]              ( CPF_Config )
	float                                              FadeInExponent;                                   		// 0x01A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class APawn*                                       Player;                                           		// 0x01A4 (0x0004) [0x0000000000000000]              
	float                                              DisplayRange;                                     		// 0x01A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1636 ];

		return pClassPointer;
	};

	void Update ( struct FSFXGUISceneView* SceneView );
	void Initialize ( );
};

UClass* USFXGUIValue_MarkerGrenade::pClassPointer = NULL;

// Class SFXGame.SFXGUIValue_MarkerHenchman
// 0x000B (0x01A0 - 0x0195)
class USFXGUIValue_MarkerHenchman : public USFXGUIValue_Marker
{
public:
	class ABioPawn*                                    Henchman;                                         		// 0x0198 (0x0004) [0x0000000000000000]              
	unsigned long                                      PreviousHenchmanIsDown : 1;                       		// 0x019C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1637 ];

		return pClassPointer;
	};

	void Update ( struct FSFXGUISceneView* SceneView );
	void Initialize ( );
};

UClass* USFXGUIValue_MarkerHenchman::pClassPointer = NULL;

// Class SFXGame.SFXGUIValue_MarkerObjective
// 0x0013 (0x01A8 - 0x0195)
class USFXGUIValue_MarkerObjective : public USFXGUIValue_Marker
{
public:
	float                                              MarkerReticleStayUpDuration;                      		// 0x0198 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MarkerTextStayUpDuration;                         		// 0x019C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class ABioPawn*                                    LocalPlayer;                                      		// 0x01A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      ShouldPlaySpawn : 1;                              		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1638 ];

		return pClassPointer;
	};

	void FadeOutMarker ( );
	void PulseMarker ( );
	void PlayOnSpawnSoundEffect ( );
	void Update ( struct FSFXGUISceneView* SceneView );
	void DeferredInitialize ( );
	void Initialize ( );
};

UClass* USFXGUIValue_MarkerObjective::pClassPointer = NULL;

// Class SFXGame.SFXGUIValue_MarkerPlayer
// 0x0023 (0x01B8 - 0x0195)
class USFXGUIValue_MarkerPlayer : public USFXGUIValue_Marker
{
public:
	class ABioPawn*                                    Player;                                           		// 0x0198 (0x0004) [0x0000000000000000]              
	float                                              TimeToHideDeathIconAt;                            		// 0x019C (0x0004) [0x0000000000000000]              
	float                                              RemainingTimeUntilShowTitle;                      		// 0x01A0 (0x0004) [0x0000000000000000]              
	float                                              MaxWorldDistanceForVisibility;                    		// 0x01A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxScreenDistanceFromCenter;                      		// 0x01A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LingeringDeathIconTime;                           		// 0x01AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TitleTextDelayTime;                               		// 0x01B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      PreviousIconIsVisible : 1;                        		// 0x01B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      PreviousPlayerIsDead : 1;                         		// 0x01B4 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1639 ];

		return pClassPointer;
	};

	void* eventGetPlayerTitle ( );
	bool IsTargetInAreaOfInterest ( struct FVector TargetLocation, struct FSFXGUISceneView* SceneView );
	void UpdateIcon ( unsigned long PlayerIsDown, unsigned long PlayerIsDead );
	void Update ( struct FSFXGUISceneView* SceneView );
	void DeferredMarkerTextUpdate ( );
	void Initialize ( );
};

UClass* USFXGUIValue_MarkerPlayer::pClassPointer = NULL;

// Class SFXGame.SFXGUIValue_PowerIcon
// 0x00E6 (0x0152 - 0x006C)
class USFXGUIValue_PowerIcon : public UGFxValue
{
public:
	struct FString                                     m_aPowerStatePaths[ 0x8 ];                        		// 0x006C (0x0060) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelButtonIcon                    oMappedIcon;                                      		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     sPath;                                            		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     sID;                                              		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     sIconResource;                                    		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     sName;                                            		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     sDescription;                                     		// 0x010C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     sMappedBGPath;                                    		// 0x0118 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CurrentInfoText;                                  		// 0x0124 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       nmPowerName;                                      		// 0x0130 (0x0008) [0x0000000000000000]              
	float                                              fBoundary;                                        		// 0x0138 (0x0004) [0x0000000000000000]              
	class USFXPowerCustomActionBase*                   pPower;                                           		// 0x013C (0x0004) [0x0000000000000000]              
	class ABioPawn*                                    pPawn;                                            		// 0x0140 (0x0004) [0x0000000000000000]              
	int                                                nIcon;                                            		// 0x0144 (0x0004) [0x0000000000000000]              
	int                                                nCooldownValue;                                   		// 0x0148 (0x0004) [0x0000000000000000]              
	unsigned long                                      bHenchIcon : 1;                                   		// 0x014C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDirty : 1;                                       		// 0x014C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSelected : 1;                                    		// 0x014C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bVisible : 1;                                     		// 0x014C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDelayedFlash : 1;                                		// 0x014C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bMapped : 1;                                      		// 0x014C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bDragHover : 1;                                   		// 0x014C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      FlashWhenTextChanges : 1;                         		// 0x014C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned char                                      eState;                                           		// 0x0150 (0x0001) [0x0000000000000000]              
	unsigned char                                      eDesiredState;                                    		// 0x0151 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1640 ];

		return pClassPointer;
	};

	void eventCleanup ( );
	struct FString eventAS_GetDropTarget ( );
	void eventAS_StopDragging ( );
	void eventAS_BeginDragging ( );
	struct FString GetInfoTextPath ( );
	struct FString GetStatePath ( unsigned char ePathState );
	void SetDragHover ( unsigned long bHover );
	void SetHover ( unsigned long bHover, unsigned long bSkipTransition );
	void UpdateInfoText ( );
	bool EvaluateForTarget ( class AActor* pTarget, struct FString* sOutInfo );
	void MadeVisible ( unsigned long bIconIsRendering );
	bool IsUsable ( );
	void SetSelected ( unsigned long bSelect );
	void Activate ( );
	void Map ( unsigned char eMapIcon );
	void Flash ( );
	void CooldownComplete ( );
	void TickCooldown ( );
	void UpdateCooldown ( unsigned long bForceUpdate );
	void SetStateDisplay ( );
	void SetState ( unsigned char eNewState, unsigned long bForceUpdate );
	void SetIcon ( int nNewIcon, struct FString sIconResourcePath );
	void ClearIcon ( );
	int GetCooldownPercentage ( );
	void UpdateDisplay ( );
	void SetPower ( class USFXPowerCustomActionBase* pNewPower );
	void Hide ( );
};

UClass* USFXGUIValue_PowerIcon::pClassPointer = NULL;

// Class SFXGame.SFXGUIValue_HUDPowerIcon
// 0x0006 (0x0158 - 0x0152)
class USFXGUIValue_HUDPowerIcon : public USFXGUIValue_PowerIcon
{
public:
	unsigned long                                      bCooldownActive : 1;                              		// 0x0154 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1641 ];

		return pClassPointer;
	};

	struct FName eventGetMappedHenchmanPower ( class ABioPawn* pHenchPawn );
	void CheckCooldownState ( );
	void SetToDefaultHenchIcon ( class ABioPawn* pPowerPawn );
	void SetBaseIconVisibility ( unsigned long bMakeVisible );
	void PowerUsed ( class USFXPowerCustomActionBase* pUsedPower );
	void Map ( unsigned char eMapIcon );
	void SetIcon ( int nNewIcon, struct FString sIconResourcePath );
	void CooldownComplete ( );
	void BeginCooldown ( );
	void UpdateCooldown ( unsigned long bForceUpdate );
	struct FString GetInfoTextPath ( );
	struct FString GetStatePath ( unsigned char ePathState );
	void ClearIcon ( );
};

UClass* USFXGUIValue_HUDPowerIcon::pClassPointer = NULL;

// Class SFXGame.SFXGUIValue_QuickSlotPowerIcon
// 0x0000 (0x0152 - 0x0152)
class USFXGUIValue_QuickSlotPowerIcon : public USFXGUIValue_PowerIcon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1642 ];

		return pClassPointer;
	};

	void eventCleanup ( );
	struct FString eventAS_GetDropTarget ( );
	void eventAS_StopDragging ( );
	void eventAS_BeginDragging ( );
	struct FString GetInfoTextPath ( );
	struct FString GetStatePath ( unsigned char ePathState );
	void SetDragHover ( unsigned long bHover );
	void SetHover ( unsigned long bHover, unsigned long bSkipTransition );
	void UpdateInfoText ( );
	bool EvaluateForTarget ( class AActor* pTarget, struct FString* sOutInfo );
	void MadeVisible ( unsigned long bIconIsRendering );
	bool IsUsable ( );
	void SetSelected ( unsigned long bSelect );
	void Activate ( );
	void Map ( unsigned char eMapIcon );
	void Flash ( );
	void CooldownComplete ( );
	void TickCooldown ( );
	void UpdateCooldown ( unsigned long bForceUpdate );
	void SetStateDisplay ( );
	void SetState ( unsigned char eNewState, unsigned long bForceUpdate );
	void SetIcon ( int nNewIcon, struct FString sIconResourcePath );
	void ClearIcon ( );
	int GetCooldownPercentage ( );
	void UpdateDisplay ( );
	void SetPower ( class USFXPowerCustomActionBase* pNewPower );
	void Hide ( );
};

UClass* USFXGUIValue_QuickSlotPowerIcon::pClassPointer = NULL;

// Class SFXGame.SFXSaveLoadWidgetProxy
// 0x0014 (0x0050 - 0x003C)
class USFXSaveLoadWidgetProxy : public UObject
{
public:
	void*                                              LoadingMessage;                                   		// 0x003C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              SavingMessage;                                    		// 0x0040 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              DeletingMessage;                                  		// 0x0044 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              NetworkMessage;                                   		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bShowMessage : 1;                               		// 0x004C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1643 ];

		return pClassPointer;
	};

	void HideNetworkMessage ( unsigned long bDoTransition );
	void ShowNetworkMessage ( unsigned long bDoTransition, void* srMessage );
	void HideLoadingMessage ( unsigned long bDoTransition );
	void ShowLoadingMessage ( unsigned long bDoTransition, void* srMessage );
	void ShowDeletingMessage ( unsigned long bDoTransition, void* srMessage );
	void HideSavingMessage ( unsigned long bDoTransition );
	void ShowSavingMessage ( unsigned long bDoTransition, void* srMessage );
};

UClass* USFXSaveLoadWidgetProxy::pClassPointer = NULL;

// Class SFXGame.SFXSF_ReticleBase
// 0x0030 (0x006C - 0x003C)
class USFXSF_ReticleBase : public UObject
{
public:
	struct FString                                     m_sSFPath;                                        		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sFlashLinkageIdentifier;                        		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector2D                                   m_vHUDLocation;                                   		// 0x0054 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_pTarget;                                        		// 0x005C (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   m_oReticle;                                       		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                m_nFlashLayerModifier;                            		// 0x0064 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bFirstUpdate : 1;                               		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bHasInTransition : 1;                           		// 0x0068 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bHasOutTransition : 1;                          		// 0x0068 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bVisible : 1;                                   		// 0x0068 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bInTransitionOut : 1;                           		// 0x0068 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1644 ];

		return pClassPointer;
	};

	void eventUpdateReticleDisplay ( );
	bool eventIsUpdateRequired ( float fDeltaT );
	void eventPlayVisibleTransition ( unsigned long bVisible );
	void eventClearReticle ( unsigned long bTransition );
	void eventSetReticle ( struct FString sSFReticlePath );
	void eventSetVisible ( unsigned long bVisible, unsigned long bTransition );
};

UClass* USFXSF_ReticleBase::pClassPointer = NULL;

// Class SFXGame.SFXSF_ReticleCombatObject
// 0x0000 (0x006C - 0x006C)
class USFXSF_ReticleCombatObject : public USFXSF_ReticleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1645 ];

		return pClassPointer;
	};

	void eventUpdateReticleDisplay ( );
	bool eventIsUpdateRequired ( float fDeltaT );
	void eventPlayVisibleTransition ( unsigned long bVisible );
	void eventClearReticle ( unsigned long bTransition );
	void eventSetReticle ( struct FString sSFReticlePath );
	void eventSetVisible ( unsigned long bVisible, unsigned long bTransition );
};

UClass* USFXSF_ReticleCombatObject::pClassPointer = NULL;

// Class SFXGame.SFXSF_ReticleCombatTarget
// 0x0030 (0x009C - 0x006C)
class USFXSF_ReticleCombatTarget : public USFXSF_ReticleBase
{
public:
	struct FVector2D                                   m_vExtents;                                       		// 0x006C (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_vExtentShrinkDelta;                             		// 0x0074 (0x0008) [0x0000000000000000]              
	float                                              m_fMinTargetSelectionWidth;                       		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              m_fMinTargetSelectionHeight;                      		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              m_fReticleShrinkTime;                             		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              m_fFlourishLifeTime;                              		// 0x0088 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   m_oReticleTarget;                                 		// 0x008C (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   m_oReticleTargetBase;                             		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              m_fSelectionBoxScalingFactor;                     		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bPreviouslyInitialized : 1;                     		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDoingActionFlourish : 1;                       		// 0x0098 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1646 ];

		return pClassPointer;
	};

	void eventClearReticle ( unsigned long bTransition );
	void eventSetReticle ( struct FString sSFReticlePath );
};

UClass* USFXSF_ReticleCombatTarget::pClassPointer = NULL;

// Class SFXGame.SFXWeaponUIData
// 0x0018 (0x0054 - 0x003C)
class USFXWeaponUIData : public UObject
{
public:
	TArray< struct FSFXWeaponSelectWeaponData >        m_aWeapons;                                       		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXWeaponModData >                 m_aMods;                                          		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1647 ];

		return pClassPointer;
	};

};

UClass* USFXWeaponUIData::pClassPointer = NULL;

// Class SFXGame.SFXWeaponUIDataManager
// 0x006C (0x00A8 - 0x003C)
class USFXWeaponUIDataManager : public UObject
{
public:
	TArray< struct FSFXUIDataResource >                WeaponUIDataResources;                            		// 0x003C (0x000C) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFXWeaponSelectWeaponData >        WeaponUIData;                                     		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSFXWeaponModData >                 ModUIData;                                        		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< void* >                                    RomanNumerals;                                    		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDataLoadedDelegate__Delegate;                 		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	void*                                              StatNameAccuracy;                                 		// 0x0078 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              StatNameDamage;                                   		// 0x007C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              StatNameFireRate;                                 		// 0x0080 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              StatNameMagSize;                                  		// 0x0084 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              StatNameWeight;                                   		// 0x0088 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              MaxAccuracyValue;                                 		// 0x008C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              MaxDamageValue;                                   		// 0x0090 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              MaxFireRateValue;                                 		// 0x0094 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              MaxMagazineValue;                                 		// 0x0098 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              MaxWeightValue;                                   		// 0x009C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              MaxWeaponLevel;                                   		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      DataIsLoaded : 1;                                 		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1648 ];

		return pClassPointer;
	};

	struct FString GetRomanNumeral ( int nLevel );
	bool CategoryHasNewWeapons ( unsigned char eType, unsigned long bOnlyAvailableWeapons );
	bool IsWeaponNew ( int nWeaponIndex );
	struct FString GetWeaponName ( int nWeaponIndex );
	TArray< int > GetModsForWeaponType ( unsigned char eType, unsigned long bAllowAllMods );
	TArray< int > GetModsForWeapon ( int nWeapIndex, unsigned long bAllowAllMods );
	TArray< struct FName > GetWeaponModsByClassName ( struct FName nmWeapClass, struct FName nmHench );
	TArray< struct FName > GetCurrentWeaponMods ( int nWeaponIndex, struct FName nmHench );
	struct FString GetModDescription ( int nModIndex, int nLevel );
	struct FString GetModDisplayName ( int nModIndex, int nLevel );
	struct FSFXWeaponUIStats GetModStatsForLevel ( struct FSFXWeaponModData oModData, int nLevel );
	struct FSFXWeaponUIStats GetWeaponModValuesByClassName ( struct FName nmWeapClass, struct FName nmHench );
	struct FSFXWeaponUIStats GetWeaponModValues ( int nWeapIndex, struct FName nmHench );
	float GetWeaponUIStatValue ( int nWeapIndex, unsigned char eStat, struct FSFXWeaponUIStats oModValues, unsigned long bAddModStat, float* fModBonus );
	bool GetWeaponIniData ( struct FString WeaponPath, float WeaponLevelOverMaxLevel, float* Accuracy, float* Damage, float* RateOfFire, float* AmmoCapacity, float* Weight );
	struct FSFXWeaponModData GetWeaponModUIDataFromClassName ( struct FName nmModClass, int* nIndex );
	TArray< int > GetWeaponsByType ( unsigned char eType, unsigned long bOnlyAvailableWeapons );
	struct FSFXWeaponSelectWeaponData GetWeaponUIDataFromClassPath ( struct FName nmWeaponClass, int* nIndex );
	struct FSFXWeaponSelectWeaponData GetWeaponUIDataFromClassName ( struct FName nmWeaponClass, int* nIndex );
	void CalculateMaximumStatBarValues ( );
	bool ModIndexIsValid ( int nIndex );
	bool WeaponIndexIsValid ( int nIndex );
	void OnDataLoaded ( );
	void LoadData ( struct FScriptDelegate doneCallback, unsigned long bForceReLoad );
	void Clear ( );
	void OnDataLoadedDelegate ( );
};

UClass* USFXWeaponUIDataManager::pClassPointer = NULL;

// Class SFXGame.BioCameraZoom
// 0x0064 (0x00A0 - 0x003C)
class UBioCameraZoom : public UObject
{
public:
	struct FBioZoomFocusConfig                         m_focusConfig;                                    		// 0x003C (0x002C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FBioZoomMagnificationConfig                 m_magnificationConfig;                            		// 0x0068 (0x0010) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                m_nCurrentMagnificationLevel;                     		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              m_fFOVTarget;                                     		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              m_fFOVRate;                                       		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              m_fFOVMin;                                        		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              m_fFOVMax;                                        		// 0x0088 (0x0004) [0x0000000000000000]              
	float                                              m_fCamStickScalarTarget;                          		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              m_fCamStickScalarRate;                            		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              m_fCamStickScalarMin;                             		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              m_fFocusDistance;                                 		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              m_fFocusDistanceTarget;                           		// 0x009C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1649 ];

		return pClassPointer;
	};

	void ModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
	void Tick ( float TimeDelta, float FOV, float CamStickScalar );
	int GetCurrentMagnificationLevel ( );
	void Focus ( float fDistance, class ABioWorldInfo* pWorldInfo );
};

UClass* UBioCameraZoom::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode
// 0x00B0 (0x00EC - 0x003C)
class USFXCameraMode : public UObject
{
public:
	struct FTViewTarget                                ViewTarget;                                       		// 0x003C (0x002C) [0x0000000000000000]              
	struct FTPOV                                       m_pov;                                            		// 0x0068 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     Offset;                                           		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HookOffset;                                       		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LastHookPos;                                      		// 0x009C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    CameraTargetDir;                                  		// 0x00A8 (0x000C) [0x0000000000000000]              
	struct FName                                       HookName;                                         		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CameraName;                                       		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LastCameraCollisionActor;                         		// 0x00C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              FOV;                                              		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AspectRatio;                                      		// 0x00D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TimeToRecenter;                                   		// 0x00D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RotationSpeedLimit;                               		// 0x00D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class USFXCameraInput*                             Input;                                            		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CollisionDistance;                                		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RecenterStrength;                                 		// 0x00E4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsCameraShakeEnabled : 1;                        		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCollisionEnabled : 1;                            		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bConstrainAspectRatio : 1;                        		// 0x00E8 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRecenterCamera : 1;                              		// 0x00E8 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFirstPerson : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCameraRubberBand : 1;                            		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAllowSpectate : 1;                               		// 0x00E8 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bRecenterCameraNew : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAutoCancelCameraRecentering : 1;                 		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bRecenterCancelled : 1;                           		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000200] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1650 ];

		return pClassPointer;
	};

	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot );
	bool GetActorCameraHook ( struct FVector* OutLocation );
	bool CheckLoop ( class USFXCameraMode* M, int RecurseLevel );
	void DrawHUD ( class UBioCheatManager* M );
	struct FRotator GetCurrentShake ( );
	bool IsCollisionEnabled ( );
	void Initialize ( );
	void MakeInactive ( );
	void MakeActive ( );
	void eventAimAtPoint ( struct FVector V );
	struct FVector GetCameraHook ( );
	struct FVector CalculateOffsetHook ( float Distance );
	void DoSniperCameraCollision ( class AActor* A, struct FVector* V, struct FRotator* R );
	void Tick ( float TimeDelta );
	struct FVector GetCameraLocation ( );
	void ComputeClipPlaneRect ( float fFov, float fNearClipPlane, float* fWidth, float* fHeight );
	void DoCameraCollisionNative ( struct FVector CollisionHook, class AActor* A, struct FVector* V, struct FRotator* R );
	class AController* eventGetViewTargetAsController ( );
	class APawn* GetViewTargetAsPawn ( );
	void DoCameraCollision ( class AActor* Owner, struct FVector* CamPosition, struct FRotator* CamRotation );
	void eventModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
};

UClass* USFXCameraMode::pClassPointer = NULL;

// Class SFXGame.SFXCameraInput
// 0x001C (0x0058 - 0x003C)
class USFXCameraInput : public UObject
{
public:
	struct FVector2D                                   CameraSensitivity;                                		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeToReachFullSpeed;                             		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxCameraRotationSpeed;                           		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StickDeadZone;                                    		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MouseClampMax;                                    		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bUseExplorationSensitivity : 1;                 		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSwitchSticks : 1;                                		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bClampMouse : 1;                                  		// 0x0054 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1651 ];

		return pClassPointer;
	};

};

UClass* USFXCameraInput::pClassPointer = NULL;

// Class SFXGame.BioCameraUtility
// 0x0004 (0x00F0 - 0x00EC)
class UBioCameraUtility : public USFXCameraMode
{
public:
	float                                              m_fCameraCollisionTestPointRange;                 		// 0x00EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1652 ];

		return pClassPointer;
	};

};

UClass* UBioCameraUtility::pClassPointer = NULL;

// Class SFXGame.BioCameraBehavior
// 0x0000 (0x00F0 - 0x00F0)
class UBioCameraBehavior : public UBioCameraUtility
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1653 ];

		return pClassPointer;
	};

};

UClass* UBioCameraBehavior::pClassPointer = NULL;

// Class SFXGame.BioCameraBehaviorConversation
// 0x006C (0x015C - 0x00F0)
class UBioCameraBehaviorConversation : public UBioCameraBehavior
{
public:
	struct FVector                                     m_vFixedCamPosition;                              		// 0x00F0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rFixedCamRotation;                              		// 0x00FC (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vProceduralCamPosition;                         		// 0x0108 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rProceduralCamRotation;                         		// 0x0114 (0x000C) [0x0000000000000000]              
	struct FBioStageDOFData                            m_tDOFData;                                       		// 0x0120 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rRotationOffset;                                		// 0x012C (0x000C) [0x0000000000000000]              
	class AActor*                                      ViewSource;                                       		// 0x0138 (0x0004) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              m_fNearPlane;                                     		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              CAMERA_FOV;                                       		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              m_fLateralOffset;                                 		// 0x0148 (0x0004) [0x0000000000000000]              
	class UAnimSet*                                    m_pIdleCamAnimSet;                                		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              m_fIdleCamTimeIndex;                              		// 0x0150 (0x0004) [0x0000000000000000]              
	int                                                m_idleCamAnimIndex;                               		// 0x0154 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDOFSettingDisabled : 1;                        		// 0x0158 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bIdleCamEnabled : 1;                            		// 0x0158 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1654 ];

		return pClassPointer;
	};

	void eventModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
	void InternalModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
	void Reset ( );
	void MakeInactive ( );
	void Initialize ( );
	void ForcePOV ( );
	void ShutDown ( );
	void Tick ( float TimeDelta );
};

UClass* UBioCameraBehaviorConversation::pClassPointer = NULL;

// Class SFXGame.BioCameraBehaviorGalaxy
// 0x0340 (0x0430 - 0x00F0)
class UBioCameraBehaviorGalaxy : public UBioCameraBehavior
{
public:
	struct FMap_Mirror                                 m_mapObjectLookup;                                		// 0x00F0 (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_mapActorLookup;                                 		// 0x012C (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_mapActorPool;                                   		// 0x0168 (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FString                                     m_sSelectableObject;                              		// 0x01A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sPlanetEvent;                                   		// 0x01B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSFXGalaxyMapSelector >             m_SystemSelectors;                                		// 0x01BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSFXGalaxyMapSelector >             m_ClusterSelectors;                               		// 0x01C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSFXGalaxyMapSelector >             m_GalaxySelectors;                                		// 0x01D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AActor* >                            m_pDynamicClusterPath;                            		// 0x01E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AActor* >                            m_aGalaxyActors;                                  		// 0x01EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AActor* >                            m_aClusterActors;                                 		// 0x01F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AActor* >                            m_aSystemActors;                                  		// 0x0204 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AActor* >                            m_aPlanetActors;                                  		// 0x0210 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AActor* >                            m_aSelectableActors;                              		// 0x021C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FBioMassRelayLine >                 m_ClusterRelayLines;                              		// 0x0228 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      m_DistanceRelayPath;                              		// 0x0234 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      m_ActiveRelayPath;                                		// 0x0240 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSFXSystemScanData >                m_aSystemScans;                                   		// 0x024C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AActor* >                            m_aSystemScanCandidates;                          		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    m_pCurrentMapActors;                              		// 0x0264 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FScreenShakeStruct                          ClusterTravelShake;                               		// 0x0268 (0x0078) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vShipDesiredDirection;                          		// 0x02E0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vZoomLocation;                                  		// 0x02EC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vZoomDelta;                                     		// 0x02F8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rZoomRotation;                                  		// 0x0304 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLastCameraLocation;                            		// 0x0310 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USFXGalaxy*                                  m_pGalaxyMap;                                     		// 0x031C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXCluster*                                 m_pCurrentCluster;                                		// 0x0320 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXSystem*                                  m_pCurrentSystem;                                 		// 0x0324 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioPlanet*                                  m_pCurrentPlanet;                                 		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMovementScalar;                                		// 0x032C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMovementScalarGalaxy;                          		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMovementScalarCluster;                         		// 0x0334 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMovementScalarSystem;                          		// 0x0338 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRotationScalar;                                		// 0x033C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fShipCurrentRotationSpeed;                      		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fShipCurrentMovementSpeed;                      		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fShipMinRotationSpeed;                          		// 0x0348 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fShipMaxRotationSpeed;                          		// 0x034C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fShipControlDeadzone;                           		// 0x0350 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fShipSystemAccel;                               		// 0x0354 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fShipSystemDeccel;                              		// 0x0358 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fShipClusterAccel;                              		// 0x035C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fShipClusterDeccel;                             		// 0x0360 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nCurrentState;                                  		// 0x0364 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pCenterObject;                                  		// 0x0368 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pCrossHairObject;                               		// 0x036C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pCameraObject;                                  		// 0x0370 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxOrbitDistance;                              		// 0x0374 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPlanarPitch;                                   		// 0x0378 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pLastSelectedObject;                            		// 0x037C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pMapCurrentObject;                              		// 0x0380 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pSelectedObject;                                		// 0x0384 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pSelectedCluster;                               		// 0x0388 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pSelectedSystem;                                		// 0x038C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pSelectedPlanet;                                		// 0x0390 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pMassRelaySystem;                               		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pFuelEllipseObject;                             		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pMassRelayObject;                               		// 0x039C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pRedMassRelayObject;                            		// 0x03A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pDepotObject;                                   		// 0x03A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fZoomTime;                                      		// 0x03A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetImageIndex;                              		// 0x03AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetMap;                                     		// 0x03B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nButtonLabel;                                   		// 0x03B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nExitMap;                                       		// 0x03B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nActiveWorld;                                   		// 0x03BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nScanRange;                                     		// 0x03C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nHighlightWorld;                                		// 0x03C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADynamicSMActor*                             m_pTemplatePlanet;                                		// 0x03C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPlanetRotation;                                		// 0x03CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxGalaxyDistance;                             		// 0x03D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxClusterDistance;                            		// 0x03D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxSystemDistance;                             		// 0x03D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetEventConditional;                        		// 0x03DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetEventParameter;                          		// 0x03E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetEventTransition;                         		// 0x03E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetEventTransParameter;                     		// 0x03E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              m_srPlanetEventMessage;                           		// 0x03EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UForceFeedbackWaveform*                      ClusterTravelFF;                                  		// 0x03F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ClusterTravelShakeTime;                           		// 0x03F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ClusterTravelFFTime;                              		// 0x03F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseAudioComponent*                        m_pAudioComponent;                                		// 0x03FC (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class USFXGalaxyMapGameData*                       Data;                                             		// 0x0400 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastNoFuelMessageTime;                         		// 0x0404 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSystemExitRingScalar;                          		// 0x0408 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fSystemEnterMaxDistanceScalar;                  		// 0x040C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                MaxPlotLabelsInTag;                               		// 0x0410 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fSystemScanCooldown;                            		// 0x0414 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSystemScanCooldownTime;                        		// 0x0418 (0x0004) [0x0000000000000000]              
	float                                              m_fSystemScanRange;                               		// 0x041C (0x0004) [0x0000000000000000]              
	float                                              m_fSystemScanPropagationSpeed;                    		// 0x0420 (0x0004) [0x0000000000000000]              
	void*                                              srReaperTutorialMessage;                          		// 0x0424 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srScanningTutorialMessage;                        		// 0x0428 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bInitialized : 1;                               		// 0x042C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bTransitionDown : 1;                            		// 0x042C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bFirstStage : 1;                                		// 0x042C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bPlanetUsable : 1;                              		// 0x042C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bPlanetScanable : 1;                            		// 0x042C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bPlanetInteractive : 1;                         		// 0x042C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bPaused : 1;                                    		// 0x042C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bRefreshPlanetUsable : 1;                       		// 0x042C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bRebuildPlanetRingCache : 1;                    		// 0x042C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bSelectedPlanetLastFrame : 1;                   		// 0x042C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bUseInternalPlanetEvent : 1;                    		// 0x042C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      m_bCanExploreCluster : 1;                         		// 0x042C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      m_bSystemSunVisible : 1;                          		// 0x042C (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      m_bCanDoSystemScan : 1;                           		// 0x042C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1655 ];

		return pClassPointer;
	};

	class UBioPlanet* GetCurrentPlanet ( );
	void ScanSystem ( );
	class USFXGalaxyMapObject* FindGalaxyMapObjectFromActor ( class AActor* oActor );
	class AActor* FindActorFromGalaxyMapObject ( class USFXGalaxyMapObject* oObject );
	void Cleanup ( );
	void BuildSelectors ( );
	void UpdateSelectorPositions ( );
	void SetMapLevel ( unsigned long bTransitionDown, unsigned long bFirstOpen );
	void ZoomCamera ( unsigned long bTransitionDown, unsigned long bStartAtCamera, unsigned long bFirstStage );
	bool ExecuteTravel ( );
	bool ValidLevelTransition ( unsigned long bTransitionDown );
	class AActor* FindActorByTagName ( struct FString sName, int nSuffixLen );
	class AActor* FindGalaxyMapActor ( struct FName TagName, unsigned long bSearchLevel );
	int BuildWorldID ( class AActor* pCluster, class AActor* PSystem, class AActor* pPlanet );
	class UBioPlanet* GetActivePlanet ( );
	class UBioPlanet* GetPlanet ( int nWorldID );
	bool TriggerEvent ( struct FName sEvent, struct FName nParameter );
	class UBioSFHandler_GalaxyMap* GetGUI ( );
	void eventUpdateFuelAndCashDisplay ( );
	void eventUpdateUITitle ( );
	bool ReapersCanChasePlayer ( );
	void eventTickGameMode ( float fDeltaT );
	void SetLTriggerLabelVisible ( unsigned long bShow, void* srText );
	void SetRTriggerLabelVisible ( unsigned long bShow, void* srText );
	void eventEnableSystemScanning ( unsigned long bCanScan );
	void eventShowScanningTutorial ( );
	void eventShowReaperTutorial ( );
	struct FVector GetCameraLocation ( );
	void eventSetExplorationAchievementCompleted ( );
	void eventUpdateClusterTravelEffects ( float TimeDelta );
	void eventOutOfFuelPenalty ( float fDistToDepot );
	void eventBurnFuel ( float fFuel );
	float eventGetFuelEfficiency ( );
	float eventGetMaxFuel ( );
	float eventGetRemainingFuel ( );
	int eventGetNumCredits ( );
	void HandleRevealLandingSite ( );
	bool HandleSelectPlanet ( );
	void Tick ( float TimeDelta );
};

UClass* UBioCameraBehaviorGalaxy::pClassPointer = NULL;

// Class SFXGame.SFXCameraModifier_ScreenShake
// 0x0087 (0x00DC - 0x0055)
class USFXCameraModifier_ScreenShake : public UCameraModifier
{
public:
	TArray< struct FScreenShakeStruct >                Shakes;                                           		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScreenShakeStruct                          TestShake;                                        		// 0x0064 (0x0078) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1656 ];

		return pClassPointer;
	};

	bool ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV );
	void UpdateScreenShake ( float DeltaTime, struct FScreenShakeStruct* Shake, struct FTPOV* OutPOV );
	void StartNewShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency );
	struct FScreenShakeStruct ComposeNewShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency );
	float InitializeOffset ( unsigned char Param );
	struct FScreenShakeStruct InitializeShake ( struct FScreenShakeStruct NewShake );
	void AddScreenShake ( struct FScreenShakeStruct* NewShake );
	void RemoveScreenShake ( struct FName ShakeName );
	void RemoveAllScreenShakes ( );
};

UClass* USFXCameraModifier_ScreenShake::pClassPointer = NULL;

// Class SFXGame.SFXCameraNativeBase
// 0x0068 (0x0490 - 0x0428)
class ASFXCameraNativeBase : public ACamera
{
public:
	TArray< class USFXCameraMode* >                    CameraModes;                                      		// 0x0428 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FSFXCameraNativeBaseTraceInfo               m_aTraceInfo;                                     		// 0x0434 (0x0024) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    AdditiveRotation;                                 		// 0x0458 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    SubtractiveRotation;                              		// 0x0464 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   CameraStick;                                      		// 0x0470 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   MovementStick;                                    		// 0x0478 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXCameraMode*                              CurrentCameraMode;                                		// 0x0480 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXCameraMode*                              LastGoodMode;                                     		// 0x0484 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AspectRatio;                                      		// 0x0488 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDisabled : 1;                                    		// 0x048C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bIgnoreSlowMo : 1;                              		// 0x048C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bCameraSwitchEnabled : 1;                       		// 0x048C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUseCameraRotation : 1;                           		// 0x048C (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1657 ];

		return pClassPointer;
	};

	void eventAddScreenShake ( struct FScreenShakeStruct Shake );
	void eventCreateIPECommands ( class UBioInGamePropertyEditor* IPE, class UBioPropertyEditorBaseNode* Parent );
	float BioAdjustFOVForViewport ( float inHorizFOV, class APawn* CameraTargetPawn );
	class UCameraAnimInst* PlayCameraAnimEx ( class UCameraAnim* Anim, float Rate, float Scale, float StartTime, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, float Duration, unsigned long bSingleInstance );
	void SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	class AActor* LineCheck ( unsigned long TraceActors, struct FVector Extent, int ExtraTraceFlags, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* HitNormal, struct FVector* TraceEnd );
	struct FRotator GetRotation ( );
	void ResetHiddenActors ( );
	void TraceCamera ( struct FTViewTarget* VT );
	struct FVector WorldToScreenSnapToEdge ( float i_fSafeZoneX, float i_fSafeZoneY, struct FVector* vWorldLoc );
	struct FVector WorldToCanonicalScreen ( struct FVector* vWorldLoc );
	bool GetTrace ( class AActor** oHit, struct FVector* vLocation, struct FVector* vNormal );
};

UClass* ASFXCameraNativeBase::pClassPointer = NULL;

// Class SFXGame.BioAiController
// 0x00A4 (0x0480 - 0x03DC)
class ABioAiController : public AGameAIController
{
public:
	TArray< struct FEnemyInfo >                        EnemyList;                                        		// 0x03DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDelayUpdateInfo >                  DelayUpdateList;                                  		// 0x03E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AActor* >                            IgnoredTargets;                                   		// 0x03F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ABioBaseSquad* >                     IgnoredSquads;                                    		// 0x0400 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     MovePoint;                                        		// 0x040C (0x000C) [0x0000000000000000]              
	struct FCoverInfo                                  Cover;                                            		// 0x0418 (0x0008) [0x0000000000000000]              
	struct FCoverInfo                                  CoverGoal;                                        		// 0x0420 (0x0008) [0x0000000000000000]              
	struct FCoverInfo                                  LastCover;                                        		// 0x0428 (0x0008) [0x0000000000000000]              
	float                                              EnemyListLastUpdateTime;                          		// 0x0430 (0x0004) [0x0000000000000000]              
	class USFXSeqAct_AIFactory2*                       SpawnFactory;                                     		// 0x0434 (0x0004) [0x0000000000000000]              
	float                                              InterpEnemyLocSpeed;                              		// 0x0438 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Response_MinEnemySeenTime;                        		// 0x043C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Response_MinEnemyHearTime;                        		// 0x0440 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AActor*                                      FireTarget;                                       		// 0x0444 (0x0004) [0x0000000000000000]              
	class AActor*                                      ForcedTarget;                                     		// 0x0448 (0x0004) [0x0000000000000000]              
	class AActor*                                      PreferredTarget;                                  		// 0x044C (0x0004) [0x0000000000000000]              
	float                                              TargetAcquisitionTime;                            		// 0x0450 (0x0004) [0x0000000000000000]              
	float                                              EnemyDistance_Short;                              		// 0x0454 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyDistance_Medium;                             		// 0x0458 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyDistance_Long;                               		// 0x045C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyDistance_Melee;                              		// 0x0460 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fActivateTime;                                  		// 0x0464 (0x0004) [0x0000000000000000]              
	class ABioPawn*                                    MyBP;                                             		// 0x0468 (0x0004) [0x0000000000000000]              
	class AActor*                                      MoveGoal;                                         		// 0x046C (0x0004) [0x0000000000000000]              
	float                                              MoveOffset;                                       		// 0x0470 (0x0004) [0x0000000000000000]              
	float                                              AdjustToSlotTime;                                 		// 0x0474 (0x0004) [0x0000000000000000]              
	float                                              UnawarePeripheralVision;                          		// 0x0478 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDebug_AI : 1;                                    		// 0x047C (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDebug_AIRange : 1;                               		// 0x047C (0x0004) [0x0000000000004001] [0x00000002] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDebug_AIEnemyList : 1;                           		// 0x047C (0x0004) [0x0000000000004001] [0x00000004] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDebug_ThreatRadius : 1;                          		// 0x047C (0x0004) [0x0000000000004001] [0x00000008] ( CPF_Edit | CPF_Config )
	unsigned long                                      bAcquireNewCover : 1;                             		// 0x047C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bHighCoverOnly : 1;                               		// 0x047C (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bReachedMoveGoal : 1;                             		// 0x047C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bReachedCover : 1;                                		// 0x047C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bDisableFriendlyNotifications : 1;                		// 0x047C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bUnaware : 1;                                     		// 0x047C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1658 ];

		return pClassPointer;
	};

	void OnLastManStanding ( );
	void RemoveIgnoredSquad ( class ABioBaseSquad* oSquad );
	void AddIgnoredSquad ( class ABioBaseSquad* oSquad );
	void RemoveIgnoredTarget ( class AActor* oTarget );
	void AddIgnoredTarget ( class AActor* oTarget );
	class AActor* GetPreferredTarget ( );
	void SetPreferredTarget ( class AActor* oTarget );
	class AActor* GetForcedTarget ( );
	void SetForcedTarget ( class AActor* oTarget );
	bool IsTargetInFiringArc ( class ABioPawn* pPawn, class AActor* pTarget, float fFiringArcAsDot, unsigned char LT );
	bool HasLOSToTarget ( class AActor* pTarget, float* fTimeOfHit );
	void Initialize ( );
	void eventOnEnteredPlaypen ( );
	void eventOnLeftPlaypen ( );
	void NotifyCastAt ( class APawn* Attacker, class Usfxpowercustomaction* Power );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void eventNotifyNewEnemyFromFriendly ( class APawn* Target );
	void eventNotifyNoEnemiesPerceived ( );
	void eventNotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	void eventNotifyNewEnemy ( class APawn* NewEnemy, unsigned long bPerceivedDirectly, unsigned long bFirstEnemy );
	void NotifyNewEnemyBase ( class APawn* NewEnemy, unsigned long bPerceivedDirectly, unsigned long bFirstEnemy );
	void PawnDied ( class APawn* inPawn );
	void MoveToSlot ( struct FVector vSlotLocation );
	void AdjustToSlot ( int TargetSlotIdx );
	bool HasValidCover ( );
	void eventUnPossess ( );
	void eventPossess ( class APawn* NewPawn, unsigned long bVehicleTransition );
	bool FindNearestOpenLocation ( struct FVector vStartLocation, class APawn* oTarget, int nMaxShellsToCheck, struct FVector* vFoundLocation );
	void DrawDebug ( class ABioHUD* HUD );
	void RecordDemoAILog ( struct FString LogText );
	void eventDestroyed ( );
	void eventTick ( float DeltaTime );
	bool eventPlayerActivate ( class AActor* Target_ );
	void eventOnLeavingStasis ( );
	void eventOnEnteringStasis ( );
	void FinishAnimatedTransition ( );
	bool AdjustSteeringMoveSpeed ( struct FVector vSteering );
	bool GetSteeringVector ( struct FVector* vSteering );
	void SteeringMovement ( );
	void eventInvalidateCover ( );
	bool IsValidCover ( struct FCoverInfo* TestCover );
	bool GetPawnCover ( class APawn* ChkPawn, unsigned long bOnlyUseCachedCover, struct FCoverInfo* out_Cover );
	bool GetCover ( class APawn* ChkPawn, struct FCoverInfo* out_Cover );
	bool IsCoverExposedToAnEnemy ( class APawn* TestEnemy, unsigned long bActualLocation, struct FCoverInfo* TestCover, float* out_ExposedScale );
	bool DirectWalkCheck ( class AActor* pTarget, struct FVector* vTarget );
	bool IsSwitchingWeapons ( );
	bool IsReloading ( );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_rotation );
	bool CanFireAt ( class AActor* ChkTarget, struct FVector ViewPt, unsigned long bUseEyeLocation, unsigned long bUseRotation );
	bool HasValidTarget ( class AActor* TestTarget );
	bool HasValidEnemy ( class APawn* TestEnemy );
	bool HasAnyEnemies ( );
	void NotifyNearMiss ( struct FVector HitLocation );
	void TestPlayFlinch ( );
	void CheckNearMiss ( class APawn* Shooter, class AWeapon* W, struct FVector WeapLoc, struct FVector LineDir, struct FVector HitLocation );
	bool eventCanHearPawn ( class APawn* Heard, float Loudness, float DistSq, float DotSourceToRotation, struct FName NoiseType );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );
	void eventAutoNotifyEnemy ( );
	void Reset ( );
	void eventAutoAcquireEnemy ( );
	void FillEnemyList ( );
	bool IsMediumRange ( struct FVector TestLocation );
	bool IsShortRange ( struct FVector TestLocation );
	float TimeSinceHurtByEnemy ( int idx );
	float TimeSinceEnemyLocationUpdate ( int idx );
	float TimeSinceEnemyVisible ( int idx );
	float GetPeripheralVision ( );
	bool CanAISeeByPoints ( struct FVector ViewLocation, struct FVector TestLocation, struct FRotator ViewRotation, unsigned long bCheckSmoke );
	void InterpEnemyLocation ( int idx );
	bool IsEnemyVisibleByIndex ( int idx );
	void SetKnownEnemyInfo ( int EnemyIdx, class APawn* EnemyPawn, struct FVector EnemyLoc );
	struct FVector GetEnemyLocationByIndex ( int idx, unsigned char LT );
	bool InShortRange ( struct FVector TestLocation );
	bool InMeleeRange ( struct FVector TestLocation );
	bool InRange ( struct FVector TestLocation, float Distance );
	struct FVector GetLookingDirection ( );
	struct FVector GetEnemyLocation ( class APawn* TestPawn, unsigned char LT );
	struct FVector GetFireTargetLocation ( unsigned char LT );
	int GetEnemyIndex ( class APawn* TestPawn );
	bool IsFriendly ( class AController* Other );
	bool IsHostile ( class AController* Other );
	void MapName_Hench_Teleport ( float X, float Y );
};

UClass* ABioAiController::pClassPointer = NULL;

// Class SFXGame.SFXAI_NativeBase
// 0x0021 (0x04A1 - 0x0480)
class ASFXAI_NativeBase : public ABioAiController
{
public:
	int                                                m_nMantleCostModifier;                            		// 0x0480 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastShotAtTime;                                   		// 0x0484 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXPathWeightLog*                           PathWeightLog;                                    		// 0x0488 (0x0004) [0x0000000000000000]              
	int                                                m_nEnabledFlags;                                  		// 0x048C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFXNav_InteractionPoint*                    CombatIdleNode;                                   		// 0x0490 (0x0004) [0x0000000000000000]              
	float                                              m_fNextTimeForReachableCheck;                     		// 0x0494 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextTimeForBlockedReachSpecCheck;                 		// 0x0498 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bCanSkipNodes : 1;                              		// 0x049C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bInitiallyDisabled : 1;                         		// 0x049C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      CustomReachSpecBlocked : 1;                       		// 0x049C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned char                                      CombatMood;                                       		// 0x04A0 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1659 ];

		return pClassPointer;
	};

	bool eventIsCustomReachSpecBlocked ( class USFXCustomReachSpec* ReachSpec );
	void eventSetSpawnPoint ( class APathNode* SpawnPoint );
	void eventNotifyPlayerFocus ( );
	void eventResetToIdle ( unsigned long bTeleport );
	struct FVector eventGetAimLocation ( class AActor* oAimTarget );
	void eventStoppedSpawning ( );
	void eventStartedSpawning ( );
	float GetCombatRange ( unsigned char CombatRange );
	void CheckLeaveCover ( );
	bool RequiresCover ( class UReachSpec* ReachSpec );
	float GetRouteCacheDistance ( );
	void ValidateFireTargetLocation ( );
	bool HasEnemyWithinDistance ( float Distance, unsigned long bExact, class APawn** out_EnemyPawn );
	bool HasApproximateSightBetweenNodes ( class ANavigationPoint* OriginNav, class ANavigationPoint* TargetNav );
	bool CanNavFireIntoSector ( class ANavigationPoint* Nav, int Sector, float Distance );
	int GetSectorForLine ( struct FVector* SectorLine );
	void SetMoveTimer ( struct FVector* vMove );
	void eventUpdateMovementActions ( );
	void ReachedMoveTarget ( );
	bool IsSpecialMoveAfterMoveTarget ( );
	bool CanSkipCurrentPathNode ( );
	void SmoothPathMovement ( );
	void MoveTowardLocation ( struct FVector vLocation, float fOffset );
	bool AdjustSteeringMoveSpeed ( struct FVector vSteering );
	bool GetSteeringVector ( struct FVector* vSteering );
	void eventGetActorToFollow ( class AActor** oActor, struct FVector* vLocation );
	bool eventIsEnabled ( );
	bool eventEnableAI ( unsigned long bEnable, int nRequestedBy );
	bool eventCanInterruptCurrentState ( );
	bool IsActorInLevel ( class AActor* oActor, class ULevel* oLevel );
	void eventBioClearCrossLevelReferences ( class ULevel* oLevel );
};

UClass* ASFXAI_NativeBase::pClassPointer = NULL;

// Class SFXGame.BioCheatManager
// 0x00C5 (0x0109 - 0x0044)
class UBioCheatManager : public UCheatManager
{
public:
	TArray< struct FProfileData >                      AllProfiles;                                      		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PendingLoadGameDebugName;                         		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PendingSaveGameFileName;                          		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PendingSendToHost;                                		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FGFxWatchData >                     GFxWatchValues;                                   		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CE_Destructible_Name;                             		// 0x0080 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __ProfileHandler__Delegate;                       		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ProfileUtility__Delegate;                       		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FGuid                                       CoverGuid;                                        		// 0x00A4 (0x0010) [0x0000000000000000]              
	struct FName                                       ProfileSubTarget;                                 		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   TopLeft;                                          		// 0x00BC (0x0008) [0x0000000000000000]              
	class AActor*                                      ProfileTarget;                                    		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                CurrentColumn;                                    		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              ColumnWidth;                                      		// 0x00CC (0x0004) [0x0000000000000000]              
	struct FColor                                      ProfileTitleColor;                                		// 0x00D0 (0x0004) [0x0000000000000000]              
	struct FColor                                      ProfileHeaderColor;                               		// 0x00D4 (0x0004) [0x0000000000000000]              
	struct FColor                                      ProfileTextColor;                                 		// 0x00D8 (0x0004) [0x0000000000000000]              
	struct FColor                                      ProfileHighlightColor;                            		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              ProfilesTime;                                     		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              ProfilesDisplayTime;                              		// 0x00E4 (0x0004) [0x0000000000000000]              
	struct FColor                                      GAWTextColor;                                     		// 0x00E8 (0x0004) [0x0000000000000000]              
	struct FColor                                      GAWHighlightColor;                                		// 0x00EC (0x0004) [0x0000000000000000]              
	struct FColor                                      GAWHighlightColor2;                               		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                PendingSendToPort;                                		// 0x00F4 (0x0004) [0x0000000000000000]              
	int                                                m_nMiniNotificationTest;                          		// 0x00F8 (0x0004) [0x0000000000000000]              
	class USFXGUIHelper_ConsoleKeyboard*               m_TestKeyboard;                                   		// 0x00FC (0x0004) [0x0000000000000000]              
	class URvrClientEffectInterface*                   CE_Destructible;                                  		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bProfileHidesGUI : 1;                             		// 0x0104 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bCoverGuidShowing : 1;                            		// 0x0104 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bShowPowerAiming : 1;                           		// 0x0104 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bEnablePowerCooldown : 1;                       		// 0x0104 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDebugAllLevels : 1;                              		// 0x0104 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      CurrentProfile;                                   		// 0x0108 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1660 ];

		return pClassPointer;
	};

	void BlazeDlcMountTime ( float nSeconds, int nStallComponent );
	void TestIsGoBigEnabled ( );
	void GetProductDetailsComplete ( );
	void GetProductDetails ( int aList );
	void EchoStrref ( int StrRef );
	void AdjustWeaponUIPawnOffset ( struct FName nmAppearanceTag, float fX, float fY, float fZ, int nYaw );
	void LogKeyBindings ( );
	void AdvanceQuest ( struct FString sQuestName );
	void ProfileGalaxy ( );
	void ResetReaperAlertLevels ( );
	void ToggleActorVis ( struct FString Target, struct FString Vis );
	void SetLexicalLookup ( unsigned long enable );
	void GetPronunciations ( struct FString word );
	void StopVerboseKinectLogging ( );
	void StartVerboseKinectLogging ( );
	void StopRecordKinectSpeech ( );
	void StartRecordKinectSpeech ( unsigned long SendToServer );
	void CoverPlayer ( struct FString HenchmanName );
	void HenchmanUseNode ( struct FString HenchmanName, struct FName NodeName, unsigned long StartUsingNode );
	void IsBonusPowerUnlocked ( int BonusPowerID );
	void UnlockBonusPower ( int BonusPowerID );
	void TestDisplay1stPartyStore ( );
	void PromptRedeemCode ( );
	void OnPromptRedeemCodeResult ( int nResult );
	void TestDumpDime ( );
	void TestGrantEntitlementId ( int nID );
	void OnGrantEntitlementResult ( struct FBWEntitlementId aID, int nResult );
	void TestAutoGrant ( );
	void OnAutoGrantComplete ( );
	void TestConsumeId ( int nID );
	void OnConsumeResult ( struct FBWConsumableId aID, int nCopies, int nResult );
	void TestPurchaseOfferId ( int nID );
	void OnPurchaseOfferIdResult ( int nResult );
	void TestRefreshDigitalRights ( );
	void OnRefreshDigitalRightsResult ( int nResult );
	void TestEchoWallet ( );
	void TestEchoDigitalRights ( );
	void TestGetConsumablesList ( );
	void TestGetOffersList ( );
	void TestGetEntitlementsList ( );
	void DebugSecondController ( );
	void ShowWeaponSelection ( unsigned long bAll );
	void TestMPObjective ( void* sr, float fPct, unsigned long bBoost );
	void TestCancelCountdown ( );
	void TestCountdown ( float fSeconds, float fWarningSeconds );
	void TestMPTicker ( int nCount );
	void ResetMPPlayerVariables ( );
	void ShowNumPlayers ( );
	void PlayLine ( class UBioSimpleDialog* DialogPlayer, struct FString EventName, int Index );
	void PrintFaceCodesStoredOnline ( );
	void ClearFaceCodes ( );
	void UploadNewFaceCode ( struct FString CharacterName, struct FString faceCode );
	void ProfilePlaceable ( );
	void ProfileLoadSeekFreeAsync ( );
	void PauseTraceStrips ( );
	void RemoveTrace ( int nTrace );
	void ClearTraces ( );
	void TraceActorProperty ( struct FString sTargetActor, struct FName nmProp );
	void TraceActorAnimNode ( struct FString sTargetActor, struct FName nmNode );
	void TraceAxis ( struct FName nmAxis );
	void TraceButton ( struct FName nmButton );
	void DrawSafeFrame ( class ABioHUD* HUD );
	void ShowSafeFrame ( );
	void RemoveHeavyWeapons ( );
	void PermanentBonus ( struct FName UniqueName );
	void PlayBinkMovie ( struct FString MovieName, unsigned long Stream, unsigned long Preload, float LoopDuration );
	void KeyboardTestEntryComplete ( unsigned long bOK, struct FString sText );
	void TestKeyboardInput ( struct FString sDefaultText );
	void HideInterruptUI ( );
	void ShowInterruptUI ( );
	void PerformanceLog ( struct FString Msg );
	float PerformanceTimerStop ( struct FDouble StartTime );
	struct FDouble PerformanceTimerStart ( );
	void GiveGAWCredits ( int Id );
	void ResetAllGAWAssets ( );
	void ResetGAWAssetByName ( struct FString AssetName );
	void ResetGAWAsset ( int Id );
	void UpdateGAWAssetByName ( struct FString AssetName, int NewStrength );
	void UpdateGAWAsset ( int Id, int NewStrength );
	void GiveNextGawAsset ( struct FString Type );
	void GiveExplorationGawAsset ( );
	void GiveAllGAWAssets ( );
	void GiveGAWAssetByName ( struct FString AssetName );
	void GiveGAWAsset ( int Id );
	void ProfileArtifactGAWAssets ( );
	void ProfileSalvageGAWAssets ( );
	void ProfileIntelGAWAssets ( );
	void ProfileDeviceGAWAssets ( );
	void ProfileMilitaryGAWAssets ( );
	void eventDrawBrightText ( struct FString Text, int Highlight, unsigned long bFinishLine );
	void OutputGAWAssetsFromIDs ( int TotalStrength, int AssetCount, TArray< struct FGAWAsset >* Assets );
	void ProfileGAWAssets ( );
	void UpdateGFxWatchValues ( );
	void DebugDraw_GFxWatchValues ( class ABioHUD* HUD );
	void GFxWatch ( struct FName nmMovie, struct FString sPath );
	void TestXMLParser ( );
	void GetGaWSecurityRatingsResult ( TArray< int > updatedSecurityRatings, TArray< int > updatedWarAssets, int Level, int errorCode );
	void GetGaWSecurityRatings ( );
	void GaWHTTPResult ( TArray< int > updatedSecurityRatings, TArray< int > updatedWarAssets, int Level, int errorCode );
	void TestGaWHTTPSystem ( );
	void BinaryHttpResult ( struct FSFXOnlineImageRequest Image );
	void TestBinaryHTTPSystem ( );
	void HTTPResult ( class USFXOnlineHTTPRequest* request );
	void TestHTTPSystem ( );
	void FlushTelemetry ( unsigned long bAnonymous );
	void SendTelemetryTest ( int Number, unsigned long bAnonymous );
	void EbisuCheckOnline ( );
	void EbisuCheckout ( struct FString offerId );
	void EbisuShowCheckoutOverlay ( struct FString offerId );
	void EbisuShowStoreOverlay ( struct FString categoryId );
	void EbisuRequestFriendsList ( );
	void EbisuShowFriendsOverlay ( );
	void EbisuRequestAuthToken ( );
	void VoiceSetOutput ( int outputDevice );
	void VoiceSetInput ( int inputDevice );
	void VoiceGetDefaultOutput ( );
	void VoiceGetDefaultInput ( );
	void VoiceEnumerateOutputs ( );
	void VoiceEnumerateInputs ( );
	void AddBar ( struct FName Id, float X, float Y, float Width, float Lifetime, int C, unsigned long Grows, unsigned long Shrinks );
	void AddText ( struct FName N, struct FString S, float X, float Y, float Timer, float Scale, unsigned long Center );
	void RemoveText ( struct FName N );
	void StopCoverGUI ( );
	void StartCoverGUI ( );
	void ToggleAI ( unsigned long IncludeHenchmen );
	void GetVocalizationBankInfo ( struct FString Target );
	void ToggleWeaponMod ( struct FString WeaponName, struct FString modName );
	void HasChangedDifficulty ( );
	void Revive ( );
	void ToggleScoreIndicators ( );
	void HidePOIIndicator ( );
	void TestPOIIndicator ( );
	void HideActionIndicator ( );
	void TestActionIndicator ( unsigned char eIcon );
	void RevivePawn ( struct FString PawnName );
	void TestString ( struct FString S );
	void WeaponChoiceDialogResult ( class UBioSFHandler_MessageBox* oMsgBox, int nChoiceID );
	void TestWeaponChoice ( );
	void ChoiceDialogResult ( class UBioSFHandler_MessageBox* oMsgBox, int nChoiceID, unsigned long bCancelled );
	void TestChoiceBox ( );
	void CancelHint ( );
	void RestoreHint ( );
	void HideHint ( );
	void ShowHint ( );
	void TestTutorialHint ( int nPosition );
	void TestMessageBox ( unsigned long bDesign, struct FString S );
	void SetAllWeaponModLevels ( int nLevel );
	void SetModLevels ( int nLevel );
	void ShowGFxLog ( unsigned long bShow );
	void CastPower ( struct FName PowerName );
	bool ParseVectorFromFlexibleFormat ( struct FString sInput, struct FVector* vResult );
	void IgnorePlayer ( unsigned long bIgnore );
	void ToggleThreatRadius ( struct FString PawnName );
	void HideLoadingMessage ( );
	void TestLoadingMessage ( float fTime );
	void HideSavingMessage ( );
	void TestSavingMessage ( float fSaveTime );
	void TestPulseFullAmmo ( unsigned long bGrenade );
	void PauseNotifications ( unsigned long bPause );
	void SendMiniNotification ( );
	void Test_MiniNotifications ( unsigned long bStart );
	void Test_Notifications ( );
	void PowersWhileVisible ( );
	void HolsterWeapon ( struct FString nmPawn );
	void ResetAlwaysPlay ( );
	void Speak ( unsigned char EventId, struct FString sInstigator, struct FString sRecipient );
	void ASyncSkeletal ( struct FString Param );
	void LogPermanentObjects ( );
	void LogProperties ( );
	void LogActorClasses ( );
	void LogActorUnclassified ( );
	void LogActorArtPlaceables ( );
	void LogActorPrefabInstances ( );
	void LogActorEmitters ( );
	void LogActorSkelMeshes ( );
	void LogActorPawns ( );
	void LogAnimSequences ( );
	void EnableFaceFX ( unsigned long bEnable );
	void ReadAccomplishments ( );
	void UnlockAllGamerpics ( );
	void SetCurrentChallengeReward ( int Reward );
	void GetCurrentChallengeReward ( );
	void ResetAllChallengeRewards ( );
	void ResetAllMultiplayerGrinders ( );
	void ResetGrinder ( int AccomplishmentProgressIndex );
	void StatusGrinder ( int AccomplishmentProgressIndex );
	void IncrementGrinder2 ( int Amount, int AccomplishmentProgressIndex );
	void IncrementGrinder ( int AccomplishmentProgressIndex, int Amount );
	void LockAllAccomplishments ( );
	void UnlockAllAccomplishments ( );
	void LockAccomplishment ( int AccomplishmentIndex );
	void UnlockAccomplishment ( int AccomplishmentIndex );
	void DebugSetPlotState ( struct FName Type, struct FName plotVarName, float Value );
	void GetPlotVariableID ( struct FName plotVarName );
	void HideWwiseVolumeLocations ( struct FString nmVolume );
	void ShowWwiseVolumeLocations ( struct FString nmVolume );
	void HideMicrophone ( );
	void ShowMicrophone ( );
	void HideAudioEmitter ( struct FString nmAudioEmitter );
	void ShowAudioEmitter ( struct FString nmAudioEmitter );
	void HideAudioVolume ( struct FString nmAudioVolume );
	void ShowAudioVolume ( struct FString nmAudioVolume );
	void ApplyAchPartyDamageBonus ( );
	void ApplyAchPartyHealthBonus ( );
	class UClass* FindSFXGameEffectClass ( struct FString className );
	void PrintGui ( struct FName HandlerId );
	void CloseGui ( struct FName HandlerId );
	void OpenGui ( struct FName HandlerId );
	void DisplayTime ( );
	void ProfileDifficulty ( );
	void SaveCommandCallback_LoadGame ( struct FSFXSaveGameCommandEventArgs Args );
	void LoadExternalSave ( struct FString SavePath );
	void LoadGame ( struct FString LoadName );
	void SaveGame_Callback ( struct FSFXSaveGameCommandEventArgs Args );
	void SaveGame ( struct FString SaveName );
	bool ImportAllCareersXenon ( int TargetDeviceId );
	void ImportAllCareers_OnDeviceSelectionComplete ( unsigned long bWasSuccessful, unsigned long bWasBlocked );
	void ImportAllCareers ( );
	void SetHelmetVisible ( struct FString PawnName, unsigned long bVisible );
	void SetUgly ( int Ugliness );
	void GetIntimidate ( );
	void GetCharm ( );
	void SetRenegade ( int nPoints );
	void GetRenegade ( );
	void SetParagon ( int nPoints );
	void GetParagon ( );
	void Splitscreen ( );
	void UpdateSplitscreenPlayers ( unsigned long bCreatePlayers );
	void Unreaper ( );
	void TeleportHenchman ( struct FString nmPawn );
	void ShowDebugText ( );
	void GUICMD ( struct FName nmPanelTag, struct FString sCmd, struct FString sArg1, struct FString sArg2 );
	void ResetTalents ( struct FString nmPawn );
	void MainMenu_OutputMessages ( );
	void MainMenu_FailImageAssets ( );
	void TestWound ( int WoundIdx, struct FString TargetName );
	void ProfileEffects ( );
	void RemoveAllEffects ( struct FString nmPawn );
	void RemoveEffect ( struct FString nmPawn, struct FString EffectClassName );
	void GiveEffectWithValue ( struct FString nmPawn, struct FString EffectClassName, float Value );
	void GiveEffect ( struct FString nmPawn, struct FString EffectClassName );
	void RemoveAllPowers ( struct FString nmPawn );
	void RemovePower ( struct FString nmPawn, struct FString PowerClassName );
	void SetRank ( struct FString nmPawn, class UClass* PowerClass, float fRank );
	void GivePower ( struct FString nmPawn, struct FString PowerClassName );
	class UClass* FindPowerClass ( struct FString PowerClassName );
	void MapPower ( struct FName PowerName );
	void GetMorinth ( );
	void SetMorinth ( unsigned long Value );
	void GetSpecialist ( );
	void SetSpecialist ( struct FString Henchman );
	void GetFireTeam ( );
	void SetFireTeam ( struct FString Henchman );
	void GetHenchmanAppearance ( struct FString Henchman );
	void SetHenchmanAppearance ( struct FString Henchman, int Value );
	void GetHenchmanAvailable ( struct FString Henchman );
	void SetHenchmanAvailable ( struct FString Henchman, unsigned long Value );
	void GetHenchmanKnown ( struct FString Henchman );
	void SetHenchmanKnown ( struct FString Henchman, unsigned long Value );
	void GetHenchmanDead ( struct FString Henchman );
	void SetHenchmanDead ( struct FString Henchman, unsigned long Value );
	void GetHenchmanSpecialization ( struct FString Henchman );
	void SetHenchmanSpecialization ( struct FString Henchman, unsigned long Value );
	void GetHenchmanLoyalty ( struct FString Henchman );
	void SetHenchmanLoyalty ( struct FString Henchman, unsigned long Value );
	int GetHenchIsDeadGVarIndex ( struct FString Henchman );
	class AActor* eventGetHenchmanByName ( struct FString sName );
	struct FString GetHenchName ( int Henchman );
	int GetHenchIndex ( struct FString Henchman );
	struct FString GetHenchCodename ( struct FString Henchman );
	void DisplayNegotiate ( );
	void MainMenu_ClearNotifications ( );
	void MainMenu_AddCerberusItem ( struct FString i_sTitle, struct FString i_sInfo, int nDlcID, int nMessageId );
	void BlazeTest_ShowCerberusWelcomeMessage ( );
	void BlazeTest_ShowParentEmail ( );
	void BlazeTest_ShowAccountDemographics ( );
	void BlazeTest_ShowRedeemCode ( );
	void BlazeTest_ShowCerberusIntro ( );
	void BlazeTest_ShowNucleusWelcomeMessage ( );
	void BlazeTest_ShowTermsOfService ( struct FString i_sTermsOfService, struct FString i_sPrivacyPolicy, unsigned long bTOSChanged );
	void BlazeTest_ShowCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear );
	void BlazeTest_ShowCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bUnderage );
	void BlazeTest_ShowEmailPasswordMismatch ( struct FString email, struct FString Password );
	void BlazeTest_ShowMessageBox ( struct FString sTitle, struct FString sMessage, struct FString sButton1Text, struct FString sButton2Text, struct FString sButton3Text );
	void BlazeTest_ShowNucleusLogin ( struct FString email, struct FString Password, int eScreenState );
	void BlazeTest_ShowIntroPage ( );
	void BlazeTest_DestroyGui ( );
	void BlazeTest_CreateGui ( );
	void BlazeTestConsumeCode ( struct FString sCode );
	void BlazeTestSetAutoLoginOption ( unsigned long bAutoLogin );
	void BlazeTestSetNucleusSuccessful ( unsigned long bArg, unsigned long bSave );
	void BlazeTestSetCerberusRefused ( unsigned long bArg, unsigned long bSave );
	void BlazeTestSetNucleusRefused ( unsigned long bArg, unsigned long bSave );
	void BlazeTestReconnect ( unsigned char connectMode );
	void BlazeTestAcceptTOS ( unsigned long bAccept );
	void BlazeTestDisconnect ( );
	void ForceEndRagdoll ( );
	void DebugCoverCheck ( );
	void AdjustMediGel ( int nMediGelAdjust );
	void AdjustCredits ( int nCreditAdjust );
	void SetAimAssistValues ( struct FVector2D Adhesion, float AimCorrection, struct FVector2D Friction );
	void PrintMuzzleLoc ( struct FString Target );
	void ProfileSaveGame ( );
	void ProfileScaleform ( );
	void ProfileHenchmen ( );
	void ProfileTicket ( );
	void ProfileAnimTree ( );
	void ProfileLocomotion ( );
	void ProfileKinect ( );
	void ProfileWwise ( );
	void ProfileLookAt ( );
	void ProfileCamera ( );
	void ProfileAnim ( );
	void ProfileAnimPreload ( );
	void ProfileGestures ( );
	void ProfileConversationBug ( );
	void ProfileConversation ( );
	void EvalCover ( );
	void ProfileDoor ( );
	void ProfileCover ( );
	void ProfileCooldown ( );
	void ToggleAngstIcons ( );
	void ProfileAngst ( );
	void DebugDraw_AngstIcons ( class ABioHUD* HUD );
	void DisplayAngstInfo ( unsigned long bShowIcons, unsigned long bShowProfileData );
	void DisplayAngstWeaponRange ( class ABioPawn* oPawn, unsigned long bShowIcons, unsigned long bShowProfileData );
	void DrawAngstIcon ( class AActor* oActor );
	void TestTreasure ( );
	void ValidateTechSheet ( class USFXPlotTreasure* oTreasure );
	void ValidateTreasureSheet ( class USFXPlotTreasure* oTreasure );
	void ValidateResourcesSheet ( class USFXPlotTreasure* oTreasure );
	void Validate ( class USFXPlotTreasure* oTreasure );
	void ProfileTech ( );
	void ProfileTreasure ( );
	void UnlockAllTech ( int i );
	void UnlockAllResearch ( unsigned long B );
	void UnlockAllTreasure ( unsigned long B );
	void DrawTargetLineUtility ( );
	void DrawAIUtility ( );
	void ProfilePower ( );
	void SetProfileChoseMorinth ( unsigned long ChoseMorinth );
	void ProfileGameSettings ( );
	void ProfileVehicle ( );
	void ProfilePawn ( );
	void ProfileFocus ( );
	void ProfileCombatStats ( );
	void ProfileCombat ( );
	void ProfileMPGame ( );
	void ProfileWeapon ( );
	void EmptyInventory ( );
	struct FString PrettyFloat ( float F, int decimals );
	struct FString PrettyV2D ( struct FVector2D V, int digits );
	struct FString PrettySF ( struct FScaledFloat V );
	void DrawLine ( struct FString s1, struct FString s2 );
	void Actors ( class UClass* ActorClass );
	void Playpens ( );
	void SetBoolByID ( int PlotId, unsigned long nValue );
	void SetBoolByName ( struct FName nmVar, unsigned long nValue );
	void SetIntByName ( struct FName nmVar, int nValue );
	void AwardTreasure ( int nTreasureId );
	void Distance ( struct FString nmActor1, struct FString nmActor2 );
	void SetAllMoods ( unsigned char NewMood );
	void SetMood ( struct FName nmPawn, unsigned char NewMood );
	void EnableAllAI ( unsigned long bEnable );
	void EnableAI ( struct FName nmPawn, unsigned long bEnable );
	void EnableHenchmanPowers ( unsigned long Enabled, int HenchmanIndex );
	void EnableHenchmanPowersByGameName ( unsigned long Enabled, struct FString Spawn );
	void SetPowerPercent ( struct FName nmPawn, float fPercent );
	void DebugAI ( struct FName Category );
	void DebugDraw_Wounds ( class ABioHUD* HUD );
	void DebugWounds ( );
	void DebugDraw_AIVals ( class ABioHUD* HUD );
	void DebugAIVals ( );
	void DebugWeapon ( );
	void DebugMagnetism ( );
	void DebugFriction ( );
	void DebugAdhesion ( );
	void DebugZoomSnap ( );
	void DebugVoc ( );
	void RemoveAIFilter ( struct FName nmFilter );
	void AddAIFilter ( struct FName nmFilter );
	void AILog ( struct FString nmPawn, unsigned long bEnable );
	void SetAutoRightUpForceAndTorque ( float fUpLiftForce, float fUprightTorque );
	void SetVehicleCOMOffsetZ ( float fOffsetZ );
	void Mark ( struct FString sComment );
	void ClearDebugLines ( );
	void GameOver ( );
	void InitPlotManagerValueByIndex ( int nIndex, struct FString sVariableType, float fValue );
	void DumpPlotManagerValueByIndex ( int nIndex, struct FString sVariableType );
	void Cooldown ( unsigned long bEnable );
	void EnablePowerCooldown ( unsigned long bEnable );
	void UsePower ( struct FName nmPawn, struct FName nmPower );
	void HideStrings ( unsigned long i_bHide );
	void DisplayStringID ( unsigned long i_bDisplay );
	void GrantAllCodex ( );
	void CodexAudit ( );
	void JournalAudit ( );
	void TogglePowerAiming ( );
	void SendScreenshotTo ( struct FString Host, int Port );
	void SendSaveGameTo_Callback ( struct FSFXSaveGameCommandEventArgs Args );
	void SendSaveGameTo ( struct FString Host, int Port );
	void LoadSaveGameFrom ( struct FString Host, int Port );
	void SkynetSavegame_Callback ( struct FSFXSaveGameCommandEventArgs Args );
	void SkynetSavegame ( struct FString sFilename );
	void SkynetScreenshot ( struct FString sFilename );
	void NotFun ( );
	void SkynetToggleNucleusTelemetry ( );
	void SkynetToggleSessionDisplay ( );
	void SkynetToggleVerboseMode ( );
	void SkynetToggleSilentMode ( );
	void SkynetToggleQAPaths ( );
	void GiveSuperGun ( );
	void PartyMin1Health ( unsigned long B );
	void Min1Health ( unsigned long B );
	void ToggleSFHUD ( );
	void DownloadContent ( );
	void ShowMarketplaceUI ( );
	void GiveItem ( struct FString sTarget, struct FName nmItemLabel );
	void ResetWeapons ( struct FString sTarget );
	class UClass* FindWeaponClass ( struct FString WeaponClassName );
	void BasicWeapons ( );
	void InitFuelEfficiency ( float fEff );
	void InitMaxFuel ( float FMax );
	void InitFuel ( float fAmt );
	void InitAmmo ( int nAmmo );
	void InitProbes ( int nResource );
	void InitGrenades ( int nGrenade );
	void InitMedigel ( int nMedigel );
	void InitPlatinum ( int nResource );
	void InitSalvage ( int nSalvage );
	void InitIridium ( int nResource );
	void InitEezo ( int nResource );
	void InitPalladium ( int nResource );
	void InitCredits ( int nCredits );
	void AwardXP ( int nXP, struct FString Level );
	void AwardCredits ( int nCredits, struct FString Level );
	void AwardItem ( struct FName ItemName, struct FString Level );
	void InitResource ( unsigned char eResourceType, int nAmt );
	void GiveCredits ( int nCredits );
	void GiveResource ( unsigned char eResourceType, int nAmt );
	void EnableDamage ( unsigned long B );
	class AActor* GetUIWorldActor ( );
	class AActor* GetActorFromString ( struct FString Str );
	void TestFalling ( struct FName nmTarget );
	void TestRagdoll ( struct FString sWhitespaceDelimitedArguments );
	void DebugSpawnPrefab ( int nTestNum );
	void TestPrefab ( int nTestNum );
	void BioTransition ( int nTransition, int nParam );
	void BioLoadState ( int nSaveStateSlot );
	void BioSaveState ( int nSaveStateSlot );
	void GiveTalentPoints ( int nNumPoints );
	void ShowVocInfo ( struct FString PawnTag, struct FString eventStr, int Type );
	void DebugVocLine ( struct FString inInstigator, struct FString Recipient, struct FString eventStr );
	void DebugVocSystem ( unsigned long bEnable );
	void GiveXP ( float XPValue );
	void TestConditionals ( );
	void RunConditional ( int Id, int Param );
	void SetVehicleCamRadiusPoint ( int nIndex, float fDegVal, float fScaleVal );
	void BioClearCrossLevelReferences ( class ULevel* pLevel );
	void ForceEnableCCD ( unsigned long bValue );
	void SetGCDebugPackage ( struct FString sPackageName );
	void OutputBugReportXML ( unsigned long bCreateSavegame, unsigned long bCreateScreenshot );
	void Respawn ( );
	void God ( );
	void DoSetLocation ( struct FString sDesintation );
	void SetLocation ( struct FString sDestination );
	void GetLocation ( );
	void Damage ( struct FString Target, float Amount );
	void KillSelf ( );
	void KillParty ( );
	void KillEnemies ( );
	void KillTarget ( );
	void SimulateFreeze ( float freezeTimeSec );
	void DisableGUIDCheck ( );
	struct FString GetStateNameByIdx ( class AController* AI, int idx );
	int GetNumStates ( class AController* AI );
	struct FString GetLatentAction ( class AController* AI );
	void CompleteGame ( int Ending );
	void OverrideCEOnVisible ( unsigned long bOverride, unsigned long bValue );
	void BiasCEMaxDistance ( float fBias );
	void OverrideCEMaxDistance ( unsigned long bOverride, float fValue );
	void SetEffectsMaterial ( struct FString Target, struct FName Effect );
	void SetVecParam ( struct FString Target, struct FName Param, float R, float G, float B, float A );
	void SetParam ( struct FString Target, struct FName Param, float Value );
	void eventSetProfileColumn ( int ColumnIdx );
	float eventGetProfileColumnCoord ( );
	void eventDrawProfileText ( struct FString Text, unsigned long Highlight );
	void eventDrawProfileHeaderText ( struct FString Text, unsigned long Highlight );
	void DrawProfileTitle ( );
	void DebugDraw_CurrentProfile ( class ABioHUD* HUD );
	void Profile ( struct FName Keyword, struct FString Target, struct FName SubTarget );
	void DebugDraw_Profiles ( class ABioHUD* HUD );
	void Profiles ( float TimeToDisplay );
	void Slomo ( float T );
	void SetHostViabilityEnabled ( unsigned long Enabled );
	void SetMMBotModeEnabled ( unsigned long Enabled );
	void InitCheatManager ( );
	void ProfileUtility ( );
	void ProfileHandler ( );
};

UClass* UBioCheatManager::pClassPointer = NULL;

// Class SFXGame.BioPlayerInput
// 0x0192 (0x033D - 0x01AB)
class UBioPlayerInput : public UPlayerInput
{
public:
	struct FMap_Mirror                                 InputTimers;                                      		// 0x01AC (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FInterpCurveFloat                           LookStickResponseCurve;                           		// 0x01E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveFloat                           MouseDampeningCurve;                              		// 0x01F8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FStaticKeyBind >                    StaticConsoleBinds;                               		// 0x0208 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FStaticKeyBind >                    StaticPCBinds;                                    		// 0x0214 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FStaticKeyBind >                    m_aFlyCamConsoleBinds;                            		// 0x0220 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDebugMenuEntry >                   DebugMenu;                                        		// 0x022C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FDebugMenuEntry >                   DebugSubMenu;                                     		// 0x0238 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FInputOverride >                    InputOverrides;                                   		// 0x0244 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __InputDelegate__Delegate;                        		// 0x0250 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              AxisBuffer[ 0x6 ];                                		// 0x025C (0x0018) [0x0000000000000000]              
	float                                              LastAxisBuffer[ 0x6 ];                            		// 0x0274 (0x0018) [0x0000000000000000]              
	struct FVector                                     LookStick;                                        		// 0x028C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MoveStick;                                        		// 0x0298 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     AccumulatedAimVector;                             		// 0x02A4 (0x000C) [0x0000000000000000]              
	struct FName                                       m_nmMappedPower;                                  		// 0x02B0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmMappedPower2;                                 		// 0x02B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmMappedPower3;                                 		// 0x02C0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmMappedPower4;                                 		// 0x02C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmMappedPower5;                                 		// 0x02D0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmMappedPower6;                                 		// 0x02D8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmMappedPower7;                                 		// 0x02E0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              aGuiStrafe;                                       		// 0x02E8 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aGuiBaseY;                                        		// 0x02EC (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aGuiTurn;                                         		// 0x02F0 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aGuiLookUp;                                       		// 0x02F4 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aGuiMouseX;                                       		// 0x02F8 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aGuiMouseY;                                       		// 0x02FC (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              MoveStickMag;                                     		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LookStickMag;                                     		// 0x0304 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GuiDeadzone;                                      		// 0x0308 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_KeyInputDisabled;                               		// 0x030C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeSinceLastActivity;                            		// 0x0310 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurConvSelection;                              		// 0x0314 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fConversationReplyLeftRight;                    		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fConversationReplyUpDown;                       		// 0x031C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fQuickOrderTime;                                		// 0x0320 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              AccumulatedRotationSpeed;                         		// 0x0324 (0x0004) [0x0000000000000000]              
	float                                              AccumulatedRotationDecayRate;                     		// 0x0328 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                CoverRemapThresholdPC;                            		// 0x032C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CoverRemapThreshold;                              		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GlobalStickFactor;                                		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseMouseDampening : 1;                           		// 0x0338 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned char                                      bWantsToZoom;                                     		// 0x033C (0x0001) [0x0000000000000004]              ( CPF_Input )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1661 ];

		return pClassPointer;
	};

	void SetFlyCam ( unsigned long bOn );
	void ToggleFlyCam ( );
	bool ActivatePower ( struct FName nmPower, class AActor* oTarget, struct FVector vTargetLocation, struct FVector vOriginalCameraLocation, struct FRotator rOriginalCameraRotation );
	void GhostMoveDown ( unsigned long bState );
	void GhostMoveUp ( unsigned long bState );
	void eventCancelReload ( );
	void RemapControlsByRotation ( struct FRotator DeltaRot, float* NewRight, float* NewUp );
	void UpdateViewRotation ( float DeltaTime );
	void eventPlayerInput ( float DeltaTime );
	void PostProcessInput ( float DeltaTime );
	void AdjustMouseSensitivity ( float FOVScale );
	void PreProcessInput ( float DeltaTime );
	float ComputeStickResponse ( float RawStickValue, class USFXCameraInput* Input, float DeltaTime );
	bool IsEnterMenuButtonAssignmentSwapped ( );
	bool IsKeyInputIgnored ( );
	void IgnoreKeyInput ( unsigned long bValue );
	void eventSetInputDisabled ( unsigned long bValue );
	bool eventGetInputDisabled ( );
	void DebugExecInputCommands ( struct FString Cmd, unsigned long bButtonPressed );
	struct FString GetBind ( unsigned long Control, unsigned long Shift, unsigned long Alt, struct FName* Key );
	bool IsCombatEnabled ( );
	void UnregisterInputOverride ( struct FString Alias, unsigned long bPress );
	void RegisterInputOverride ( struct FString Alias, struct FScriptDelegate InputDelegate, unsigned long bExclusive, unsigned long bPress );
	void InputDelegate ( struct FString Alias, unsigned long bPress );
};

UClass* UBioPlayerInput::pClassPointer = NULL;

// Class SFXGame.BioPlayerSelection
// 0x0038 (0x0074 - 0x003C)
class UBioPlayerSelection : public UObject
{
public:
	TArray< class AActor* >                            m_lSelectionsInRange;                             		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      m_oCurrentSelectionTarget;                        		// 0x0048 (0x0004) [0x0000000000000000]              
	class AActor*                                      m_oLastSelectionTarget;                           		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              TargetSelectionTime;                              		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ULensFlareComponent*                         SelectionFlareComp;                               		// 0x0054 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              SelectionMaxRange;                                		// 0x0058 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SelectionFarRange;                                		// 0x005C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SelectionFarAngle;                                		// 0x0060 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SelectionCloseRange;                              		// 0x0064 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SelectionCloseAngle;                              		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxHighlightRange;                                		// 0x006C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bCurrentSelectionIsCombatTarget : 1;            		// 0x0070 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1662 ];

		return pClassPointer;
	};

	void SetSelectionIconMaterialParam ( struct FName Param, int Value );
	bool IsSelectable ( class AActor* oTarget );
	void UpdateSelection ( );
	void FindCurrentSelectionTarget ( );
};

UClass* UBioPlayerSelection::pClassPointer = NULL;

// Class SFXGame.CoverGoalConstraint
// 0x0004 (0x0040 - 0x003C)
class UCoverGoalConstraint : public UObject
{
public:
	int                                                ConstraintEvaluationPriority;                     		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1663 ];

		return pClassPointer;
	};

	struct FString eventGetDumpString ( );
	void eventInit ( class UGoal_AtCover* GoalEvaluator );
};

UClass* UCoverGoalConstraint::pClassPointer = NULL;

// Class SFXGame.CovGoal_AvoidEnemies
// 0x000C (0x004C - 0x0040)
class UCovGoal_AvoidEnemies : public UCoverGoalConstraint
{
public:
	TArray< struct FEnemyData >                        Enemies;                                          		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1664 ];

		return pClassPointer;
	};

	void eventInit ( class UGoal_AtCover* GoalEvaluator );
};

UClass* UCovGoal_AvoidEnemies::pClassPointer = NULL;

// Class SFXGame.CovGoal_CombatZones
// 0x000C (0x004C - 0x0040)
class UCovGoal_CombatZones : public UCoverGoalConstraint
{
public:
	struct FVector                                     CombatZoneOrigin;                                 		// 0x0040 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1665 ];

		return pClassPointer;
	};

	void eventInit ( class UGoal_AtCover* GoalEvaluator );
};

UClass* UCovGoal_CombatZones::pClassPointer = NULL;

// Class SFXGame.CovGoal_Enemies
// 0x000C (0x004C - 0x0040)
class UCovGoal_Enemies : public UCoverGoalConstraint
{
public:
	TArray< struct FValidEnemyCacheDatum >             ValidEnemyCache;                                  		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1666 ];

		return pClassPointer;
	};

	void eventInit ( class UGoal_AtCover* GoalEvaluator );
};

UClass* UCovGoal_Enemies::pClassPointer = NULL;

// Class SFXGame.CovGoal_GoalProximity
// 0x0010 (0x0050 - 0x0040)
class UCovGoal_GoalProximity : public UCoverGoalConstraint
{
public:
	float                                              BestGoalDist;                                     		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinGoalDist;                                      		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxGoalDist;                                      		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHardLimits : 1;                                  		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1667 ];

		return pClassPointer;
	};

};

UClass* UCovGoal_GoalProximity::pClassPointer = NULL;

// Class SFXGame.CovGoal_MovementDistance
// 0x0014 (0x0054 - 0x0040)
class UCovGoal_MovementDistance : public UCoverGoalConstraint
{
public:
	float                                              BestCoverDist;                                    		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxCoverDist;                                     		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinCoverDist;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDistTowardGoal;                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMoveTowardGoal : 1;                              		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHardConstraint : 1;                              		// 0x0050 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIgnoreCoverOutOfRange : 1;                       		// 0x0050 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1668 ];

		return pClassPointer;
	};

};

UClass* UCovGoal_MovementDistance::pClassPointer = NULL;

// Class SFXGame.CovGoal_TeammateProximity
// 0x0018 (0x0058 - 0x0040)
class UCovGoal_TeammateProximity : public UCoverGoalConstraint
{
public:
	float                                              fTeammateMinDistanceSq;                           		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fProximityPenalty;                                		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSquadLeaderProximityPenalty;                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTeammateMaxDistanceSq;                           		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxDistancePenalty;                              		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRestrictMaxDistance : 1;                         		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1669 ];

		return pClassPointer;
	};

};

UClass* UCovGoal_TeammateProximity::pClassPointer = NULL;

// Class SFXGame.CovGoal_WeaponRange
// 0x0018 (0x0058 - 0x0040)
class UCovGoal_WeaponRange : public UCoverGoalConstraint
{
public:
	float                                              fClosePenalty;                                    		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFarPenalty;                                      		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fIdealWeaponRange;                                		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              fLongWeaponRange;                                 		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              fShortWeaponRange;                                		// 0x0050 (0x0004) [0x0000000000000000]              
	unsigned long                                      bHardConstraint : 1;                              		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1670 ];

		return pClassPointer;
	};

	void Init ( class UGoal_AtCover* GoalEvaluator );
};

UClass* UCovGoal_WeaponRange::pClassPointer = NULL;

// Class SFXGame.SFXCovGoal_AvoidHazard
// 0x0010 (0x0050 - 0x0040)
class USFXCovGoal_AvoidHazard : public UCoverGoalConstraint
{
public:
	TArray< struct FVector >                           Hazards;                                          		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              MaxWeight;                                        		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1671 ];

		return pClassPointer;
	};

	void Init ( class UGoal_AtCover* GoalEvaluator );
};

UClass* USFXCovGoal_AvoidHazard::pClassPointer = NULL;

// Class SFXGame.SFXCovGoal_AwayFromFriendlies
// 0x0014 (0x0054 - 0x0040)
class USFXCovGoal_AwayFromFriendlies : public UCoverGoalConstraint
{
public:
	TArray< struct FVector >                           Friends;                                          		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              AvoidDistance;                                    		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              MaxWeight;                                        		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1672 ];

		return pClassPointer;
	};

	void Init ( class UGoal_AtCover* GoalEvaluator );
};

UClass* USFXCovGoal_AwayFromFriendlies::pClassPointer = NULL;

// Class SFXGame.SFXCovGoal_CanFireAtPrimary
// 0x0014 (0x0054 - 0x0040)
class USFXCovGoal_CanFireAtPrimary : public UCoverGoalConstraint
{
public:
	struct FCoverInfo                                  TargetCoverInfo;                                  		// 0x0040 (0x0008) [0x0000000000000000]              
	class ABioPawn*                                    PawnTarget;                                       		// 0x0048 (0x0004) [0x0000000000000000]              
	class AActor*                                      FireTarget;                                       		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              MaxWeight;                                        		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1673 ];

		return pClassPointer;
	};

	void Init ( class UGoal_AtCover* GoalEvaluator );
};

UClass* USFXCovGoal_CanFireAtPrimary::pClassPointer = NULL;

// Class SFXGame.SFXCovGoal_CanFireAtSecondaries
// 0x0010 (0x0050 - 0x0040)
class USFXCovGoal_CanFireAtSecondaries : public UCoverGoalConstraint
{
public:
	TArray< struct FSecondaryTargetData >              Secondaries;                                      		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MaxWeight;                                        		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1674 ];

		return pClassPointer;
	};

	void Init ( class UGoal_AtCover* GoalEvaluator );
};

UClass* USFXCovGoal_CanFireAtSecondaries::pClassPointer = NULL;

// Class SFXGame.SFXCovGoal_CoverFromPrimary
// 0x0014 (0x0054 - 0x0040)
class USFXCovGoal_CoverFromPrimary : public UCoverGoalConstraint
{
public:
	struct FVector                                     TargetLoc;                                        		// 0x0040 (0x000C) [0x0000000000000000]              
	float                                              FlankDot;                                         		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              MaxWeight;                                        		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1675 ];

		return pClassPointer;
	};

	void Init ( class UGoal_AtCover* GoalEvaluator );
};

UClass* USFXCovGoal_CoverFromPrimary::pClassPointer = NULL;

// Class SFXGame.SFXCovGoal_CoverFromSecondaries
// 0x0014 (0x0054 - 0x0040)
class USFXCovGoal_CoverFromSecondaries : public UCoverGoalConstraint
{
public:
	TArray< struct FVector >                           SecondaryLocs;                                    		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              FlankDot;                                         		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              MaxWeight;                                        		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1676 ];

		return pClassPointer;
	};

	void Init ( class UGoal_AtCover* GoalEvaluator );
};

UClass* USFXCovGoal_CoverFromSecondaries::pClassPointer = NULL;

// Class SFXGame.SFXCovGoal_FrontArc
// 0x0008 (0x0048 - 0x0040)
class USFXCovGoal_FrontArc : public UCoverGoalConstraint
{
public:
	float                                              ForwardDot;                                       		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              MaxWeight;                                        		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1677 ];

		return pClassPointer;
	};

};

UClass* USFXCovGoal_FrontArc::pClassPointer = NULL;

// Class SFXGame.SFXCovGoal_NoFriendlyLOF
// 0x0014 (0x0054 - 0x0040)
class USFXCovGoal_NoFriendlyLOF : public UCoverGoalConstraint
{
public:
	TArray< struct FFriendlyLOFData >                  LOFs;                                             		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LOFDistance;                                      		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              MaxWeight;                                        		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1678 ];

		return pClassPointer;
	};

	void Init ( class UGoal_AtCover* GoalEvaluator );
};

UClass* USFXCovGoal_NoFriendlyLOF::pClassPointer = NULL;

// Class SFXGame.Goal_AtCover
// 0x0028 (0x0078 - 0x0050)
class UGoal_AtCover : public UPathGoalEvaluator
{
public:
	TArray< class UCoverGoalConstraint* >              CoverGoalConstraints;                             		// 0x0050 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class ASFXAI_NativeBase*                           AI;                                               		// 0x005C (0x0004) [0x0000000000000000]              
	class ACoverSlotMarker*                            BestMarker;                                       		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                BestRating;                                       		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                MaxToRate;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumMarkersTested;                                 		// 0x006C (0x0004) [0x0000000000000000]              
	class AActor*                                      TetherActor;                                      		// 0x0070 (0x0004) [0x0000000000000000]              
	unsigned long                                      MoveTowardsGoalActor : 1;                         		// 0x0074 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIncludePathCost : 1;                             		// 0x0074 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1679 ];

		return pClassPointer;
	};

	struct FString eventGetDumpString ( );
	void eventAddCoverGoalConstraint ( class UCoverGoalConstraint* Constraint );
	void RateSlotMarker ( class ACoverSlotMarker* Marker, class APawn* Pawn, int BaseRating );
	void InitNative ( );
	void Init ( class ASFXAI_NativeBase* oAI, class AActor* GoalActor, unsigned long bAddPathCost );
};

UClass* UGoal_AtCover::pClassPointer = NULL;

// Class SFXGame.Goal_AwayFromPosition
// 0x0024 (0x0074 - 0x0050)
class UGoal_AwayFromPosition : public UPathGoalEvaluator
{
public:
	struct FVector                                     AvoidPos;                                         		// 0x0050 (0x000C) [0x0000000000000000]              
	struct FVector                                     AvoidDir;                                         		// 0x005C (0x000C) [0x0000000000000000]              
	int                                                MaxDist;                                          		// 0x0068 (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            BestNode;                                         		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                BestRating;                                       		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1680 ];

		return pClassPointer;
	};

	void eventRecycle ( );
	bool FleeFrom ( class APawn* P, struct FVector InAvoidPos, int InMaxDist );
};

UClass* UGoal_AwayFromPosition::pClassPointer = NULL;

// Class SFXGame.SFXAIPerceptionManager
// 0x000E (0x0204 - 0x01F6)
class ASFXAIPerceptionManager : public AActor
{
public:
	TArray< struct FSFXAIPerceptionNoise >             Noises;                                           		// 0x01F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1681 ];

		return pClassPointer;
	};

	void DelayedNoticeEnemy ( class ABioAiController* AI, class APawn* Enemy, unsigned char Notification, float Delay, struct FName EventName );
	void NoticeEnemy ( class ABioAiController* AI, class APawn* Enemy, unsigned char Notification, unsigned long bPerceivedDirectly, struct FName EventName );
	void AutoNotifyEnemies ( class ABioAiController* AI );
	void AutoAcquireEnemies ( class ABioAiController* AI );
	void FillEnemyList ( class ABioAiController* AI );
};

UClass* ASFXAIPerceptionManager::pClassPointer = NULL;

// Class SFXGame.SFXGoal_SuppressionPoint
// 0x0030 (0x0080 - 0x0050)
class USFXGoal_SuppressionPoint : public UPathGoalEvaluator
{
public:
	struct FVector                                     TargetFacing;                                     		// 0x0050 (0x000C) [0x0000000000000000]              
	class ANavigationPoint*                            TargetNav;                                        		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFXAI_NativeBase*                           AI;                                               		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DesiredDistance;                                  		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              MinDistance;                                      		// 0x0068 (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            BestNode;                                         		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                BestRating;                                       		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                MaxNodes;                                         		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                NumNodesTested;                                   		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bFlank : 1;                                       		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1682 ];

		return pClassPointer;
	};

	void eventRecycle ( );
	bool SuppressPoint ( class APawn* P, class AActor* Target, float SuppressDist, unsigned long bPreferFlank, float fMinDistance );
};

UClass* USFXGoal_SuppressionPoint::pClassPointer = NULL;

// Class SFXGame.SFXPath_AvoidClaimedCover
// 0x0000 (0x0044 - 0x0044)
class USFXPath_AvoidClaimedCover : public UPathConstraint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1683 ];

		return pClassPointer;
	};

	struct FString eventGetDumpString ( );
	void eventRecycle ( );
};

UClass* USFXPath_AvoidClaimedCover::pClassPointer = NULL;

// Class SFXGame.SFXPath_AvoidFireFromCover
// 0x0010 (0x0054 - 0x0044)
class USFXPath_AvoidFireFromCover : public UPathConstraint
{
public:
	TArray< struct FEnemyCoverInfo >                   EnemyList;                                        		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class Asfxai_core*                                 AI;                                               		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1684 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool AvoidFireFromCover ( class APawn* P, unsigned long bCheckPlayerOnly );
};

UClass* USFXPath_AvoidFireFromCover::pClassPointer = NULL;

// Class SFXGame.SFXPath_AvoidPlayer
// 0x0000 (0x0044 - 0x0044)
class USFXPath_AvoidPlayer : public UPathConstraint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1685 ];

		return pClassPointer;
	};

	struct FString eventGetDumpString ( );
	void eventRecycle ( );
};

UClass* USFXPath_AvoidPlayer::pClassPointer = NULL;

// Class SFXGame.SFXPath_AwayFromGoal
// 0x0008 (0x004C - 0x0044)
class USFXPath_AwayFromGoal : public UPathConstraint
{
public:
	class AActor*                                      GoalActor;                                        		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              fDistAway;                                        		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1686 ];

		return pClassPointer;
	};

	bool AwayFromGoal ( class ABioPawn* Pawn, class AActor* Goal, float fDist );
};

UClass* USFXPath_AwayFromGoal::pClassPointer = NULL;

// Class SFXGame.SFXPath_TowardCombatZone
// 0x000C (0x0050 - 0x0044)
class USFXPath_TowardCombatZone : public UPathConstraint
{
public:
	struct FVector                                     CombatZoneOrigin;                                 		// 0x0044 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1687 ];

		return pClassPointer;
	};

	bool TowardCombatZone ( class ABioPawn* Pawn );
};

UClass* USFXPath_TowardCombatZone::pClassPointer = NULL;

// Class SFXGame.SFXPath_WithinPlaypen
// 0x0004 (0x0048 - 0x0044)
class USFXPath_WithinPlaypen : public UPathConstraint
{
public:
	unsigned long                                      m_bOnlyAvoidSubtractive : 1;                      		// 0x0044 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1688 ];

		return pClassPointer;
	};

	bool WithinPlaypen ( class ABioPawn* P, unsigned long bAvoidSubtractive );
};

UClass* USFXPath_WithinPlaypen::pClassPointer = NULL;

// Class SFXGame.BioConversation
// 0x00CC (0x0108 - 0x003C)
class UBioConversation : public UObject
{
public:
	struct FMultiMap_Mirror                            m_mapStrRefToAnimData;                            		// 0x003C (0x003C) [0x0000000000001000]              ( CPF_Native )
	TArray< int >                                      m_StartingList;                                   		// 0x0078 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FBioDialogEntryNode >               m_EntryList;                                      		// 0x0084 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FBioDialogReplyNode >               m_ReplyList;                                      		// 0x0090 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FName >                             m_aSpeakerList;                                   		// 0x009C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FName >                             m_aScriptList;                                    		// 0x00A8 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FBioStageDirection >                m_aStageDirections;                               		// 0x00B4 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< class UFaceFXAnimSet* >                    m_aMaleFaceSets;                                  		// 0x00C0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UFaceFXAnimSet* >                    m_aFemaleFaceSets;                                		// 0x00CC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UWwiseBaseSoundObject* >             m_aMaleSoundObjects;                              		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UWwiseBaseSoundObject* >             m_aFemaleSoundObjects;                            		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nResRefID;                                      		// 0x00F0 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class USequence*                                   MatineeSequence;                                  		// 0x00F4 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class UFaceFXAnimSet*                              FaceFXSet;                                        		// 0x00F8 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class UFaceFXAnimSet*                              m_pNonSpeakerFaceFXSet;                           		// 0x00FC (0x0004) [0x0000000000000000]              
	class UFaceFXAnimSet*                              m_pRubberMouthAnimSet;                            		// 0x0100 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bOneLinerConversation : 1;                      		// 0x0104 (0x0004) [0x0000000000020001] [0x00000001] ( CPF_Edit | CPF_EditConst )
	unsigned long                                      m_bPlayerSexIsValid : 1;                          		// 0x0104 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bPlayerIsFemale : 1;                            		// 0x0104 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bHasSpeechGrammar : 1;                          		// 0x0104 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bUsesRubberMouth : 1;                           		// 0x0104 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1689 ];

		return pClassPointer;
	};

};

UClass* UBioConversation::pClassPointer = NULL;

// Class SFXGame.BioConversationController
// 0x0269 (0x02A5 - 0x003C)
class UBioConversationController : public UObject
{
public:
	struct FMap_Mirror                                 m_mapActorProps;                                  		// 0x003C (0x003C) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FBioSpeakerData >                   m_aSpeakerData;                                   		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBioSpeakerData >                   m_aAllFoundActors;                                		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBioDialogLookat >                  m_aLookAtList;                                    		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      m_aCurrentReplyIndices;                           		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBioSavedActorPos >                 m_aPrevPositions;                                 		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sCurrentSubTitle;                               		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sCurrentStageDirection;                         		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sCurrentFaceFXAnim;                             		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UWwiseBaseSoundObject* >             m_aPreLoadingSounds;                              		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AActor* >                            m_aExtraParticipants;                             		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UAnimSequence* >                     PreloadAnimations;                                		// 0x00F0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< void* >                                    PreloadStrRefs;                                   		// 0x00FC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FBioConvActorInitMeshTrans >        m_aActorOrigMeshTrans;                            		// 0x0108 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sWaitingOnReplySubtitle;                        		// 0x0114 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0120 (0x003C) UNKNOWN PROPERTY: MapProperty SFXGame.BioConversationController.m_CachedLightingState
	struct FBioNextLightingData                        m_tNextLightingOverride;                          		// 0x015C (0x004C) [0x0000000000000000]              
	struct FBioNextCamData                             m_tNextCamOverride;                               		// 0x01A8 (0x0038) [0x0000000000000000]              
	struct FBioInterruptReplyInfo                      m_tInterruptInfo;                                 		// 0x01E0 (0x0014) [0x0000000000000000]              
	struct FVector                                     m_vLineOfAction;                                  		// 0x01F4 (0x000C) [0x0000000000000000]              
	class UBioConversation*                            m_pConvData;                                      		// 0x0200 (0x0004) [0x0000000000000000]              
	class UBioConversationManager*                     m_pManager;                                       		// 0x0204 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentEntry;                                  		// 0x0208 (0x0004) [0x0000000000000000]              
	float                                              m_fStartTime;                                     		// 0x020C (0x0004) [0x0000000000000000]              
	class AActor*                                      m_pOwner;                                         		// 0x0210 (0x0004) [0x0000000000000000]              
	class AActor*                                      m_pPlayer;                                        		// 0x0214 (0x0004) [0x0000000000000000]              
	class AActor*                                      m_pSpeaker;                                       		// 0x0218 (0x0004) [0x0000000000000000]              
	class AActor*                                      m_pPreviousSpeaker;                               		// 0x021C (0x0004) [0x0000000000000000]              
	class AActor*                                      m_pListener;                                      		// 0x0220 (0x0004) [0x0000000000000000]              
	int                                                m_nSelectedReply;                                 		// 0x0224 (0x0004) [0x0000000000000000]              
	class USFXSeqAct_StartAmbientConv*                 m_pKismetStart;                                   		// 0x0228 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentReply;                                  		// 0x022C (0x0004) [0x0000000000000000]              
	int                                                m_nIntimacy;                                      		// 0x0230 (0x0004) [0x0000000000000000]              
	class ABioStage*                                   m_pStage;                                         		// 0x0234 (0x0004) [0x0000000000000000]              
	float                                              m_fShowRepliesOffset;                             		// 0x0238 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fShowLastLineOffset;                            		// 0x023C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fNodePlayTimer;                                 		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              m_fInterruptRange;                                		// 0x0244 (0x0004) [0x0000000000000000]              
	float                                              m_fSubtitleTimingModifier;                        		// 0x0248 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fSubtitleTimingMinimum;                         		// 0x024C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fVOPreloadDelayTime;                            		// 0x0250 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nNodeStateFlags;                                		// 0x0254 (0x0004) [0x0000000000000000]              
	class UWwiseBaseSoundObject*                       m_pCurrentSound;                                  		// 0x0258 (0x0004) [0x0000000000000000]              
	class UFaceFXAnimSet*                              m_pCurrentFaceFXSet;                              		// 0x025C (0x0004) [0x0000000000000000]              
	class USeqAct_Interp*                              m_pCurrentLineMatinee;                            		// 0x0260 (0x0004) [0x0000000000000000]              
	float                                              m_fRemainingVOElemsLength;                        		// 0x0264 (0x0004) [0x0000000000000000]              
	float                                              m_fRemainingVOAudioLength;                        		// 0x0268 (0x0004) [0x0000000000000000]              
	float                                              m_fRemainingLastLineSubtitleDelay;                		// 0x026C (0x0004) [0x0000000000000000]              
	int                                                m_nDelayedReplyChoice;                            		// 0x0270 (0x0004) [0x0000000000000000]              
	class USequence*                                   m_pEvtSysSeq;                                     		// 0x0274 (0x0004) [0x0000000000000000]              
	struct FColor                                      m_colSubtitleColor;                               		// 0x0278 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fAudioHitchBuffer;                              		// 0x027C (0x0004) [0x0000000000000000]              
	float                                              m_fPreLoadTimer;                                  		// 0x0280 (0x0004) [0x0000000000000000]              
	float                                              m_fPreLoadStartDelay;                             		// 0x0284 (0x0004) [0x0000000000000000]              
	float                                              m_fDefaultInterruptWindowDuration;                		// 0x0288 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fDefaultInterruptWindowStart;                   		// 0x028C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nTeleLinesHit;                                  		// 0x0290 (0x0004) [0x0000000000000000]              
	int                                                m_nTeleLinesSkipped;                              		// 0x0294 (0x0004) [0x0000000000000000]              
	int                                                m_nTeleKinectRepliesSelected;                     		// 0x0298 (0x0004) [0x0000000000000000]              
	int                                                m_nTeleReplyLinesSelected;                        		// 0x029C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bAutoActivate : 1;                              		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bConversationEnded : 1;                         		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bHasAttachedCameraTrack : 1;                    		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bHasAttachedDOFTrack : 1;                       		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bSkipRequested : 1;                             		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bDisplayNonAmbientName : 1;                     		// 0x02A0 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      m_bSkipProtectionDisabled : 1;                    		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bCurrentlyAmbient : 1;                          		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bForceAmbientStart : 1;                         		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bPutPlayerIntoCombat : 1;                       		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bDisableTargeting : 1;                          		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bSkippable : 1;                                 		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bFailed : 1;                                    		// 0x02A0 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bInterrupted : 1;                               		// 0x02A0 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      m_bKismetInitiated : 1;                           		// 0x02A0 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      m_bConversationOver : 1;                          		// 0x02A0 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      m_bHideCurrentSubtitle : 1;                       		// 0x02A0 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      m_bNoGestures : 1;                                		// 0x02A0 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      m_bForceShowReplies : 1;                          		// 0x02A0 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      m_bNeedsUnprepare : 1;                            		// 0x02A0 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      m_bNeedsFullCleanup : 1;                          		// 0x02A0 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      m_bHavePrimedTextures : 1;                        		// 0x02A0 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      m_bRemoveWeapons : 1;                             		// 0x02A0 (0x0004) [0x0000000000004000] [0x00400000] ( CPF_Config )
	unsigned long                                      m_bPlayingNonTextLine : 1;                        		// 0x02A0 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      m_bHidePlayerHelmet : 1;                          		// 0x02A0 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      m_bShowPlayerHelmet : 1;                          		// 0x02A0 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      m_bHideHenchmenHelmet : 1;                        		// 0x02A0 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      m_bShowHenchmenHelmet : 1;                        		// 0x02A0 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      m_bShowCinematicComments : 1;                     		// 0x02A0 (0x0004) [0x0000000000004000] [0x10000000] ( CPF_Config )
	unsigned long                                      m_bAutoAdvanceSkippableLinesWithNoVO : 1;         		// 0x02A0 (0x0004) [0x0000000000004000] [0x20000000] ( CPF_Config )
	unsigned long                                      m_bReplySubtitleOverridden : 1;                   		// 0x02A0 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned char                                      m_eControllerType;                                		// 0x02A4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1690 ];

		return pClassPointer;
	};

	void TrackConvCineModeChanges ( unsigned long bConvEnabled, unsigned long bConvDisabled, unsigned long bCineEnabled, unsigned long bCineDisabled );
	void eventForceCineModeOff ( );
	void eventRestoreHelmet ( class AActor* TargetActor );
	void eventShowHelmet ( class AActor* TargetActor, unsigned long bShowHelmet );
	void eventDisableCamera ( unsigned long bDisableCamera );
	void* GetReplyParaphraseStrref ( int nIndex );
	bool SelectInterruption ( );
	bool NeedToDisplayInterrupt ( );
	unsigned char GetReplyGUIStyle ( int nIndex );
	bool NeedToDisplayReplies ( );
	int GetReplyCategory ( int nIndex );
	struct FString GetReplyParaphraseText ( int nIndex );
	bool IsCurrentlyAmbient ( );
	bool SkipNode ( );
	bool QueueReply ( int nReply );
};

UClass* UBioConversationController::pClassPointer = NULL;

// Class SFXGame.BioConversationManager
// 0x0070 (0x00AC - 0x003C)
class UBioConversationManager : public UObject
{
public:
	struct FMap_Mirror                                 m_mapKismetToConversation;                        		// 0x003C (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< class UBioConversationController* >        m_aPreloadingConversations;                       		// 0x0078 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UBioConversationController* >        m_aReadyConversations;                            		// 0x0084 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UBioConversationController* >        m_aActiveConversations;                           		// 0x0090 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UBioSimpleDialog* >                  m_aSimpleDialogPlayers;                           		// 0x009C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      m_bActivatingConversation : 1;                    		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1691 ];

		return pClassPointer;
	};

	void AddSimpleDialog ( class UBioSimpleDialog* pNewDialogObject );
	class UBioSimpleDialog* GetSimpleDialog ( struct FName nEventName, void* srReplyLine, void* srVOLine );
	bool IsAnyControllerActiveForResourceID ( int nResourceID, class UBioConversationController* pIgnoreController, unsigned long bIncludeFull, unsigned long bIncludeAmbient );
	void RemoveConversation ( class UBioConversationController* pController, struct FString* sReason );
	void InterruptAmbientConversations ( class UBioConversation* pIgnoreConv, class UBioConversation* pOnlyThis, struct FString* sReason );
	class UBioConversationController* GetFullConversation ( );
	bool AnyConversationsActive ( unsigned char eConvType, unsigned long bIncludeFull, unsigned long bIncludeAmbient );
	class UBioConversationController* GetConversationControllerByResourceID ( int nResourceID );
};

UClass* UBioConversationManager::pClassPointer = NULL;

// Class SFXGame.BioSimpleDialog
// 0x0038 (0x0074 - 0x003C)
class UBioSimpleDialog : public UObject
{
public:
	TArray< struct FSimpleDialogLine >                 DialogLinesMale;                                  		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSimpleDialogLine >                 DialogLinesFemale;                                		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSimpleDialogLine >                 DialogLines;                                      		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSimpleVOEvent >                    SimpleVOEvents;                                   		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColor                                      SubtitleColor;                                    		// 0x006C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastEventDuration;                                		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1692 ];

		return pClassPointer;
	};

	struct FSimpleVOEvent GetEvent ( struct FName EventName, void* EventReplyLine, void* EventLine );
	void PlayVOEventRandomLine ( struct FName EventName, class Asfxplayercontroller* ControllerToPlayOn );
	void PlayVOEventLine ( struct FName EventName, int LineIndex, class Asfxplayercontroller* ControllerToPlayOn );
	void PlayDialogLineIndex ( int DialogLineIndex, class ABioPlayerController* ControllerToPlayOn );
	void PlayDialogLine ( void* DialogLineSr, class ABioPlayerController* ControllerToPlayOn );
};

UClass* UBioSimpleDialog::pClassPointer = NULL;

// Class SFXGame.BioStage
// 0x006E (0x0264 - 0x01F6)
class ABioStage : public AActor
{
public:
	struct FMap_Mirror                                 m_mapPlacement;                                   		// 0x01F8 (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FBioStageCamera >                   m_aCameraList;                                    		// 0x0234 (0x000C) [0x0000000006400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline )
	struct FName                                       m_nmCurrentCamera;                                		// 0x0240 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      m_pMeshComp;                                      		// 0x0248 (0x0004) [0x0000000006080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	float                                              m_fHeightHumanMale;                               		// 0x024C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fHeightAdjust;                                  		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fStageZ;                                        		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSpeakerFeetZ;                                  		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSpeakerEyeHeight;                              		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bEnabled : 1;                                   		// 0x0260 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDoHeightAdjustment : 1;                        		// 0x0260 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bLookAtActive : 1;                              		// 0x0260 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bDOFActive : 1;                                 		// 0x0260 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bDisableProceduralCameraHeightAdjust : 1;       		// 0x0260 (0x0004) [0x0000000000006000] [0x00000010] ( CPF_Transient | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1693 ];

		return pClassPointer;
	};

	void ProfileStage ( class ABioHUD* HUD );
};

UClass* ABioStage::pClassPointer = NULL;

// Class SFXGame.BioCustomAction
// 0x0085 (0x00C1 - 0x003C)
class UBioCustomAction : public UObject
{
public:
	TArray< class UClass* >                            OverrideList;                                     		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      AICommand;                                        		// 0x0048 (0x0004) [0x0000000000000000]              
	class UClass*                                      PlayerCameraMode;                                 		// 0x004C (0x0004) [0x0000000000000000]              
	struct FVector                                     PreciseDestination;                               		// 0x0050 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FRotator                                    PreciseRotation;                                  		// 0x005C (0x000C) [0x0000000000000002]              ( CPF_Const )
	class ABioPawn*                                    m_oPawn;                                          		// 0x0068 (0x0004) [0x0000000000000000]              
	class Asfxplayercontroller*                        m_oPC;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	class Asfxai_core*                                 m_oAI;                                            		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              SpeedModifier;                                    		// 0x0074 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              GravityScale;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MoveSpeed;                                        		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              LastCanDoCustomActionTime;                        		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastFinishedTime;                                 		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinTimeBetweenActions;                            		// 0x0088 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              PreciseRotationInterpolationTime;                 		// 0x008C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DamageReductionLength;                            		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              DamageReductionAmount;                            		// 0x0094 (0x0004) [0x0000000000000000]              
	class USFXCameraMode*                              oPlayerCamera;                                    		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fCameraTransitionIn;                              		// 0x009C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              fCameraTransitionOut;                             		// 0x00A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class USFXTimelineData*                            CurrentTimeline;                                  		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CheckMoveMaximumVelocitySq;                       		// 0x00A8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	class USFXTimelineData*                            TimelineTemplate;                                 		// 0x00AC (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXTimelineData*                            ImpactTimeline;                                   		// 0x00B0 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bLockPawnRotation : 1;                            		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bBreakFromCover : 1;                              		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bDisableMovement : 1;                             		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bDisableLook : 1;                                 		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bDisableCollision : 1;                            		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bDisablePhysics : 1;                              		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bDisableLeftHandIK : 1;                           		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bIgnoreDamage : 1;                                		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bHideWeapon : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      bNotifyKnockedOutOfCover : 1;                     		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bTurnOffZoom : 1;                                 		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bTurnOffReticle : 1;                              		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bDisableShooting : 1;                             		// 0x00B4 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bAllowChargeHolding : 1;                          		// 0x00B4 (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bDisableAiming : 1;                               		// 0x00B4 (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bDisableCoverAdjust : 1;                          		// 0x00B4 (0x0004) [0x0000000000000002] [0x00008000] ( CPF_Const )
	unsigned long                                      bDisableUse : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000002] [0x00010000] ( CPF_Const )
	unsigned long                                      bDisableCustomActionQueuing : 1;                  		// 0x00B4 (0x0004) [0x0000000000000002] [0x00020000] ( CPF_Const )
	unsigned long                                      bBlockingAction : 1;                              		// 0x00B4 (0x0004) [0x0000000000000002] [0x00040000] ( CPF_Const )
	unsigned long                                      bProceduralMovement : 1;                          		// 0x00B4 (0x0004) [0x0000000000000002] [0x00080000] ( CPF_Const )
	unsigned long                                      bLockRotationAfterPreciseRotation : 1;            		// 0x00B4 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bCameraFocusOnPawn : 1;                           		// 0x00B4 (0x0004) [0x0000000000000002] [0x00200000] ( CPF_Const )
	unsigned long                                      bLastCanDoCustomAction : 1;                       		// 0x00B4 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bIgnoreInputForCustomAction : 1;                  		// 0x00B4 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bReachPreciseDestination : 1;                     		// 0x00B4 (0x0004) [0x0000000000000002] [0x01000000] ( CPF_Const )
	unsigned long                                      bReachedPreciseDestination : 1;                   		// 0x00B4 (0x0004) [0x0000000000000002] [0x02000000] ( CPF_Const )
	unsigned long                                      bReachPreciseRotation : 1;                        		// 0x00B4 (0x0004) [0x0000000000000002] [0x04000000] ( CPF_Const )
	unsigned long                                      bReachedPreciseRotation : 1;                      		// 0x00B4 (0x0004) [0x0000000000000002] [0x08000000] ( CPF_Const )
	unsigned long                                      bStartedCustomAction : 1;                         		// 0x00B4 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bAllowDamageReduction : 1;                        		// 0x00B4 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bPushAICommand : 1;                               		// 0x00B4 (0x0004) [0x0000000000000002] [0x40000000] ( CPF_Const )
	unsigned long                                      bReplicateCustomAction : 1;                       		// 0x00B4 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bClientPredictCustomAction : 1;                   		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bForceLocalSimulation : 1;                        		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCreatesGibs : 1;                                 		// 0x00B8 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned char                                      Priority;                                         		// 0x00BC (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      VocalizationEvent;                                		// 0x00BD (0x0001) [0x0000000000000000]              
	unsigned char                                      OriginalRole;                                     		// 0x00BE (0x0001) [0x0000000000000000]              
	unsigned char                                      OriginalRemoteRole;                               		// 0x00BF (0x0001) [0x0000000000000000]              
	unsigned char                                      RandomReactionRolled;                             		// 0x00C0 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1694 ];

		return pClassPointer;
	};

	void CheckMoving ( );
	void ServerStartCustomAction ( int NewAction, class ABioPawn* Sync, int NewPowerAction );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	void GetAnimsUsedByBodyStance ( struct FBodyStance Stance, TArray< struct FName >* UsedAnims );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
	class ABioPawn* GetVictimPawn ( );
	bool CanBeInterrupted ( );
	void TickInput ( class UBioPlayerInput* Input, float DeltaTime );
	void OnTimelineImpact ( class AActor* Target );
	void ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType );
	void ClientDoCustomAction ( unsigned long bForced );
	void ReplicateImpact ( class ABioPawn* Target, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType );
	void ReplicateInterrupt ( );
	void Replicate ( );
	bool ShouldReplicate ( );
	void RemoveTimeline ( );
	void ApplyTimeline ( class USFXTimelineData* Timeline, class AActor* Source, class AActor* Target );
	bool GetCustomActionCamera ( class USFXCameraMode** oNewCameraMode, float* fTransitionIn, float* fTransitionOut );
	void eventTickCustomAction ( float DeltaTime );
	void RotatePlayerCamToFutureDirection ( struct FVector DestPawnLoc, struct FVector DesiredRotation, float TimeToRotate );
	void RotatePlayerCamToFace ( struct FVector AimPoint, float fTimeToRotate );
	void RootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void RootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void TogglePawnCollision ( class ABioPawn* aPawn, unsigned long bToggleOn );
	void eventReachedPrecisePosition ( );
	void ForcePawnRotation ( class APawn* P, struct FRotator NewRotation );
	void ResetFacePreciseRotation ( );
	void SetFacePreciseRotation ( struct FRotator RotationToFace, float InterpolationTime );
	void ResetReachPreciseDestination ( );
	void SetReachPreciseDestination ( struct FVector DestinationToReach );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void AnimNotify ( class UAnimNodeSequence* SeqNode, class UBioAnimNotify_CustomAction* NotifyObject );
	void InterruptThisCustomAction ( );
	void EndThisCustomAction ( );
	void MoveToOffset ( struct FVector* MoveOffset );
	struct FVector GetBasedPosition ( struct FBasedPosition* BP );
	void SetBasedPosition ( struct FVector inLoc, struct FBasedPosition* BP );
	struct FVector RelativeToWorldOffset ( struct FRotator InRotation, struct FVector RelativeSpaceOffset );
	struct FVector WorldToRelativeOffset ( struct FRotator InRotation, struct FVector WorldSpaceOffset );
	bool GetFloorLocation ( struct FVector vStartLocation, struct FVector* vFloorLocation );
	bool MessageEvent ( struct FName EventName, class UObject* Sender );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	void PawnLeftCover ( );
	void ContinueCustomAction ( );
	void PauseCustomAction ( );
	void StopCustomAction ( );
	void StartCustomAction ( );
	bool CanInteractWithPawn ( class ABioPawn* OtherPawn );
	bool CanOverrideCustomAction ( int OldCustomAction, int InCustomAction );
	bool CanOverrideMoveWith ( int OldCustomAction, int NewCustomAction );
	class UClass* GetCustomActionClass ( int CustomAction );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	bool CanDoCustomAction ( class APawn* SyncPawn, unsigned long bForced );
};

UClass* UBioCustomAction::pClassPointer = NULL;

// Class SFXGame.BioCustomAction_KroganCharge
// 0x003D (0x00FE - 0x00C1)
class UBioCustomAction_KroganCharge : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_Start;                                         		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_Miss;                                          		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_Hit;                                           		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AActor* >                            m_oHitTargets;                                    		// 0x00E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AActor*                                      m_oChargeTarget;                                  		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bHitTarget : 1;                                 		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      m_ChargeAction;                                   		// 0x00FC (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_NextAction;                                     		// 0x00FD (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1695 ];

		return pClassPointer;
	};

	bool CanBeInterrupted ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void StartCustomAction ( );
	bool PlayHitAnim ( class AActor* oHitTarget );
	struct FBodyStance GetBodyStance ( unsigned char eAction );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* UBioCustomAction_KroganCharge::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_ProceduralMoveBase
// 0x0073 (0x0134 - 0x00C1)
class USFXCustomAction_ProceduralMoveBase : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_Start;                                         		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_Loop;                                          		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_End;                                           		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     Destination;                                      		// 0x00E8 (0x000C) [0x0000000000000000]              
	float                                              fEndAnimDist;                                     		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              fStartBlendInTime;                                		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              fStartBlendOutTime;                               		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              fLoopBlendInTime;                                 		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              fLoopBlendOutTime;                                		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              fEndBlendInTime;                                  		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              fEndBlendOutTime;                                 		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              fStartAnimPlayRate;                               		// 0x0110 (0x0004) [0x0000000000000000]              
	float                                              fEndAnimPlayRate;                                 		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              fLoopTimeout;                                     		// 0x0118 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAlignPawnBeforeMove : 1;                         		// 0x011C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bPlayedEndAnim : 1;                               		// 0x011C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDelayReplication : 1;                            		// 0x011C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      MoveStage;                                        		// 0x0120 (0x0001) [0x0000000000000000]              
	unsigned char                                      StartBlendType;                                   		// 0x0121 (0x0001) [0x0000000000000000]              
	unsigned char                                      LoopBlendType;                                    		// 0x0122 (0x0001) [0x0000000000000000]              
	unsigned char                                      EndBlendType;                                     		// 0x0123 (0x0001) [0x0000000000000000]              
	unsigned char                                      StartRootBoneX;                                   		// 0x0124 (0x0001) [0x0000000000000000]              
	unsigned char                                      StartRootBoneY;                                   		// 0x0125 (0x0001) [0x0000000000000000]              
	unsigned char                                      StartRootBoneZ;                                   		// 0x0126 (0x0001) [0x0000000000000000]              
	unsigned char                                      EndRootBoneX;                                     		// 0x0127 (0x0001) [0x0000000000000000]              
	unsigned char                                      EndRootBoneY;                                     		// 0x0128 (0x0001) [0x0000000000000000]              
	unsigned char                                      EndRootBoneZ;                                     		// 0x0129 (0x0001) [0x0000000000000000]              
	unsigned char                                      StartRMM;                                         		// 0x012A (0x0001) [0x0000000000000000]              
	unsigned char                                      EndRMM;                                           		// 0x012B (0x0001) [0x0000000000000000]              
	unsigned char                                      StartRootRotationPitch;                           		// 0x012C (0x0001) [0x0000000000000000]              
	unsigned char                                      StartRootRotationYaw;                             		// 0x012D (0x0001) [0x0000000000000000]              
	unsigned char                                      StartRootRotationRoll;                            		// 0x012E (0x0001) [0x0000000000000000]              
	unsigned char                                      EndRootRotationPitch;                             		// 0x012F (0x0001) [0x0000000000000000]              
	unsigned char                                      EndRootRotationYaw;                               		// 0x0130 (0x0001) [0x0000000000000000]              
	unsigned char                                      EndRootRotationRoll;                              		// 0x0131 (0x0001) [0x0000000000000000]              
	unsigned char                                      StartRMRM;                                        		// 0x0132 (0x0001) [0x0000000000000000]              
	unsigned char                                      EndRMRM;                                          		// 0x0133 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1696 ];

		return pClassPointer;
	};

	bool ShouldReplicate ( );
	bool CanBeInterrupted ( );
	void DestTimeout ( );
	void SetMoveStage ( unsigned char NextStage );
	void eventPlayEndAnimation ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	float GetBlendOutTime ( );
	float GetBlendInTime ( );
	void StopCustomAction ( );
	void PreAlignPawnLocation ( );
	void PlayStartAnimation ( );
	void StartCustomAction ( );
	void eventReachedPrecisePosition ( );
	void GetEndAnim ( struct FBodyStance* Stance );
	void GetLoopAnim ( struct FBodyStance* Stance );
	void GetStartAnim ( struct FBodyStance* Stance );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_ProceduralMoveBase::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_MantleOverCoverBase
// 0x0300 (0x0434 - 0x0134)
class USFXCustomAction_MantleOverCoverBase : public USFXCustomAction_ProceduralMoveBase
{
public:
	struct FMantleInfo                                 MyMantleInfo;                                     		// 0x0134 (0x02F8) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ASFXReachSpecPlaceholderCylinder*            PlaceholderCylinder;                              		// 0x042C (0x0004) [0x0000000000000000]              
	class ASFXReachSpecPlaceholderCylinder*            PlaceholderCylinder2;                             		// 0x0430 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1697 ];

		return pClassPointer;
	};

	void ClientDoCustomAction ( unsigned long bForced );
	void ServerStartCustomAction ( int NewAction, class ABioPawn* Sync, int NewPowerAction );
	void Replicate ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void PlayEndAnimation ( );
	void AdjustLoopPlayRate ( float FallDuration );
	void PlayLoopAnimation ( );
	void AdaptJumpToPathing ( );
	void PlayStartAnimation ( );
	void StopCustomAction ( );
	void StartCustomAction ( );
	void PreAlignPawnLocation ( );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
};

UClass* USFXCustomAction_MantleOverCoverBase::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_ReachSpecMove
// 0x000C (0x0140 - 0x0134)
class USFXCustomAction_ReachSpecMove : public USFXCustomAction_ProceduralMoveBase
{
public:
	class UReachSpec*                                  MovementPath;                                     		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFXReachSpecPlaceholderCylinder*            BlockingStartCylinder;                            		// 0x0138 (0x0004) [0x0000000000000000]              
	class ASFXReachSpecPlaceholderCylinder*            BlockingEndCylinder;                              		// 0x013C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1698 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void PreAlignPawnLocation ( );
	void ClientDoCustomAction ( unsigned long bForced );
	void Replicate ( );
	void RemoveBlockingEndPoints ( );
	void BlockMoveEndPoints ( );
	void StartCustomAction ( );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
};

UClass* USFXCustomAction_ReachSpecMove::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_AirRecoverBase
// 0x0008 (0x0148 - 0x0140)
class USFXCustomAction_AirRecoverBase : public USFXCustomAction_ReachSpecMove
{
public:
	float                                              FlightAccel;                                      		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTimedOut : 1;                                    		// 0x0144 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1699 ];

		return pClassPointer;
	};

	bool CanBeInterrupted ( );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	void DestTimeout ( );
	void StopCustomAction ( );
	void PlayStartAnimation ( );
	void StartCustomAction ( );
	struct FVector GetDestination ( );
};

UClass* USFXCustomAction_AirRecoverBase::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_BoostDownBase
// 0x0000 (0x0140 - 0x0140)
class USFXCustomAction_BoostDownBase : public USFXCustomAction_ReachSpecMove
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1700 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void PreAlignPawnLocation ( );
	void ClientDoCustomAction ( unsigned long bForced );
	void Replicate ( );
	void RemoveBlockingEndPoints ( );
	void BlockMoveEndPoints ( );
	void StartCustomAction ( );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
};

UClass* USFXCustomAction_BoostDownBase::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_ClimbDownBase
// 0x0004 (0x0144 - 0x0140)
class USFXCustomAction_ClimbDownBase : public USFXCustomAction_ReachSpecMove
{
public:
	float                                              fClimbSpeed;                                      		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1701 ];

		return pClassPointer;
	};

	void SetMoveStage ( unsigned char NextStage );
	void StopCustomAction ( );
	void PreAlignPawnLocation ( );
};

UClass* USFXCustomAction_ClimbDownBase::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_ClimbUpBase
// 0x0014 (0x0154 - 0x0140)
class USFXCustomAction_ClimbUpBase : public USFXCustomAction_ReachSpecMove
{
public:
	float                                              fGroundOffset;                                    		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fClimbSpeed;                                      		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxClimbSpeed;                                   		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxAcceleration;                                 		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fStopSpeed;                                       		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1702 ];

		return pClassPointer;
	};

	void SetMoveStage ( unsigned char NextStage );
	void StopCustomAction ( );
	void PreAlignPawnLocation ( );
};

UClass* USFXCustomAction_ClimbUpBase::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_LadderClimbDownBase
// 0x0008 (0x0148 - 0x0140)
class USFXCustomAction_LadderClimbDownBase : public USFXCustomAction_ReachSpecMove
{
public:
	float                                              fClimbDownSpeed;                                  		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    LadderAnimSet;                                    		// 0x0144 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1703 ];

		return pClassPointer;
	};

	void SetMoveStage ( unsigned char NextStage );
	void StopCustomAction ( );
	void PreAlignPawnLocation ( );
	void StartCustomAction ( );
};

UClass* USFXCustomAction_LadderClimbDownBase::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_LeapBase
// 0x0018 (0x0158 - 0x0140)
class USFXCustomAction_LeapBase : public USFXCustomAction_ReachSpecMove
{
public:
	struct FInterpCurveFloat                           LeapCurve;                                        		// 0x0140 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LeapSpeed;                                        		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXLeapReachSpecBase*                       LeapSpec;                                         		// 0x0154 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1704 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void PlayStartAnimation ( );
	void PreAlignPawnLocation ( );
};

UClass* USFXCustomAction_LeapBase::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_SyncPawnInstigator_Base
// 0x0033 (0x00F4 - 0x00C1)
class USFXCustomAction_SyncPawnInstigator_Base : public UBioCustomAction
{
public:
	struct FVector                                     MarkerOffset;                                     		// 0x00C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SyncActionName;                                   		// 0x00D0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              InteractionStartTimeOut;                          		// 0x00D8 (0x0004) [0x0000000000000000]              
	class ABioPawn*                                    SyncPartner;                                      		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                PartnerCustomAction;                              		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              MaxPartnerDistance;                               		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              SyncCone;                                         		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              RotationTime;                                     		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFinishedCustomAction : 1;                        		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHasStartedInteraction : 1;                       		// 0x00F0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bMoveSyncPawn : 1;                                		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bHideTargetWeapon : 1;                            		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAffectsFriendlies : 1;                           		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bLockTargetRotation : 1;                          		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDisablePartnerCollisionOnMove : 1;               		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bIgnoreCameraHiding : 1;                          		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1705 ];

		return pClassPointer;
	};

	bool CanBeInterrupted ( );
	void DebugSocketRelativeLocation ( struct FName InSocketName );
	void Replicate ( );
	void ClientTeleportToMarkers ( );
	void ClientMoveToMarkersAllowedDelay ( );
	void MoveToMarkers ( );
	class ABioPawn* GetVictimPawn ( );
	void OnPartnerReachedDestination ( );
	void OnPartnerLeavingCustomAction ( );
	bool MessageEvent ( struct FName EventName, class UObject* Sender );
	void NonSyncedAction ( );
	void StartInteraction ( );
	bool IsReadyToStartInteraction ( );
	void CheckReadyToStartInteraction ( );
	void InteractionStartTimedOut ( );
	bool CanMoveToMarker ( class ABioPawn* SyncPartnerPawn );
	bool CanInteractWithPawn ( class ABioPawn* OtherPawn );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	void StopCustomAction ( );
	void StartCustomAction ( );
};

UClass* USFXCustomAction_SyncPawnInstigator_Base::pClassPointer = NULL;

// Class SFXGame.SFXPowerCustomActionBase
// 0x0389 (0x044A - 0x00C1)
class USFXPowerCustomActionBase : public UBioCustomAction
{
public:
	struct FPowerData                                  CooldownTime;                                     		// 0x00C4 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  HenchmanCooldownTime;                             		// 0x00F4 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  MinimumRange;                                     		// 0x0124 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  MaximumRange;                                     		// 0x0154 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  ImpactRadius;                                     		// 0x0184 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  MaximumImpactTargets;                             		// 0x01B4 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  MaximumRagdollTargets;                            		// 0x01E4 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  EffectDuration;                                   		// 0x0214 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  Damage;                                           		// 0x0244 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  Force;                                            		// 0x0274 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  VFXIntensity;                                     		// 0x02A4 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  ProjectileSpeed;                                  		// 0x02D4 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  ConeHalfAngle;                                    		// 0x0304 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FRankInfo2 >                        Ranks;                                            		// 0x0334 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      RankCosts;                                        		// 0x0340 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPowerStatBarInfo >                 PowerStatBars;                                    		// 0x034C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnActorImpacted__Delegate;                      		// 0x0358 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FEvolvedChoiceInfo                          EvolvedChoicesInfo[ 0x6 ];                        		// 0x0364 (0x0030) [0x0000000000000000]              
	int                                                EvolvedChoices[ 0x6 ];                            		// 0x0394 (0x0018) [0x0000000000000000]              
	int                                                EvolvedRankCosts[ 0x6 ];                          		// 0x03AC (0x0018) [0x0000000000000000]              
	struct FVector                                     m_vLocationToAimAt;                               		// 0x03C4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastProjectileVelocity;                           		// 0x03D0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       PowerName;                                        		// 0x03DC (0x0008) [0x0000000000000000]              
	int                                                PowerCustomActionID;                              		// 0x03E4 (0x0004) [0x0000000000000000]              
	float                                              Rank;                                             		// 0x03E8 (0x0004) [0x0000000000000000]              
	class AActor*                                      m_oTargetToAimAt;                                 		// 0x03EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DelayBeforeFirstUse;                              		// 0x03F0 (0x0004) [0x0000000000000000]              
	float                                              DelayBetweenUses;                                 		// 0x03F4 (0x0004) [0x0000000000000000]              
	float                                              TimeUntilNextUse;                                 		// 0x03F8 (0x0004) [0x0000000000000000]              
	float                                              CurrentCooldownTime;                              		// 0x03FC (0x0004) [0x0000000000000000]              
	float                                              TotalCooldownTime;                                		// 0x0400 (0x0004) [0x0000000000000000]              
	float                                              GlobalCooldownTime;                               		// 0x0404 (0x0004) [0x0000000000000000]              
	void*                                              DisplayName;                                      		// 0x0408 (0x0004) [0x0000000000000000]              
	void*                                              Description;                                      		// 0x040C (0x0004) [0x0000000000000000]              
	void*                                              DataDescription;                                  		// 0x0410 (0x0004) [0x0000000000000000]              
	void*                                              ImpactText;                                       		// 0x0414 (0x0004) [0x0000000000000000]              
	int                                                Icon;                                             		// 0x0418 (0x0004) [0x0000000000000000]              
	class UGFxMovieInfo*                               IconResource;                                     		// 0x041C (0x0004) [0x0000000000000000]              
	void*                                              TalentDescription;                                		// 0x0420 (0x0004) [0x0000000000000000]              
	void*                                              Evolved1DisplayName;                              		// 0x0424 (0x0004) [0x0000000000000000]              
	void*                                              Evolved1TalentDescription;                        		// 0x0428 (0x0004) [0x0000000000000000]              
	void*                                              Evolved2DisplayName;                              		// 0x042C (0x0004) [0x0000000000000000]              
	void*                                              Evolved2TalentDescription;                        		// 0x0430 (0x0004) [0x0000000000000000]              
	int                                                WheelDisplayIndex;                                		// 0x0434 (0x0004) [0x0000000000000000]              
	float                                              InstantCastIgnoreCoverDist;                       		// 0x0438 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srTokenizedPowerData;                             		// 0x043C (0x0004) [0x0000000000000000]              
	void*                                              srFractionSeparator;                              		// 0x0440 (0x0004) [0x0000000000000000]              
	unsigned long                                      bEnabled : 1;                                     		// 0x0444 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bEvolved1 : 1;                                    		// 0x0444 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bEvolved2 : 1;                                    		// 0x0444 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bPlayerOrderedPowerUse : 1;                     		// 0x0444 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      AISelectable : 1;                                 		// 0x0444 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      AimingIgnoresObstructions : 1;                    		// 0x0444 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      UsesSharedCooldown : 1;                           		// 0x0444 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bForcedCooldown : 1;                              		// 0x0444 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      DisplayInHUD : 1;                                 		// 0x0444 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      DisplayInCharacterRecord : 1;                     		// 0x0444 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      IsHenchmenUnique : 1;                             		// 0x0444 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      IsBonusPower : 1;                                 		// 0x0444 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned char                                      PowerType;                                        		// 0x0448 (0x0001) [0x0000000000000000]              
	unsigned char                                      HenchmanPowerType;                                		// 0x0449 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1706 ];

		return pClassPointer;
	};

	void OnOwnerDestroyed ( );
	void DoJoinInProgress ( );
	bool eventDoAreaExplosionForActor ( class AActor* oActor, struct FVector location, int ImpactCount, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxRagdollOverride, struct FScriptDelegate ImpactCallback, class UClass* MaxRagdollDmgTypeOverride );
	bool eventDoPowerDetonatedForActor ( class AActor* oActor, struct FVector HitLocation, struct FVector HitNormal, int nImpactCount, unsigned long bFirstTarget, class ASFXProjectile_PowerCustomAction* oProjectile );
	void eventReplaceAnimSetWithDynamic ( class UAnimSet* DynAnimSet );
	void eventGetPowerAnimInfo ( class UAnimSet** AnimSet, TArray< struct FName >* AnimNames );
	struct FString eventConvertStatForDisplay ( float Number );
	int GetPowerStatBarBonus ( float Bonus, float BarLength, struct FPowerData* Data );
	bool GetPowerStatBarData ( int RankIdx, int nEvolve, int BarIdx, struct FPowerEvolveStatDetails* Details );
	void PopulatePowerStatBarEvolves ( );
	void ResetPower ( );
	int GetNumEvolveChoices ( );
	bool IsEvolvedWithChoice ( unsigned char choice );
	bool eventGetPawnPowerUnlockData ( float* nRequiredLevel, void** srCustomUnlockText );
	void EvolvePower ( unsigned char choice );
	void GetStartLocationForLOSCheck ( class ABioPawn* oPawn, struct FVector* vStartLocation );
	bool IsValidTarget ( class AActor* oTarget );
	void ChooseTargetForPlayer ( class AActor* oDesiredSelectionTarget, class AActor* oDesiredTarget, struct FVector vDesiredTargetLocation, class AActor** oTarget, struct FVector* vTargetLocation );
	void eventChoosePowerTarget ( unsigned long bPlayerOrdered, class AActor* oDesiredSelectionTarget, class AActor* oDesiredTarget, struct FVector vDesiredTargetLocation, class AActor** oTarget, struct FVector* vTargetLocation );
	bool eventCanUsePower ( class AActor* oTarget );
	bool IsEnabled ( );
	bool eventShouldUsePower ( class AActor* Target, struct FString* sOptionalInfo );
	struct FString eventGetHUDWheelIconInfo ( );
	float eventGetDisplayBonusAtRank ( int nRank, struct FPowerData* Data );
	float eventGetCurrentValueAtRank ( int nRank, struct FPowerData* Data );
	void eventRecalculatePowerData ( unsigned long bReset, struct FPowerData* Data );
	void ReloadAmmoPower ( class ABioPawn* Target, class ASFXWeapon* Weapon );
	void OnOwnerDied ( );
	void OnSquadMemberAdded ( class APawn* Pawn );
	void RecalculateAllPowerInfo ( unsigned long bReset );
	void RecalculateAllPowerData ( unsigned long bReset );
	void OnPawnLoadedWeapons ( );
	void OnPowersLoaded ( );
	void OnPowerRankIncreased ( );
	void OnPowerAdded ( class USFXPowerCustomActionBase* Power );
	void GetStringFromStringRef ( void* TheStringRef, unsigned long bParse, int nParseIndex, struct FString* TheString );
	void ProcessToken ( int nRankIndex, struct FString* sToken );
	bool ParseString ( int nRankIndex, struct FString* sParsedString );
	bool GetParsedString ( void* srValue, int nRankIndex, struct FString* sOutput );
	bool GetDataDescription ( int nRankIndex, struct FString* sDescription );
	bool GetDescription ( int nRankIndex, struct FString* sDescription );
	bool IsTargetInRange ( class AActor* Target );
	float GetRankBonus ( int nRankToUse, struct FPowerData* Data );
	float GetArrayValue ( int nRankToUse, TArray< float >* ArrayValues );
	bool OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* USFXPowerCustomActionBase::pClassPointer = NULL;

// Class SFXGame.SFXTimelineData
// 0x0038 (0x0074 - 0x003C)
class USFXTimelineData : public UObject
{
public:
	TArray< struct FTimelineEffect >                   Timeline;                                         		// 0x003C (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FScriptDelegate                             __AOEEvalFunc__Delegate;                          		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __InputHandler__Delegate;                         		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              Lifetime;                                         		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LifetimeLeft;                                     		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      Source;                                           		// 0x0068 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class AActor*                                      Target;                                           		// 0x006C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UObject*                                     FuncOwner;                                        		// 0x0070 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1707 ];

		return pClassPointer;
	};

	void InitializeTimeline ( class UObject* oFuncOwner );
	void InputCallback ( struct FString Alias, unsigned long bPress );
	void InputHandler ( );
	bool AOEEvalFunc ( class AActor* ChkOwner, class AActor* ChkTarget );
};

UClass* USFXTimelineData::pClassPointer = NULL;

// Class SFXGame.BioDefine
// 0x0000 (0x003C - 0x003C)
class UBioDefine : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1708 ];

		return pClassPointer;
	};

};

UClass* UBioDefine::pClassPointer = NULL;

// Class SFXGame.BioEventNotifier
// 0x0080 (0x00BC - 0x003C)
class UBioEventNotifier : public UObject
{
public:
	TArray< struct FBioDisplayNotice >                 m_lstNotices;                                     		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FBioTalentNotice >                  m_lstTalentNotices;                               		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sWwiseMusicVolumeRTPCName;                        		// 0x0054 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     sWwiseParaReneRTPCName;                           		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class ABioPawn*                                    TalentNoticeInputCharacter;                       		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioSFHandler_MessageBox*                    m_oTalentNotifyBoxHandler;                        		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              srTalentOk;                                       		// 0x0074 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srTalentSkipRemainder;                            		// 0x0078 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srLevelUp;                                        		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srQuestAdded;                                     		// 0x0080 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srQuestUpdated;                                   		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srQuestCompleted;                                 		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srCodexEntry;                                     		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srParagonReceived;                                		// 0x0090 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srRenegadeReceived;                               		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srMedigel;                                        		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srSalvage;                                        		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srMap;                                            		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srAbility;                                        		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nParagonPlotVar;                                  		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nRenegadePlotVar;                                 		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nWwiseMusicVolumeRTPCPlotVar;                     		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fPassivePopupDisplayTime;                         		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bNoticesNotarized : 1;                          		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bEnabled : 1;                                   		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bTalentNoticeReady : 1;                         		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bHUDAcknowledgedTalentNotify : 1;               		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bDissableTallentNotifications : 1;                		// 0x00B8 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1709 ];

		return pClassPointer;
	};

	void RemoveTalentNotify ( class ABioPawn* oCharacter );
	void AddTalentNotifyStringRef ( int nTalentIcon, void* srTalentName, class ABioPawn* pPawn );
	void AddTalentNotifyString ( int nTalentIcon, struct FString sTalentName, class ABioPawn* pPawn );
	void OnTalentNoticeInput ( unsigned long bAPressed, int nContext );
	bool PendingTalentNotify ( class ABioPawn* oCharacter );
	void ShowTalentNotify ( class ABioPawn* oCharacter );
	void AddNotice ( int nType, int nContext, int nTimeToLive, int nIconIndex, void* srTitle, struct FString strTitle, int nQuantity, int nQuantMin, int nQuantMax );
	void NotarizeNotices ( );
	void HasListChanged ( );
	void RetrieveNotices ( TArray< struct FBioDisplayNotice >* lstNotices );
};

UClass* UBioEventNotifier::pClassPointer = NULL;

// Class SFXGame.BioSFScreenTip
// 0x000C (0x0048 - 0x003C)
class UBioSFScreenTip : public UObject
{
public:
	void*                                              Default_Body;                                     		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              PC_Body;                                          		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              PS3_Body;                                         		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1710 ];

		return pClassPointer;
	};

};

UClass* UBioSFScreenTip::pClassPointer = NULL;

// Class SFXGame.SFXGUIRenderTarget_InterpActor
// 0x0005 (0x0261 - 0x025C)
class ASFXGUIRenderTarget_InterpActor : public AInterpActor
{
public:
	int                                                RenderTextureUVChannel;                           		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MouseSupport;                                     		// 0x0260 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1711 ];

		return pClassPointer;
	};

};

UClass* ASFXGUIRenderTarget_InterpActor::pClassPointer = NULL;

// Class SFXGame.SFXProjectile
// 0x009D (0x02E1 - 0x0244)
class ASFXProjectile : public AProjectile
{
public:
	struct FReplicatedInit                             ReplicatedInitInfo;                               		// 0x0244 (0x0024) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FReplicatedExplosion                        ReplicatedExplosionInfo;                          		// 0x0268 (0x001C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AActor*                                      ProjectileOwner;                                  		// 0x0284 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMeshComponent*                              Mesh;                                             		// 0x0288 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ProjEffectsTrail;                                 		// 0x028C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ProjEffectsHead;                                  		// 0x0290 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             ProjEffectsTrailTemplate;                         		// 0x0294 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             ProjEffectsHeadTemplate;                          		// 0x0298 (0x0004) [0x0000000000000000]              
	class URvrClientEffectInterface*                   CE_ProjectileTemplate;                            		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              ProjEffectsTrailWaitTime;                         		// 0x02A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LatestExplodeTime;                                		// 0x02A4 (0x0004) [0x0000000000000000]              
	float                                              ExplodeTimeOut;                                   		// 0x02A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CoefficientOfRestitution;                         		// 0x02AC (0x0004) [0x0000000000000000]              
	float                                              CoefficientOfFriction;                            		// 0x02B0 (0x0004) [0x0000000000000000]              
	float                                              ExplodeSpeedThreshold;                            		// 0x02B4 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 BounceSound;                                      		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ASFXProjectile*                              TargetProjectile;                                 		// 0x02BC (0x0004) [0x0000000000000000]              
	float                                              PredictionInitialSpeedGain;                       		// 0x02C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PredictionMaxSpeedGain;                           		// 0x02C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PredictionSpeedInterpolationSpeed;                		// 0x02C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PredictionAccelerationRate;                       		// 0x02CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              NetInitTime;                                      		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InitEventEndReplicationTime;                      		// 0x02D4 (0x0004) [0x0000000000000000]              
	float                                              ExplosionEventEndReplicationTime;                 		// 0x02D8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSuppressAudio : 1;                               		// 0x02DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShuttingDown : 1;                                		// 0x02DC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bArcing : 1;                                      		// 0x02DC (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bBouncing : 1;                                    		// 0x02DC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bStopAiming : 1;                                  		// 0x02DC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bClientPredictProjectile : 1;                     		// 0x02DC (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bClientPredictionActive : 1;                      		// 0x02DC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bClientPredictionTarget : 1;                      		// 0x02DC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bGotAPredictionTarget : 1;                        		// 0x02DC (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bIgnoreMultiplayerWaveEndCleanup : 1;             		// 0x02DC (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      bPooled : 1;                                      		// 0x02DC (0x0004) [0x0000000000000020] [0x00000400] ( CPF_Net )
	unsigned long                                      bActive : 1;                                      		// 0x02DC (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned char                                      LastReplicatedInitInfoTrigger;                    		// 0x02E0 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1712 ];

		return pClassPointer;
	};

	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	bool IsTargettedProjectile ( );
	void Destroyed ( );
	void Tick_Prediction ( float DeltaTime );
	void SetPredictionTarget ( class ASFXProjectile* NewTargetProjectile );
	void SetPrediction ( unsigned long Active, unsigned long bIsATarget );
	void SetPredictedInitialSpeed ( );
	void Reset ( );
	void ReplicatedExplosionUpdated ( );
	void ReplicatedInitUpdated ( );
	void ReplicateExplode ( struct FVector HitLocation, struct FVector HitNormal );
	void ReplicateInit ( struct FVector Direction );
	void eventReplicatedEvent ( struct FName VarName );
	void SpawnImpactEffect ( struct FVector HitLocation, struct FVector HitNormal );
	float GetMomentum ( );
	float GetDamageRadius ( );
	float GetDamage ( );
	void Bounce ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void ApplyExternalForce ( );
	void Tick ( float DeltaTime );
	void ProjEffectsTrailFinished ( class UParticleSystemComponent* PSC );
	void SetProjectileHidden ( unsigned long bHide );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	bool IsShuttingDown ( );
	void ShutDown ( );
	void Init ( struct FVector Direction );
	void ShutdownPostEffects ( );
	void eventReuse ( );
	void eventRecycle ( );
	void SpawnFlightEffects ( );
};

UClass* ASFXProjectile::pClassPointer = NULL;

// Class SFXGame.SFXProjectile_Explosive
// 0x00B0 (0x0391 - 0x02E1)
class ASFXProjectile_Explosive : public ASFXProjectile
{
public:
	class UClass*                                      ExplodeRumbleClass;                               		// 0x02E4 (0x0004) [0x0000000000000000]              
	struct FReplicatedStick                            ReplicatedStickInfo;                              		// 0x02E8 (0x0028) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FName                                       DecalDissolveParamName;                           		// 0x0310 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UWwiseEvent*                                 ExplosionSound;                                   		// 0x0318 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UWwiseEvent*                                 AdditionalExplosionSound;                         		// 0x031C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UWwiseEvent*                                 StickPawnImpactSound;                             		// 0x0320 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UWwiseEvent*                                 NPStickPawnImpactSound;                           		// 0x0324 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UWwiseEvent*                                 StickShieldImpactSound;                           		// 0x0328 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UWwiseEvent*                                 NPStickShieldImpactSound;                         		// 0x032C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UWwiseEvent*                                 StickEnvironmentImpactSound;                      		// 0x0330 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UWwiseEvent*                                 NPStickEnvironmentImpactSound;                    		// 0x0334 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DuckDistanceThreshold;                            		// 0x0338 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UWwiseEvent*                                 WwiseDuckEvent;                                   		// 0x033C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ExplosionLoudness;                                		// 0x0340 (0x0004) [0x0000000000000000]              
	float                                              fFuseLength;                                      		// 0x0344 (0x0004) [0x0000000000000000]              
	float                                              StickExplodeDelay;                                		// 0x0348 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             ProjExplosionTemplate;                            		// 0x034C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class URvrClientEffectInterface*                   CE_ExplosionTemplate;                             		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          ExplosionDecal;                                   		// 0x0354 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DecalWidth;                                       		// 0x0358 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DecalHeight;                                      		// 0x035C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DurationOfDecal;                                  		// 0x0360 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxEffectDistance;                                		// 0x0364 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AccelRate;                                        		// 0x0368 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TossZ;                                            		// 0x036C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TerminalVelocity;                                 		// 0x0370 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CustomGravityScaling;                             		// 0x0374 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ExplosionParticleLifetime;                        		// 0x0378 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ExplosionEffectRadius;                            		// 0x037C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AActor*                                      StuckTo;                                          		// 0x0380 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinExplodeRumbleDistance;                         		// 0x0384 (0x0004) [0x0000000000000000]              
	float                                              MaxExplodeRumbleDistance;                         		// 0x0388 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDuckAudio : 1;                                   		// 0x038C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bUseHurtRadius : 1;                               		// 0x038C (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bRandomizeFuse : 1;                               		// 0x038C (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bAdvanceExplosionEffect : 1;                      		// 0x038C (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bSuppressExplosionFX : 1;                         		// 0x038C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bArmed : 1;                                       		// 0x038C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bStickPawns : 1;                                  		// 0x038C (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bStickWalls : 1;                                  		// 0x038C (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bStuck : 1;                                       		// 0x038C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bProximityCheck : 1;                              		// 0x038C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bPlayExplodeForceFeedback : 1;                    		// 0x038C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned char                                      LastReplicatedStickInfoTriggerCounter;            		// 0x0390 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1713 ];

		return pClassPointer;
	};

	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	float RadiusFallOff ( float Distance, float OuterRadius, float InnerRadius );
	void Tick_Prediction ( float DeltaTime );
	void DelayedExplosion ( );
	void DoStickImpact ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal, struct FTraceHitInfo HitInfo );
	bool Stick ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal, int BoneIdx, int Reaction );
	void StickTrace ( class AActor* Other, struct FVector HitNormal, class UPrimitiveComponent* OtherComp );
	unsigned char GetStickReaction ( );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool ProjectileHurtRadius ( float InDamageAmount, float InDamageRadius, float Momentum, struct FVector HurtOrigin, struct FVector HitNormal );
	void DoImpact ( class AActor* InImpactedActor, class AController* InInstigatorController, float BaseDamage, float InDamageRadius, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, struct FTraceHitInfo* HitInfo );
	void DoImpactTrace ( class AActor* InImpactedActor, class AController* InInstigatorController, float BaseDamage, float InDamageRadius, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage );
	class UClass* GetDamageType ( );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void Timer ( );
	void SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal );
	void SetExplosionEffectParameters ( class UParticleSystemComponent* ProjExplosion );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	bool CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance );
	void Init ( struct FVector Direction );
	void Recycle ( );
	void eventSetInitialState ( );
	bool CanSplash ( );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void ReplicateStick ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal, int BoneIndex );
	void ReplicatedEvent ( struct FName VarName );
};

UClass* ASFXProjectile_Explosive::pClassPointer = NULL;

// Class SFXGame.SFXProjectile_PowerCustomAction
// 0x0093 (0x0424 - 0x0391)
class ASFXProjectile_PowerCustomAction : public ASFXProjectile_Explosive
{
public:
	TArray< struct FName >                             SentNofications;                                  		// 0x0394 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FReplicatedPowerProjInit                    ReplicatedPowerProjInitInfo;                      		// 0x03A0 (0x0030) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     LastLocation;                                     		// 0x03D0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     TargetLocation;                                   		// 0x03DC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CameraLocation;                                   		// 0x03E8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    CameraRotation;                                   		// 0x03F4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class Usfxpowercustomaction*                       Power;                                            		// 0x0400 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    Caster;                                           		// 0x0404 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ReservationID;                                    		// 0x0408 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ImpactedCount;                                    		// 0x040C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      TargetActor;                                      		// 0x0410 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReplicatedTravelSpeed;                            		// 0x0414 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AActor*                                      TouchedActor;                                     		// 0x0418 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PassThroughCoverDistSq;                           		// 0x041C (0x0004) [0x0000000000000000]              
	unsigned long                                      bUsePowerReservation : 1;                         		// 0x0420 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      ShowPowerAiming : 1;                              		// 0x0420 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1714 ];

		return pClassPointer;
	};

	void ReplicatedInitUpdated ( );
	void eventReplicatedEvent ( struct FName VarName );
	void ReplicateInit ( struct FVector Direction );
	void PawnEvadedPower ( class ABioPawn* Pawn, struct FName Label, float TimeBeforeImpact );
	void UpdateImpactNotifications ( );
	void ShutDown ( );
	void Recycle ( );
	void ChangeSpeedDynamically ( float NewSpeed );
	void Tick ( float DeltaTime );
	void Init ( struct FVector Direction );
	bool InitializePowerProjectile ( class AActor* oCaster, float fTravelSpeed, float fRadius, class Usfxpowercustomaction* oPower );
	bool ProjectileHurtRadius ( float InDamageAmount, float InDamageRadius, float Momentum, struct FVector HurtOrigin, struct FVector HitNormal );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	bool IgnoreOther ( class AActor* Other );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	float GetDamageRadius ( );
};

UClass* ASFXProjectile_PowerCustomAction::pClassPointer = NULL;

// Class SFXGame.SFXProjectile_Trajectory
// 0x0000 (0x0244 - 0x0244)
class ASFXProjectile_Trajectory : public AProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1715 ];

		return pClassPointer;
	};

	void ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation );
	float GetRange ( );
	float StaticGetTimeToLocation ( struct FVector TargetLoc, struct FVector StartLoc, class AController* RequestedBy );
	float GetTimeToLocation ( struct FVector TargetLoc );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool IsStationary ( );
	void RandSpin ( float spinRate );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void eventEncroachedBy ( class AActor* Other );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool HurtRadius ( float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool ProjectileHurtRadius ( float inDamage, float InRadius, float InMomentum, struct FVector HurtOrigin, struct FVector HitNormal );
	void Reset ( );
	bool CanSplash ( );
	unsigned char GetTeamNum ( );
	void Init ( struct FVector Direction );
	void Destroyed ( );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	bool eventEncroachingOn ( class AActor* Other );
	void OnExplode ( class AProjectile* pProjectile );
};

UClass* ASFXProjectile_Trajectory::pClassPointer = NULL;

// Class SFXGame.SFXTracer
// 0x004F (0x0245 - 0x01F6)
class ASFXTracer : public AActor
{
public:
	struct FVector                                     MeshScale;                                        		// 0x01F8 (0x000C) [0x0000000000000000]              
	struct FVector                                     DesiredEndPoint;                                  		// 0x0204 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartPoint;                                       		// 0x0210 (0x000C) [0x0000000000000000]              
	float                                              MeshScaleTime;                                    		// 0x021C (0x0004) [0x0000000000000000]              
	float                                              Speed;                                            		// 0x0220 (0x0004) [0x0000000000000000]              
	float                                              MaxSpeed;                                         		// 0x0224 (0x0004) [0x0000000000000000]              
	float                                              TrailWaitTime;                                    		// 0x0228 (0x0004) [0x0000000000000000]              
	class UStaticMeshComponent*                        Mesh;                                             		// 0x022C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    Trail;                                            		// 0x0230 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ScaleTimeFactor;                                  		// 0x0234 (0x0004) [0x0000000000000000]              
	float                                              UnscaledMeshLength;                               		// 0x0238 (0x0004) [0x0000000000000000]              
	float                                              ScaleTimeCount;                                   		// 0x023C (0x0004) [0x0000000000000000]              
	float                                              Lifetime;                                         		// 0x0240 (0x0004) [0x0000000000000000]              
	unsigned char                                      ActiveState;                                      		// 0x0244 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1716 ];

		return pClassPointer;
	};

	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void Reset ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void ShutDown ( );
	void Recycle ( );
	void Reuse ( );
	void StopTracer ( );
	void InitTracer ( struct FVector Start, struct FVector End, struct FVector DesiredScale, float DesiredSpeed );
};

UClass* ASFXTracer::pClassPointer = NULL;

// Class SFXGame.SFXWeapon_NativeBase
// 0x0012 (0x02F7 - 0x02E5)
class ASFXWeapon_NativeBase : public AWeapon
{
public:
	int                                                CurrentSpareAmmo;                                 		// 0x02E8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                AmmoUsedCount;                                    		// 0x02EC (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bWeaponExpanded : 1;                              		// 0x02F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInstantExpansion : 1;                            		// 0x02F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceReplayAnimation : 1;                        		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCanDropWeapon : 1;                               		// 0x02F0 (0x0004) [0x0000000000004001] [0x00000008] ( CPF_Edit | CPF_Config )
	unsigned long                                      bCanDropAmmo : 1;                                 		// 0x02F0 (0x0004) [0x0000000000004001] [0x00000010] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDrawingWeaponBlendOut : 1;                       		// 0x02F0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bReloadWeaponBlendOut : 1;                        		// 0x02F0 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bIsZoomed : 1;                                    		// 0x02F0 (0x0004) [0x0000000000000020] [0x00000080] ( CPF_Net )
	unsigned long                                      bCanBlindUp : 1;                                  		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bInfiniteAmmo : 1;                                		// 0x02F0 (0x0004) [0x0000000000004021] [0x00000200] ( CPF_Edit | CPF_Net | CPF_Config )
	unsigned long                                      bShowGlowInZoom : 1;                              		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bGlowOnlyThroughSmoke : 1;                        		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bIsInitialized : 1;                               		// 0x02F0 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bSuppressAudio : 1;                               		// 0x02F0 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned char                                      VocalizationType;                                 		// 0x02F4 (0x0001) [0x0000000000000000]              
	unsigned char                                      FizzleCount;                                      		// 0x02F5 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      CharacterSlot;                                    		// 0x02F6 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1717 ];

		return pClassPointer;
	};

	void eventProcessInstantHit_Internal ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits );
	float eventGetPenetrationDepth ( );
	struct FImpactInfo CalcWeaponFire_Native ( float PenetrationDistance, struct FVector Extent, struct FVector* StartTrace, struct FVector* EndTrace, TArray< struct FImpactInfo >* ImpactList );
	bool eventHasLoopingFire ( );
	void eventDummyFire ( unsigned char FireModeNum, struct FVector TargetLoc, class AActor* AttachedTo, float AimErrorDeg, class AActor* TargetActor );
	void eventWeaponStoppedFiring ( unsigned char FiringMode );
	bool eventCalculateCoverLeanOutOffset ( unsigned char Direction, unsigned char Type, struct FVector* Offset );
	void FireAmmunition ( );
	bool CanPartialLean ( );
	bool IsZoomed ( );
};

UClass* ASFXWeapon_NativeBase::pClassPointer = NULL;

// Class SFXGame.SFXWeaponMod_NativeBase
// 0x0004 (0x0040 - 0x003C)
class USFXWeaponMod_NativeBase : public UObject
{
public:
	class UPrimitiveComponent*                         PickupFactoryMesh;                                		// 0x003C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1718 ];

		return pClassPointer;
	};

};

UClass* USFXWeaponMod_NativeBase::pClassPointer = NULL;

// Class SFXGame.BioGestChainNode
// 0x0008 (0x0044 - 0x003C)
class UBioGestChainNode : public UObject
{
public:
	class UBioEvtSysTrackGesture*                      m_pGestTrack;                                     		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                m_nIndex;                                         		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1719 ];

		return pClassPointer;
	};

};

UClass* UBioGestChainNode::pClassPointer = NULL;

// Class SFXGame.BioGestChainTree
// 0x000C (0x0050 - 0x0044)
class UBioGestChainTree : public UBioGestChainNode
{
public:
	TArray< class UBioGestChainNode* >                 m_aChildren;                                      		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1720 ];

		return pClassPointer;
	};

};

UClass* UBioGestChainTree::pClassPointer = NULL;

// Class SFXGame.BioGestureAnimSetMgr
// 0x0054 (0x0090 - 0x003C)
class UBioGestureAnimSetMgr : public UObject
{
public:
	struct FMap_Mirror                                 m_mapAnimSetReference;                            		// 0x003C (0x003C) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FBioGestDataKey >                   m_aNewGestureData;                                		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fGestureBlendTime;                              		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nGestureState;                                  		// 0x0088 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bTransitioning : 1;                             		// 0x008C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bGesturePlaying : 1;                            		// 0x008C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1721 ];

		return pClassPointer;
	};

	void SetPoseRMRotation ( unsigned long bEnabled );
};

UClass* UBioGestureAnimSetMgr::pClassPointer = NULL;

// Class SFXGame.BioGestureRulesData
// 0x0240 (0x027C - 0x003C)
class UBioGestureRulesData : public UObject
{
public:
	struct FMultiMap_Mirror                            m_mapARPUCurves;                                  		// 0x003C (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_mapPoses;                                       		// 0x0078 (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMultiMap_Mirror                            m_mapTransitions;                                 		// 0x00B4 (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMultiMap_Mirror                            m_mapGestures;                                    		// 0x00F0 (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_mapPerformances;                                		// 0x012C (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMultiMap_Mirror                            m_mapPerfPoses;                                   		// 0x0168 (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMultiMap_Mirror                            m_mapPerfGestures;                                		// 0x01A4 (0x003C) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FBioARPUBodyConfig >                m_aARPUItems;                                     		// 0x01E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBioGestPose >                      m_aPosesTemp;                                     		// 0x01EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBioGestTransition >                m_aTransTemp;                                     		// 0x01F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBioGestGesture >                   m_aGestTemp;                                      		// 0x0204 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             m_aGestureGroups;                                 		// 0x0210 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             m_aPoseGroups;                                    		// 0x021C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             m_aPerfGroups;                                    		// 0x0228 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBioAmbientPerformance >            m_aPerfTemp;                                      		// 0x0234 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBioAmbPerfPose >                   m_aPerfPoseTemp;                                  		// 0x0240 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBioAmbPerfGesture >                m_aPerfGestTemp;                                  		// 0x024C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             m_aDeletedPerfs;                                  		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       m_nmDefaultGestGroup;                             		// 0x0264 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmDefaultPoseGroup;                             		// 0x026C (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmDefaultPerfGroup;                             		// 0x0274 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1722 ];

		return pClassPointer;
	};

};

UClass* UBioGestureRulesData::pClassPointer = NULL;

// Class SFXGame.BioGestureRuntimeData
// 0x00B0 (0x00EC - 0x003C)
class UBioGestureRuntimeData : public UObject
{
public:
	struct FMap_Mirror                                 m_mapAnimSetOwners;                               		// 0x003C (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_mapMeshProps;                                   		// 0x0078 (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FBioWeaponPropData                          m_tWeaponPropData;                                		// 0x00B4 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sGlobalDefaultPose;                             		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       m_nmDefaultPoseAnim;                              		// 0x00E0 (0x0008) [0x0000000000000000]              
	class UAnimSet*                                    m_pDefaultPoseSet;                                		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1723 ];

		return pClassPointer;
	};

};

UClass* UBioGestureRuntimeData::pClassPointer = NULL;

// Class SFXGame.SFXAmbPerfGameData
// 0x0048 (0x0084 - 0x003C)
class USFXAmbPerfGameData : public UObject
{
public:
	TArray< struct FSFXAFGDPropActionData >            m_aPropActions;                                   		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXAPGDPose >                      m_aPoses;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          m_aAnimsets;                                      		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sWepPropClass;                                  		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       m_nmPropName;                                     		// 0x006C (0x0008) [0x0000000000000000]              
	int                                                m_nStartPoseIndex;                                		// 0x0074 (0x0004) [0x0000000000000000]              
	class UObject*                                     m_pPropResource;                                  		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                m_nPropActionIndex;                               		// 0x007C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bEnterEvent : 1;                                		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bExitEvent : 1;                                 		// 0x0080 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bUseDynamicAnimsets : 1;                        		// 0x0080 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bSuppressDamage : 1;                            		// 0x0080 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1724 ];

		return pClassPointer;
	};

};

UClass* USFXAmbPerfGameData::pClassPointer = NULL;

// Class SFXGame.SFXGestures
// 0x0010 (0x004C - 0x003C)
class USFXGestures : public UObject
{
public:
	struct FString                                     GesturesPackageName;                              		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UBioGestureRuntimeData*                      m_pRuntimeData;                                   		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1725 ];

		return pClassPointer;
	};

	void LoadRuntimeData ( );
};

UClass* USFXGestures::pClassPointer = NULL;

// Class SFXGame.BioHUD
// 0x00B8 (0x0544 - 0x048C)
class ABioHUD : public AHUD
{
public:
	TArray< struct FScriptDelegate >                   DebugDrawList;                                    		// 0x048C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FTraceStripChannel >                TraceStrips;                                      		// 0x0498 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FDesignerText >                     DesignerHudText;                                  		// 0x04A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDesignerBar >                      DesignerHudBars;                                  		// 0x04B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DebugDraw__Delegate;                            		// 0x04BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FLinearColor                                TraceStripTickColor;                              		// 0x04C8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oActorForInfoDisplay;                           		// 0x04D8 (0x0004) [0x0000000000000000]              
	float                                              TraceStripTickInterval;                           		// 0x04DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TraceStripTimeSeconds;                            		// 0x04E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TraceStripDrawHeight;                             		// 0x04E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_ShowCoverLastTime;                              		// 0x04E8 (0x0004) [0x0000000000000000]              
	class UMaterial*                                   oGUIMaterial;                                     		// 0x04EC (0x0004) [0x0000000000000000]              
	float                                              SafeAreaRatioX;                                   		// 0x04F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SafeAreaRatioY;                                   		// 0x04F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fSafeXOffset;                                   		// 0x04F8 (0x0004) [0x0000000000000000]              
	float                                              m_fSafeYOffset;                                   		// 0x04FC (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  SafeAreaTexture;                                  		// 0x0500 (0x0004) [0x0000000000000000]              
	int                                                m_textX;                                          		// 0x0504 (0x0004) [0x0000000000000000]              
	int                                                m_textY;                                          		// 0x0508 (0x0004) [0x0000000000000000]              
	int                                                m_lineHeight;                                     		// 0x050C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_charWidth;                                      		// 0x0510 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_leftColumnX;                                    		// 0x0514 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_rightColumnX;                                   		// 0x0518 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_farrightColumnX;                                		// 0x051C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_topRowY;                                        		// 0x0520 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastSaveStartTime;                                		// 0x0524 (0x0004) [0x0000000000000000]              
	float                                              LastSaveEndTime;                                  		// 0x0528 (0x0004) [0x0000000000000000]              
	struct FColor                                      YellowColor;                                      		// 0x052C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      OrangeColor;                                      		// 0x0530 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      DarkGreyColor;                                    		// 0x0534 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FadeTime;                                         		// 0x0538 (0x0004) [0x0000000000000000]              
	float                                              MinFadeDuration;                                  		// 0x053C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bLockActorInfo : 1;                             		// 0x0540 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      TraceStripsPaused : 1;                            		// 0x0540 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bShowCoverRotation : 1;                         		// 0x0540 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bShowClaimedCoverOnly : 1;                      		// 0x0540 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDisplaySafeArea : 1;                             		// 0x0540 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDisplayingSave : 1;                              		// 0x0540 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bUseGeneratedItemNames : 1;                     		// 0x0540 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bDesignerHud : 1;                                 		// 0x0540 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1726 ];

		return pClassPointer;
	};

	void RemoveTraceAtIndex ( int nTrace );
	void ClearTraceStrips ( );
	void AddAnimNodeTraceStrip ( class AActor* TargetActor, struct FName nmAnimnode, struct FLinearColor DrawColor );
	void AddPropertyTraceStrip ( class AActor* TargetActor, struct FName nmProperty, struct FLinearColor DrawColor );
	void AddAxisTraceStrip ( struct FName nmAxis, struct FLinearColor DrawColor );
	void AddButtonTraceStrip ( struct FName nmButton, struct FLinearColor DrawColor );
	void DebugDraw_TraceStrips ( class ABioHUD* HUD );
	void DrawTraceStripBacking ( struct FVector2D Origin, struct FVector2D Extent, float fTimeScale, float fMostRecentTime, struct FLinearColor LineColor );
	void DrawTraceStrip ( struct FTraceStripChannel Chan, struct FVector2D Origin, struct FVector2D Extent, float fTimeScale );
	void UpdateTraceStrips ( float fBufferTime );
	void HideTraceStrips ( );
	void StartTraceStrips ( );
	bool IsFinalReleaseBuild ( );
	void AddBar ( struct FName Id, float X, float Y, float Width, float Lifetime, int C, unsigned long Grows, unsigned long Shrinks );
	void RemoveBar ( struct FName Id );
	void AddDesignerText ( struct FName Id, struct FString S, float X, float Y, float TimeOut, float Scale, unsigned long Center );
	bool HasDesignerText ( struct FName Id, struct FString S );
	void RemoveDesignerText ( struct FName Id );
	void DrawDesignerHud ( );
	void DUI_SetTimerDetails ( unsigned long bModalTimer, unsigned long bVisible, float fStartTime, float fEndTime, float fInterval );
	void DUI_SetQuasarLayout ( unsigned long bShow );
	void DUI_SetBarFillDirection ( unsigned long bModalBar, unsigned long bLeftToRight );
	void DUI_SetBarFillPercent ( unsigned long bModalBar, int nPercent );
	void DUI_SetBarMarkerPoints ( unsigned long bModalBar, int nMarker1, int nMarker2 );
	void DUI_SetCounterValue ( unsigned long bModalCounter, int nValue );
	void DUI_SetElementText ( unsigned char nElement, struct FString sText );
	void DUI_SetTextStringRef ( unsigned char nElement, void* srText );
	void DUI_ClearElementPulse ( unsigned char nElement );
	void DUI_SetupElementPulse ( unsigned char nElement, float fMinAlpha, float fCycleTime );
	void DUI_SetElementAlpha ( unsigned char nElement, float fAlpha );
	void DUI_SetElementColor ( unsigned char nElement, struct FColor stColor );
	void DUI_SetElementVisible ( unsigned char nElement, unsigned long bVisible, float fFadeTime );
	void DUI_ClearAll ( unsigned long bModal );
	void ShowReachSpecs ( struct FName nmNavigationPoint );
	void DisplayRouteInfo ( class APawn* pPawn, struct FColor PathColor, unsigned long bDrawPathOnly );
	void DebugDraw_CoverNames ( class ABioHUD* HUD );
	void ToggleCoverNames ( unsigned long ClaimedCoverOnly );
	void UpdateCover ( unsigned long bShowRotation );
	void DebugDraw_UpdateCover ( class ABioHUD* HUD );
	void ShowCover ( unsigned long bShowRotation );
	void DebugDraw_ActorInfo ( class ABioHUD* HUD );
	void DebugDraw_PlayerLocation ( class ABioHUD* HUD );
	void HideLocation ( );
	void ShowLocation ( );
	void SetActorForActorInfo ( struct FName nmActor );
	void LockActorInfo ( );
	void DisplayActorInfo ( );
	void eventDrawTextWithColor ( struct FString valueName, struct FString Value, struct FColor LabelColor, struct FColor DataColor );
	void eventDrawText ( struct FString valueName, struct FString Value, struct FColor LabelColor, struct FColor DataColor );
	void DrawCircle ( float fX, float fY, float Radius );
	void CDrawSquare ( int nSize );
	struct FString LoadTestTextStringFromFile ( );
	void DrawFakeShadowText ( int X, int Y, struct FColor DrawColor, struct FString sText );
	void DrawEngineHUD ( );
	bool IsDrawing ( struct FScriptDelegate DebugDrawFunc );
	void ClearDebugDraw ( struct FScriptDelegate DebugDrawFunc );
	void AddDebugDraw ( struct FScriptDelegate DebugDrawFunc );
	void ToggleDebugDraw ( struct FScriptDelegate DebugDrawFunc );
	void DebugDraw ( class ABioHUD* H );
	void DrawHUD ( );
	void PostRender ( );
	void ToggleSafeArea ( );
	void DisplaySafeArea ( );
	void eventProfileConversationExtra ( class UBioConversationController* oCurConv );
	void ProfileAnimPreload ( class AActor* TargetActor );
	void ProfileKinect ( class AActor* TargetActor );
	void ProfileWwise ( class AActor* TargetActor );
	void ProfileLookAt ( class AActor* TargetActor );
	void ProfileCover ( class AActor* TargetActor );
	void ProfileAnim ( class AActor* TargetActor );
	void ProfileGestures ( class AActor* TargetActor );
	void ProfileConversation ( class AActor* TargetActor );
	void ProfileConversationBug ( class AActor* TargetActor );
	void ViewportDeProject ( class ULocalPlayer* LocalPlayerOwner, struct FVector ScreenLocation, struct FVector* OutLocation, struct FVector* OutDirection );
};

UClass* ABioHUD::pClassPointer = NULL;

// Class SFXGame.BioSubtitles
// 0x0015 (0x0051 - 0x003C)
class UBioSubtitles : public UObject
{
public:
	TArray< struct FSFXSubtitleEntry >                 m_aSubtitles;                                     		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_nCurrentSubtitle;                               		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bSubtitleVisible : 1;                           		// 0x004C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      m_DefaultRenderMode;                              		// 0x0050 (0x0001) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1727 ];

		return pClassPointer;
	};

	void Enforce16x9 ( unsigned long bEnforce );
	void ClearSubtitleText ( class UObject* pRefObject );
	void RemoveSubtitle ( class UObject* pRefObject );
	void ClearAllSubtitles ( );
	bool HasSubtitle ( );
	void AddSubtitle ( struct FString sSubtitle, class UObject* pRefObject, class AActor* pActor, struct FColor colFontColor, unsigned long bAlert, unsigned char eRenderMode, unsigned long bHasPriority, float fDuration, float fDelayStarting );
};

UClass* UBioSubtitles::pClassPointer = NULL;

// Class SFXGame.BioUIWorld
// 0x01B8 (0x01F4 - 0x003C)
class UBioUIWorld : public UObject
{
public:
	struct FPostProcessSettings                        m_CurrentPostProcessSettings;                     		// 0x003C (0x00D0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPointer >                          m_aCommandQueue;                                  		// 0x010C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class AActor* >                            m_aoInitialActors;                                		// 0x0118 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FString                                     m_sMapFile;                                       		// 0x0124 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< class ABioPawn* >                          m_SpawnedPawnOriginalReferences;                  		// 0x0130 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UIWorld_DeferredOperator__Delegate;             		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    m_pWorld;                                         		// 0x0148 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    m_pCriticalSection;                               		// 0x014C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0150 (0x003C) UNKNOWN PROPERTY: MapProperty SFXGame.BioUIWorld.m_mSpawnedActorMap
	struct FBioConvLightingData                        m_CustomLightingData;                             		// 0x018C (0x0044) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FName                                       m_fnCameraActorName;                              		// 0x01D0 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class ACameraActor*                                m_pCameraActor;                                   		// 0x01D8 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class URvrClientEffectInterface*                   m_CE_FullBiotic;                                  		// 0x01DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class URvrClientEffectInterface*                   m_CE_HalfBiotic;                                  		// 0x01E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class URvrClientEffectInterface*                   m_CE_OmniTool;                                    		// 0x01E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioSFHandler_NewCharacter*                  m_oNCHandler;                                     		// 0x01E8 (0x0004) [0x0000000000000000]              
	class UPostProcessChain*                           m_PostProcessChain;                               		// 0x01EC (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bEnabled : 1;                                   		// 0x01F0 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      m_bLoaded : 1;                                    		// 0x01F0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1728 ];

		return pClassPointer;
	};

	void CleanupUIWorld ( );
	void SpawnPawnImpl ( class ABioPawn* InOriginalPawn, struct FName InSpawnLocation, struct FName InSpawnVariable, class UAnimSet* InAnimSet, struct FName InRemoteEvent, int InSpawnFlags );
	void CleanupPawn ( class ABioPawn* InOriginalPawn );
	void eventSpawnPawn ( class ABioPawn* InOriginalPawn, struct FName InSpawnLocation, struct FName InSpawnVariable, class UAnimSet* InAnimSet, struct FName InRemoteEvent, int InSpawnFlags );
	void SpawnActor ( class ABioPawn* InSourcePawn, class AActor* InActorArchetype, struct FName InSpawnLocation, struct FName InSpawnVariable, class UAnimSet* InAnimSet, struct FName InRemoteEvent, int InSpawnFlags );
	void eventUpdateSpawnedHeadGear ( class AActor* InActor, unsigned long bVisible );
	void UpdateHeadGearVisibility ( class ASFXPawn_PlayerParty* inPawn );
	void ExUpdateHeadGearVisibility ( class ABioPawn* pOriginalPawn, unsigned long bVisible );
	void eventClearScarFromPawn ( class ABioPawn* PawnToClear );
	bool LoadWorld ( );
	bool UnloadWorld ( );
	void eventFireDeferredOperation ( struct FScriptDelegate InDelegate, class UObject* InData );
	void AddDeferredOperation ( struct FScriptDelegate InDelegate, class UObject* InData );
	void RotatePawn ( class ABioPawn* a_pOriginalPawn, struct FRotator a_newRot );
	class AActor* GetSpawnedActor ( class ABioPawn* a_pOriginalPawn );
	void FlushPendingCommands ( );
	void HidePawn ( class ABioPawn* a_pOriginalPawn, unsigned long bHidden );
	void SetAnimSet ( class ABioPawn* SourcePawn, class UAnimSet* AnimSet );
	void AttachOmnitool ( class ABioPawn* a_pSourcePawn, unsigned long a_fnClassName );
	void PrimeTextures ( class ABioPawn* a_pSourcePawn );
	void AttachBioticsAndTech ( class ABioPawn* a_pSourcePawn, struct FName a_fnClassName );
	void MovePawn ( class ABioPawn* a_pOriginalPawn, struct FName a_fnNewLocation );
	void SwapPawn ( class ABioPawn* a_pSourcePawn, struct FName a_fnSourceVarName, class ABioPawn* a_pOtherPawn, struct FName a_fnOtherVarName );
	void ResetActors ( );
	void SetBoolVariable ( struct FName a_fnVariableName, unsigned long a_bValue );
	void SetNameVariable ( struct FName a_fnVariableName, struct FName a_nmValue );
	void SetObjectVariable ( struct FName a_fnVariableName, class UObject* a_pValue );
	void UpdateAppearance ( class ABioPawn* a_pOriginalPawn, class UAnimSet* a_AnimSet, int a_Flags );
	void DestroyPawn ( class ABioPawn* a_pOriginalPawn );
	void TriggerEvent ( struct FName a_fnEventName, class AActor* a_pCaller );
	void UIWorld_DeferredOperator ( class UObject* InData );
};

UClass* UBioUIWorld::pClassPointer = NULL;

// Class SFXGame.SFXConsole
// 0x0004 (0x01D4 - 0x01D0)
class USFXConsole : public UConsole
{
public:
	unsigned long                                      bShift : 1;                                       		// 0x01D0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1729 ];

		return pClassPointer;
	};

	int FindBreak ( struct FString CurrentString, int CurrentStringPos, unsigned long bForward );
	bool FindNextMatchingHistory ( struct FString CurrentString, int CurrentStringPos, int* outNextHistory );
	bool CommonInputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void FindNextMatchingAutoComplete ( int CurrentStringPos, struct FString* CurrentString );
	class UObject* FindObjectUnqualified ( struct FString ObjectName, class UClass* ObjectClass );
	struct FString FindNextPropertyMatching ( class UClass* C, struct FString PropertyPrefix, struct FString AfterThisProperty );
	void SaveHistoryToFile ( );
	void SaveHistory ( );
	void LoadHistory ( );
	bool InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	struct FString PreParseCommand ( struct FString Command );
	class AActor* GetCameraActor ( );
	void Initialized ( );
};

UClass* USFXConsole::pClassPointer = NULL;

// Class SFXGame.BioInGamePropertyEditor
// 0x008C (0x00C8 - 0x003C)
class UBioInGamePropertyEditor : public UObject
{
public:
	struct FString                                     m_sFooterText;                                    		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sFileName;                                      		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sEditableRootName;                              		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sCameraRootName;                                		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sAnimNodeName;                                  		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sNewLoadSaveNodeName;                           		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sStateNodeName;                                 		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sActionMappingName;                             		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioPropertyEditorBaseNode*                  m_oPropertyEditorNodes;                           		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              m_fHUDRelativePropertyEditorOriginX;              		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              m_fHUDRelativePropertyEditorOriginY;              		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorSizeX;                           		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorSizeY;                           		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorRelativeColumnOneX;              		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorRelativeColumnTwoX;              		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorRelativeColumnThreeX;            		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorRelativeColumnY;                 		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              m_fColumnHeight;                                  		// 0x00C0 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsActive : 1;                                  		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDebugBones : 1;                                		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bSortByType : 1;                                		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bSortByName : 1;                                		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1730 ];

		return pClassPointer;
	};

	struct FString filterString ( struct FString Input );
	void DrawToHUD ( class ABioHUD* oHud );
	void CreateCommand ( class UBioPropertyEditorBaseNode* Parent, struct FString CmdName, struct FString Command );
	void CreateObjectNode ( class UBioPropertyEditorBaseNode* Parent, class UObject* o, struct FString ObjName );
	void eventCreateGameplayNodes ( class UBioPropertyEditorBaseNode* Parent );
	void DrawBones ( class ABioHUD* oHud );
	bool PerformRightShoulderAction ( );
	bool PerformLeftShoulderAction ( );
	bool PerformRightTriggerAction ( );
	bool PerformLeftTriggerAction ( );
	bool ActivateMainMenu ( );
	bool PerformLeftAction ( );
	bool PerformRightAction ( );
	bool PerformDownAction ( );
	bool PerformUpAction ( );
	bool PerformDeactivateAction ( );
	bool PerformActivateAction ( );
	bool CreateNodeTestData ( );
	bool WriteTreeDataToHUD ( class ABioHUD* oHud );
	bool UpdateSystem ( float fDeltaTime );
	bool DeactivateSystem ( );
	bool ActivateSystem ( );
	bool Initialize ( );
};

UClass* UBioInGamePropertyEditor::pClassPointer = NULL;

// Class SFXGame.BioPropertyEditorBaseNode
// 0x004C (0x0088 - 0x003C)
class UBioPropertyEditorBaseNode : public UObject
{
public:
	struct FString                                     m_sNodeDisplayName;                               		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UBioPropertyEditorBaseNode* >        m_aChildren;                                      		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UBioPropertyEditorBaseNode* >        m_aTraversedStack;                                		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sParentGenName;                                 		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nCurrentlySelectedChild;                        		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                m_nScrollBoxFirstIndex;                           		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                m_nScrollBoxSize;                                 		// 0x0074 (0x0004) [0x0000000000000000]              
	class UBioInGamePropertyEditor*                    m_oTop;                                           		// 0x0078 (0x0004) [0x0000000000000000]              
	class UBioPropertyEditorBaseNode*                  m_oParent;                                        		// 0x007C (0x0004) [0x0000000000000000]              
	struct FColor                                      m_colour;                                         		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                m_nGeneration;                                    		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1731 ];

		return pClassPointer;
	};

	struct FString getDisplayText ( unsigned long selectable );
	class UBioPropertyEditorBaseNode* GetSelectablesParent ( );
	struct FColor getColour ( );
};

UClass* UBioPropertyEditorBaseNode::pClassPointer = NULL;

// Class SFXGame.BioPropertyEditorBoneNode
// 0x000C (0x0094 - 0x0088)
class UBioPropertyEditorBoneNode : public UBioPropertyEditorBaseNode
{
public:
	class USkeletalMesh*                               m_oSkeletalMesh;                                  		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                m_iLodIndex;                                      		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                m_iBoneIndex;                                     		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1732 ];

		return pClassPointer;
	};

};

UClass* UBioPropertyEditorBoneNode::pClassPointer = NULL;

// Class SFXGame.BioPropertyEditorLevelNode
// 0x000C (0x0094 - 0x0088)
class UBioPropertyEditorLevelNode : public UBioPropertyEditorBaseNode
{
public:
	struct FString                                     m_sCommand;                                       		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1733 ];

		return pClassPointer;
	};

};

UClass* UBioPropertyEditorLevelNode::pClassPointer = NULL;

// Class SFXGame.BioPropertyEditorLoadNode
// 0x000C (0x0094 - 0x0088)
class UBioPropertyEditorLoadNode : public UBioPropertyEditorBaseNode
{
public:
	struct FString                                     Filename;                                         		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1734 ];

		return pClassPointer;
	};

};

UClass* UBioPropertyEditorLoadNode::pClassPointer = NULL;

// Class SFXGame.BioPropertyEditorPropertyNode
// 0x001C (0x00A4 - 0x0088)
class UBioPropertyEditorPropertyNode : public UBioPropertyEditorBaseNode
{
public:
	struct FString                                     m_sValueString;                                   		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sDeliminator;                                   		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    Base;                                             		// 0x00A0 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1735 ];

		return pClassPointer;
	};

	struct FString getDisplayText ( unsigned long selectable );
	bool MakeNodes ( struct FString thisOneOnly );
	void SetObject ( class UObject* Obj );
};

UClass* UBioPropertyEditorPropertyNode::pClassPointer = NULL;

// Class SFXGame.BioPropertyEditorArrayNode
// 0x0004 (0x00A8 - 0x00A4)
class UBioPropertyEditorArrayNode : public UBioPropertyEditorPropertyNode
{
public:
	class UProperty*                                   m_Property;                                       		// 0x00A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1736 ];

		return pClassPointer;
	};

};

UClass* UBioPropertyEditorArrayNode::pClassPointer = NULL;

// Class SFXGame.BioPropertyEditorEditableNode
// 0x0019 (0x00BD - 0x00A4)
class UBioPropertyEditorEditableNode : public UBioPropertyEditorPropertyNode
{
public:
	class UProperty*                                   prop;                                             		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                integerVal;                                       		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              floatVal;                                         		// 0x00AC (0x0004) [0x0000000000000000]              
	class UProperty*                                   m_arrayProperty;                                  		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              StepSize;                                         		// 0x00B4 (0x0004) [0x0000000000000000]              
	unsigned long                                      boolVal : 1;                                      		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      alreadyEdited : 1;                                		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      byteVal;                                          		// 0x00BC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1737 ];

		return pClassPointer;
	};

};

UClass* UBioPropertyEditorEditableNode::pClassPointer = NULL;

// Class SFXGame.BioPropertyEditorEditNode
// 0x0010 (0x00B4 - 0x00A4)
class UBioPropertyEditorEditNode : public UBioPropertyEditorPropertyNode
{
public:
	class UProperty*                                   prop;                                             		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              StepSize;                                         		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              floatVal;                                         		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                otherVal;                                         		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1738 ];

		return pClassPointer;
	};

	struct FString getDisplayText ( unsigned long selectable );
};

UClass* UBioPropertyEditorEditNode::pClassPointer = NULL;

// Class SFXGame.BioPropertyEditorReadOnlyNode
// 0x000C (0x00B0 - 0x00A4)
class UBioPropertyEditorReadOnlyNode : public UBioPropertyEditorPropertyNode
{
public:
	struct FString                                     sDisplay;                                         		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1739 ];

		return pClassPointer;
	};

};

UClass* UBioPropertyEditorReadOnlyNode::pClassPointer = NULL;

// Class SFXGame.BioPropertyEditorSaveNode
// 0x000C (0x0094 - 0x0088)
class UBioPropertyEditorSaveNode : public UBioPropertyEditorBaseNode
{
public:
	struct FString                                     Filename;                                         		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1740 ];

		return pClassPointer;
	};

};

UClass* UBioPropertyEditorSaveNode::pClassPointer = NULL;

// Class SFXGame.BioPropertyEditorVolatileNode
// 0x0000 (0x0088 - 0x0088)
class UBioPropertyEditorVolatileNode : public UBioPropertyEditorBaseNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1741 ];

		return pClassPointer;
	};

	struct FString getDisplayText ( unsigned long selectable );
	class UBioPropertyEditorBaseNode* GetSelectablesParent ( );
	struct FColor getColour ( );
};

UClass* UBioPropertyEditorVolatileNode::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackGestureAudHelper
// 0x0048 (0x0084 - 0x003C)
class UBioEvtSysTrackGestureAudHelper : public UObject
{
public:
	struct FName                                       m_nmValidPoseEnum;                                		// 0x003C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmValidGestureEnum;                             		// 0x0044 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmValidGestureFilter;                           		// 0x004C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmGestureGroupsEnum;                            		// 0x0054 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmValidPoseFilter;                              		// 0x005C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmPoseGroupsEnum;                               		// 0x0064 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmAllPosesFilter;                               		// 0x006C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UMaterial*                                   m_pRightArrow;                                    		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nOldGestureFilter;                              		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nOldPoseFilter;                                 		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bReloadPreviewAnimsets : 1;                     		// 0x0080 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bAllowMovingChainKeys : 1;                      		// 0x0080 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bAllPoseGroupsLoaded : 1;                       		// 0x0080 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1742 ];

		return pClassPointer;
	};

};

UClass* UBioEvtSysTrackGestureAudHelper::pClassPointer = NULL;

// Class SFXGame.BioInterpTrackInstMove
// 0x0000 (0x00A9 - 0x00A9)
class UBioInterpTrackInstMove : public UInterpTrackInstMove
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1743 ];

		return pClassPointer;
	};

};

UClass* UBioInterpTrackInstMove::pClassPointer = NULL;

// Class SFXGame.BioInterpTrackMove
// 0x000A (0x00A8 - 0x009E)
class UBioInterpTrackMove : public UInterpTrackMove
{
public:
	struct FName                                       FacingController;                                 		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1744 ];

		return pClassPointer;
	};

};

UClass* UBioInterpTrackMove::pClassPointer = NULL;

// Class SFXGame.BioScalarParameterInstTrack
// 0x0004 (0x0040 - 0x003C)
class UBioScalarParameterInstTrack : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                       		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1745 ];

		return pClassPointer;
	};

};

UClass* UBioScalarParameterInstTrack::pClassPointer = NULL;

// Class SFXGame.BioScalarParameterTrack
// 0x0010 (0x0080 - 0x0070)
class UBioScalarParameterTrack : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpValue;                                      		// 0x0078 (0x0004) [0x0000000000000000]              
	class UObject*                                     m_pParentEffect;                                  		// 0x007C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1746 ];

		return pClassPointer;
	};

};

UClass* UBioScalarParameterTrack::pClassPointer = NULL;

// Class SFXGame.SFXGameInterpTrack
// 0x0000 (0x0070 - 0x0070)
class USFXGameInterpTrack : public UBioInterpTrack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1747 ];

		return pClassPointer;
	};

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXGameInterpTrack::pClassPointer = NULL;

// Class SFXGame.BioConvNodeTrackDebug
// 0x000C (0x007C - 0x0070)
class UBioConvNodeTrackDebug : public USFXGameInterpTrack
{
public:
	TArray< struct FString >                           m_aDbgStrings;                                    		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1748 ];

		return pClassPointer;
	};

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* UBioConvNodeTrackDebug::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackDOF
// 0x001C (0x008C - 0x0070)
class UBioEvtSysTrackDOF : public USFXGameInterpTrack
{
public:
	TArray< struct FBioDOFTrackData >                  m_aDOFData;                                       		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fDOFDefaultBlurKernel;                          		// 0x007C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fDOFDefaultExponent;                            		// 0x0080 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fDOFDefaultMaxNearBlur;                         		// 0x0084 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fDOFDefaultMaxFarBlur;                          		// 0x0088 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1749 ];

		return pClassPointer;
	};

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* UBioEvtSysTrackDOF::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackInterrupt
// 0x000C (0x007C - 0x0070)
class UBioEvtSysTrackInterrupt : public USFXGameInterpTrack
{
public:
	TArray< struct FBioInterruptTrackData >            m_aInterruptData;                                 		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1750 ];

		return pClassPointer;
	};

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* UBioEvtSysTrackInterrupt::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackSubtitles
// 0x000C (0x007C - 0x0070)
class UBioEvtSysTrackSubtitles : public USFXGameInterpTrack
{
public:
	TArray< struct FBioSubtitleTrackData >             m_aSubtitleData;                                  		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1751 ];

		return pClassPointer;
	};

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* UBioEvtSysTrackSubtitles::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackSwitchCamera
// 0x000C (0x007C - 0x0070)
class UBioEvtSysTrackSwitchCamera : public USFXGameInterpTrack
{
public:
	TArray< struct FBioCameraSwitchData >              m_aCameras;                                       		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1752 ];

		return pClassPointer;
	};

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* UBioEvtSysTrackSwitchCamera::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackVOElements
// 0x0008 (0x0078 - 0x0070)
class UBioEvtSysTrackVOElements : public USFXGameInterpTrack
{
public:
	int                                                m_nStrRefID;                                      		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fJCutOffset;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1753 ];

		return pClassPointer;
	};

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* UBioEvtSysTrackVOElements::pClassPointer = NULL;

// Class SFXGame.BioInterpTrackRotationMode
// 0x000C (0x007C - 0x0070)
class UBioInterpTrackRotationMode : public USFXGameInterpTrack
{
public:
	TArray< struct FRotationModeTrackKey >             EventTrack;                                       		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1754 ];

		return pClassPointer;
	};

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
};

UClass* UBioInterpTrackRotationMode::pClassPointer = NULL;

// Class SFXGame.SFXGameActorInterpTrack
// 0x0009 (0x0079 - 0x0070)
class USFXGameActorInterpTrack : public USFXGameInterpTrack
{
public:
	struct FName                                       m_nmFindActor;                                    		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eFindActorMode;                                 		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1755 ];

		return pClassPointer;
	};

};

UClass* USFXGameActorInterpTrack::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackGesture
// 0x0029 (0x00A2 - 0x0079)
class UBioEvtSysTrackGesture : public USFXGameActorInterpTrack
{
public:
	TArray< struct FBioGestureData >                   m_aGestures;                                      		// 0x007C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       nmStartingPoseSet;                                		// 0x0088 (0x0008) [0x0000000000000000]              
	struct FName                                       nmStartingPoseAnim;                               		// 0x0090 (0x0008) [0x0000000000000000]              
	float                                              m_fStartPoseOffset;                               		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bARPUGenerated : 1;                             		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bAutoGenFemaleTrack : 1;                        		// 0x009C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bUseDynamicAnimsets : 1;                        		// 0x009C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      ePoseFilter;                                      		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eStartingPose;                                    		// 0x00A1 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1756 ];

		return pClassPointer;
	};

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* UBioEvtSysTrackGesture::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackLighting
// 0x000F (0x0088 - 0x0079)
class UBioEvtSysTrackLighting : public USFXGameActorInterpTrack
{
public:
	TArray< struct FBioConvLightingData >              m_aLightingKeys;                                  		// 0x007C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1757 ];

		return pClassPointer;
	};

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* UBioEvtSysTrackLighting::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackLookAt
// 0x000F (0x0088 - 0x0079)
class UBioEvtSysTrackLookAt : public USFXGameActorInterpTrack
{
public:
	TArray< struct FBioLookAtTrackData >               m_aLookAtKeys;                                    		// 0x007C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1758 ];

		return pClassPointer;
	};

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* UBioEvtSysTrackLookAt::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackProp
// 0x000F (0x0088 - 0x0079)
class UBioEvtSysTrackProp : public USFXGameActorInterpTrack
{
public:
	TArray< struct FBioPropTrackData >                 m_aPropKeys;                                      		// 0x007C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1759 ];

		return pClassPointer;
	};

	float PropWepActionTimingDummyFireInfiniteOff ( class UObject* pWeaponIn );
	void PropWepActionExecuteDummyFireInfiniteOff ( class UObject* pWeaponIn, class AActor* pActor );
	float PropWepActionTimingDummyFireInfiniteOn ( class UObject* pWeaponIn );
	void PropWepActionExecuteDummyFireInfiniteOn ( class UObject* pWeaponIn, class AActor* pActor );
	float PropWepActionTimingDummyFireThrice ( class UObject* pWeaponIn );
	void PropWepActionExecuteDummyFireThrice ( class UObject* pWeaponIn, class AActor* pActor );
	float PropWepActionTimingDummyFireOnce ( class UObject* pWeaponIn );
	void PropWepActionExecuteDummyFireOnce ( class UObject* pWeaponIn, class AActor* pActor );
	float PropWepActionTimingDisableIK ( class UObject* pWeaponIn );
	void PropWepActionExecuteDisableIK ( class UObject* pWeaponIn, class AActor* pActor );
	float PropWepActionTimingEnableIK ( class UObject* pWeaponIn );
	void PropWepActionExecuteEnableIK ( class UObject* pWeaponIn, class AActor* pActor );
	float PropWepActionTimingFireWithTracer ( class UObject* pWeaponIn );
	void PropWepActionExecuteFireWithTracer ( class UObject* pWeaponIn, class AActor* pActor );
	float PropWepActionTimingReload ( class UObject* pWeaponIn );
	void PropWepActionExecuteReload ( class UObject* pWeaponIn, class AActor* pActor );
	float PropWepActionTimingCollapse ( class UObject* pWeaponIn );
	void PropWepActionExecuteCollapse ( class UObject* pWeaponIn, class AActor* pActor );
	float PropWepActionTimingExpand ( class UObject* pWeaponIn );
	void PropWepActionExecuteExpand ( class UObject* pWeaponIn, class AActor* pActor );
	float PropWepActionTimingFire ( class UObject* pWeaponIn );
	void PropWepActionExecuteFire ( class UObject* pWeaponIn, class AActor* pActor );
	float FindPartSysMaxDuration ( class UParticleSystem* pParticleSystem, int* nLooping );
	class USkeletalMesh* eventGetWeaponMesh ( class UClass* cWeaponIn );
	void eventPropUnequipWeapon ( class AActor* pActor, class UObject* pWeaponIn, int nSpawned );
	void eventPropUnequipWeaponForInst ( class UClass* cWeapon, class UBioEvtSysTrackPropInst* pInst, unsigned long bCurrentlyEquipped );
	void eventPropEquipWeapon ( class UClass* cWeapon, class UObject* pDataStoreObject, unsigned long bCurrentlyEquipped, unsigned long bForceSuppressDamage );
	struct FName eventGetRightHandSocketName ( class AActor* pActor );
	class UObject* eventPropGetActorWeapon ( class UClass* cWeapon, class UObject* pDataStoreObject, unsigned long bCurrentlyEquipped, unsigned long bSpawnGeneric );
	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* UBioEvtSysTrackProp::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackSetFacing
// 0x000F (0x0088 - 0x0079)
class UBioEvtSysTrackSetFacing : public USFXGameActorInterpTrack
{
public:
	TArray< struct FBioSetFacingData >                 m_aFacingKeys;                                    		// 0x007C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1760 ];

		return pClassPointer;
	};

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* UBioEvtSysTrackSetFacing::pClassPointer = NULL;

// Class SFXGame.SFXGameInterpTrackProcFoley
// 0x0013 (0x008C - 0x0079)
class USFXGameInterpTrackProcFoley : public USFXGameActorInterpTrack
{
public:
	TArray< struct FBioProcFoleyData >                 m_aProcFoleyStartStopKeys;                        		// 0x007C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UWwiseEventPairObject*                       m_TrackFoleySound;                                		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1761 ];

		return pClassPointer;
	};

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXGameInterpTrackProcFoley::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackPlayFaceOnlyVO
// 0x000F (0x0088 - 0x0079)
class USFXInterpTrackPlayFaceOnlyVO : public USFXGameActorInterpTrack
{
public:
	TArray< struct FBioFOVOTrackData >                 m_aFOVOKeys;                                      		// 0x007C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1762 ];

		return pClassPointer;
	};

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackPlayFaceOnlyVO::pClassPointer = NULL;

// Class SFXGame.SFXGameInterpTrackCustom
// 0x0000 (0x0070 - 0x0070)
class USFXGameInterpTrackCustom : public USFXGameInterpTrack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1763 ];

		return pClassPointer;
	};

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXGameInterpTrackCustom::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackAttachCrustEffect
// 0x001C (0x008C - 0x0070)
class USFXInterpTrackAttachCrustEffect : public USFXGameInterpTrackCustom
{
public:
	TArray< struct FSFXAttachCrustEffectTrackData >    m_aCrustEffectKeyData;                            		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UBioSeqVar_ObjectFindByTag* >        m_aTarget;                                        		// 0x007C (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	class UObject*                                     oEffect;                                          		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1764 ];

		return pClassPointer;
	};

	void eventTriggerKey ( class UBioInterpTrackInst* pTrackInst, unsigned long bAttach, float fLifeTime );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackAttachCrustEffect::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackAttachToActor
// 0x0030 (0x00A0 - 0x0070)
class USFXInterpTrackAttachToActor : public USFXGameInterpTrackCustom
{
public:
	TArray< class UBioSeqVar_ObjectFindByTag* >        m_aTarget;                                        		// 0x0070 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     RelativeOffset;                                   		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDetach : 1;                                      		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHardAttach : 1;                                  		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseRelativeOffset : 1;                           		// 0x009C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseRelativeRotation : 1;                         		// 0x009C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1765 ];

		return pClassPointer;
	};

	void eventTriggerKey ( class UBioInterpTrackInst* pTrackInst );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackAttachToActor::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackAttachVFXToObject
// 0x0024 (0x0094 - 0x0070)
class USFXInterpTrackAttachVFXToObject : public USFXGameInterpTrackCustom
{
public:
	TArray< class UBioSeqVar_ObjectFindByTag* >        m_aAttachToTarget;                                		// 0x0070 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     m_vOffset;                                        		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmSocketOrBone;                                 		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     m_oEffect;                                        		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1766 ];

		return pClassPointer;
	};

	void eventTriggerKey ( class UBioInterpTrackInst* pTrackInst );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackAttachVFXToObject::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackBlackScreen
// 0x0010 (0x0080 - 0x0070)
class USFXInterpTrackBlackScreen : public USFXGameInterpTrackCustom
{
public:
	TArray< struct FSFXBlackScreenTrackData >          m_aBlackScreenKeyData;                            		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBioSeqAct_BlackScreen*                      m_BlackScreenSeq;                                 		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1767 ];

		return pClassPointer;
	};

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackBlackScreen::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackDestroy
// 0x000C (0x007C - 0x0070)
class USFXInterpTrackDestroy : public USFXGameInterpTrackCustom
{
public:
	TArray< class UBioSeqVar_ObjectFindByTag* >        m_aTarget;                                        		// 0x0070 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1768 ];

		return pClassPointer;
	};

	void eventTriggerKey ( class UBioInterpTrackInst* pTrackInst );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackDestroy::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackForceLightEnvUpdate
// 0x0004 (0x0074 - 0x0070)
class USFXInterpTrackForceLightEnvUpdate : public USFXGameInterpTrackCustom
{
public:
	class UBioSeqAct_ForceLightEnvUpdate*              m_SeqForceUpdateLight;                            		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1769 ];

		return pClassPointer;
	};

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackForceLightEnvUpdate::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackLightEnvQuality
// 0x0010 (0x0080 - 0x0070)
class USFXInterpTrackLightEnvQuality : public USFXGameInterpTrackCustom
{
public:
	TArray< struct FSFXLightEnvTrackData >             m_aLightEnvKeyData;                               		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBioSeqAct_SetLightEnvQuality*               m_LightEnvSeq;                                    		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1770 ];

		return pClassPointer;
	};

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackLightEnvQuality::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackMovieBase
// 0x000C (0x007C - 0x0070)
class USFXInterpTrackMovieBase : public USFXGameInterpTrackCustom
{
public:
	TArray< struct FSFXMoviePlayStateData >            m_aMovieKeyData;                                  		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1771 ];

		return pClassPointer;
	};

	struct FString eventKeyDataArrayName ( );
};

UClass* USFXInterpTrackMovieBase::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackMovieBink
// 0x0018 (0x0094 - 0x007C)
class USFXInterpTrackMovieBink : public USFXInterpTrackMovieBase
{
public:
	struct FString                                     m_sMovieName;                                     		// 0x007C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fAutoResizeBuffer;                              		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       m_SoundEvent;                                     		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIgnoreShrinking : 1;                           		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIgnoreGrowing : 1;                             		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1772 ];

		return pClassPointer;
	};

	struct FString eventKeyDataDisplayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackMovieBink::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackMovieTexture
// 0x0004 (0x0080 - 0x007C)
class USFXInterpTrackMovieTexture : public USFXInterpTrackMovieBase
{
public:
	class UTextureMovie*                               m_oTextureMovie;                                  		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1773 ];

		return pClassPointer;
	};

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackMovieTexture::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackSetPlayerNearClipPlane
// 0x000C (0x007C - 0x0070)
class USFXInterpTrackSetPlayerNearClipPlane : public USFXGameInterpTrackCustom
{
public:
	TArray< struct FSFXNearClipTrackData >             m_aNearClipKeyData;                               		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1774 ];

		return pClassPointer;
	};

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackSetPlayerNearClipPlane::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackSetWeaponInstant
// 0x0014 (0x0084 - 0x0070)
class USFXInterpTrackSetWeaponInstant : public USFXGameInterpTrackCustom
{
public:
	TArray< struct FSFXWeaponClassData >               m_aWeaponClassKeyData;                            		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBioSeqVar_ObjectFindByTag*                  m_PawnRefTag;                                     		// 0x007C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class ABioPawn*                                    m_Pawn;                                           		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1775 ];

		return pClassPointer;
	};

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackSetWeaponInstant::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackToggleBase
// 0x001C (0x008C - 0x0070)
class USFXInterpTrackToggleBase : public USFXGameInterpTrackCustom
{
public:
	TArray< struct FSFXToggleTrackData >               m_aToggleKeyData;                                 		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UBioSeqVar_ObjectFindByTag* >        m_aTarget;                                        		// 0x007C (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	class AActor*                                      m_TargetActor;                                    		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1776 ];

		return pClassPointer;
	};

	void SetupToggleSequenceOp ( class USequenceOp* Seq, unsigned long bToggle, unsigned long bEnable );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackToggleBase::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackToggleAffectedByHitEffects
// 0x0000 (0x008C - 0x008C)
class USFXInterpTrackToggleAffectedByHitEffects : public USFXInterpTrackToggleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1777 ];

		return pClassPointer;
	};

	void SetupToggleSequenceOp ( class USequenceOp* Seq, unsigned long bToggle, unsigned long bEnable );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackToggleAffectedByHitEffects::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackToggleHidden
// 0x0000 (0x008C - 0x008C)
class USFXInterpTrackToggleHidden : public USFXInterpTrackToggleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1778 ];

		return pClassPointer;
	};

	void SetupToggleSequenceOp ( class USequenceOp* Seq, unsigned long bToggle, unsigned long bEnable );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackToggleHidden::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackToggleLightEnvironment
// 0x0004 (0x0090 - 0x008C)
class USFXInterpTrackToggleLightEnvironment : public USFXInterpTrackToggleBase
{
public:
	class UBioSeqAct_ToggleLightEnv*                   m_LightEnvSeq;                                    		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1779 ];

		return pClassPointer;
	};

	struct FString eventKeyDataDisplayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackToggleLightEnvironment::pClassPointer = NULL;

// Class SFXGame.SFXGameInterpTrackWwiseMicLock
// 0x0010 (0x0080 - 0x0070)
class USFXGameInterpTrackWwiseMicLock : public USFXGameInterpTrack
{
public:
	TArray< struct FBioMicLockData >                   m_aMicLockKeys;                                   		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bUnlockAtEnd : 1;                               		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1780 ];

		return pClassPointer;
	};

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXGameInterpTrackWwiseMicLock::pClassPointer = NULL;

// Class SFXGame.SFXGameInterpTrackInst
// 0x0000 (0x0040 - 0x0040)
class USFXGameInterpTrackInst : public UBioInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1781 ];

		return pClassPointer;
	};

};

UClass* USFXGameInterpTrackInst::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackDOFInst
// 0x0008 (0x0048 - 0x0040)
class UBioEvtSysTrackDOFInst : public USFXGameInterpTrackInst
{
public:
	float                                              m_fInterpolateElapsed;                            		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurEffect;                                     		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1782 ];

		return pClassPointer;
	};

};

UClass* UBioEvtSysTrackDOFInst::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackInterruptInst
// 0x0004 (0x0044 - 0x0040)
class UBioEvtSysTrackInterruptInst : public USFXGameInterpTrackInst
{
public:
	class UBioConversationController*                  m_pConvCont;                                      		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1783 ];

		return pClassPointer;
	};

};

UClass* UBioEvtSysTrackInterruptInst::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackSubtitlesInst
// 0x0000 (0x0040 - 0x0040)
class UBioEvtSysTrackSubtitlesInst : public USFXGameInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1784 ];

		return pClassPointer;
	};

};

UClass* UBioEvtSysTrackSubtitlesInst::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackSwitchCameraInst
// 0x0004 (0x0044 - 0x0040)
class UBioEvtSysTrackSwitchCameraInst : public USFXGameInterpTrackInst
{
public:
	class UBioEvtSysTrackDOF*                          m_pDOFTrack;                                      		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1785 ];

		return pClassPointer;
	};

};

UClass* UBioEvtSysTrackSwitchCameraInst::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackVOElementsInst
// 0x0004 (0x0044 - 0x0040)
class UBioEvtSysTrackVOElementsInst : public USFXGameInterpTrackInst
{
public:
	class UBioConversationController*                  m_pConvCont;                                      		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1786 ];

		return pClassPointer;
	};

};

UClass* UBioEvtSysTrackVOElementsInst::pClassPointer = NULL;

// Class SFXGame.BioInterpTrackInstRotationMode
// 0x0004 (0x0044 - 0x0040)
class UBioInterpTrackInstRotationMode : public USFXGameInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1787 ];

		return pClassPointer;
	};

};

UClass* UBioInterpTrackInstRotationMode::pClassPointer = NULL;

// Class SFXGame.SFXGameActorInterpTrackInst
// 0x0004 (0x0044 - 0x0040)
class USFXGameActorInterpTrackInst : public USFXGameInterpTrackInst
{
public:
	class AActor*                                      m_pActor;                                         		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1788 ];

		return pClassPointer;
	};

};

UClass* USFXGameActorInterpTrackInst::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackGestureInst
// 0x0040 (0x0084 - 0x0044)
class UBioEvtSysTrackGestureInst : public USFXGameActorInterpTrackInst
{
public:
	struct FMap_Mirror                                 m_mapCachedAnimsets;                              		// 0x0044 (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      m_bBelongsToConversation : 1;                     		// 0x0080 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1789 ];

		return pClassPointer;
	};

};

UClass* UBioEvtSysTrackGestureInst::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackLightingInst
// 0x0048 (0x008C - 0x0044)
class UBioEvtSysTrackLightingInst : public USFXGameActorInterpTrackInst
{
public:
	struct FBioConvLightingData                        InitialLightingData;                              		// 0x0044 (0x0044) [0x0000000000000000]              
	unsigned long                                      ResetLightingData : 1;                            		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1790 ];

		return pClassPointer;
	};

};

UClass* UBioEvtSysTrackLightingInst::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackLookAtInst
// 0x0000 (0x0044 - 0x0044)
class UBioEvtSysTrackLookAtInst : public USFXGameActorInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1791 ];

		return pClassPointer;
	};

};

UClass* UBioEvtSysTrackLookAtInst::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackPropInst
// 0x007C (0x00C0 - 0x0044)
class UBioEvtSysTrackPropInst : public USFXGameActorInterpTrackInst
{
public:
	struct FMap_Mirror                                 m_mapFoundWeapons;                                		// 0x0044 (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FMap_Mirror                                 m_mapUsedMeshProps;                               		// 0x0080 (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      m_bBelongsToConversation : 1;                     		// 0x00BC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1792 ];

		return pClassPointer;
	};

	struct FString eventGetWeaponName ( class UObject* pWeaponIn );
	void RemoveWeaponData ( class UClass* cWeapon );
	void AddWeaponData ( class UClass* cWeapon, class UObject* pWep, unsigned long bSpawned, unsigned long bCurrentlyEquipped );
	class UObject* FindWeaponData ( class UClass* cWeapon, unsigned long bCurrentlyEquipped, int* nSpawned );
};

UClass* UBioEvtSysTrackPropInst::pClassPointer = NULL;

// Class SFXGame.BioEvtSysTrackSetFacingInst
// 0x0000 (0x0044 - 0x0044)
class UBioEvtSysTrackSetFacingInst : public USFXGameActorInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1793 ];

		return pClassPointer;
	};

};

UClass* UBioEvtSysTrackSetFacingInst::pClassPointer = NULL;

// Class SFXGame.SFXGameInterpTrackInstProcFoley
// 0x0004 (0x0048 - 0x0044)
class USFXGameInterpTrackInstProcFoley : public USFXGameActorInterpTrackInst
{
public:
	unsigned long                                      m_bBelongsToConversation : 1;                     		// 0x0044 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1794 ];

		return pClassPointer;
	};

};

UClass* USFXGameInterpTrackInstProcFoley::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackPlayFaceOnlyVOInst
// 0x000C (0x0050 - 0x0044)
class USFXInterpTrackPlayFaceOnlyVOInst : public USFXGameActorInterpTrackInst
{
public:
	TArray< class UBioSeqAct_FaceOnlyVO* >             m_aFOVOObjects;                                   		// 0x0044 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1795 ];

		return pClassPointer;
	};

};

UClass* USFXInterpTrackPlayFaceOnlyVOInst::pClassPointer = NULL;

// Class SFXGame.SFXGameInterpTrackInstCustom
// 0x0000 (0x0040 - 0x0040)
class USFXGameInterpTrackInstCustom : public USFXGameInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1796 ];

		return pClassPointer;
	};

};

UClass* USFXGameInterpTrackInstCustom::pClassPointer = NULL;

// Class SFXGame.SFXGameInterpTrackInstMovieBink
// 0x0008 (0x0048 - 0x0040)
class USFXGameInterpTrackInstMovieBink : public USFXGameInterpTrackInst
{
public:
	class USFXSceneGroup*                              m_pOwningScene;                                   		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bIsPlaying : 1;                                 		// 0x0044 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1797 ];

		return pClassPointer;
	};

};

UClass* USFXGameInterpTrackInstMovieBink::pClassPointer = NULL;

// Class SFXGame.SFXGameInterpTrackInstWwiseMicLock
// 0x003C (0x007C - 0x0040)
class USFXGameInterpTrackInstWwiseMicLock : public USFXGameInterpTrackInst
{
public:
	struct FMap_Mirror                                 m_mapCachedActors;                                		// 0x0040 (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1798 ];

		return pClassPointer;
	};

};

UClass* USFXGameInterpTrackInstWwiseMicLock::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrack_MoveTo
// 0x0000 (0x009E - 0x009E)
class USFXInterpTrack_MoveTo : public UInterpTrackMove
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1799 ];

		return pClassPointer;
	};

};

UClass* USFXInterpTrack_MoveTo::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackInst_MoveTo
// 0x001B (0x00C4 - 0x00A9)
class USFXInterpTrackInst_MoveTo : public UInterpTrackInstMove
{
public:
	struct FVector                                     StartLocation;                                    		// 0x00AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    StartRotation;                                    		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1800 ];

		return pClassPointer;
	};

};

UClass* USFXInterpTrackInst_MoveTo::pClassPointer = NULL;

// Class SFXGame.SFXSceneShopNodeKisVarCheck
// 0x0008 (0x005C - 0x0054)
class USFXSceneShopNodeKisVarCheck : public USFXSceneShopNode
{
public:
	struct FName                                       m_nmKismetBoolVarName;                            		// 0x0054 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1801 ];

		return pClassPointer;
	};

};

UClass* USFXSceneShopNodeKisVarCheck::pClassPointer = NULL;

// Class SFXGame.SFXSceneShopNodePlotCheck
// 0x0014 (0x0068 - 0x0054)
class USFXSceneShopNodePlotCheck : public USFXSceneShopNode
{
public:
	TArray< struct FSFXSSPlotValue >                   m_aValuesToCheck;                                 		// 0x0054 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_nIndex;                                         		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned char                                      Region;                                           		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x0065 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      VarType;                                          		// 0x0066 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Variable;                                         		// 0x0067 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1802 ];

		return pClassPointer;
	};

};

UClass* USFXSceneShopNodePlotCheck::pClassPointer = NULL;

// Class SFXGame.SFXSceneShopNodeScene
// 0x0004 (0x0058 - 0x0054)
class USFXSceneShopNodeScene : public USFXSceneShopNode
{
public:
	class USFXSceneGroup*                              m_pLinkedScene;                                   		// 0x0054 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1803 ];

		return pClassPointer;
	};

};

UClass* USFXSceneShopNodeScene::pClassPointer = NULL;

// Class SFXGame.SFXSceneShopNodeStart
// 0x0000 (0x0054 - 0x0054)
class USFXSceneShopNodeStart : public USFXSceneShopNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1804 ];

		return pClassPointer;
	};

};

UClass* USFXSceneShopNodeStart::pClassPointer = NULL;

// Class SFXGame.BioInterpolator
// 0x0000 (0x003C - 0x003C)
class UBioInterpolator : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1805 ];

		return pClassPointer;
	};

};

UClass* UBioInterpolator::pClassPointer = NULL;

// Class SFXGame.BioLookAtDefinition
// 0x001E (0x005A - 0x003C)
class UBioLookAtDefinition : public UObject
{
public:
	TArray< struct FLookAtBoneDefinition >             BoneDefinitions;                                  		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       RootAnimBoneName;                                 		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValidTargetAngleRange;                            		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      RootAnimBoneLookAtInverted : 1;                   		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RootAnimBoneUpInverted : 1;                       		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RootBoneYawOnly : 1;                              		// 0x0054 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      RootAnimBoneLookAtAxis;                           		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootAnimBoneUpAxis;                               		// 0x0059 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1806 ];

		return pClassPointer;
	};

};

UClass* UBioLookAtDefinition::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_ToggleGlobalLookAt
// 0x0004 (0x00B4 - 0x00B0)
class UBioSeqAct_ToggleGlobalLookAt : public USequenceAction
{
public:
	unsigned long                                      ForceState : 1;                                   		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      State : 1;                                        		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      Instant : 1;                                      		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1807 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_ToggleGlobalLookAt::pClassPointer = NULL;

// Class SFXGame.BioMaterialExpressionAnisoSpec
// 0x0054 (0x0090 - 0x003C)
class UBioMaterialExpressionAnisoSpec : public UMaterialExpression
{
public:
	struct FExpressionInput                            Direction;                                        		// 0x003C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            SpecColor;                                        		// 0x0058 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            SpecPower;                                        		// 0x0074 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1808 ];

		return pClassPointer;
	};

};

UClass* UBioMaterialExpressionAnisoSpec::pClassPointer = NULL;

// Class SFXGame.BioMaterialExpressionBlinnSpec
// 0x0054 (0x0090 - 0x003C)
class UBioMaterialExpressionBlinnSpec : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                           		// 0x003C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            SpecColor;                                        		// 0x0058 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            SpecPower;                                        		// 0x0074 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1809 ];

		return pClassPointer;
	};

};

UClass* UBioMaterialExpressionBlinnSpec::pClassPointer = NULL;

// Class SFXGame.BioMaterialExpressionDirt
// 0x0030 (0x006C - 0x003C)
class UBioMaterialExpressionDirt : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x003C (0x001C) [0x0000000000000000]              
	struct FName                                       GrimeScaleParamName;                              		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GrimeTexParamName;                                		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  GrimeTex;                                         		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1810 ];

		return pClassPointer;
	};

};

UClass* UBioMaterialExpressionDirt::pClassPointer = NULL;

// Class SFXGame.BioMaterialExpressionFresnel
// 0x0024 (0x0060 - 0x003C)
class UBioMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                           		// 0x003C (0x001C) [0x0000000000000000]              
	float                                              Power;                                            		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      Inverted : 1;                                     		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1811 ];

		return pClassPointer;
	};

};

UClass* UBioMaterialExpressionFresnel::pClassPointer = NULL;

// Class SFXGame.BioMaterialExpressionHalfAngle
// 0x0000 (0x003C - 0x003C)
class UBioMaterialExpressionHalfAngle : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1812 ];

		return pClassPointer;
	};

};

UClass* UBioMaterialExpressionHalfAngle::pClassPointer = NULL;

// Class SFXGame.BioMaterialExpressionKeyedFlipbook
// 0x0044 (0x0080 - 0x003C)
class UBioMaterialExpressionKeyedFlipbook : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coord;                                            		// 0x003C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Time;                                             		// 0x0058 (0x001C) [0x0000000000000000]              
	int                                                FlipTexRows;                                      		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FlipTexCols;                                      		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  FlipTex;                                          		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1813 ];

		return pClassPointer;
	};

};

UClass* UBioMaterialExpressionKeyedFlipbook::pClassPointer = NULL;

// Class SFXGame.BioMaterialExpressionPhongSpec
// 0x0054 (0x0090 - 0x003C)
class UBioMaterialExpressionPhongSpec : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                           		// 0x003C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            SpecColor;                                        		// 0x0058 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            SpecPower;                                        		// 0x0074 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1814 ];

		return pClassPointer;
	};

};

UClass* UBioMaterialExpressionPhongSpec::pClassPointer = NULL;

// Class SFXGame.BioMaterialExpressionSineSubtend
// 0x0038 (0x0074 - 0x003C)
class UBioMaterialExpressionSineSubtend : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x003C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0058 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1815 ];

		return pClassPointer;
	};

};

UClass* UBioMaterialExpressionSineSubtend::pClassPointer = NULL;

// Class SFXGame.BioMaterialExpressionSpecPower
// 0x001C (0x0058 - 0x003C)
class UBioMaterialExpressionSpecPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x003C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1816 ];

		return pClassPointer;
	};

};

UClass* UBioMaterialExpressionSpecPower::pClassPointer = NULL;

// Class SFXGame.BioMaterialExpressionWound
// 0x0004 (0x0040 - 0x003C)
class UBioMaterialExpressionWound : public UMaterialExpression
{
public:
	int                                                m_nWoundNumber;                                   		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1817 ];

		return pClassPointer;
	};

};

UClass* UBioMaterialExpressionWound::pClassPointer = NULL;

// Class SFXGame.BioMaterialOverride
// 0x0024 (0x0060 - 0x003C)
class UBioMaterialOverride : public UObject
{
public:
	TArray< struct FTextureParameter >                 m_aTextureOverrides;                              		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FColorParameter >                   m_aColorOverrides;                                		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FScalarParameter >                  m_aScalarOverrides;                               		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1818 ];

		return pClassPointer;
	};

	void Unapply ( class UMeshComponent* InComponent );
	void Apply ( class UMeshComponent* InComponent );
	void UnapplyOverride ( class AActor* InTarget );
	void ApplyOverride ( class AActor* InTarget );
};

UClass* UBioMaterialOverride::pClassPointer = NULL;

// Class SFXGame.SFXModule_Gestures
// 0x00D8 (0x0120 - 0x0048)
class USFXModule_Gestures : public USFXModule
{
public:
	struct FMap_Mirror                                 m_mapUsedMeshProps;                               		// 0x0048 (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FMap_Mirror                                 m_mapFoundWeapons;                                		// 0x0084 (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< class UAnimSet* >                          m_aBackupAnimSets;                                		// 0x00C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FBioQueuedAction >                  m_aPropActionQueue;                               		// 0x00CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FBioQueuedAction >                  m_aRetriggerData;                                 		// 0x00D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FBioGesturesPosePlaying                     m_tPosePlayingData;                               		// 0x00E4 (0x0014) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmDefaultPoseAnim;                              		// 0x00F8 (0x0008) [0x0000000000000000]              
	class UAnimSet*                                    m_pDefaultPoseSet;                                		// 0x0100 (0x0004) [0x0000000000000000]              
	class USFXAmbPerfGameData*                         m_pPerfGameData;                                  		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentPerfPose;                               		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTimeSinceLastPerfChoice;                       		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nTransPoseIndex;                                		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlayingGestureIndex;                           		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioGestureAnimSetMgr*                       m_pAnimSetMgr;                                    		// 0x0118 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      m_bInMatinee : 1;                                 		// 0x011C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bGestIsOneShot : 1;                             		// 0x011C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bPerfPaused : 1;                                		// 0x011C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bDisableBlinksAndNoise : 1;                     		// 0x011C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1819 ];

		return pClassPointer;
	};

	void RemoveWeaponData ( class UClass* cWeapon );
	void AddWeaponData ( class UClass* cWeapon, class UObject* pWep, unsigned long bSpawned, unsigned long bCurrentlyEquipped );
	class UObject* FindWeaponData ( class UClass* cWeapon, unsigned long bCurrentlyEquipped, int* nSpawned );
	class USkeletalMeshComponent* ScriptGetMainMeshComp ( class AActor* pActor );
};

UClass* USFXModule_Gestures::pClassPointer = NULL;

// Class SFXGame.BioMorphFace
// 0x0054 (0x0090 - 0x003C)
class UBioMorphFace : public UObject
{
public:
	TArray< struct FPointer >                          m_aVertexBuffers;                                 		// 0x003C (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class USkeletalMesh* >                     m_oOtherMeshes;                                   		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FMorphFeature >                     m_aMorphFeatures;                                 		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FOffsetBonePos >                    m_aFinalSkeleton;                                 		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x006C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class USkeletalMesh*                               m_oBaseHead;                                      		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               m_oHairMesh;                                      		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMorphTargetSet*                             m_oMorphTargetSet;                                		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   m_oAnimTree;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentMorphFaceContentVersion;                   		// 0x0080 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInternalMorphFaceContentVersion;               		// 0x0084 (0x0004) [0x0000000000000000]              
	class UBioMaterialOverride*                        m_oMaterialOverrides;                             		// 0x0088 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bRequiresDynamicUpdates : 1;                      		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1820 ];

		return pClassPointer;
	};

	void ApplyMesh ( class USkeletalMesh* SkelMesh, class USkeletalMeshComponent* MeshCmpt );
	void UpdateActorMeshes ( class USkeletalMeshComponent* Mesh, class USkeletalMeshComponent* HeadMesh, class USkeletalMeshComponent* HairMesh );
	void ApplyToActor ( class AActor* InTarget );
	void ApplyMorph ( );
	void ApplyMaterialOverridesToActor ( class AActor* InTarget );
	void ApplyMaterialOverrides ( class USkeletalMeshComponent* Mesh );
	void SetPosition ( int Buffer, int vert, struct FVector V );
	struct FVector GetPosition ( int Buffer, int vert );
	int GetNumVerts ( int Buffer );
	int GetNumVertexBuffers ( );
	void RefreshBuffers ( TArray< int > BufferIndices );
};

UClass* UBioMorphFace::pClassPointer = NULL;

// Class SFXGame.BioMorphFaceFESliderBase
// 0x0014 (0x0050 - 0x003C)
class UBioMorphFaceFESliderBase : public UObject
{
public:
	struct FString                                     m_nName;                                          		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioMorphFaceFrontEnd*                       m_oMorphFaceFrontEnd;                             		// 0x0048 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bStepped : 1;                                   		// 0x004C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1821 ];

		return pClassPointer;
	};

};

UClass* UBioMorphFaceFESliderBase::pClassPointer = NULL;

// Class SFXGame.BioMorphFaceFESliderColour
// 0x0018 (0x0068 - 0x0050)
class UBioMorphFaceFESliderColour : public UBioMorphFaceFESliderBase
{
public:
	struct FString                                     m_sParameterName;                                 		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FColor >                            m_acColours;                                      		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1822 ];

		return pClassPointer;
	};

};

UClass* UBioMorphFaceFESliderColour::pClassPointer = NULL;

// Class SFXGame.BioMorphFaceFESliderHair
// 0x0000 (0x0050 - 0x0050)
class UBioMorphFaceFESliderHair : public UBioMorphFaceFESliderBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1823 ];

		return pClassPointer;
	};

};

UClass* UBioMorphFaceFESliderHair::pClassPointer = NULL;

// Class SFXGame.BioMorphFaceFESliderMorph
// 0x0024 (0x0074 - 0x0050)
class UBioMorphFaceFESliderMorph : public UBioMorphFaceFESliderBase
{
public:
	struct FString                                     m_sMorph_Positive;                                		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sMorph_Negative;                                		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fRange;                                         		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              m_fRandomRange;                                   		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSingle : 1;                                    		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1824 ];

		return pClassPointer;
	};

};

UClass* UBioMorphFaceFESliderMorph::pClassPointer = NULL;

// Class SFXGame.BioMorphFaceFESliderScalar
// 0x0018 (0x0068 - 0x0050)
class UBioMorphFaceFESliderScalar : public UBioMorphFaceFESliderBase
{
public:
	struct FString                                     m_sParameterName;                                 		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    m_afValues;                                       		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1825 ];

		return pClassPointer;
	};

};

UClass* UBioMorphFaceFESliderScalar::pClassPointer = NULL;

// Class SFXGame.BioMorphFaceFESliderSetMorph
// 0x0018 (0x0068 - 0x0050)
class UBioMorphFaceFESliderSetMorph : public UBioMorphFaceFESliderBase
{
public:
	struct FString                                     m_sMorphName;                                     		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    m_afValues;                                       		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1826 ];

		return pClassPointer;
	};

};

UClass* UBioMorphFaceFESliderSetMorph::pClassPointer = NULL;

// Class SFXGame.BioMorphFaceFESliderTexture
// 0x0018 (0x0068 - 0x0050)
class UBioMorphFaceFESliderTexture : public UBioMorphFaceFESliderBase
{
public:
	struct FString                                     m_sParameterName;                                 		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture* >                          m_atTexture;                                      		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1827 ];

		return pClassPointer;
	};

};

UClass* UBioMorphFaceFESliderTexture::pClassPointer = NULL;

// Class SFXGame.BioMorphUtility
// 0x0000 (0x003C - 0x003C)
class UBioMorphUtility : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1828 ];

		return pClassPointer;
	};

};

UClass* UBioMorphUtility::pClassPointer = NULL;

// Class SFXGame.BioMorphFaceFrontEnd
// 0x0108 (0x0144 - 0x003C)
class UBioMorphFaceFrontEnd : public UBioMorphUtility
{
public:
	struct FSlider                                     m_pModifierData;                                  		// 0x003C (0x0054) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMap_Mirror                                 CachedFaceCodeRemappings;                         		// 0x0090 (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FFaceData                                   m_oFaceData;                                      		// 0x00CC (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sPlayerName;                                    		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBaseHeads                                  m_oBaseSettings;                                  		// 0x0108 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBaseHeads >                        m_aBaseHeads;                                     		// 0x0114 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSliderRemapping >                  MaleRemappings;                                   		// 0x0120 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSliderRemapping >                  FemaleRemappings;                                 		// 0x012C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UBioMorphFace*                               WorkingMorphFace;                                 		// 0x0138 (0x0004) [0x0000000000000000]              
	int                                                m_iCurrentBaseHead;                               		// 0x013C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDebugStrings : 1;                              		// 0x0140 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bIsMale : 1;                                      		// 0x0140 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1829 ];

		return pClassPointer;
	};

	struct FString GenerateFaceCode ( );
	void ApplyFaceCode ( struct FString sFaceCode );
	void SelectPreviousBaseHead ( );
	void SelectNextBaseHead ( );
	void SetPlayerName ( struct FString sPlayerName );
	void Cleanup ( );
	void HandleSliderChange ( int categoryIndex, int sliderIndex, int sliderValue, unsigned long bUpdate );
	bool GetSliderNotched ( int categoryIndex, int sliderIndex );
	int GetSliderValue ( int categoryIndex, int sliderIndex );
	int GetSliderStep ( int categoryIndex, int sliderIndex );
	int GetSliderMax ( int categoryIndex, int sliderIndex );
	int GetSliderMin ( int categoryIndex, int sliderIndex );
	int GetSliderDesc ( int categoryIndex, int sliderIndex );
	int GetSliderLabel ( int categoryIndex, int sliderIndex );
	int GetNumSlidersInCategory ( int categoryIndex );
	int GetCategoryDescription ( int categoryIndex );
	int GetCategoryString ( int categoryIndex );
	int GetNumberOfFeatureCategories ( );
	void CalibrateToPawn ( class ABioPawn* pSrcPawn, unsigned long bUpdate );
	void ResetCategory ( int nCategory, unsigned long bUpdate );
	void ResetAll ( );
	void RandomizeCategory ( int nCategory, unsigned long bUpdate );
	void RandomizeAll ( );
	class UBioMorphFace* Initialize ( class USFXMorphFaceFrontEndDataSource* Data, unsigned long bReset );
};

UClass* UBioMorphFaceFrontEnd::pClassPointer = NULL;

// Class SFXGame.SFXMorphFaceFrontEndDataSource
// 0x00F4 (0x0130 - 0x003C)
class USFXMorphFaceFrontEndDataSource : public UObject
{
public:
	struct FSlider                                     ModifierData;                                     		// 0x003C (0x0054) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FAdditionalData                             AdditionalParams;                                 		// 0x0090 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FCategory >                         MorphCategories;                                  		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        Textures;                                         		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBaseHeads >                        m_aDefaultSettings;                               		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBaseHeads >                        m_aBaseHeads;                                     		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x00E4 (0x003C) UNKNOWN PROPERTY: MapProperty SFXGame.SFXMorphFaceFrontEndDataSource.NameHeadIndexMap
	class UBioMorphFace*                               MorphFace;                                        		// 0x0120 (0x0004) [0x0000000000000000]              
	class UAnimTree*                                   MorphAnimTree;                                    		// 0x0124 (0x0004) [0x0000000000000000]              
	class UMorphTargetSet*                             MorphTargetSet;                                   		// 0x0128 (0x0004) [0x0000000000000000]              
	unsigned long                                      PlayerIsMale : 1;                                 		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1830 ];

		return pClassPointer;
	};

};

UClass* USFXMorphFaceFrontEndDataSource::pClassPointer = NULL;

// Class SFXGame.BioEmissionAreaList
// 0x0000 (0x003C - 0x003C)
class UBioEmissionAreaList : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1831 ];

		return pClassPointer;
	};

};

UClass* UBioEmissionAreaList::pClassPointer = NULL;

// Class SFXGame.BioEmissionAreaListBoneList
// 0x000C (0x0048 - 0x003C)
class UBioEmissionAreaListBoneList : public UBioEmissionAreaList
{
public:
	TArray< struct FBoneListEmissionArea >             m_EmissionAreas;                                  		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1832 ];

		return pClassPointer;
	};

};

UClass* UBioEmissionAreaListBoneList::pClassPointer = NULL;

// Class SFXGame.BioParticleModuleBase
// 0x0000 (0x0041 - 0x0041)
class UBioParticleModuleBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1833 ];

		return pClassPointer;
	};

};

UClass* UBioParticleModuleBase::pClassPointer = NULL;

// Class SFXGame.BioParticleModuleMultiplyByEmitterSpeed
// 0x0014 (0x0055 - 0x0041)
class UBioParticleModuleMultiplyByEmitterSpeed : public UBioParticleModuleBase
{
public:
	float                                              MinUsedSpeed;                                     		// 0x0044 (0x0004) [0x000000000200000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NoClear )
	float                                              MaxUsedSpeed;                                     		// 0x0048 (0x0004) [0x000000000200000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NoClear )
	float                                              MultiplierAtMin;                                  		// 0x004C (0x0004) [0x000000000200000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NoClear )
	float                                              MultiplierAtMax;                                  		// 0x0050 (0x0004) [0x000000000200000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NoClear )
	unsigned char                                      MultipliedProperty;                               		// 0x0054 (0x0001) [0x000000000200000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1834 ];

		return pClassPointer;
	};

};

UClass* UBioParticleModuleMultiplyByEmitterSpeed::pClassPointer = NULL;

// Class SFXGame.BioParticleModuleSound
// 0x001B (0x005C - 0x0041)
class UBioParticleModuleSound : public UBioParticleModuleBase
{
public:
	class UWwiseBaseSoundObject*                       oWwiseEvent;                                      		// 0x0044 (0x0004) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	float                                              m_DuckDistanceThreshold;                          		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WwiseDuckEvent;                                   		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLastEmitterPlayTime;                           		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ObjInstanceVersion;                               		// 0x0054 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNoRetriggerWhileSoundPlaying : 1;                		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPerParticle : 1;                                 		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bDuck : 1;                                      		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1835 ];

		return pClassPointer;
	};

};

UClass* UBioParticleModuleSound::pClassPointer = NULL;

// Class SFXGame.SFXParticleModule_CameraEffect
// 0x00A7 (0x00E8 - 0x0041)
class USFXParticleModule_CameraEffect : public UBioParticleModuleBase
{
public:
	struct FRawDistributionFloat                       RawIntensityVsDistanceDistribution;               		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FScreenShakeStruct                          ProgrammaticShake;                                		// 0x0060 (0x0078) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	float                                              MaxRange;                                         		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPostProcessChain*                           FrameBufferEffect;                                		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlayerImpact : 1;                                		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseIntensityCurve : 1;                           		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPlayProgrammaticShake : 1;                       		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1836 ];

		return pClassPointer;
	};

};

UClass* USFXParticleModule_CameraEffect::pClassPointer = NULL;

// Class SFXGame.BioParticleModuleCollisionDecal
// 0x0027 (0x0114 - 0x00ED)
class UBioParticleModuleCollisionDecal : public UParticleModuleCollision
{
public:
	struct FString                                     CollisionEmitter;                                 		// 0x00F0 (0x000C) [0x0000000002400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear )
	TArray< struct FName >                             ColorParams;                                      		// 0x00FC (0x000C) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioDecalComponent*                          DecalTemplate;                                    		// 0x0108 (0x0004) [0x0000000006080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	class UParticleSystem*                             CollisionEmitterTemplate;                         		// 0x010C (0x0004) [0x0000000000000000]              
	unsigned long                                      bEnableMultiHitDecal : 1;                         		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1837 ];

		return pClassPointer;
	};

	void eventCreateDecal ( class UParticleSystemComponent* PSC, class UPrimitiveComponent* HitComponent, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* UBioParticleModuleCollisionDecal::pClassPointer = NULL;

// Class SFXGame.BioParticleModuleLocationAttachedMesh
// 0x0025 (0x0071 - 0x004C)
class UBioParticleModuleLocationAttachedMesh : public UParticleModuleLocationBase
{
public:
	TArray< struct FEmissionAreaWeight >               m_EmissionAreaWeights;                            		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             m_ValidEmissionSet;                               		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioEmissionAreaList*                        m_EmissionAreaList;                               		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BoneUpdateTickTag;                                		// 0x0068 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      m_bCheckAgainstValidEmissionSet : 1;              		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseAttachedLocalSpace : 1;                       		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseRenderMeshAsSource : 1;                       		// 0x006C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      m_SpecificationType;                              		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1838 ];

		return pClassPointer;
	};

};

UClass* UBioParticleModuleLocationAttachedMesh::pClassPointer = NULL;

// Class SFXGame.BioParticleModuleLocationPrimitiveNearestSurface
// 0x0016 (0x00A6 - 0x0090)
class UBioParticleModuleLocationPrimitiveNearestSurface : public UParticleModuleLocationPrimitiveBase
{
public:
	TArray< struct FVector >                           m_aSearchDirections;                              		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fRadius;                                          		// 0x009C (0x0004) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned long                                      bInitialLocationOnly : 1;                         		// 0x00A0 (0x0004) [0x0000000002000009] [0x00000001] ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned long                                      bMovingLocationOnly : 1;                          		// 0x00A0 (0x0004) [0x0000000002000009] [0x00000002] ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned long                                      bDirectionRelativeToEmitter : 1;                  		// 0x00A0 (0x0004) [0x0000000002000009] [0x00000004] ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned long                                      bTestActors : 1;                                  		// 0x00A0 (0x0004) [0x0000000002000009] [0x00000008] ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned char                                      eIfNoCollision;                                   		// 0x00A4 (0x0001) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned char                                      eOnCollision;                                     		// 0x00A5 (0x0001) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1839 ];

		return pClassPointer;
	};

};

UClass* UBioParticleModuleLocationPrimitiveNearestSurface::pClassPointer = NULL;

// Class SFXGame.BioParticleModuleVelocityWorldSpace
// 0x0000 (0x0088 - 0x0088)
class UBioParticleModuleVelocityWorldSpace : public UParticleModuleVelocity
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1840 ];

		return pClassPointer;
	};

};

UClass* UBioParticleModuleVelocityWorldSpace::pClassPointer = NULL;

// Class SFXGame.BioPawn
// 0x0765 (0x0BCD - 0x0468)
class ABioPawn : public APawn
{
public:
	struct FMultiMap_Mirror                            m_mAnimsetRegistration;                           		// 0x0468 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FReplicatedRadiusDamage                     ReplicatedRadiusDamageInfo;                       		// 0x04A4 (0x002C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FReplicatedAnimatedReaction                 ReplicatedAnimatedReactionInfo;                   		// 0x04D0 (0x0028) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FScaledFloat                                DesiredSpeedMultiplier;                           		// 0x04F8 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FReplicatedPowerCombo                       ReplicatedPowerComboInfo;                         		// 0x051C (0x001C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FName >                             AttachSlots;                                      		// 0x0538 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAnimNodeSlot* >                     BodyStanceNodes;                                  		// 0x0544 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UClass* >                            CustomActionClasses;                              		// 0x0550 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UBioCustomAction* >                  CustomActions;                                    		// 0x055C (0x000C) [0x0000000004422001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UClass* >                            PowerCustomActionClasses;                         		// 0x0568 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UBioCustomAction* >                  PowerCustomActions;                               		// 0x0574 (0x000C) [0x0000000004422001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UClass* >                            SupportedCustomReachSpecs;                        		// 0x0580 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             SupportedSyncActions;                             		// 0x058C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class USkeletalMeshComponent* >            m_aoAccessories;                                  		// 0x0598 (0x000C) [0x00000000044A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FRootMotionOverrideEntry >          RootMotionOverrides;                              		// 0x05A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             m_afnCinematicLevels;                             		// 0x05B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UObject* >                           m_aAdditionalResourcesToCook;                     		// 0x05BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AIBarkAnimName;                                   		// 0x05C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FAttackReservation >                m_aReservations;                                  		// 0x05D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FRigidBodyCallback >                m_CollisionCallbacks;                             		// 0x05E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTemporaryAnimSetInfo >             TemporaryAnims;                                   		// 0x05EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFXVocalizationBank* >              CombatVocVariants;                                		// 0x05F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             AimNodes;                                         		// 0x0604 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           AimNodeOffsets;                                   		// 0x0610 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FReactionPart >                     ReactionBones;                                    		// 0x061C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FAbilityTimeStamp >                 AbilityTimeStamps;                                		// 0x0628 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FWeaponAnimSpec >                   WeaponAnimSpecs;                                  		// 0x0634 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScriptDelegate                             __RBCollisionCallback__Delegate;                  		// 0x0640 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DamageCallback__Delegate;                       		// 0x064C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      KilledByDamageType;                               		// 0x0658 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FReplicatedCustomActionImpact               ReplicatedCustomActionImpactPool[ 0x4 ];          		// 0x065C (0x00D0) [0x0000000000003020]              ( CPF_Net | CPF_Native | CPF_Transient )
	struct FReplicatedPowerSubsequentImpact            ReplicatedPowerSubsequentImpactPool[ 0x4 ];       		// 0x072C (0x0060) [0x0000000000003020]              ( CPF_Net | CPF_Native | CPF_Transient )
	struct FReplicatedCustomActionImpact               ReplicatedCustomActionImpactInfo;                 		// 0x078C (0x0034) [0x0000000000002000]              ( CPF_Transient )
	struct FReplicatedCustomAction                     ReplicatedCustomActionInfo;                       		// 0x07C0 (0x0020) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FReplicatedPowerSubsequentImpact            ReplicatedPowerSubsequentImpactInfo;              		// 0x07E0 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	struct FReplicatedPowerComboImpact                 ReplicatedPowerComboImpactInfo;                   		// 0x07F8 (0x0014) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FGuid                                       MyGuid;                                           		// 0x080C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FGuid                                       GUID_LifetimeCrust;                               		// 0x081C (0x0010) [0x0000000000000000]              
	struct FReplicatedWeaponImpact                     ReplicatedWeaponImpactInfo;                       		// 0x082C (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              CAImpactEndReplicationTime[ 0x4 ];                		// 0x083C (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              CAPowerSubsequentImpactEndReplicationTime[ 0x4 ]; 		// 0x084C (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FVector                                     KilledByHitLocation;                              		// 0x085C (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector                                     m_vSafeTeleportLocation;                          		// 0x0868 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MeshTranslationOffset;                            		// 0x0874 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     DesiredMeshTranslationOffset;                     		// 0x0880 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastMantleLocation;                               		// 0x088C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ReplicatedAimDeltaRot;                            		// 0x0898 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     m_vFixedRotation;                                 		// 0x08A4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rLastStopRotation;                              		// 0x08B0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rSkidStartRotation;                             		// 0x08BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rSkidTargetRotation;                            		// 0x08C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ReplicatedDirection;                              		// 0x08D4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    ReplicatedRotation;                               		// 0x08E0 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     ReplicatedRootBodyPos;                            		// 0x08EC (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     CameraHookOffset;                                 		// 0x08F8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CameraArmOffset;                                  		// 0x0904 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RightHandSocketName;                              		// 0x0910 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       LeftHandSocketName;                               		// 0x0918 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       DeathHitBoneName;                                 		// 0x0920 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector2D                                   AimOffsetPct;                                     		// 0x0928 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmPhysicsImpactBone;                            		// 0x0930 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmRagdollRecoverBone;                           		// 0x0938 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmRagdollRecoverDirSwapBone;                    		// 0x0940 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentCustomAction;                              		// 0x0948 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PreviousCustomAction;                             		// 0x094C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentPowerCustomAction;                         		// 0x0950 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APawn*                                       SyncPawn;                                         		// 0x0954 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioCustomAction*                            SyncPawnOwner;                                    		// 0x0958 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                GrammarID;                                        		// 0x095C (0x0004) [0x0000000000000000]              
	int                                                DeathCustomAction;                                		// 0x0960 (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            PreRagdollAnchor;                                 		// 0x0964 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWeapon*                                     WeaponFromLastGameState;                          		// 0x0968 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWeapon*                                     WeaponOnDeck;                                     		// 0x096C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              WalkSpeed;                                        		// 0x0970 (0x0004) [0x0000000000000000]              
	float                                              CombatWalkSpeed;                                  		// 0x0974 (0x0004) [0x0000000000000000]              
	float                                              CombatGroundSpeed;                                		// 0x0978 (0x0004) [0x0000000000000000]              
	float                                              CoverGroundSpeed;                                 		// 0x097C (0x0004) [0x0000000000000000]              
	float                                              CoverCrouchGroundSpeed;                           		// 0x0980 (0x0004) [0x0000000000000000]              
	float                                              TightAimGroundSpeed;                              		// 0x0984 (0x0004) [0x0000000000000000]              
	float                                              CrouchGroundSpeed;                                		// 0x0988 (0x0004) [0x0000000000000000]              
	float                                              StormSpeed;                                       		// 0x098C (0x0004) [0x0000000000000000]              
	float                                              StormTurnSpeed;                                   		// 0x0990 (0x0004) [0x0000000000000000]              
	float                                              StormSpeedScale;                                  		// 0x0994 (0x0004) [0x0000000000000000]              
	float                                              StormSpeedScaleTime;                              		// 0x0998 (0x0004) [0x0000000000000000]              
	float                                              StormStartSpeed;                                  		// 0x099C (0x0004) [0x0000000000000000]              
	float                                              fMoveMag;                                         		// 0x09A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastAnimatedReactionTime;                         		// 0x09A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HitReactionChanceMultiplier;                      		// 0x09A8 (0x0004) [0x0000000000000000]              
	float                                              LastLargeReactionTime;                            		// 0x09AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LargeReactionInterval;                            		// 0x09B0 (0x0004) [0x0000000000000000]              
	class AController*                                 KilledBy;                                         		// 0x09B4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                m_nTalkedToCount;                                 		// 0x09B8 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      HeadMesh;                                         		// 0x09BC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioMorphFace*                               MorphHead;                                        		// 0x09C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      m_oHairMesh;                                      		// 0x09C4 (0x0004) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_oHeadGearMesh;                                  		// 0x09C8 (0x0004) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_oVisorMesh;                                     		// 0x09CC (0x0004) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_oFacePlateMesh;                                 		// 0x09D0 (0x0004) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	int                                                TalentPoints;                                     		// 0x09D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRunAnimPlaybackPos;                            		// 0x09D8 (0x0004) [0x0000000000000000]              
	float                                              m_fRunAnimPlaybackRate;                           		// 0x09DC (0x0004) [0x0000000000000000]              
	float                                              m_fRunAnimPlaybackLen;                            		// 0x09E0 (0x0004) [0x0000000000000000]              
	float                                              m_fWalkAnimPlaybackPos;                           		// 0x09E4 (0x0004) [0x0000000000000000]              
	float                                              m_fWalkAnimPlaybackRate;                          		// 0x09E8 (0x0004) [0x0000000000000000]              
	float                                              m_fWalkAnimPlaybackLen;                           		// 0x09EC (0x0004) [0x0000000000000000]              
	float                                              m_fWalkStopDistance;                              		// 0x09F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRunStopDistance;                               		// 0x09F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCollisionReadyHeight;                          		// 0x09F8 (0x0004) [0x0000000000000000]              
	float                                              PortArmsTimer;                                    		// 0x09FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PortArmsExitDelay;                                		// 0x0A00 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              PortArmsPlayerInterval;                           		// 0x0A04 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              PortArmsNPCInterval;                              		// 0x0A08 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              PortArmsWedgeHeight;                              		// 0x0A0C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              PortArmsWedgeRadius;                              		// 0x0A10 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              DelayedPortArmsTimeAccumulator;                   		// 0x0A14 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PortArmsDelay;                                    		// 0x0A18 (0x0004) [0x0000000000000000]              
	class ACoverLink*                                  CurrentLink;                                      		// 0x0A1C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CurrentSlotIdx;                                   		// 0x0A20 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                TargetSlotIdx;                                    		// 0x0A24 (0x0004) [0x0000000000000000]              
	int                                                PreviousSlotIdx;                                  		// 0x0A28 (0x0004) [0x0000000000000000]              
	int                                                LeftSlotIdx;                                      		// 0x0A2C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                RightSlotIdx;                                     		// 0x0A30 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              CurrentSlotPct;                                   		// 0x0A34 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              LastCoverActionTime;                              		// 0x0A38 (0x0004) [0x0000000000000000]              
	float                                              LastPopOutOfCoverTime;                            		// 0x0A3C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AnimationTransitionCount;                         		// 0x0A40 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                AnimationTransitionPending;                       		// 0x0A44 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              m_fRBSleepEnergyThreshold;                        		// 0x0A48 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fEnableCCDMultiplierThreshold;                  		// 0x0A4C (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0A50 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_eClassification;                                		// 0x0A54 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              m_fPhysicsForceIncurred;                          		// 0x0A58 (0x0004) [0x0000000000000000]              
	float                                              ThreatRadiusSquared;                              		// 0x0A5C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFaceFXAnimSet*                              AIBarkAnimSet;                                    		// 0x0A60 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeOfDeath;                                      		// 0x0A64 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxBodyCount;                                     		// 0x0A68 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UWwiseEvent*                                 DyingSound;                                       		// 0x0A6C (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 NotifyNewEnemySound;                              		// 0x0A70 (0x0004) [0x0000000000000000]              
	class UObject*                                     LastPhysicsSetter;                                		// 0x0A74 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FallingStateEntranceTime;                         		// 0x0A78 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxTargetTickets;                              		// 0x0A7C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxAttackTickets;                              		// 0x0A80 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fTicketExpiryTime;                              		// 0x0A84 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nTargetTickets;                                 		// 0x0A88 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nAttackTickets;                                 		// 0x0A8C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurrentReservationID;                          		// 0x0A90 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ConformTraceInterval;                             		// 0x0A94 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ConformTraceFrameCount;                           		// 0x0A98 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InterpZTranslation;                               		// 0x0A9C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MeshAdjustFrequency;                              		// 0x0AA0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CurrentMeshAdjustTime;                            		// 0x0AA4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastMantleTime;                                   		// 0x0AA8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AimOffsetInterpSpeed;                             		// 0x0AAC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RemoteAimOffsetInterpSpeed;                       		// 0x0AB0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TemporaryAimInterpSpeed;                          		// 0x0AB4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PortArmsAndAimInterpSpeed;                        		// 0x0AB8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ReloadingAimInterpTimeToGo;                       		// 0x0ABC (0x0004) [0x0000000000000000]              
	float                                              AimOriginOffset;                                  		// 0x0AC0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fInitialZVal;                                   		// 0x0AC4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_aLastCollidedActor;                             		// 0x0AC8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ScaleLimitTimeToGo;                               		// 0x0ACC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RadarRange;                                       		// 0x0AD0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RadarFOV;                                         		// 0x0AD4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fDesiredMaxSpeed;                               		// 0x0AD8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ABioBaseSquad*                               Squad;                                            		// 0x0ADC (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              m_fPowerUsePercent;                               		// 0x0AE0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPhysicsLevel;                                  		// 0x0AE4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsRecoverSpeedThreshold;                  		// 0x0AE8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nRemainInRagdoll;                               		// 0x0AEC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXVocalizationBank*                        CombatVoc;                                        		// 0x0AF0 (0x0004) [0x0000000000000000]              
	class USFXVocalizationBank*                        ExplorationVoc;                                   		// 0x0AF4 (0x0004) [0x0000000000000000]              
	class USFXVocalizationBank*                        StealthVoc;                                       		// 0x0AF8 (0x0004) [0x0000000000000000]              
	class USFXLoadoutData*                             Loadout;                                          		// 0x0AFC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSleepPerceptionDistance;                         		// 0x0B00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ResistanceType;                                   		// 0x0B04 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRagdollRecoverPhysBlendTime;                   		// 0x0B08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PowerThreshold_Standard;                          		// 0x0B0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PowerThreshold_Stagger;                           		// 0x0B10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PowerThreshold_Knockback;                         		// 0x0B14 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_LifetimeCrust;                                 		// 0x0B18 (0x0004) [0x0000000000000000]              
	float                                              m_fTurningAngle;                                  		// 0x0B1C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fAnimStartTime;                                 		// 0x0B20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMoveStartElapsedTime;                          		// 0x0B24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMoveStopElapsedTime;                           		// 0x0B28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fAnimMoveSpeedSnapshot;                         		// 0x0B2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fAnimMoveStartSpeedSnapshot;                    		// 0x0B30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InvalidRagdollStateCounter;                       		// 0x0B34 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ReplicatedEnsurePawnHasLandedFromRagdoll;         		// 0x0B38 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              CAEndReplicationTime;                             		// 0x0B3C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CAPowerComboReplicationTime;                      		// 0x0B40 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CAPowerComboImpactReplicationTime;                		// 0x0B44 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastReplicatedCustomActionInfoTriggerCounter;     		// 0x0B48 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentReplicatedCustomActionImpactIndex;         		// 0x0B4C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentReplicatedCustomActionImpactRefCount;      		// 0x0B50 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentReplicatedPowerSubsequentImpactIndex;      		// 0x0B54 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentReplicatedPowerSubsequentImpactRefCount;   		// 0x0B58 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastAnimatedReaction;                             		// 0x0B5C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReplicatedRotationInterpolationRate;              		// 0x0B60 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CoverTransitionStdLeanOutRight;                   		// 0x0B64 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverTransitionStdLeanInRight;                    		// 0x0B68 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverTransitionStdLeanOutLeft;                    		// 0x0B6C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverTransitionStdLeanInLeft;                     		// 0x0B70 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverTransitionMidLeanOutRight;                   		// 0x0B74 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverTransitionMidLeanInRight;                    		// 0x0B78 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverTransitionMidLeanOutLeft;                    		// 0x0B7C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverTransitionMidLeanInLeft;                     		// 0x0B80 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BloodColor;                                       		// 0x0B84 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXSkelControlLimb*                         LeftHandIK;                                       		// 0x0B88 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioAnimNodeBlendByAction*                   ActionNode;                                       		// 0x0B8C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioAnimNodeFrame*                           SnapshotNode;                                     		// 0x0B90 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFaceFXAnimSet*                              m_pOverrideSndSetFaceFXPkg;                       		// 0x0B94 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFaceFXAnimSet*                              m_pSndSetFaceFXPkg;                               		// 0x0B98 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FollowDistanceModifier;                           		// 0x0B9C (0x0004) [0x0000000000000000]              
	float                                              AchievementForceThreshold;                        		// 0x0BA0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraHookScale;                                  		// 0x0BA4 (0x0004) [0x0000000000000000]              
	float                                              CameraArmScale;                                   		// 0x0BA8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXPowerManager*                            PowerManager;                                     		// 0x0BAC (0x0004) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bUseAnimatedRagdoll : 1;                          		// 0x0BB0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bHACKStopCustomActionInstantly : 1;               		// 0x0BB0 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned long                                      SupportsCombatGrammar : 1;                        		// 0x0BB0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCombatPawn : 1;                                  		// 0x0BB0 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bInjuredPawn : 1;                                 		// 0x0BB0 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bIgnoreSelectionMaxRange : 1;                     		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bFullyInitialized : 1;                            		// 0x0BB0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bFullyInitializedMP : 1;                          		// 0x0BB0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bCanPlayReactions : 1;                            		// 0x0BB0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bSpawnPHATInstance : 1;                           		// 0x0BB0 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bKillOnRagdoll : 1;                               		// 0x0BB0 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bCollidesAfterDeath : 1;                          		// 0x0BB0 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bSaveMe : 1;                                      		// 0x0BB0 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bIsSniping : 1;                                   		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bAllowSuperStormSpeed : 1;                        		// 0x0BB0 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bCanEarlyMantle : 1;                              		// 0x0BB0 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bCanRagdoll : 1;                                  		// 0x0BB0 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bAffectedByRagdollPowers : 1;                     		// 0x0BB0 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bCanBeReaped : 1;                                 		// 0x0BB0 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bCanPlayMoveStopAnims : 1;                        		// 0x0BB0 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bPreventPermanentDeath : 1;                       		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bIsFrozen : 1;                                    		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bPlayDeathAnimation : 1;                          		// 0x0BB0 (0x0004) [0x0000000000002001] [0x00400000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bUseLargeReactions : 1;                           		// 0x0BB0 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bOverrideHeadMat : 1;                             		// 0x0BB0 (0x0004) [0x0000000000000002] [0x01000000] ( CPF_Const )
	unsigned long                                      bOverrideBodyMats : 1;                            		// 0x0BB0 (0x0004) [0x0000000000000002] [0x02000000] ( CPF_Const )
	unsigned long                                      m_bOldUpdateSkelWhenNotRendered : 1;              		// 0x0BB0 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      m_bEnableStartRootMotion : 1;                     		// 0x0BB0 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      m_bEnableStopRootMotion : 1;                      		// 0x0BB0 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bRootMotionOverriden : 1;                         		// 0x0BB0 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      m_bTurnInPlaceRequested : 1;                      		// 0x0BB0 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      m_bUseWallSlidingSpeedAdj : 1;                    		// 0x0BB0 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      m_bSafeTeleportQueued : 1;                        		// 0x0BB4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bHideWithCameraCollision : 1;                   		// 0x0BB4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPortArmsEnabled : 1;                             		// 0x0BB4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bCanPortArms : 1;                                 		// 0x0BB4 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bInPortArms : 1;                                  		// 0x0BB4 (0x0004) [0x0000000000002020] [0x00000010] ( CPF_Net | CPF_Transient )
	unsigned long                                      bPlayingPortArmsAnim : 1;                         		// 0x0BB4 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bDisablePlayerPortArmsEvenIfFriendly : 1;         		// 0x0BB4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bWeaponDebug_Accuracy : 1;                        		// 0x0BB4 (0x0004) [0x0000000000044001] [0x00000080] ( CPF_Edit | CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bWeaponDebug_DamageRadius : 1;                    		// 0x0BB4 (0x0004) [0x0000000000044001] [0x00000100] ( CPF_Edit | CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bWasInCover : 1;                                  		// 0x0BB4 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIsInStationaryCover : 1;                         		// 0x0BB4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIgnoreDuringCoverSelection : 1;                  		// 0x0BB4 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bDoUpdateCoverData : 1;                           		// 0x0BB4 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bDisableCoverAdjust : 1;                          		// 0x0BB4 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bRecentlyTookCover : 1;                           		// 0x0BB4 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bDisableVocEvents : 1;                            		// 0x0BB4 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bScalingToZero : 1;                               		// 0x0BB4 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bAdjustMeshTranslationOnSlopes : 1;               		// 0x0BB4 (0x0004) [0x0000000000000002] [0x00020000] ( CPF_Const )
	unsigned long                                      bReloadingAimInterp : 1;                          		// 0x0BB4 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bDisableAnimatedTransitions : 1;                  		// 0x0BB4 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      m_bRagdollEnteredPendingBodyFallSound : 1;        		// 0x0BB4 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      m_bPowerInvokedLeanOut : 1;                       		// 0x0BB4 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bActive : 1;                                      		// 0x0BB4 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bHeadGearVisible : 1;                             		// 0x0BB4 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      m_bMin1Health : 1;                                		// 0x0BB4 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      m_bPhysicsDamageEnabled : 1;                      		// 0x0BB4 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      m_bPlotProtected : 1;                             		// 0x0BB4 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bSleeping : 1;                                    		// 0x0BB4 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bShouldSpawnWeapons : 1;                          		// 0x0BB4 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bScalePowers : 1;                                 		// 0x0BB4 (0x0004) [0x0000000000002001] [0x20000000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bIsStealthed : 1;                                 		// 0x0BB4 (0x0004) [0x0000000000002001] [0x40000000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bInStealthVolume : 1;                             		// 0x0BB4 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      m_bInvertRagdollRecoverBoneAxis : 1;              		// 0x0BB8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bRecoverDirSwap : 1;                            		// 0x0BB8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bInvertRagdollRecoverDirSwapBoneAxis : 1;       		// 0x0BB8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIsAPlayer : 1;                                   		// 0x0BB8 (0x0004) [0x0000000000002020] [0x00000008] ( CPF_Net | CPF_Transient )
	unsigned long                                      bStorming : 1;                                    		// 0x0BB8 (0x0004) [0x0000000000002020] [0x00000010] ( CPF_Net | CPF_Transient )
	unsigned long                                      bReplicatedWantsToStorm : 1;                      		// 0x0BB8 (0x0004) [0x0000000000002020] [0x00000020] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsFalling : 1;                                   		// 0x0BB8 (0x0004) [0x0000000000002020] [0x00000040] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsDowned : 1;                                    		// 0x0BB8 (0x0004) [0x0000000000002020] [0x00000080] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsDead : 1;                                      		// 0x0BB8 (0x0004) [0x0000000000002020] [0x00000100] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsInRagdollRecovery : 1;                         		// 0x0BB8 (0x0004) [0x0000000000002020] [0x00000200] ( CPF_Net | CPF_Transient )
	unsigned long                                      bMashSuccess : 1;                                 		// 0x0BB8 (0x0004) [0x0000000000002020] [0x00000400] ( CPF_Net | CPF_Transient )
	unsigned long                                      bPlayerInRagdoll : 1;                             		// 0x0BB8 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bReplicateCustomActionInfoToOwner : 1;            		// 0x0BB8 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bHasReplicatedBufferedCustomAction : 1;           		// 0x0BB8 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bInterpolateReplicatedRotation : 1;               		// 0x0BB8 (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	unsigned long                                      bTurnInPlaceRequested : 1;                        		// 0x0BB8 (0x0004) [0x0000000000002001] [0x00008000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bNotifyCoverAlignment : 1;                        		// 0x0BB8 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bBusyConversation : 1;                            		// 0x0BB8 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bAchievementDisruptedGranted : 1;                 		// 0x0BB8 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bAchievementFlyingGranted : 1;                    		// 0x0BB8 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bAchievementFireGranted : 1;                      		// 0x0BB8 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned char                                      CurrentSlotDirection;                             		// 0x0BBC (0x0001) [0x0000000000000000]              
	unsigned char                                      CoverDirection;                                   		// 0x0BBD (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      CoverType;                                        		// 0x0BBE (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      CoverAction;                                      		// 0x0BBF (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      RaceType;                                         		// 0x0BC0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CharacterType;                                    		// 0x0BC1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AffiliationType;                                  		// 0x0BC2 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ChallengeType;                                    		// 0x0BC3 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eRagdollRecoverBoneAxis;                        		// 0x0BC4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eRagdollRecoverDirSwapBoneAxis;                 		// 0x0BC5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eCombatModeFadeoutState;                        		// 0x0BC6 (0x0001) [0x0000000000000000]              
	unsigned char                                      LastReplicatedRadiusDamageInfoTriggerCounter;     		// 0x0BC7 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eTurningDirection;                              		// 0x0BC8 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      m_eAnimStartState;                                		// 0x0BC9 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      m_eAnimStopState;                                 		// 0x0BCA (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      m_eAnimSkidState;                                 		// 0x0BCB (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      m_eGetUpState;                                    		// 0x0BCC (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1841 ];

		return pClassPointer;
	};

	void RemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void AddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void eventNativeRemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void eventNativeAddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void GetMantleInformation ( struct FMantleInfo* OutMantleInfo );
	bool VerifyLandingClear ( struct FMantleInfo* OutMantleInfo );
	bool HandleHitActorInMantle ( class AActor* HitActor, struct FVector HitLocation, struct FVector StartDownTrace, int* bHitSomethingHoriz );
	bool FindMantleDistance ( struct FMantleInfo* OutMantleInfo );
	struct FVector GetInitialFallVelocity ( struct FMantleInfo* OutMantleInfo );
	float GetEstimatedHorizFallDist ( struct FMantleInfo* OutMantleInfo );
	bool CanPerformMantleSlow ( unsigned long bForceLocalSimulation, struct FMantleInfo* OutMantleInfo );
	void OnJoinInProgress ( );
	void UnRegisterJoinInProgressDelegate ( );
	void RegisterJoinInProgressDelegate ( );
	void ClearRecentCoverFlag ( );
	void eventEmergeFromObscuringSpawnEffect ( unsigned long bEnableAI );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void KillOrStasis ( unsigned long bImmediate, class AController* Killer, class UClass* dmgType, struct FString Cause );
	class APawn* FindAttackingPawn ( class AController* instigatedBy, class AActor* DamageCauser );
	bool InFullDecisionMode ( );
	void TryUnLoadCombatGrammar ( );
	void TryLoadCombatGrammar ( );
	void ReleaseReplicatedPowerSubsequentImpact ( );
	void AcquireReplicatedPowerSubsequentImpact ( );
	void ReleaseReplicatedCustomActionImpact ( );
	void AcquireReplicatedCustomActionImpact ( );
	class USkeletalMeshComponent* GetHeadSkelMeshComponent ( );
	void TakeFallingDamage ( );
	void SetDesiredSpeed ( float fSpeedScaling );
	void ReplicateAnimatedReaction ( int CustomActionType, struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, class UClass* DamageType );
	void ReplicatedRadiusDamageInfoUpdated ( );
	void ReplicateRadiusDamage ( float Damage, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	void SetAbilityTimeStamp ( struct FName AbilityName );
	float GetAbilityTimeStamp ( struct FName AbilityName );
	void WeaponStoppedFiring ( class AWeapon* InWeapon, unsigned long bViaReplication );
	void WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation );
	void CalcIdealCoverPos ( float SlotPct, struct FVector* IdealPosition, struct FRotator* IdealRotation );
	void SetShadowMode ( unsigned char ShadowMode, unsigned long EnableShadowCasting );
	void EnableLeftHandIK ( );
	void DisableLeftHandIK ( );
	void UpdateAimOffset ( struct FVector2D NewAimOffsetPct, float DeltaTime );
	struct FVector GetAimOffsetOrigin ( );
	void eventAdjustInventoryResource ( unsigned char eResourceType, int nAmt, unsigned long bNotifyTicker );
	int eventGetInventoryResource ( unsigned char eResourceType );
	void AdjustCredits ( int i );
	void AdjustMediGel ( int i );
	struct FString GetActorGameName ( );
	bool FindNearestOpenLocation ( struct FVector vStartLocation, class APawn* oTarget, int nMaxShellsToCheck, struct FVector* vFoundLocation );
	bool HasAnyShieldResistance ( );
	bool HasResistance ( unsigned char Resistance );
	unsigned char eventGetAvailableResistance ( );
	unsigned char GetCurrentResistance ( );
	void SetResistance ( unsigned char Resistance, unsigned long bValue );
	bool CanBeBioticCharged ( );
	void OnSquadMemberAdded ( class APawn* Pawn );
	void OnPowersLoaded ( );
	void StartCrouch ( float HeightAdjust );
	void EndCrouch ( float HeightAdjust );
	void ManageRagdolls ( );
	void eventUpdateShadowSettings ( unsigned long bInWantShadow );
	bool StopVocalization ( );
	void eventSetRTPCHelmetIsEnabled ( class UWwiseAudioComponent* WwiseComponent );
	void eventSFXSetAudioComponentRTPCs ( class UActorComponent* pWwiseAudioComponent );
	class UTexture2D* eventGetGUIIcon ( );
	bool FindBumpAdjust ( class AActor* oHitActor, struct FVector* vHitNormal );
	void PlaySoundForOwnerOnly ( class UWwiseBaseSoundObject* InSoundCue );
	class UWwiseAudioComponent* GetCurrentVOAudio ( );
	void CollectorPossess ( );
	void GenerateRegenVocalization ( );
	void TossWeapon ( class AWeapon* Weap, struct FVector ForceVelocity );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventClearRBCallbacks ( );
	void RegisterRBCallback ( struct FScriptDelegate RBCallback, unsigned long bDisablePhysicsDamage, int nPriority );
	void SetTicketDuration ( int nID, float fDuration );
	bool HasValidAttackTicket ( int nID );
	void ReleaseAttackTicket ( int nID, unsigned long bKillTicket );
	int AcquireAttackTicket ( int nCost );
	int eventGetMaxTargetTickets ( );
	int eventGetMaxAttackTickets ( );
	void ReleaseTargetTicket ( int nCost );
	bool AcquireTargetTicket ( int nCost );
	float GetTimeSinceLastRender ( );
	void eventSyncPawnAppearance ( class ABioPawn* pSrcPawn );
	void eventCopyPawnAppearance ( class ABioPawn* pSrcPawn );
	void RemoveTalentPoints ( int nPoints );
	void AddTalentPoints ( int nPoints );
	bool eventEnsurePhysics ( unsigned char NewMode );
	void OutputState ( );
	void PlayFOVO ( class UWwiseEvent* Sound );
	void BreakStealth ( );
	float eventGetWeaponRange ( unsigned char RangeType );
	void CalculateMeshTranslationOffset ( float DeltaSeconds );
	void SetMeshTranslationOffset ( struct FVector NewOffset, unsigned long bForce );
	void ForceGroundConform ( );
	float CalculateDesiredGroundConformHeight ( struct FVector* vNewLocation );
	void GetAdjustedMoveDirection ( class AActor* MoveTarget, struct FVector* Dest, struct FVector* Direction );
	void ValidateReactionsForGibs ( TArray< unsigned char >* OutActions );
	bool CanGib ( );
	bool eventGetPossibleReactions ( unsigned char ReactionType, struct FName HitPart, class AController* instigatedBy, struct FVector Momentum, TArray< unsigned char >* OutActions, struct FTraceHitInfo* HitInfo );
	bool eventIsDeathReaction ( unsigned char ReactionType );
	bool RequestWeaponReaction ( class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo* HitInfo );
	bool RequestReaction ( unsigned char ReactionType, class AController* instigatedBy, struct FVector Momentum, struct FTraceHitInfo* HitInfo );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void GibHead ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType );
	bool eventAddRagdollImpulse ( struct FVector impulse, class AController* instigatedBy, struct FVector HitLocation, unsigned long bIgnorePhysicsThreshold, struct FName HitBone, unsigned long bVelChange, unsigned char AnimatedRagdoll );
	bool AddForce ( struct FVector impulse, class AController* instigatedBy, struct FVector HitLocation, unsigned long bIgnorePhysicsThreshold, struct FName HitBone, unsigned long bVelChange );
	bool CanHavePhysicsImpulse ( );
	bool eventIsReturningToPlaypen ( );
	bool CanSyncTarget ( class ABioPawn* SyncTarget, struct FName SyncActionName );
	void SetCrouchStateInstantly ( unsigned long bDoCrouch );
	bool eventTryEarlyMantle ( class ANavigationPoint* Start, class ANavigationPoint* End );
	bool SpecialMoveTo_MoveAlongCover ( class ACoverSlotMarker* Start, class ACoverSlotMarker* End );
	bool SpecialMoveTo_GapJump ( class ANavigationPoint* Start, class ANavigationPoint* End );
	bool SpecialMoveTo_LadderClimb ( class ANavigationPoint* Start, class ANavigationPoint* End );
	bool SpecialMoveTo_Leap ( class ANavigationPoint* Start, class ANavigationPoint* End );
	bool SpecialMoveTo_ClimbWall ( class ANavigationPoint* Start, class ANavigationPoint* End );
	bool SpecialMoveTo_JumpDown ( class ANavigationPoint* Start, class ANavigationPoint* End );
	bool SpecialMoveTo_Boost ( class ANavigationPoint* Start, class ANavigationPoint* End );
	bool SpecialMoveTo_CoverSlip ( class ANavigationPoint* Start, class ANavigationPoint* End );
	bool SpecialMoveTo_SwatTurn ( class ANavigationPoint* Start, class ANavigationPoint* End );
	bool SpecialMoveTo_ClimbDown ( class ANavigationPoint* Start, class ANavigationPoint* End );
	bool SpecialMoveTo_ClimbUp ( class ANavigationPoint* Start, class ANavigationPoint* End );
	bool SpecialMoveTo_Mantle ( class ANavigationPoint* Start, class ANavigationPoint* End );
	bool eventCanDoCoverCustomAction ( class UReachSpec* Path );
	bool SpecialMoveTo ( class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next );
	void StopReloadWeapon ( );
	void ReloadWeapon ( );
	void MashSuccessUpdated ( );
	void ServerMashSuccess ( class ABioPawn* OtherPawn );
	bool CustomActionMessageEvent ( struct FName EventName, class UObject* Sender );
	void CustomActionEnded ( );
	void InterruptCustomAction ( );
	void EndCustomAction ( );
	void eventDoCustomAction ( int NewAction, unsigned long bForced, int PowerCustomAction );
	void AnimNotifyBreakout ( );
	void TerminateCurrentPowerCustomAction ( );
	void eventTerminateCurrentCustomAction ( );
	void IsDeadUpdated ( );
	void IsDownedUpdated ( );
	void CustomActionAnimatedReactionUpdated ( );
	void PowerComboImpactInfoUpdated ( );
	void PowerComboInfoUpdated ( );
	void PowerSubsequentImpactInfoUpdated ( unsigned long bKeepReplicationOrder );
	void CustomActionImpactInfoUpdated ( unsigned long bKeepReplicationOrder );
	void CustomActionInfoUpdated ( );
	void WeaponImpactInfoUpdated ( );
	void UpdateCAPowerComboImpactReplicationTime ( );
	void UpdateCAPowerComboReplicationTime ( );
	bool StartPowerCustomAction ( int PowerCustomAction, class UObject* Target, struct FVector TargetLocation, unsigned long bForced );
	bool eventStartCustomAction ( int NewAction, class APawn* Sync, unsigned long bForced, int PowerCustomAction );
	bool CanOverrideCurrentCustomAction ( int NewAction, int PowerCustomAction );
	bool VerifyCAHasBeenInstanced ( int CAIndex, int PowerCustomAction );
	bool eventCanDoCustomAction ( int CAction, class APawn* Sync, unsigned long bForced, int PowerCustomAction );
	bool GetCurrentCustomAction ( class UBioCustomAction** pAction );
	void AnimNotify ( class UAnimNodeSequence* SeqNode, class UBioAnimNotify_CustomAction* NotifyObject );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void SetBodyStanceAnimLooping ( unsigned long bNewLooping, struct FBodyStance* Stance );
	void SetBodyStanceAnimEndNotification ( unsigned long bNewStatus, struct FBodyStance* Stance );
	void SetBodyStanceRootRotationOption ( unsigned char RPitch, unsigned char RYaw, unsigned char RRoll, struct FBodyStance* Stance );
	void SetBodyStanceRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ, struct FBodyStance* Stance );
	void BS_ScalePlayRate ( float RateScale, struct FBodyStance* Stance );
	void BS_SetPlayingFlag ( unsigned long bNewPlaying, struct FBodyStance* Stance );
	void BS_AccelerateBlend ( float BlendAmount, struct FBodyStance* Stance );
	void BS_SetPlayRate ( float NewRate, struct FBodyStance* Stance );
	float BS_GetPlayRate ( struct FBodyStance* Stance );
	float BS_GetTimeLeft ( struct FBodyStance* Stance );
	void BS_SetPosition ( float Position, struct FBodyStance* Stance );
	void StopAllBodyStances ( float BlendOutTime );
	void StopBodyStance ( float BlendOutTime, struct FBodyStance* Stance );
	bool IsPlayingBodyStance ( struct FBodyStance* Stance );
	void PlayBodyStanceByDuration ( float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, struct FName GroupName, unsigned char BlendType, struct FBodyStance* Stance );
	float PlayBodyStance ( float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, struct FName GroupName, float StartTime, unsigned char BlendType, struct FBodyStance* Stance );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void ClearAnimNodes ( );
	void eventRecacheAnimNodes ( );
	void CacheAnimNodes ( );
	void OnMultiLand ( class UBioSeqAct_MultiLand* Action );
	void OnOrbitalGame ( class UBioSeqAct_OrbitalGame* Action );
	void NotifyArmourAppearanceUpdated ( int ArmourIdx );
	void eventNotifyLimbDetached ( unsigned char ePartGroup );
	struct FName GetRandomImpactBone ( );
	struct FName GetPartFromHit ( struct FTraceHitInfo* HitInfo );
	bool GetStandardReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	bool GetStaggerReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	bool GetKnockbackReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	bool GetMeleeReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	unsigned char GetPowerResistance ( class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, class UClass* DamageType, float* Damage, struct FVector* Force, class AActor** TargetOverride );
	void NotifyImpactedByPower ( class Usfxpowercustomaction* Power, class ABioPawn* Caster );
	bool eventResurrect ( float PercentOfHealthRegained, unsigned long bIsInstantaneous );
	void eventRecoverFromBleedout ( unsigned long bResetHealth );
	float GetShieldRegenPct ( );
	float GetShieldRegenDelay ( );
	float eventGetShieldPct ( );
	float eventGetMaxShields ( );
	float eventGetCurrentShields ( );
	float GetHealthPct ( );
	float eventGetMaxHealth ( );
	float eventGetCurrentHealth ( );
	class Asfxshield_base* GetShields ( );
	float eventGetLastHealthGateTime ( );
	float eventGetLastShieldGateTime ( );
	void ShieldsDown ( );
	void ShieldsUp ( );
	bool IsPlayingDeathReaction ( );
	void PlayDeathReaction ( );
	bool HasDeathReaction ( );
	bool IsAtRest ( );
	void eventTornOff ( );
	void OnCorpseDestroyed ( );
	bool CanPlayDeathEffect ( );
	void PlayDeathEffect ( class UClass* SFXDamageType, class AController* Killer );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void PlayDeathVocalization ( class ABioPawn* Killer );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void eventScriptedDeath ( );
	void PlayNewEnemySound ( );
	void PlayAmbientSound ( );
	void PlayDyingSound ( );
	class USFXGameEffect* GetGameEffect ( struct FName GEName );
	bool HasGameEffect ( struct FName GEName );
	void eventOnDeathAnimationFinished ( );
	void gibbedBy ( class AActor* Other );
	void OnTeleport ( class USeqAct_Teleport* Action );
	class UParticleSystem* GetSpecificFootStepEffect ( class USFXPhysicalMaterialFootSteps* FootStepMat, int FootDown );
	class UParticleSystem* GetFootStepEffect ( class UPhysicalMaterial* PhysMat, int FootDown );
	void PlayStepEffect ( int FootDown, struct FTraceHitInfo HitInfo, float Loudness );
	void eventPrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	void eventPlayFootStepSound ( int FootDown );
	void SetScale ( float fScale );
	void BeginMovementControl ( class UInterpGroup* InInterpGroup );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void OnToggle ( class USeqAct_Toggle* Action );
	void ClearUnregisteredAnimsets ( );
	void ClearRegisteredCustomAnimsets ( struct FName nmSetGroupName );
	void RegisterCustomAnimset ( struct FName nmSetGroupName, class UAnimSet* oAnim );
	void eventNotifyRagdollRecoverAnimationComplete ( );
	void eventForceEndRagdoll ( );
	void eventOnLeaveRagdoll ( );
	void eventOnEnterRagdoll ( );
	void MoveToRagdollRecoverStartPosition ( );
	void PostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventSetShouldCrouch ( unsigned long bCrouch );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	void Destroyed ( );
	void LoadCharacterClassData ( );
	void RemoveLifeTimeCrust ( );
	void SetLifeTimeCrust ( class URvrClientEffectInterface* CE_Crust );
	void eventAnimTreeUpdated ( class USkeletalMeshComponent* SkelMesh );
	void CacheCrucialAnimNodes ( );
	void PostBeginPlay ( );
	void EnsurePawnIsUpright ( unsigned long bResetAI, unsigned long bTeleport );
	void SafeSetLocation ( struct FVector vDest );
	float GetFractionOfEffectsMaterialEnabled ( );
	void SetFractionOfEffectsMaterialEnabled ( float FractionEnabled );
	struct FName GetEffectsMaterialType ( class USkeletalMeshComponent* Component );
	void SetEffectsMaterialType ( struct FName EffectsMaterialType );
	void AnimNodeBlendComplete ( struct FName sBlendName, int nChild );
	void AnimNodePlayFinished ( struct FName sBlendName );
	bool CanPlayAnimNode ( struct FName sBlendName, int nFlags, float* fWeight );
	bool GetAnimLengthAndPos ( struct FName sAnimName, float* fAnimLength, float* fAnimPos );
	bool RequestTurnInPlace ( struct FRotator rDesDir );
	void BioSetDesiredRotation ( struct FRotator rDesiredRotation, unsigned long bForce );
	void StopMovement ( unsigned long bStopRotation );
	unsigned char GetWalkingSpeedMode ( );
	bool IsWalking ( );
	bool CanRagdoll ( );
	bool TermRagdoll ( );
	bool InitRagdoll ( );
	bool IsInvisible ( );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetVectorParameterValue ( struct FName ParameterName, struct FColor* Value );
	void OnCastAt ( class APawn* oAttacker, class Usfxpowercustomaction* Power );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	void TakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void eventNotifyFallingAnimationComplete ( );
	void Landed ( struct FVector HitNormal, class AActor* FloorActor );
	void StartFall ( );
	void Falling ( );
	void Tick ( float DeltaTime );
	void HandleWeaponFiring ( );
	void eventFireSingleShot ( );
	bool eventCanFireWeapon ( );
	bool CanSwitchWeapons ( );
	bool CanReload ( );
	bool IsPerformingBlockingAction ( );
	bool IsPerformingCustomAction ( unsigned long bOnlyCheckBlockingActions );
	bool IsSwitchingWeapons ( unsigned long bBlendOut );
	bool IsReloading ( unsigned long bCheckReloadRequest, unsigned long bBlendOut );
	bool IsUsingPower ( );
	void StartFirstUsePowerDelay ( );
	void ScaleShields ( );
	void ScaleWeapons ( class USFXLoadoutData* ChkLoadout, int ScaleLevel );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	bool ReplaceWeapon ( unsigned char WeaponCategory, class UClass* NewWeapon, unsigned long bEquipWeapon );
	void OnGiveWeapon ( class USFXSeqAct_GiveWeapon* inAction );
	void OnGiveInventory ( class USeqAct_GiveInventory* inAction );
	int GetScaledLevel ( );
	void ScaleEquipment ( int PlayerLevel, class USFXLoadoutData* oLoadout );
	void GenerateInventoryFromLoadout ( class USFXLoadoutData* oLoadout );
	void AddDefaultInventory ( );
	bool eventSetWeaponImmediatelyByClass ( class UClass* WpnClass );
	bool eventSetWeaponImmediately ( class ASFXWeapon* Wpn );
	class ASFXWeapon* GetWeaponForSwitch ( class UClass* cWeapon );
	struct FName eventGetRightHandSocketName ( );
	void eventSetWeaponFromSlot ( unsigned char eSlot );
	unsigned char eventGetCurrentWeaponCharacterSlot ( );
	void FadeOutReloadAnim ( );
	void UnregisterTemporaryAnim ( class UAnimSet* TempAnim, float fTimeLeft, unsigned long bForceRemove );
	void RegisterTemporaryAnim ( class UAnimSet* TempAnim );
	void RmvAnimSet ( class UAnimSet* Set );
	void AddAnimSet ( class UAnimSet* Set );
	void SetupWeaponAnimations ( class ASFXWeapon* NewWeapon, class ASFXWeapon* OldWeapon, unsigned long bDrawOnly );
	struct FVector GetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	struct FVector eventGetWeaponIdlePosition ( );
	struct FVector eventGetPulledInMuzzleLocation ( class ASFXWeapon_NativeBase* SW, struct FVector AimDir );
	bool GetWeaponHandPosition ( struct FVector* HandLoc, struct FRotator* HandRot );
	struct FVector GetPawnViewLocation ( );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void RootMotionRelease ( class UAnimNode* Node );
	void RootMotionOverride ( class UAnimNode* Node, unsigned char RMMode, unsigned char RMRMode );
	bool IsAtRightEdgeSlot ( float InLimit, unsigned long bMustLean );
	bool IsAtLeftEdgeSlot ( float InLimit, unsigned long bMustLean );
	int PickClosestCoverSlot ( unsigned long bRequireOverlap, float RadiusScale, unsigned long bIgnoreCurrentCoverAction );
	bool IsOnACoverSlot ( );
	void eventReachedCoverSlot ( int SlotIdx );
	int GetSlotIdxByPct ( );
	void SetCoverDirection ( unsigned char NewCoverDirection );
	bool IsPoppingUp ( );
	bool IsPeeking ( );
	bool IsBlindFiring ( );
	bool IsLeaning ( );
	void eventSetCoverAction ( unsigned char NewCoverAction );
	void SetCoverType ( unsigned char NewCoverType );
	void eventLeaveCover ( );
	unsigned char GetCoverTypeFor ( struct FCovPosInfo Cover );
	unsigned char FindCoverType ( );
	void SetCoverInfo ( class ACoverLink* Link, int SlotIdx, int LeftIdx, int RightIdx, float SlotPct );
	void SetCoverInfoFromLocation ( class ACoverLink* Link, int SlotIdx );
	void eventNotifyFinishedCoverAlign ( );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	unsigned char GetDefaultCoverAction ( );
	bool CanCombat ( );
	bool CanExplore ( );
	bool InCombat ( );
	void UnPossessed ( );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	bool CanUseAnchor ( class ANavigationPoint* Nav );
	bool FitCollision ( );
	bool DoesCoverStateAllowImmediateFire ( );
	bool CanDoCoverAction ( unsigned char CovAction, unsigned long bPrecise, unsigned long bTestCamera );
	bool IsInCoverLeaning ( );
	bool IsInCover ( );
	void SetAnimatedTransitionPending ( );
	bool IsAnimatedTransitionPending ( );
	void EndAnimatedTransition ( );
	void BeginAnimatedTransition ( );
	bool IsInAnimatedTransition ( );
	void HACKResetRootMotion ( );
	void HardResetActionAndAnimationState ( );
	void SoftResetMovementAndAnimationState ( );
	bool GetAimNodeLocation ( unsigned char AimNode, unsigned long bLogError, struct FVector* AimLocation );
	void UnWeldPhysicsAssetInstance ( );
	void WeldPhysicsAssetInstance ( );
	bool CanRagdollReachAnchor ( class ANavigationPoint* Nav );
	bool ValidateRagdoll ( );
	bool eventPlaySpawnEntrance ( );
	void ClientPlayAnimatedReaction ( int CustomActionType, struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, class UClass* DamageType, unsigned char RandomRoll );
	void ServerInterruptCustomAction ( int CustomActionType, int PowerCustomAction );
	void FlashLocationUpdated ( class AWeapon* InWeapon, struct FVector InFlashLocation, unsigned long bViaReplication );
	void SquadUpdated ( );
	void DeferedEnsurePawnHasLandedFromRagdoll ( );
	void eventReplicatedEvent ( struct FName VarName );
	void DecrementRagdollCount ( );
	void IncrementRagdollCount ( );
	bool IsHumanControlled ( class AController* PawnController );
	class ABioPawn* eventGetDriver ( );
	bool IsPlayerPawn ( );
	bool eventIsSelectedWeaponOneHanded ( );
	void eventSetHeadGearVisibility ( unsigned long bVisible );
	void eventCollectAnimListForCooking ( class ABioPawn* Pawn, TArray< struct FName >* OutResults );
	void DamageCallback ( class APawn* oPawn, float fDamage, class AController* instigatedBy, class UClass* DamageType, class AActor* DamageCauser );
	void RBCollisionCallback ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir );
};

UClass* ABioPawn::pClassPointer = NULL;

// Class SFXGame.BioScout
// 0x0004 (0x04D8 - 0x04D4)
class ABioScout : public AScout
{
public:
	unsigned long                                      m_bAggressivePathPruning : 1;                     		// 0x04D4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1842 ];

		return pClassPointer;
	};

};

UClass* ABioScout::pClassPointer = NULL;

// Class SFXGame.SFXCharacterClass_NativeBase
// 0x0038 (0x0074 - 0x003C)
class USFXCharacterClass_NativeBase : public UObject
{
public:
	TArray< class UClass* >                            CustomActionClasses;                              		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            PowerCustomActionClasses;                         		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     CameraHookOffset;                                 		// 0x0054 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CameraArmOffset;                                  		// 0x0060 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraHookScale;                                  		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraArmScale;                                   		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1843 ];

		return pClassPointer;
	};

	void CollectAnimListForCooking ( TArray< struct FName >* OutResults );
};

UClass* USFXCharacterClass_NativeBase::pClassPointer = NULL;

// Class SFXGame.SFXCompositeSkeletalMesh
// 0x0018 (0x0380 - 0x0368)
class USFXCompositeSkeletalMesh : public USkeletalMesh
{
public:
	TArray< struct FString >                           SourceMeshNames;                                  		// 0x0368 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBoneOverrideInfo >                 OverrideInfo;                                     		// 0x0374 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1844 ];

		return pClassPointer;
	};

	class USFXCompositeSkeletalMesh* MergeMeshes ( class USkeletalMesh* BaseMesh, TArray< class USkeletalMesh* > AdditionalMeshes, class USkeletalMeshComponent* HeadMeshComponent );
	bool MatchesMerge ( class USkeletalMesh* BaseMesh, TArray< class USkeletalMesh* > AdditionalMeshes, class USkeletalMeshComponent* HeadMeshComponent );
};

UClass* USFXCompositeSkeletalMesh::pClassPointer = NULL;

// Class SFXGame.SFXKActor
// 0x000C (0x02F0 - 0x02E4)
class ASFXKActor : public AKActor
{
public:
	float                                              m_fPhysicsSoundLastTimePlayed;                    		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_aLastCollidedActor;                             		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bImmovable : 1;                                   		// 0x02EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKinematicUntilMoved : 1;                         		// 0x02EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1845 ];

		return pClassPointer;
	};

	void ImpulseFragments ( struct FVector Source, struct FVector Momentum, struct FVector Extent, unsigned long bVelChange );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	void eventTakeDamage ( float Damage, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void TakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	void eventExceededPhysicsThreshold ( class AActor* instigatedBy );
};

UClass* ASFXKActor::pClassPointer = NULL;

// Class SFXGame.BioPhysicsActor
// 0x000C (0x02FC - 0x02F0)
class ABioPhysicsActor : public ASFXKActor
{
public:
	float                                              m_fHealth;                                        		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCurrentHealth;                                 		// 0x02F4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bToughPlaceable : 1;                            		// 0x02F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1846 ];

		return pClassPointer;
	};

	void eventTakeDamage ( float Damage, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void TakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	void ChangeMaterialParameters ( );
};

UClass* ABioPhysicsActor::pClassPointer = NULL;

// Class SFXGame.SFXKActorSpawnable
// 0x0008 (0x02F0 - 0x02E8)
class ASFXKActorSpawnable : public AKActorSpawnable
{
public:
	float                                              m_fPhysicsSoundLastTimePlayed;                    		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_aLastCollidedActor;                             		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1847 ];

		return pClassPointer;
	};

};

UClass* ASFXKActorSpawnable::pClassPointer = NULL;

// Class SFXGame.SFXKAsset
// 0x0008 (0x0210 - 0x0208)
class ASFXKAsset : public AKAsset
{
public:
	float                                              m_fPhysicsSoundLastTimePlayed;                    		// 0x0208 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_aLastCollidedActor;                             		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1848 ];

		return pClassPointer;
	};

};

UClass* ASFXKAsset::pClassPointer = NULL;

// Class SFXGame.BioCodexMap
// 0x0078 (0x00B4 - 0x003C)
class UBioCodexMap : public UObject
{
public:
	struct FMap_Mirror                                 SectionMap;                                       		// 0x003C (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 PageMap;                                          		// 0x0078 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1849 ];

		return pClassPointer;
	};

};

UClass* UBioCodexMap::pClassPointer = NULL;

// Class SFXGame.BioDiscoveredCodexMap
// 0x003C (0x0078 - 0x003C)
class UBioDiscoveredCodexMap : public UObject
{
public:
	struct FMap_Mirror                                 DiscoveredCodex;                                  		// 0x003C (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1850 ];

		return pClassPointer;
	};

	void Clear ( );
};

UClass* UBioDiscoveredCodexMap::pClassPointer = NULL;

// Class SFXGame.BioGlobalVariableTable
// 0x0204 (0x0240 - 0x003C)
class UBioGlobalVariableTable : public UObject
{
public:
	struct FMap_Mirror                                 IntVariables;                                     		// 0x003C (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 FloatVariables;                                   		// 0x0078 (0x003C) [0x0000000000001000]              ( CPF_Native )
	TArray< int >                                      BoolVariables;                                    		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FNewGameCanonPlot >                 ME1CanonPlotVariables;                            		// 0x00C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FNewGameCanonPlot >                 ME2CanonPlotVariables;                            		// 0x00CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCopyPlot >                         ME1ToME3PlotCopy;                                 		// 0x00D8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCopyPlot >                         ME2ToME3PlotCopy;                                 		// 0x00E4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FPlotIdenfitier >                   NewGamePlusPlotsToPersist;                        		// 0x00F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FTimedPlotUnlock_t >                TimedPlotUnlocks;                                 		// 0x00FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                ME1PlotTable_IndexOffset;                         		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME1PlotTable_Bool_CutoffIndex;                    		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME1PlotTable_Int_CutoffIndex;                     		// 0x0110 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME1PlotTable_Float_CutoffIndex;                   		// 0x0114 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3_Plots_Utility_Player_Info_Paragon;            		// 0x0118 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3_Plots_Utility_Player_Info_Renegade;           		// 0x011C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3_Plots_Utility_Player_Info_ReputationPoints;   		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3_Plots_Utility_Player_Info_ME2Paragon;         		// 0x0124 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3_Plots_Utility_Player_Info_ME2Renegade;        		// 0x0128 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3_Plots_Utility_Player_Info_Childhood;          		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3_Plots_Utility_Player_Info_Reputation;         		// 0x0130 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3_Plots_Utility_Player_Info_PersuadeMultiplier; 		// 0x0134 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3_Plots_Utility_Player_Info_Character_Class;    		// 0x0138 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3_Plots_Utility_Player_Info_Female_Player;      		// 0x013C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3_Plots_Bool_Is_ME2_Import;                     		// 0x0140 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3_Plots_Bool_Is_ME1_Import;                     		// 0x0144 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3_Plots_Int_ME3_NewGamePlus_Count;              		// 0x0148 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                PS3DarkHorseME1PlayedPlotCheck_Bool;              		// 0x014C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME2__ME1_Plots_for_ME2__Background_and_Relationships__Kaidan_romance_True;		// 0x0150 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME2__ME1_Plots_for_ME2__Background_and_Relationships__Ashley_romance_True;		// 0x0154 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME2__ME1_Plots_for_ME2__Background_and_Relationships__Liara_romance_True;		// 0x0158 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME2__ME1_Plots_for_ME2__Background_and_Relationships__NoRomance_True;		// 0x015C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME2__ME1_Plots_for_ME2__CH2_Virmire__Ash_died;    		// 0x0160 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME2__ME1_Plots_for_ME2__CH2_Virmire__Kaidan_died; 		// 0x0164 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME2__ME1_Plots_for_ME2__CH2_Noveria__Rachni_Alive;		// 0x0168 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME2__ME1_Plots_for_ME2__CH2_Virmire_Wrex_Died;    		// 0x016C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME2__ME1_Plots_for_ME2__CH2_Virmire_Ash_Killed_Wrex;		// 0x0170 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME2__ME1_Plots_for_ME2__CH4_Star_Citadel__Council_Dead;		// 0x0174 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME2__ME1_Plots_for_ME2__CH4_Star_Citadel__Council_Alive;		// 0x0178 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME2__ME1_Plots_for_ME2__CH4_Star_Citadel__Udina_Chosen;		// 0x017C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME2__ME1_Plots_for_ME2__CH4_Star_Citadel__Anderson_chosen;		// 0x0180 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__Global_Plots__Henchman_Kaidan__Romance_Buddy_dialog_count;		// 0x0184 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__Global_Plots__Henchman_Kaidan__Romance_active;		// 0x0188 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__Global_Plots__Henchman_Ash__Romance_Buddy_dialog_count;		// 0x018C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__Global_Plots__Henchman_Ash__romance_active;		// 0x0190 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__Global_Plots__Henchman_Liara__Romance_Buddy_dialog_count;		// 0x0194 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__Global_Plots__Henchman_Liara__Romance_active;		// 0x0198 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__CH2_Virmire__The_Choice__Rescued_Kaidan;		// 0x019C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__CH2_Virmire__The_Choice__Rescued_Ash;		// 0x01A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__CH2_Noveria__Rachni_Queen__Queen_Dealt_With__Queen_Released;		// 0x01A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__CH2_Noveria__Rachni_Queen__Queen_Dealt_With__Queen_eliminated;		// 0x01A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__CH2_Virmire__Krogan_conundrum__Failure__Failure_KilledBy_Player;		// 0x01AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__Utility__Henchman__InParty__Krogan;		// 0x01B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__Utility__Henchman__InParty__HumanMale;		// 0x01B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__Utility__Henchman__InParty__HumanFemale;		// 0x01B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__CH4_Star_Citadel__Final_Choice__Choice_Is_Made__Save_the_Council;		// 0x01BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__CH4_Star_Citadel__Final_Choice__Choice_Is_Made__Destroy_the_Council;		// 0x01C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__CH4_Star_Citadel__Final_Choice__Chose_ambassador;		// 0x01C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__CH4_Star_Citadel__Final_Choice__Chose_Anderson;		// 0x01C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__CH2_Virmire__Krogan_conundrum__Failure__Failure_KilledBy_Ashley;		// 0x01CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME1_Plots_for_ME3__CH2_Virmire__Krogan_conundrum__Failure__Failure_AshKilledWithoutPermission;		// 0x01D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Loyalty_Missions__Professor_Loyalty__Mission_Complete__Saved_Data;		// 0x01D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Loyalty_Missions__Professor_Loyalty__Mission_Complete__Destroyed_Data;		// 0x01D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Loyalty_Missions__Geth_Loyalty__Heretic_Resolution__Blow_Them_Up;		// 0x01DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Loyalty_Missions__Geth_Loyalty__Heretic_Resolution__Rewrite_Them;		// 0x01E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Act_3__Final_Decision__Work_with_Cerberus;		// 0x01E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Act_3__Final_Decision__Destroy_Base;		// 0x01E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Vixen;		// 0x01EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Leading;		// 0x01F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Grunt;		// 0x01F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Assassin;		// 0x01F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Veteran;		// 0x01FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Thief;		// 0x0200 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Mystic;		// 0x0204 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Professor;		// 0x0208 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Geth;		// 0x020C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Tali;		// 0x0210 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Convict;		// 0x0214 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Utility__Henchmen__In_Party__Garrus;		// 0x0218 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Global__Henchmen__Vixen__Relationship;		// 0x021C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Global__Henchmen__Garrus__Relationship;		// 0x0220 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Global__Henchmen__Leading__Relationship;		// 0x0224 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Global__Henchmen__Assassin__Relationship;		// 0x0228 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Global__Henchmen__Convict__Relationship;		// 0x022C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Global__Henchmen__Tali__Relationship;		// 0x0230 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ME3__ME2_Plots_for_ME3__Global__Achievements__ChangedDifficulty;		// 0x0234 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UBio2DA*                                     oNameLookupTable;                                 		// 0x0238 (0x0004) [0x0000000000000000]              
	class UBio2DA*                                     AchievementTable;                                 		// 0x023C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1851 ];

		return pClassPointer;
	};

	void ClearAllVariables ( unsigned long bPersistME1ME2plots );
	unsigned char MajorPlot_ME2_Romance ( );
	unsigned char MajorPolt_ME1_Romance ( );
	int MajorPlot_ME2_NumberOfSuicideMissionSurvivors ( );
	unsigned char MajorPlot_ME2_CollectorBaseStatus ( );
	unsigned char MajorPlot_ME2_HerteticsStatus ( );
	bool MajorPlot_ME2_SavedMaelonsData ( );
	bool MajorPlot_ME2_DestroyedMaelonsData ( );
	bool MajorPlot_ME1_SavedTheCouncil ( );
	unsigned char MajorPlot_ME1_WrexStatus ( );
	bool MajorPlot_ME1_VirmireSurvivor_IsAsh ( );
	bool MajorPlot_ME1_RachniiQueenSaved ( );
	void* GetStrRefByName ( struct FName nmLabel );
	void eventEnumeratePersonalizationVars ( TArray< int >* Vars );
	void AddCustomElementListPlotVars ( TArray< struct FCustomizableElement >* Elements, TArray< int >* Vars );
	void DoME3NewGamePlusImport ( class USFXSaveGame* NewGamePlusSave );
	void MergeME1PlotRecord ( struct FME1PlotTableRecord* me1Plots );
	void FixME1PlotsDuringME2PlotImport ( );
	void DoDarkHorseME1PlotCopyAndPlotLogicFix ( );
	void DoME2PlotImport ( class USFXSaveGame* LegacyImportSaveGame );
	void CopyME2PlotData ( class USFXSaveGame* LegacyImportSaveGame );
	void CopyPlots ( TArray< struct FCopyPlot > toCopy );
	void GetPlayerPlotData ( struct FPlayerInfoEx* PlayerData );
	void SetPlayerPlotData ( struct FPlayerInfoEx* PlayerData );
	void ApplyCanonPlots ( TArray< struct FNewGameCanonPlot > aCanonPlotVariables );
	void SetNewGamePlotStates ( class USFXSaveGame* LegacyImportSaveGame, class USFXSaveGame* PlusImportSaveGame, unsigned long bIncludePlayerVariables, struct FPlayerInfoEx* PlayerData );
	void OnSendMessageComplete ( int messageId, TArray< int > messageIds, int errorCode );
	void SetFloatByName ( struct FName nmLabel, float fValue );
	float GetFloatByName ( struct FName nmLabel );
	void SetIntByName ( struct FName nmLabel, int nValue );
	int GetIntByName ( struct FName nmLabel );
	void SetBoolByName ( struct FName nmLabel, unsigned long bValue );
	bool GetBoolByName ( struct FName nmLabel );
	void SetFloat ( int nIndex, float fValue, unsigned long bSkipAllAdditionalProcessing );
	float GetFloat ( int nIndex );
	void SetInt ( int nIndex, int nValue, unsigned long bSkipAllAdditionalProcessing );
	int GetInt ( int nIndex );
	void SetBool ( int nIndex, unsigned long bValue, unsigned long bEvaluateAchievement, unsigned long bSkipAllAdditionalProcessing );
	bool GetBool ( int nIndex );
};

UClass* UBioGlobalVariableTable::pClassPointer = NULL;

// Class SFXGame.BioOutcomeMap
// 0x003C (0x0078 - 0x003C)
class UBioOutcomeMap : public UObject
{
public:
	struct FMap_Mirror                                 OutcomeMapping;                                   		// 0x003C (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1852 ];

		return pClassPointer;
	};

};

UClass* UBioOutcomeMap::pClassPointer = NULL;

// Class SFXGame.BioQuestMap
// 0x00F0 (0x012C - 0x003C)
class UBioQuestMap : public UObject
{
public:
	struct FMap_Mirror                                 QuestMap;                                         		// 0x003C (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 TaskEvalMap;                                      		// 0x0078 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 IntTaskEvalMap;                                   		// 0x00B4 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 FloatTaskEvalMap;                                 		// 0x00F0 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1853 ];

		return pClassPointer;
	};

};

UClass* UBioQuestMap::pClassPointer = NULL;

// Class SFXGame.BioQuestProgressionMap
// 0x0040 (0x007C - 0x003C)
class UBioQuestProgressionMap : public UObject
{
public:
	struct FMap_Mirror                                 QuestProgression;                                 		// 0x003C (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                nQuestProgressCounter;                            		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1854 ];

		return pClassPointer;
	};

	void Clear ( );
};

UClass* UBioQuestProgressionMap::pClassPointer = NULL;

// Class SFXGame.BioStateEventMap
// 0x0060 (0x009C - 0x003C)
class UBioStateEventMap : public UObject
{
public:
	struct FMap_Mirror                                 StateEventMap;                                    		// 0x003C (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< int >                                      GalaxyAtWarBoolVarIDs;                            		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      GalaxyAtWarIntVarIDs;                             		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      GalaxyAtWarFloatVarIDs;                           		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1855 ];

		return pClassPointer;
	};

};

UClass* UBioStateEventMap::pClassPointer = NULL;

// Class SFXGame.BioConsequenceMap
// 0x0000 (0x009C - 0x009C)
class UBioConsequenceMap : public UBioStateEventMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1856 ];

		return pClassPointer;
	};

};

UClass* UBioConsequenceMap::pClassPointer = NULL;

// Class SFXGame.SFXPower
// 0x0108 (0x0144 - 0x003C)
class USFXPower : public UObject
{
public:
	TArray< float >                                    ImpactRadius;                                     		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    EffectDuration;                                   		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    Damage;                                           		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    Force;                                            		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRankInfo >                         Ranks;                                            		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      RankCosts;                                        		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUnlockRequirement >                UnlockRequirements;                               		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      PowerScriptClass;                                 		// 0x0090 (0x0004) [0x0000000000000000]              
	class UClass*                                      EvolvedPowerClass1;                               		// 0x0094 (0x0004) [0x0000000000000000]              
	class UClass*                                      EvolvedPowerClass2;                               		// 0x0098 (0x0004) [0x0000000000000000]              
	struct FName                                       PowerName;                                        		// 0x009C (0x0008) [0x0000000000000000]              
	struct FName                                       BaseName;                                         		// 0x00A4 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   CastingTime;                                      		// 0x00AC (0x0008) [0x0000000000000000]              
	struct FVector2D                                   CooldownTime;                                     		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   GlobalCooldownTime;                               		// 0x00BC (0x0008) [0x0000000000000000]              
	struct FVector2D                                   MinimumRange;                                     		// 0x00C4 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   MaximumRange;                                     		// 0x00CC (0x0008) [0x0000000000000000]              
	struct FVector2D                                   VFXIntensity;                                     		// 0x00D4 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   ProjectileSpeed;                                  		// 0x00DC (0x0008) [0x0000000000000000]              
	struct FVector2D                                   ProjectileRadius;                                 		// 0x00E4 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   ConeHalfAngle;                                    		// 0x00EC (0x0008) [0x0000000000000000]              
	void*                                              DisplayName;                                      		// 0x00F4 (0x0004) [0x0000000000000000]              
	void*                                              Description;                                      		// 0x00F8 (0x0004) [0x0000000000000000]              
	void*                                              ImpactText;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                Icon;                                             		// 0x0100 (0x0004) [0x0000000000000000]              
	class UAnimSet*                                    Animations;                                       		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              ReleasePlayRate;                                  		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              DynamicCooldownBonus;                             		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DynamicDurationBonus;                             		// 0x0110 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DynamicDamageBonus;                               		// 0x0114 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Rank;                                             		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              MaxRank;                                          		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              DelayBeforeFirstUse;                              		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              DelayBetweenUses;                                 		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              TimeUntilNextUse;                                 		// 0x0128 (0x0004) [0x0000000000000000]              
	void*                                              TalentDescription;                                		// 0x012C (0x0004) [0x0000000000000000]              
	int                                                WheelDisplayIndex;                                		// 0x0130 (0x0004) [0x0000000000000000]              
	class ABioPawn*                                    MyPawn;                                           		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioPower*                                   OldPower;                                         		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      UsesSharedCooldown : 1;                           		// 0x013C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      BlockedByObjects : 1;                             		// 0x013C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      AimingIgnoresObstructions : 1;                    		// 0x013C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      StopOnFirstHit : 1;                               		// 0x013C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      CanMoveWhileCasting : 1;                          		// 0x013C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      DisplayInHUD : 1;                                 		// 0x013C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      AISelectable : 1;                                 		// 0x013C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      IsHenchmenUnique : 1;                             		// 0x013C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      DisplayInCharacterRecord : 1;                     		// 0x013C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned char                                      PowerType;                                        		// 0x0140 (0x0001) [0x0000000000000000]              
	unsigned char                                      CapabilityType;                                   		// 0x0141 (0x0001) [0x0000000000000000]              
	unsigned char                                      Discipline;                                       		// 0x0142 (0x0001) [0x0000000000000000]              
	unsigned char                                      VocalizationEvent;                                		// 0x0143 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1857 ];

		return pClassPointer;
	};

	float GetImpactRadius ( );
	void RecalculateCooldownBonus ( );
	void Tick ( float fDeltaTime );
	void RecalculateDurationBonus ( );
	void GetDurationResearchBonus ( float* fStaticDamageBonus );
	float GetDuration ( );
	float GetForce ( );
	void RecalculateDamageBonus ( );
	void GetDamageResearchBonus ( float* fStaticDamageBonus );
	float GetDamage ( );
	void ProcessToken ( int nRankIndex, struct FString* sToken );
	bool ParseString ( int nRankIndex, struct FString* sParsedString );
	bool GetParsedString ( void* srValue, int nRankIndex, struct FString* sOutput );
	bool GetUnlockBlurb ( int nRankIndex, struct FString* sUnlockBlurb );
	bool GetDescription ( int nRankIndex, struct FString* sDescription );
	bool IsTargetInRange ( class AActor* Target );
	void GetStringFromStringRef ( void* TheStringRef, unsigned long bParse, int nParseIndex, struct FString* TheString );
	float GetArrayValue ( int nRankToUse, TArray< float >* ArrayValues );
	float GetScaledValue ( struct FVector2D ValueToScale, int nRankToUse );
};

UClass* USFXPower::pClassPointer = NULL;

// Class SFXGame.SFXPowerManager
// 0x0088 (0x00C4 - 0x003C)
class USFXPowerManager : public UObject
{
public:
	TArray< class USFXPowerCustomActionBase* >         Powers;                                           		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   PowerReleasedDelegates;                           		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   BioticComboDelegates;                             		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   PowerImpactedDelegates;                           		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPowerReleased__Delegate;                      		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnBioticCombo__Delegate;                        		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPowerImpacted__Delegate;                      		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ABioPawn*                                    MyPawn;                                           		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimSet*                                    LastPowerAnimSet;                                 		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              RankUnlockText;                                   		// 0x0098 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              RequiredUnlockText;                               		// 0x009C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                PassiveRankIcon;                                  		// 0x00A0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                LockedRankIcon;                                   		// 0x00A4 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                UnlockedRankIcon;                                 		// 0x00A8 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                EvolveRank;                                       		// 0x00AC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                CooldownMethod;                                   		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                NumFreePowers;                                    		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                PowerCastCounter;                                 		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                DisableCasterCrusts;                              		// 0x00BC (0x0004) [0x0000000000000000]              
	unsigned long                                      SharedCooldownDisabled : 1;                       		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1858 ];

		return pClassPointer;
	};

	void OnPawnLoadedWeapons ( );
	void OnPawnEquippedNewWeapon ( );
	void CombatEnded ( );
	void ApplyPowerBonus ( class ABioPawn* oPawn, struct FName Parameter, float Bonus, float Duration, struct FName Category, class USFXPowerCustomActionBase* SourcePower, unsigned long bApplyToSourcePower, unsigned long bApplyToBiotics, unsigned long bApplyToTech, unsigned long bApplyToCombat, unsigned long bApplyToWeapons );
	void BioticCombo ( class Usfxpowercustomaction* oPower, class ABioPawn* oTarget );
	void PowerImpacted ( class Usfxpowercustomaction* oPower );
	void PowerReleased ( class Usfxpowercustomaction* oPower );
	void UnregisterBioticComboCallback ( struct FScriptDelegate oCallback );
	void RegisterBioticComboCallback ( struct FScriptDelegate oCallback );
	void UnregisterPowerImpactedCallback ( struct FScriptDelegate oImpactedCallback );
	void RegisterPowerImpactedCallback ( struct FScriptDelegate oImpactedCallback );
	void UnregisterPowerReleasedCallback ( struct FScriptDelegate oReleasedCallback );
	void RegisterPowerReleasedCallback ( struct FScriptDelegate oReleasedCallback );
	float GetSharedCooldown ( );
	void SetSharedCooldown ( float fCooldown );
	bool IsInForcedCooldown ( );
	void ResetForcedCooldown ( );
	void SetForcedCooldown ( float Cooldown );
	class UBioCheatManager* GetCheatManager ( );
	int GetRefundAmount ( class UClass* Power, int Rank );
	void RefundAllTalentPoints ( );
	void ProcessWheelDisplayOrder ( );
	void eventGetPowerWheelPowers ( TArray< class USFXPowerCustomActionBase* >* PowerList );
	void StartFirstTimeDelay ( );
	void LoadPowers ( TArray< struct FPowerSaveInfo >* PowerList );
	void SavePowers ( TArray< struct FPowerSaveInfo >* PowerList );
	void Tick ( float fDeltaTime );
	void GetSquadRecordPowers ( TArray< class USFXPowerCustomActionBase* >* PowerList );
	class USFXPowerCustomActionBase* GetPowerByClass ( class UClass* PowerClass );
	class USFXPowerCustomActionBase* GetPower ( struct FName nmPowerName );
	bool RemovePower ( class UClass* PowerClass );
	class USFXPowerCustomActionBase* AddPowerByClassName ( struct FName PowerClassName );
	class USFXPowerCustomActionBase* AddPower ( class UClass* PowerClass );
	void OnOwnerDestroyed ( );
	void InitializeJoinInProgress ( );
	void InitializePowerList ( );
	void OnPowerImpacted ( class Usfxpowercustomaction* oPower );
	void OnBioticCombo ( class Usfxpowercustomaction* oPower, class ABioPawn* oImpacted );
	void OnPowerReleased ( class Usfxpowercustomaction* oPower );
};

UClass* USFXPowerManager::pClassPointer = NULL;

// Class SFXGame.BioCurveDrivenParameter
// 0x0034 (0x0070 - 0x003C)
class UBioCurveDrivenParameter : public UObject
{
public:
	struct FRawDistributionFloat                       m_curve;                                          		// 0x003C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FString                                     sParameterName;                                   		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       nmParameterName;                                  		// 0x0064 (0x0008) [0x0000000000000000]              
	unsigned long                                      bScaleToLifetime : 1;                             		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLoop : 1;                                        		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1859 ];

		return pClassPointer;
	};

	float GetValue ( float fTime, float fScale );
};

UClass* UBioCurveDrivenParameter::pClassPointer = NULL;

// Class SFXGame.BioDecalComponent
// 0x00FE (0x03F0 - 0x02F2)
class UBioDecalComponent : public UDecalComponent
{
public:
	struct FRawDistributionFloat                       FadeInTime;                                       		// 0x02F4 (0x001C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       FadeOutTime;                                      		// 0x0310 (0x001C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       DecalLifetime;                                    		// 0x032C (0x001C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       DecalSize;                                        		// 0x0348 (0x001C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       DecalRoll;                                        		// 0x0364 (0x001C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       DecalYaw;                                         		// 0x0380 (0x001C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       DecalPitch;                                       		// 0x039C (0x001C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       SizeScale;                                        		// 0x03B8 (0x001C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBioCurveDrivenParameter* >          aDecalMaterialParameters;                         		// 0x03D4 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialInstanceConstant*                   m_MaterialInstance;                               		// 0x03E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USpotLightComponent*                         m_SkeletalDecal;                                  		// 0x03E4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_SkeletalReceiver;                               		// 0x03E8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned long                                      bScaleByDistance : 1;                             		// 0x03EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProjectOnShields : 1;                            		// 0x03EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1860 ];

		return pClassPointer;
	};

};

UClass* UBioDecalComponent::pClassPointer = NULL;

// Class SFXGame.BioVisualEffect
// 0x0000 (0x02B4 - 0x02B4)
class ABioVisualEffect : public APrefabInstance
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1861 ];

		return pClassPointer;
	};

	void DestroyPrefab ( );
	void InstancePrefab ( class UPrefab* InPrefab );
};

UClass* ABioVisualEffect::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_ActivateGalaxyMap
// 0x0018 (0x00C8 - 0x00B0)
class UBioSeqAct_ActivateGalaxyMap : public USequenceAction
{
public:
	struct FString                                     m_sGalaxyMapResource;                             		// 0x00B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGFxMovieInfo*                               m_oGalaxyMapReferenced;                           		// 0x00BC (0x0004) [0x0000000000000000]              
	class USFXGalaxy*                                  m_pGalaxyMap;                                     		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXGalaxyMapGameData*                       Data;                                             		// 0x00C4 (0x0004) [0x0000000004420009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1862 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_ActivateGalaxyMap::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_AddChoiceGUIElement
// 0x0031 (0x00E1 - 0x00B0)
class UBioSeqAct_AddChoiceGUIElement : public USequenceAction
{
public:
	struct FName                                       m_nmResource;                                     		// 0x00B0 (0x0008) [0x0000000000000000]              
	void*                                              m_srChoiceName;                                   		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              m_srChoiceTitle;                                  		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  m_oChoiceImage;                                   		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              m_srChoiceImageTitle;                             		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              m_srChoiceDescription;                            		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nOptionalPaneItemValue;                         		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nChoiceColor;                                   		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nChoiceID;                                      		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              m_srActionText;                                   		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      OverrideDefaultResource : 1;                      		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDefaultSelection : 1;                          		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bDisabled : 1;                                  		// 0x00DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bNested : 1;                                    		// 0x00DC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      m_eResource;                                      		// 0x00E0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1863 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UBioSeqAct_AddChoiceGUIElement::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_BlockForTextureStreaming
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_BlockForTextureStreaming : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1864 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_BlockForTextureStreaming::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_CopyPlayerHeadToTarget
// 0x0004 (0x00B4 - 0x00B0)
class UBioSeqAct_CopyPlayerHeadToTarget : public USequenceAction
{
public:
	unsigned long                                      m_bCopyHeadGearMesh : 1;                          		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bCopyHairMesh : 1;                              		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1865 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_CopyPlayerHeadToTarget::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_DUISetElementText
// 0x000D (0x00BD - 0x00B0)
class UBioSeqAct_DUISetElementText : public USequenceAction
{
public:
	struct FString                                     sText;                                            		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      Element;                                          		// 0x00BC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1866 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_DUISetElementText::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_DUITimer
// 0x0010 (0x00D0 - 0x00C0)
class UBioSeqAct_DUITimer : public USeqAct_Latent
{
public:
	float                                              fStartTime;                                       		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEndTime;                                         		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fIntervalTime;                                    		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bModalTimer : 1;                                  		// 0x00CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bVisible : 1;                                     		// 0x00CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1867 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_DUITimer::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_EndCurrentConvNode
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_EndCurrentConvNode : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1868 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_EndCurrentConvNode::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_ForceLightEnvUpdate
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_ForceLightEnvUpdate : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1869 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_ForceLightEnvUpdate::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_ForceStreamInTextures
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_ForceStreamInTextures : public USeqAct_StreamInTextures
{
public:
	unsigned long                                      bBlockOnWait : 1;                                 		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1870 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_ForceStreamInTextures::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_GetFromObjectList
// 0x0004 (0x00B4 - 0x00B0)
class UBioSeqAct_GetFromObjectList : public USequenceAction
{
public:
	int                                                nListIndex;                                       		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1871 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_GetFromObjectList::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_GetNearestObject
// 0x0004 (0x00B4 - 0x00B0)
class UBioSeqAct_GetNearestObject : public USequenceAction
{
public:
	unsigned long                                      bGetFurthest : 1;                                 		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1872 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_GetNearestObject::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_PlayLoadingMovie
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_PlayLoadingMovie : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1873 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_PlayLoadingMovie::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_PMBase
// 0x0012 (0x00C2 - 0x00B0)
class UBioSeqAct_PMBase : public USequenceAction
{
public:
	struct FString                                     m_sObjectType;                                    		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nIndex;                                         		// 0x00BC (0x0004) [0x0000000000000000]              
	unsigned char                                      Region;                                           		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x00C1 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1874 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_PMBase::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_PMCheckConditional
// 0x000B (0x00CD - 0x00C2)
class UBioSeqAct_PMCheckConditional : public UBioSeqAct_PMBase
{
public:
	int                                                Param;                                            		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      OutValue : 1;                                     		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      Conditional;                                      		// 0x00CC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1875 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_PMCheckConditional::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_PMCheckState
// 0x0007 (0x00C9 - 0x00C2)
class UBioSeqAct_PMCheckState : public UBioSeqAct_PMBase
{
public:
	unsigned long                                      OutValue : 1;                                     		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      State;                                            		// 0x00C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1876 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_PMCheckState::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_PMExecuteTransition
// 0x0007 (0x00C9 - 0x00C2)
class UBioSeqAct_PMExecuteTransition : public UBioSeqAct_PMBase
{
public:
	int                                                Param;                                            		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Transition;                                       		// 0x00C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1877 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_PMExecuteTransition::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_PositionFSActors
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_PositionFSActors : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1878 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_PositionFSActors::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_ScalarMathUnit
// 0x001D (0x00CD - 0x00B0)
class UBioSeqAct_ScalarMathUnit : public USequenceAction
{
public:
	int                                                IntX;                                             		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                IntY;                                             		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                IntZ;                                             		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              FloatX;                                           		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              FloatY;                                           		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              FloatZ;                                           		// 0x00C4 (0x0004) [0x0000000000000000]              
	unsigned long                                      XIsFloat : 1;                                     		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      YIsFloat : 1;                                     		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      ZIsFloat : 1;                                     		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      Operation;                                        		// 0x00CC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1879 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UBioSeqAct_ScalarMathUnit::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_SetGestureMode
// 0x001D (0x00CD - 0x00B0)
class UBioSeqAct_SetGestureMode : public USequenceAction
{
public:
	TArray< struct FString >                           ActorTags;                                        		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AActor* >                            m_aActors;                                        		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bForAmbientActing : 1;                          		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      GestureMode;                                      		// 0x00CC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1880 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UBioSeqAct_SetGestureMode::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_SetLightEnvQuality
// 0x0001 (0x00B1 - 0x00B0)
class UBioSeqAct_SetLightEnvQuality : public USequenceAction
{
public:
	unsigned char                                      Quality;                                          		// 0x00B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1881 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* UBioSeqAct_SetLightEnvQuality::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_SetStreamingState
// 0x000C (0x00BC - 0x00B0)
class UBioSeqAct_SetStreamingState : public USequenceAction
{
public:
	struct FName                                       StateName;                                        		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      NewValue : 1;                                     		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1882 ];

		return pClassPointer;
	};

	void Activated ( );
	void SetState ( );
	void RetouchTriggers ( );
};

UClass* UBioSeqAct_SetStreamingState::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_SetWeapon
// 0x000C (0x00BC - 0x00B0)
class UBioSeqAct_SetWeapon : public USequenceAction
{
public:
	class UClass*                                      cWeapon;                                          		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    oPawn;                                            		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nWeapon;                                          		// 0x00B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1883 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* UBioSeqAct_SetWeapon::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_SkillGame_Base
// 0x0011 (0x00D1 - 0x00C0)
class UBioSeqAct_SkillGame_Base : public USeqAct_Latent
{
public:
	int                                                m_nStartingResource;                              		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPhase2Resource;                                		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPhase2Time;                                    		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bCompleted : 1;                                 		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bRewardOnTimeFail : 1;                          		// 0x00CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      m_CompletionState;                                		// 0x00D0 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1884 ];

		return pClassPointer;
	};

	void OnCancel ( );
	void OnFailure ( );
	void OnSuccess ( int nRemainingResources );
};

UClass* UBioSeqAct_SkillGame_Base::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_SkillGame_Bypass
// 0x000F (0x00E0 - 0x00D1)
class UBioSeqAct_SkillGame_Bypass : public UBioSeqAct_SkillGame_Base
{
public:
	int                                                m_nNumToSpawn;                                    		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPCBurnDown;                                    		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nConsoleBurnDown;                               		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1885 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void OnFailure ( );
	void OnSuccess ( int nRemainingResources );
};

UClass* UBioSeqAct_SkillGame_Bypass::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_SkillGame_Decryption
// 0x000F (0x00E0 - 0x00D1)
class UBioSeqAct_SkillGame_Decryption : public UBioSeqAct_SkillGame_Base
{
public:
	int                                                m_nPercentDanger;                                 		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPercentGood;                                   		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSpeed;                                         		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1886 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void OnFailure ( );
	void OnSuccess ( int nRemainingResources );
};

UClass* UBioSeqAct_SkillGame_Decryption::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_SkynetEvent
// 0x0025 (0x00D5 - 0x00B0)
class UBioSeqAct_SkynetEvent : public USequenceAction
{
public:
	struct FString                                     m_sString1;                                       		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_sString2;                                       		// 0x00BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                m_iInt1;                                          		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_iInt2;                                          		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsPartyMember : 1;                             		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      m_eEventType;                                     		// 0x00D4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1887 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_SkynetEvent::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_StopLoadingMovie
// 0x0004 (0x00C4 - 0x00C0)
class UBioSeqAct_StopLoadingMovie : public USeqAct_Latent
{
public:
	unsigned long                                      bDelayStopUntilGameHasRendered : 1;               		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1888 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_StopLoadingMovie::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_ToggleLightEnv
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_ToggleLightEnv : public USeqAct_Toggle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1889 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_ToggleLightEnv::pClassPointer = NULL;

// Class SFXGame.BioSeqEvt_BackgroundStreamingDone
// 0x0000 (0x00D2 - 0x00D2)
class UBioSeqEvt_BackgroundStreamingDone : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1890 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* UBioSeqEvt_BackgroundStreamingDone::pClassPointer = NULL;

// Class SFXGame.BioSeqEvt_CinematicSkipped
// 0x000E (0x00E0 - 0x00D2)
class UBioSeqEvt_CinematicSkipped : public USequenceEvent
{
public:
	struct FString                                     sEvent;                                           		// 0x00D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1891 ];

		return pClassPointer;
	};

};

UClass* UBioSeqEvt_CinematicSkipped::pClassPointer = NULL;

// Class SFXGame.BioSeqEvt_Conversation
// 0x0013 (0x00E5 - 0x00D2)
class UBioSeqEvt_Conversation : public USequenceEvent
{
public:
	struct FName                                       sScriptName;                                      		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioConversation*                            Conv;                                             		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFireForFull : 1;                                 		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFireForAmbient : 1;                              		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      eScriptType;                                      		// 0x00E4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1892 ];

		return pClassPointer;
	};

};

UClass* UBioSeqEvt_Conversation::pClassPointer = NULL;

// Class SFXGame.BioSeqEvt_ConvNode
// 0x000A (0x00DC - 0x00D2)
class UBioSeqEvt_ConvNode : public USequenceEvent
{
public:
	int                                                m_nNodeID;                                        		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nConvResRefID;                                  		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1893 ];

		return pClassPointer;
	};

};

UClass* UBioSeqEvt_ConvNode::pClassPointer = NULL;

// Class SFXGame.BioSeqEvt_ForegroundStreamingDone
// 0x0000 (0x00D2 - 0x00D2)
class UBioSeqEvt_ForegroundStreamingDone : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1894 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* UBioSeqEvt_ForegroundStreamingDone::pClassPointer = NULL;

// Class SFXGame.BioSeqEvt_GalaxyMap
// 0x0016 (0x00E8 - 0x00D2)
class UBioSeqEvt_GalaxyMap : public USequenceEvent
{
public:
	struct FString                                     sEvent;                                           		// 0x00D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       EventParameter;                                   		// 0x00E0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1895 ];

		return pClassPointer;
	};

};

UClass* UBioSeqEvt_GalaxyMap::pClassPointer = NULL;

// Class SFXGame.BioSeqEvt_OnPlayerActivate
// 0x0000 (0x00D2 - 0x00D2)
class UBioSeqEvt_OnPlayerActivate : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1896 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* UBioSeqEvt_OnPlayerActivate::pClassPointer = NULL;

// Class SFXGame.BioSequenceLatentAction
// 0x0004 (0x00C4 - 0x00C0)
class UBioSequenceLatentAction : public USeqAct_Latent
{
public:
	unsigned long                                      bHasTargets : 1;                                  		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1897 ];

		return pClassPointer;
	};

	bool eventUpdateOp ( float DeltaTime );
};

UClass* UBioSequenceLatentAction::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_BlackScreen
// 0x0009 (0x00CD - 0x00C4)
class UBioSeqAct_BlackScreen : public UBioSequenceLatentAction
{
public:
	float                                              fTimeExpired;                                     		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTimeDelay;                                       		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eBlackScreenAction;                             		// 0x00CC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1898 ];

		return pClassPointer;
	};

	bool UpdateOp ( float fDeltaT );
	void eventActivated ( );
};

UClass* UBioSeqAct_BlackScreen::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_FaceOnlyVO
// 0x0092 (0x0156 - 0x00C4)
class UBioSeqAct_FaceOnlyVO : public UBioSequenceLatentAction
{
public:
	struct FMap_Mirror                                 m_mapUsedEnums;                                   		// 0x00C4 (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< void* >                                    m_aStrRefs;                                       		// 0x0100 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sSubtitle;                                      		// 0x010C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sFaceFXAnim;                                    		// 0x0118 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       m_nmSpeakerTag;                                   		// 0x0124 (0x0008) [0x0000000000000000]              
	class UBioConversation*                            m_pConversation;                                  		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              m_srLineStrRef;                                   		// 0x0130 (0x0004) [0x0000000000000000]              
	void*                                              m_srActorNameOverride;                            		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPickedSpeakerIndex;                            		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pActor;                                         		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseBaseSoundObject*                       m_pAudioObject;                                   		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFaceFXAnimSet*                              m_pFaceFXSet;                                     		// 0x0144 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPreLoadTimer;                                  		// 0x0148 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nExportID;                                      		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bForceHideSubtitles : 1;                        		// 0x0150 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIgnoreHenchmanSquadCheck : 1;                  		// 0x0150 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bPlaySoundOnly : 1;                             		// 0x0150 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bDisableDelayUntilPreload : 1;                  		// 0x0150 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bHasPriority : 1;                               		// 0x0150 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bInterruptAmbients : 1;                         		// 0x0150 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bSubtitleHasPriority : 1;                       		// 0x0150 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bErrorInActivation : 1;                         		// 0x0150 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bKilledVO : 1;                                  		// 0x0150 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bPreLoadRequested : 1;                          		// 0x0150 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bPlayRequested : 1;                             		// 0x0150 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      m_bAllowInConversation : 1;                       		// 0x0150 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      m_bAlwaysHideSubtitle : 1;                        		// 0x0150 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      m_bHasPlayed : 1;                                 		// 0x0150 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      m_bUpdatedMeshSettings : 1;                       		// 0x0150 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      m_bEntryNode : 1;                                 		// 0x0150 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      m_bFemalePlayer : 1;                              		// 0x0150 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned char                                      m_eSpeakerList;                                   		// 0x0154 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eConvLine;                                      		// 0x0155 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1899 ];

		return pClassPointer;
	};

	void eventPreVersionUpdated ( int OldVersion, int NewVersion );
	int eventGetObjClassVersion ( );
};

UClass* UBioSeqAct_FaceOnlyVO::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_MovieBink
// 0x0024 (0x00E8 - 0x00C4)
class UBioSeqAct_MovieBink : public UBioSequenceLatentAction
{
public:
	struct FBioBinkAsyncPreloader                      Preloader;                                        		// 0x00C4 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     m_sMovieName;                                     		// 0x00D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UWwiseEvent*                                 m_wwiseEvent;                                     		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bFiredBinkStartEvent : 1;                       		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bKeepTryingToPlay : 1;                          		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      IsComplete : 1;                                   		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1900 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventDeactivated ( );
	void eventActivated ( );
};

UClass* UBioSeqAct_MovieBink::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_PlatformMovieBink
// 0x000C (0x00F4 - 0x00E8)
class USFXSeqAct_PlatformMovieBink : public UBioSeqAct_MovieBink
{
public:
	TArray< unsigned char >                            Platforms;                                        		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1901 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_PlatformMovieBink::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_ShowChoiceGUI
// 0x003D (0x0101 - 0x00C4)
class UBioSeqAct_ShowChoiceGUI : public UBioSequenceLatentAction
{
public:
	struct FName                                       m_nmTag;                                          		// 0x00C4 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmResource;                                     		// 0x00CC (0x0008) [0x0000000000000000]              
	void*                                              m_srTitle;                                        		// 0x00D4 (0x0004) [0x0000000000000000]              
	void*                                              m_srSubTitle;                                     		// 0x00D8 (0x0004) [0x0000000000000000]              
	void*                                              m_srAButton;                                      		// 0x00DC (0x0004) [0x0000000000000000]              
	void*                                              m_srBButton;                                      		// 0x00E0 (0x0004) [0x0000000000000000]              
	void*                                              m_srOptionalPaneTitleText;                        		// 0x00E4 (0x0004) [0x0000000000000000]              
	void*                                              m_srOptionalPaneItemValuePrefixText;              		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                m_nSelectionIndex;                                		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioSFHandler_ChoiceGUI*                     m_ChoiceGUIHandler;                               		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nSelectionID;                                   		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nInitialSelectionID;                            		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_ShowOptionalPane : 1;                           		// 0x00FC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bAutoClose : 1;                                 		// 0x00FC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bFinished : 1;                                  		// 0x00FC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bAborted : 1;                                   		// 0x00FC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bAPressed : 1;                                  		// 0x00FC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bWasPaused : 1;                                 		// 0x00FC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned char                                      m_eResource;                                      		// 0x0100 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1902 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void ChoiceGUIInputPressed ( unsigned long bAPressed, int nContext );
	bool UpdateOp ( float fDeltaT );
};

UClass* UBioSeqAct_ShowChoiceGUI::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_LaunchWeaponSelection
// 0x0020 (0x00E4 - 0x00C4)
class USFXSeqAct_LaunchWeaponSelection : public UBioSequenceLatentAction
{
public:
	struct FName                                       TableSocket;                                      		// 0x00C4 (0x0008) [0x0000000000000000]              
	class ASkeletalMeshActor*                          TableSkelMesh;                                    		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                MaxWeapons;                                       		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTextureRenderTarget2D*                      ModStatsRenderTexture;                            		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTextureRenderTarget2D*                      ModControlsRenderTexture;                         		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class Usfxgui_weaponselection*                     oMovie;                                           		// 0x00DC (0x0004) [0x0000000000000000]              
	unsigned long                                      bInitialized : 1;                                 		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      ShowAllWeapons : 1;                               		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      ShowAllMods : 1;                                  		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      AutoEquipWhenDone : 1;                            		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      PauseGame : 1;                                    		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1903 ];

		return pClassPointer;
	};

	void eventCleanup ( );
	int eventGetObjClassVersion ( );
	void ChangeView ( );
	void DataPrimed ( );
	void ForcedShutDown ( );
	void TransitionToWeaponSel ( );
	void TransitionToWeaponMod ( );
	void SwitchPawn ( class APawn* NewPawn );
	void Deactivated ( );
	bool eventUpdateOp ( float fDeltaTime );
	void SetupModExtension ( );
	void Prime ( );
	void Initialize ( );
	void Activated ( );
};

UClass* USFXSeqAct_LaunchWeaponSelection::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_StartAmbientConv
// 0x0020 (0x00E4 - 0x00C4)
class USFXSeqAct_StartAmbientConv : public UBioSequenceLatentAction
{
public:
	TArray< struct FSFXConvActorVar >                  m_aConnectedActors;                               		// 0x00C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UBioConversation*                            Conv;                                             		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInterruptRange;                                		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBioConversationController*                  m_pConvController;                                		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pOwner;                                         		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bNoGestures : 1;                                		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bFOVOMode : 1;                                  		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bLookAtActive : 1;                              		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bDisableLookAtRangeCheck : 1;                   		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bDisableDelayUntilPreload : 1;                  		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bDisableProceduralFoley : 1;                    		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bAllowStartingIfAlreadyActive : 1;              		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bSubtitleHasPriority : 1;                       		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bPreLoading : 1;                                		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bPlayRequested : 1;                             		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1904 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_StartAmbientConv::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_StartConversation
// 0x000C (0x00F0 - 0x00E4)
class USFXSeqAct_StartConversation : public USFXSeqAct_StartAmbientConv
{
public:
	int                                                m_nbNodes;                                        		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ABioStage*                                   m_pStage;                                         		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bSupportsPlayerHelmet : 1;                      		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bSupportsPlayerFace : 1;                        		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bFadeIn : 1;                                    		// 0x00EC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bBlackOut : 1;                                  		// 0x00EC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1905 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFXSeqAct_StartConversation::pClassPointer = NULL;

// Class SFXGame.BioSeqVar_ChoiceGUIData
// 0x0004 (0x0080 - 0x007C)
class UBioSeqVar_ChoiceGUIData : public USeqVar_Object
{
public:
	class USFXGameChoiceGUIData*                       m_ChoiceData;                                     		// 0x007C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1906 ];

		return pClassPointer;
	};

};

UClass* UBioSeqVar_ChoiceGUIData::pClassPointer = NULL;

// Class SFXGame.BioSeqVar_ObjectFindByTag
// 0x000C (0x0088 - 0x007C)
class UBioSeqVar_ObjectFindByTag : public USeqVar_Object
{
public:
	struct FName                                       m_sObjectTagToFind;                               		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bSearchUniqueTag : 1;                           		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1907 ];

		return pClassPointer;
	};

};

UClass* UBioSeqVar_ObjectFindByTag::pClassPointer = NULL;

// Class SFXGame.BioSeqVar_StoryManagerBool
// 0x0013 (0x0073 - 0x0060)
class UBioSeqVar_StoryManagerBool : public USeqVar_Bool
{
public:
	struct FString                                     m_sRefName;                                       		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nIndex;                                         		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned char                                      Region;                                           		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x0071 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      State;                                            		// 0x0072 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1908 ];

		return pClassPointer;
	};

};

UClass* UBioSeqVar_StoryManagerBool::pClassPointer = NULL;

// Class SFXGame.BioSeqVar_StoryManagerFloat
// 0x0013 (0x0073 - 0x0060)
class UBioSeqVar_StoryManagerFloat : public USeqVar_Float
{
public:
	struct FString                                     m_sRefName;                                       		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nIndex;                                         		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned char                                      Region;                                           		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x0071 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Float;                                            		// 0x0072 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1909 ];

		return pClassPointer;
	};

};

UClass* UBioSeqVar_StoryManagerFloat::pClassPointer = NULL;

// Class SFXGame.BioSeqVar_StoryManagerInt
// 0x0013 (0x0073 - 0x0060)
class UBioSeqVar_StoryManagerInt : public USeqVar_Int
{
public:
	struct FString                                     m_sRefName;                                       		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nIndex;                                         		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned char                                      Region;                                           		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x0071 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Int;                                              		// 0x0072 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1910 ];

		return pClassPointer;
	};

};

UClass* UBioSeqVar_StoryManagerInt::pClassPointer = NULL;

// Class SFXGame.BioSeqVar_StoryManagerStateId
// 0x0007 (0x0067 - 0x0060)
class UBioSeqVar_StoryManagerStateId : public USeqVar_Int
{
public:
	int                                                m_nIndex;                                         		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned char                                      Region;                                           		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x0065 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      State;                                            		// 0x0066 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1911 ];

		return pClassPointer;
	};

};

UClass* UBioSeqVar_StoryManagerStateId::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_AIFactory2
// 0x0055 (0x0105 - 0x00B0)
class USFXSeqAct_AIFactory2 : public USequenceAction
{
public:
	TArray< struct FVector >                           ClusterOffsets;                                   		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAISpawnInfo >                      SpawnSets;                                        		// 0x00BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AActor* >                            SpawnPoints;                                      		// 0x00C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class APawn* >                             SubSpawns;                                        		// 0x00D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class APawn* >                             PendingSpawnedPawns;                              		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      SpawnerActor;                                     		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      ProjectileStartLocation;                          		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumDeadThreshold;                                 		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DeadCount;                                        		// 0x00F8 (0x0004) [0x0000000000000000]              
	class ABioBaseSquad*                               DefaultSquad;                                     		// 0x00FC (0x0004) [0x0000000000000000]              
	unsigned long                                      bAllSpawned : 1;                                  		// 0x0100 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAllDead : 1;                                     		// 0x0100 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAbortSpawns : 1;                                 		// 0x0100 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bEnteredCombat : 1;                               		// 0x0100 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bResetDeadLinkCount : 1;                          		// 0x0100 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bActivatedDeadLink : 1;                           		// 0x0100 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bPreventSave : 1;                                 		// 0x0100 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned char                                      SpawnSelectionType;                               		// 0x0104 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1912 ];

		return pClassPointer;
	};

	class AProjectile* eventSpawnObscuringEffect ( struct FAISpawnInfo Set );
	int eventGetObjClassVersion ( );
	void eventAddSpawnedPawnToCustomAction ( class ABioPawn* NewPawn );
	void eventPlaySpawnedAnimation ( );
	void RemoveFromWatchList ( class APawn* TargetPawn );
	void NotifyCombatEntered ( );
};

UClass* USFXSeqAct_AIFactory2::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_AwardTreasure_Base
// 0x0001 (0x00B1 - 0x00B0)
class USFXSeqAct_AwardTreasure_Base : public USequenceAction
{
public:
	unsigned char                                      TREASURE;                                         		// 0x00B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1913 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* USFXSeqAct_AwardTreasure_Base::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_CharCreateClass
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_CharCreateClass : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1914 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_CharCreateClass::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_CloseChoiceGui
// 0x0008 (0x00B8 - 0x00B0)
class USFXSeqAct_CloseChoiceGui : public USequenceAction
{
public:
	struct FName                                       m_nmTag;                                          		// 0x00B0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1915 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_CloseChoiceGui::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_CreateNotification
// 0x0020 (0x00D0 - 0x00B0)
class USFXSeqAct_CreateNotification : public USequenceAction
{
public:
	struct FName                                       nRemoteEvent;                                     		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                Priority;                                         		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              sTitle;                                           		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              sSubtitle;                                        		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              sBody;                                            		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDisplayTime;                                     		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    oImage;                                           		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1916 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFXSeqAct_CreateNotification::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_DummyWeaponFire
// 0x0072 (0x0132 - 0x00C0)
class USFXSeqAct_DummyWeaponFire : public USeqAct_Latent
{
public:
	class UClass*                                      WeaponClass;                                      		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FDummyFireObjectListParams                  MultipleTargetParams;                             		// 0x00C4 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	struct FDummyFireObjectListParams                  MultipleOriginParams;                             		// 0x00E8 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       OriginSocketName;                                 		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShotsToFire;                                      		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InaccuracyDegrees;                                		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ASFXWeapon_NativeBase*                       SpawnedWeapon;                                    		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              RemainingFireTime;                                		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                ShotsFired;                                       		// 0x0124 (0x0004) [0x0000000000000000]              
	class ASFXDummyWeaponFireActor*                    ReplicatedActor;                                  		// 0x0128 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShootUntilStopped : 1;                           		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStopped : 1;                                     		// 0x012C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFinished : 1;                                    		// 0x012C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSuppressMuzzleFlash : 1;                         		// 0x012C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSuppressTracers : 1;                             		// 0x012C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSuppressImpactFX : 1;                            		// 0x012C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bSuppressAudio : 1;                               		// 0x012C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bSuppressDamage : 1;                              		// 0x012C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDamagesFriends : 1;                              		// 0x012C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bFiring : 1;                                      		// 0x012C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bAlignWeaponMeshToSocket : 1;                     		// 0x012C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bSuppressCameraShake : 1;                         		// 0x012C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bSuppressLineCheck : 1;                           		// 0x012C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned char                                      FiringMode;                                       		// 0x0130 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TeamIndex;                                        		// 0x0131 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1917 ];

		return pClassPointer;
	};

	void eventSetRemainingTime ( unsigned char DummyFiringMode );
	void eventSetupSpawnedDummyWeapon ( class AActor* OriginActor, class AActor* TargetActor );
	struct FName eventGetMuzzleSocketName ( );
	void AlignWeaponMuzzleToActor ( class AActor* AlignTo, class AActor* AimAt, unsigned long bForceComponentUpdate );
	void SpawnDummyWeapon ( class AActor* OriginActor, class AActor* TargetActor );
};

UClass* USFXSeqAct_DummyWeaponFire::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_EnableAI
// 0x0004 (0x00C4 - 0x00C0)
class USFXSeqAct_EnableAI : public USeqAct_Latent
{
public:
	unsigned long                                      m_bEnable : 1;                                    		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bFirstPass : 1;                                 		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1918 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFXSeqAct_EnableAI::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_FireWeaponAt
// 0x0020 (0x00E0 - 0x00C0)
class USFXSeqAct_FireWeaponAt : public USeqAct_Latent
{
public:
	class ABioPawn*                                    oPawn;                                            		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oTarget;                                          		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeOut;                                         		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAttackDuration;                                  		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nCompletionReason;                                		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              m_fTotalTimeRunning;                              		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                m_nReason;                                        		// 0x00D8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCheckLOS : 1;                                    		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceShoot : 1;                                  		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bDone : 1;                                      		// 0x00DC (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1919 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventFireWeapon ( class AActor* pTarget );
	void eventCancelFire ( );
	void FireWeaponCallback ( int nReason );
};

UClass* USFXSeqAct_FireWeaponAt::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_FreezeLevelStreaming
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_FreezeLevelStreaming : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1920 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_FreezeLevelStreaming::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_HenchmanUseInteractionPoint
// 0x0010 (0x00D0 - 0x00C0)
class USFXSeqAct_HenchmanUseInteractionPoint : public USeqAct_Latent
{
public:
	class ABioPawn*                                    HenchmanPawn;                                     		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      InteractionPoint;                                 		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFidelityTimeout;                                 		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bStartedInteraction : 1;                        		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDone : 1;                                      		// 0x00CC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bSuccess : 1;                                   		// 0x00CC (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1921 ];

		return pClassPointer;
	};

	bool eventCanDoInteraction ( );
	bool eventStartInteraction ( int* bBusy );
	void eventStopInteraction ( );
	void StoppedInteractionCallback ( unsigned long bSuccess );
	void ReachedInteractionCallback ( );
};

UClass* USFXSeqAct_HenchmanUseInteractionPoint::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_InitLoadingMovies
// 0x0024 (0x00D4 - 0x00B0)
class USFXSeqAct_InitLoadingMovies : public USequenceAction
{
public:
	struct FBioBinkAsyncPreloader                      Preloader;                                        		// 0x00B0 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UBioLoadingMovie* >                  Movies;                                           		// 0x00C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBioSFScreenTip*                             ScreenTip;                                        		// 0x00CC (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	unsigned long                                      HideScaleform : 1;                                		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RequiresExplicitStop : 1;                         		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      PlayToCompletion : 1;                             		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      StreamFromDisc : 1;                               		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1922 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFXSeqAct_InitLoadingMovies::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_IsPawnInCover
// 0x0004 (0x00B4 - 0x00B0)
class USFXSeqAct_IsPawnInCover : public USequenceAction
{
public:
	class AActor*                                      oTargetActor;                                     		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1923 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFXSeqAct_IsPawnInCover::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_LookAtPOI
// 0x0038 (0x00F8 - 0x00C0)
class USFXSeqAct_LookAtPOI : public USeqAct_Latent
{
public:
	struct FVector                                     m_vTargetOffset;                                  		// 0x00C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vExploreModeOffset;                             		// 0x00CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmTargetBoneName;                               		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFov;                                           		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTransitionTime;                                		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDuration;                                      		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_pTarget;                                        		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDurationRemaining;                             		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bAutoActivate : 1;                              		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDisableOtherPOIs : 1;                          		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bDisableMovementInput : 1;                      		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bPOIActive : 1;                                 		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bDurationUpdating : 1;                          		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1924 ];

		return pClassPointer;
	};

	void CalcCameraPosition ( float fTimeDelta, struct FVector* vCameraLocation, struct FVector* vUnderneathCamLoc, struct FVector* vTargetLocation );
	void CalcTargetLocation ( struct FVector* vLocation );
	void UpdateCamPOV ( class USFXCameraAction_FollowTarget* pCamMode, float fTimeDelta );
	void eventDeactivatePOI ( class ABioPlayerController* pBPC, unsigned long bPlayerInputRequest );
	void eventActivatePOI ( class ABioPlayerController* pBPC );
	void eventRemovePOITarget ( class ABioPlayerController* pBPC );
	void eventAddPOITarget ( class ABioPlayerController* pBPC );
};

UClass* USFXSeqAct_LookAtPOI::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_MoveOnSplineNativeBase
// 0x0004 (0x00C4 - 0x00C0)
class USFXSeqAct_MoveOnSplineNativeBase : public USeqAct_Latent
{
public:
	unsigned long                                      m_bSFXCreatedBeforeStuntActorLocationChange : 1;  		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1925 ];

		return pClassPointer;
	};

	void MoveActor ( class AActor* Actor, struct FVector NewLocation );
};

UClass* USFXSeqAct_MoveOnSplineNativeBase::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_MoveToNode
// 0x0020 (0x00E0 - 0x00C0)
class USFXSeqAct_MoveToNode : public USeqAct_Latent
{
public:
	class ABioPawn*                                    oPawn;                                            		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oMoveTarget;                                      		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMoveOffset;                                      		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeOut;                                         		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTotalTimeRunning;                              		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                nCompletionReason;                                		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                m_nReason;                                        		// 0x00D8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWalking : 1;                                     		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bImmediateMove : 1;                               		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bDone : 1;                                      		// 0x00DC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bWasWalkingBefore : 1;                          		// 0x00DC (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1926 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventMoveTo ( );
	void eventCancelMove ( );
	void MoveToCallback ( int nReason );
};

UClass* USFXSeqAct_MoveToNode::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_PrimeMovie
// 0x0020 (0x00E0 - 0x00C0)
class USFXSeqAct_PrimeMovie : public USeqAct_Latent
{
public:
	struct FBioBinkAsyncPreloader                      Preloader;                                        		// 0x00C0 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     MovieName;                                        		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      IsComplete : 1;                                   		// 0x00DC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1927 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFXSeqAct_PrimeMovie::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_ReportLevelLoadTime
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_ReportLevelLoadTime : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1928 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_ReportLevelLoadTime::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_SetAmbientPerformance
// 0x0014 (0x00C4 - 0x00B0)
class USFXSeqAct_SetAmbientPerformance : public USequenceAction
{
public:
	struct FName                                       m_nmDefaultPoseAnim;                              		// 0x00B0 (0x0008) [0x0000000000000000]              
	class UAnimSet*                                    m_pDefaultPoseSet;                                		// 0x00B8 (0x0004) [0x0000000000000000]              
	class USFXAmbPerfGameData*                         m_pPerfGameData;                                  		// 0x00BC (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bReturnToDefaultPose : 1;                       		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1929 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_SetAmbientPerformance::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_SetStringref
// 0x0008 (0x00B8 - 0x00B0)
class USFXSeqAct_SetStringref : public USeqAct_SetSequenceVariable
{
public:
	void*                                              Target;                                           		// 0x00B0 (0x0004) [0x0000000000000000]              
	void*                                              Value;                                            		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1930 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFXSeqAct_SetStringref::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_ToggleCombatPawn
// 0x0014 (0x00D4 - 0x00C0)
class USFXSeqAct_ToggleCombatPawn : public USeqAct_Latent
{
public:
	struct FQWord                                      frame;                                            		// 0x00C0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                ForcedCasualAppearanceID;                         		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                State;                                            		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseCasualAppearance : 1;                         		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCreateAndShowWeapons : 1;                        		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShowLoadingIcon : 1;                             		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bFastSwitch : 1;                                  		// 0x00D0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bNewCombatPawn : 1;                               		// 0x00D0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bInjuredPawn : 1;                                 		// 0x00D0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1931 ];

		return pClassPointer;
	};

	void eventTogglePawn ( );
	bool eventGatherPawnParameters ( );
	int eventGetObjClassVersion ( );
};

UClass* USFXSeqAct_ToggleCombatPawn::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_UsePowerOn
// 0x0025 (0x00E5 - 0x00C0)
class USFXSeqAct_UsePowerOn : public USeqAct_Latent
{
public:
	struct FName                                       nmPower;                                          		// 0x00C0 (0x0008) [0x0000000000000000]              
	class APawn*                                       oPawn;                                            		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oTarget;                                          		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeOut;                                         		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nCompletionReason;                                		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              m_fTotalTimeRunning;                              		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                m_nReason;                                        		// 0x00DC (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDone : 1;                                      		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      ePower;                                           		// 0x00E4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1932 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventUsePower ( class AActor* pTarget );
	void eventCancelPower ( );
	void UsePowerCallback ( int nReason );
};

UClass* USFXSeqAct_UsePowerOn::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_WaitForGFxMovieClose
// 0x0008 (0x00C8 - 0x00C0)
class USFXSeqAct_WaitForGFxMovieClose : public USeqAct_Latent
{
public:
	class USFXGUIMovieKismet*                          movie;                                            		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      DeferredClose : 1;                                		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1933 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_WaitForGFxMovieClose::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_WaitForStreamingComplete
// 0x0004 (0x00C4 - 0x00C0)
class USFXSeqAct_WaitForStreamingComplete : public USeqAct_Latent
{
public:
	unsigned long                                      bWaitForVisibleOnly : 1;                          		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBlocking : 1;                                    		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bWaitForUnvisibleAndUnloaded : 1;                 		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1934 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_WaitForStreamingComplete::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_WaitUntilLevelIsLive
// 0x0000 (0x00C0 - 0x00C0)
class USFXSeqAct_WaitUntilLevelIsLive : public USeqAct_Latent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1935 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
	void AbortFor ( class AActor* latentActor, unsigned long bCancel );
};

UClass* USFXSeqAct_WaitUntilLevelIsLive::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_AmbientPerformance
// 0x002B (0x00FD - 0x00D2)
class USFXSeqEvt_AmbientPerformance : public USequenceEvent
{
public:
	struct FName                                       m_nmLinkedPerfName;                               		// 0x00D4 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmPoseSetName;                                  		// 0x00DC (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmPoseAnimName;                                 		// 0x00E4 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmGestureSetName;                               		// 0x00EC (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmGestureAnimName;                              		// 0x00F4 (0x0008) [0x0000000000000000]              
	unsigned char                                      m_eEventType;                                     		// 0x00FC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1936 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFXSeqEvt_AmbientPerformance::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_LevelIsLive
// 0x0006 (0x00D8 - 0x00D2)
class USFXSeqEvt_LevelIsLive : public USequenceEvent
{
public:
	unsigned long                                      m_bInitialized : 1;                               		// 0x00D4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1937 ];

		return pClassPointer;
	};

};

UClass* USFXSeqEvt_LevelIsLive::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_PersistentLevelStarted
// 0x0006 (0x00D8 - 0x00D2)
class USFXSeqEvt_PersistentLevelStarted : public USequenceEvent
{
public:
	unsigned long                                      bFreezeLevelStreaming : 1;                        		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKeepLoadMovie : 1;                               		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSkipTextureStreaming : 1;                        		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1938 ];

		return pClassPointer;
	};

};

UClass* USFXSeqEvt_PersistentLevelStarted::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_Touch
// 0x0000 (0x00FC - 0x00FC)
class USFXSeqEvt_Touch : public USeqEvent_Touch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1939 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void NotifyTouchingPawnDied ( class APawn* P );
	void eventToggled ( );
	bool CheckUnTouchActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest );
	bool CheckTouchActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest );
};

UClass* USFXSeqEvt_Touch::pClassPointer = NULL;

// Class SFXGame.SFXSeqVar_Hench
// 0x0024 (0x00A0 - 0x007C)
class USFXSeqVar_Hench : public USeqVar_Object
{
public:
	TArray< struct FName >                             m_aRealPriorities;                                		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFXSeqVar_Hench* >                  m_aLinkedHenchVars;                               		// 0x0088 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       m_nmObjValueTag;                                  		// 0x0094 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bBiggest : 1;                                   		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bSmallest : 1;                                  		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bFirst : 1;                                     		// 0x009C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bSecond : 1;                                    		// 0x009C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bPriorityMatchRequired : 1;                     		// 0x009C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bLinkedDataBuilt : 1;                           		// 0x009C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bCalculatedValue : 1;                           		// 0x009C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bCalculatedTag : 1;                             		// 0x009C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1940 ];

		return pClassPointer;
	};

};

UClass* USFXSeqVar_Hench::pClassPointer = NULL;

// Class SFXGame.SFXSeqVar_SavedBool
// 0x0010 (0x0070 - 0x0060)
class USFXSeqVar_SavedBool : public USeqVar_Bool
{
public:
	struct FGuid                                       MyGuid;                                           		// 0x0060 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1941 ];

		return pClassPointer;
	};

};

UClass* USFXSeqVar_SavedBool::pClassPointer = NULL;

// Class SFXGame.SFXSeqVar_ToolTip
// 0x0001 (0x0061 - 0x0060)
class USFXSeqVar_ToolTip : public USeqVar_Int
{
public:
	unsigned char                                      TipText;                                          		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1942 ];

		return pClassPointer;
	};

};

UClass* USFXSeqVar_ToolTip::pClassPointer = NULL;

// Class SFXGame.SFXAccomplishmentStorage
// 0x0070 (0x00AC - 0x003C)
class USFXAccomplishmentStorage : public UObject
{
public:
	struct FString                                     ServerCompletionString;                           		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     ServerProgressString;                             		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      ProgressValues;                                   		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     ServerRewardLevelString;                          		// 0x0060 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      RewardLevelValues;                                		// 0x006C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     ServerCompletionTimesString;                      		// 0x0078 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     ServerCompletionTimes2String;                     		// 0x0084 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     ServerCompletionTimes3String;                     		// 0x0090 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USFXOnlinePlayerStorage*                     CachedOnlinePlayerStorage;                        		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentChallengePoints;                           		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ChallengeSystemVersionNumber;                     		// 0x00A4 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsInvalid : 1;                                    		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1943 ];

		return pClassPointer;
	};

	void UpdateServerValue ( );
	void LoadCompleted ( );
	void SaveCompleted ( );
	void ReadFromProfileSettings ( class USFXAccomplishmentManager* AccomplishmentManager, class USFXProfileSettings* CurrentProfileSettings );
	void ReadFromStorage ( class USFXAccomplishmentManager* AccomplishmentManager );
	void UpdateFromAccomplishments ( unsigned long bChallengeSystemEnabled, TArray< int >* AccomplishmentIsComplete, TArray< struct FAccomplishmentProgress >* AccomplishmentProgressData, TArray< int >* AccomplishmentCompletionTimes );
	bool SetCompletionTimes ( TArray< int >* AccomplishmentCompletionTimes );
	void GetCompletionTimes ( TArray< struct FString >* CompletionStrings, TArray< int >* AccomplishmentCompletionTimes );
	void SetCurrentReward ( int nRewardID );
	void GetCurrentReward ( int* nRewardID, int* nRewardLevel );
	bool SetRewardLevels ( );
	struct FString GetRewardLevels ( );
	void UnlockRewardLevel ( int RewardID );
	int GetRewardLevel ( int RewardID );
	bool SetProgress ( TArray< struct FAccomplishmentProgress >* AccomplishmentProgressData );
	struct FString GetProgress ( );
	bool SetCompletion ( TArray< struct FAccomplishment >* AccomplishmentData, TArray< int >* AccomplishmentIsComplete );
	struct FString GetCompletion ( TArray< int >* AccomplishmentIsComplete );
	void AcknowledgeWriteComplete ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate );
	bool Write ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate );
	TArray< int > StringArrayToIntArray ( TArray< struct FString >* Strings );
	void Initialize ( int MinProgressValuesLength, int MinRewardValuesLength );
};

UClass* USFXAccomplishmentStorage::pClassPointer = NULL;

// Class SFXGame.SFXOnlineComponentMatchMakingBot
// 0x001C (0x0080 - 0x0064)
class USFXOnlineComponentMatchMakingBot : public USFXOnlineComponent
{
public:
	struct FPointer                                    VfTable_IISFXOnlineComponentMatchMakingBot;       		// 0x0064 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mNextActionDelay;                                 		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              IdleTimeBetweenActions;                           		// 0x006C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ActionProbability_Disconnect;                     		// 0x0070 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ActionProbability_Back;                           		// 0x0074 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ActionProbability_Forward;                        		// 0x0078 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      mActivated : 1;                                   		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      SimulateDisconnect : 1;                           		// 0x007C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      FastForwardMode : 1;                              		// 0x007C (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1945 ];

		return pClassPointer;
	};

	void OnCreateMatchComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void eventLaunchCreateMatch ( );
	void OnQuickMatchComplete ( unsigned char Result );
	void eventLaunchQuickMatch ( );
	void DoAction_GameOver ( unsigned char Action );
	void DoAction_Prompt ( unsigned char Action );
	void DoAction_InGame ( unsigned char Action );
	void DoAction_Lobby ( unsigned char Action );
	void DoAction_SelectCharacter ( unsigned char Action );
	void DoAction_MainMenu ( unsigned char Action );
	void DoAction_Splash ( unsigned char Action );
	void DoAction_Disconnect ( );
	unsigned char eventMovieNameToGameContext ( struct FName MovieName );
	unsigned char GetCurrentContext ( );
	unsigned char PickAction ( );
	void DoActionForCurrentGUIContext ( );
	void OnTick ( class USFXOnlineEvent* oEvent );
	void SetEnabled ( unsigned long Enabled );
	void SetOptions ( unsigned long withDisconnections, unsigned long fastForward );
	struct FName GetAPIName ( );
	void OnRelease ( );
	void OnInitialize ( class USFXOnlineSubsystem* oOnlineSubsystem );
};

UClass* USFXOnlineComponentMatchMakingBot::pClassPointer = NULL;

// Class SFXGame.SFXOnlineComponentUI
// 0x0058 (0x00BC - 0x0064)
class USFXOnlineComponentUI : public USFXOnlineComponent
{
public:
	struct FPointer                                    VfTable_IISFXOnlineComponentUserInterface;        		// 0x0064 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FScriptDelegate                             __ExternalCallback_OnDisplayNotification__Delegate;		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ExternalCallback_ClearNotifications__Delegate;  		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ExternalCallback_SetState__Delegate;            		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ExternalCallback_CloseEANetworking__Delegate;   		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ExternalCallback_HasCerberusDLC__Delegate;      		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ExternalCallback_ShowStore__Delegate;           		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       HandlerId;                                        		// 0x00B0 (0x0008) [0x0000000000000000]              
	class USFXSFHandler_EANetworking*                  m_oGUI;                                           		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1946 ];

		return pClassPointer;
	};

	void ClearDelegates ( );
	bool eventIsInMainMenu ( );
	void eventUpdateGalaxyAtWarLevel ( float newLevel );
	void eventShowStore ( TArray< struct FSFXOfferDescriptor > aOffers );
	void eventHasCerberusDLC ( unsigned long bVal );
	void eventClearNotifications ( TArray< unsigned char > MessageTypesToClear );
	void eventOnDisplayNotification ( struct FSFXOnlineMOTDInfo Info );
	void eventSetState ( unsigned char eState );
	void eventCloseEANetworking ( );
	void eventMessageBoxCallback ( unsigned long bAPressed, int Context );
	void SubmitParentEmail ( unsigned long bContinue, struct FString ParentEmail );
	void SubmitAccountDemographics ( unsigned long bContinue, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode );
	void SubmitEmailPasswordMismatch ( struct FString email, struct FString Password, unsigned char eReturnCode );
	void SubmitStore ( TArray< int > aiChosen );
	void SubmitCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, unsigned long bSubmit );
	void SubmitCerberusWelcomeMessage ( );
	void SubmitRedeemCode ( unsigned long bContinue, struct FString i_sCode );
	void SubmitCerberusIntro ( unsigned char eReturnCode );
	void SubmitNucleusWelcomeMessage ( );
	void SubmitTermsOfService ( unsigned long bAccept );
	void SubmitCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bSubmit );
	void SubmitMessageBox ( unsigned char eReturnEnum );
	void SubmitNucleusLogin ( struct FString email, struct FString Password, unsigned char eReturnCode );
	void SubmitIntroPage ( unsigned long bContinue );
	void ShowParentEmail ( );
	void ShowAccountDemographics ( TArray< struct FString > m_CountryCodeList, TArray< struct FString > m_CountryDisplayList );
	bool ShowQueuedMessageBox ( struct FString sMessage, void* srButton1Text );
	void ShowEmailPasswordMismatch ( struct FString email, struct FString Password );
	void ShowCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, TArray< struct FString > m_CountryCodeList, TArray< struct FString > m_CountryDisplayList );
	void ShowCerberusWelcomeMessage ( );
	void ShowRedeemCode ( );
	void ShowCerberusIntro ( );
	void ShowNucleusWelcomeMessage ( );
	void ShowTermsOfService ( struct FString i_sTermsOfService, struct FString i_sPrivacyPolicy, unsigned long bTOSChanged );
	void ShowCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bUnderage );
	void eventShowRedeemCodeConfirmation ( );
	void ShowMessageBox ( struct FString sTitle, struct FString sMessage, struct FString sButton1Text, struct FString sButton2Text, struct FString sButton3Text );
	void ShowNucleusLogin ( struct FString email, struct FString Password, int eScreenState );
	void ShowIntroPage ( );
	void ExternalCallback_ShowStore ( TArray< struct FSFXOfferDescriptor > aOffers );
	void ExternalCallback_HasCerberusDLC ( unsigned long bVal );
	void ExternalCallback_CloseEANetworking ( );
	void ExternalCallback_SetState ( unsigned char eState );
	void ExternalCallback_ClearNotifications ( TArray< unsigned char > MessageTypesToClear );
	void ExternalCallback_OnDisplayNotification ( unsigned char Type, struct FString MessageData, struct FString Title, struct FString Image, int DLC_ID, int TrackingID );
	void AcceptTOS ( unsigned long bAccept );
	void DownloadContent ( unsigned long bCerberusContent );
	void Disconnect ( );
	void Connect ( unsigned char connectMode );
	void ClearGui ( );
	void SetGui ( class USFXSFHandler_EANetworking* i_NetworkingGUI );
	void OnNetworkWaitFinished ( class USFXOnlineEvent* oEvent );
	void OnNetworkWaitStart ( class USFXOnlineEvent* oEvent );
	void ShowNetworkWaitUI ( unsigned long Show );
	void OnDisconnected ( class USFXOnlineEvent* oEvent );
	void OnTick ( class USFXOnlineEvent* oEvent );
	struct FName GetAPIName ( );
	void OnRelease ( );
	void OnInitialize ( class USFXOnlineSubsystem* oOnlineSubsystem );
};

UClass* USFXOnlineComponentUI::pClassPointer = NULL;

// Class SFXGame.SFXOnlineGameEntryFlow
// 0x0096 (0x00FA - 0x0064)
class USFXOnlineGameEntryFlow : public USFXOnlineComponent
{
public:
	struct FPointer                                    VfTable_IISFXOnlineComponentGameEntryFlow;        		// 0x0064 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUniqueNetId                                ZeroId;                                           		// 0x0068 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       PopupName;                                        		// 0x0070 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class USFXOnlineGameSettings*                      DeferredGameSettings;                             		// 0x0078 (0x0004) [0x0000000000000000]              
	void*                                              srJoiningGame;                                    		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srConnecting;                                     		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srInvalidControllerJoin;                          		// 0x0084 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srMultiplayerUpdate;                              		// 0x0088 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srDownloadRequiredDataError;                      		// 0x008C (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srOK;                                             		// 0x0090 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srCancel;                                         		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srAlreadyConnected;                               		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srOnlinePassRequired;                             		// 0x009C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                KismetEventTicksDelay;                            		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CurrentKismetEventTicksDelay;                     		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      InvitePlatformData[ 0x50 ];                       		// 0x00A8 (0x0050) [0x0000000000000000]              
	unsigned char                                      m_FlowType;                                       		// 0x00F8 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_LoginUIState;                                   		// 0x00F9 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1947 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void ActivateConnectToMapFlow ( struct FString mapPackageName, unsigned long fromGalaxyMap, unsigned char Difficulty, int EnemyType );
	void ActivateMPLobbyAccessFlow ( );
	void ProcessInvite ( );
	void ActivateInviteFlow ( struct FOnlineGameSearchResult* InviteResult );
	void ClearInviteData ( );
	bool ActivateConnectFlow ( );
	void OnInviteJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void InviteStartConnecting ( );
	void UpdateMPDLCInfo ( );
	void ClearMainMenuFlow ( unsigned long Success );
	void CancelSearchInput ( unsigned long bAPressed, int nContext );
	void CancelConnecting ( unsigned long bAPressed, int nContext );
	void HidePopup ( );
	void ShowPopup ( void* bodyStr, unsigned long showOkButton );
	void ReconstructInviteData ( class UOnlineGameSearch** Invite );
	void ReconstructInviteDataNative ( int ResultNum, class UOnlineGameSearch** Invite );
	void ArchiveInviteData ( struct FOnlineGameSearchResult* Invite );
	void OS_OnTick ( class USFXOnlineEvent* oEvent );
	class Asfxplayercontroller* GetLocalPlayerController ( );
	void AccessLobbyFlowComplete ( );
	bool HasValidDeployedCharacter ( );
	void InviteFlowComplete ( struct FOnlineGameSearchResult* InviteResult );
	void OpenMainMenu ( );
	class USFXGUIMovie* GetCurrentFocusMovie ( );
	class USFXOnlineGameSettings* GetDeferredGameSettings ( );
	void OnKitDeployed ( unsigned long Success );
	void OnConnectToMapFlowCompleted ( unsigned long Success );
	bool IsInConnectToMapFlow ( );
	bool IsInGalaxyMapFlow ( );
	class USFXGUIMovie* GetMovie ( struct FName nmMovie );
	class USFXGUIMovie* GetMainMenuMovie ( );
	bool IsWaitingForKitSelect ( );
	bool IsInSplash ( );
	bool IsInMainMenu ( );
	bool IsMovieLoaded ( struct FName MovieName );
	bool IsInvitedUserActive ( struct FUniqueNetId* invitedId );
	void eventSetLoginState ( unsigned char loginState );
	struct FName GetAPIName ( );
	void OnRelease ( );
	void OnInitialize ( class USFXOnlineSubsystem* oOnlineSubsystem );
};

UClass* USFXOnlineGameEntryFlow::pClassPointer = NULL;

// Class SFXGame.SFXOnlinePlayerStorage
// 0x0017 (0x007C - 0x0065)
class USFXOnlinePlayerStorage : public UOnlinePlayerStorage
{
public:
	TArray< struct FWriteEvent >                       WriteEventData;                                   		// 0x0068 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              fMinDelayBetweenWrite;                            		// 0x0074 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                iMaxBytesPerStorage;                              		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1948 ];

		return pClassPointer;
	};

	void AcknowledgeWriteComplete ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate );
	bool Write ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate );
	void eventSetToDefaults ( );
	void SetBaseProfileSettings ( );
};

UClass* USFXOnlinePlayerStorage::pClassPointer = NULL;

// Class SFXGame.SFXOnlineSaveGameMP
// 0x0048 (0x0084 - 0x003C)
class USFXOnlineSaveGameMP : public UObject
{
public:
	struct FString                                     ServerBaseString;                                 		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ServerNewReinforcementsString;                    		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ServerClassStrings;                               		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ServerCharacterStrings;                           		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ServerFaceCodesString;                            		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXOnlinePlayerStorage*                     CachedOnlinePlayerStorage;                        		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DevelopmentVersionNumber;                         		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bDebugSaving : 1;                                 		// 0x0080 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bUseOldSavingSystem : 1;                          		// 0x0080 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1949 ];

		return pClassPointer;
	};

	void Initialize ( );
	void LoadToSaveManager ( class USFXSaveManagerMP** MPSaveManager );
	void UpdateCharacterServerValue ( int nCharacterIndex );
	void UpdateClassServerValue ( int nClassIndex );
	void UpdateNewReinforcementsServerValue ( );
	void UpdateFaceCodesServerValue ( );
	void UpdateBaseServerValue ( );
	void UpdateServerValues ( );
	void LoadCompleted ( );
	void SaveComplete ( );
	void UpdateCharacterValues2 ( class USFXSaveManagerMP** MPSaveManager );
	void UpdateCharacterValues ( class USFXSaveManagerMP* MPSaveManager );
	void UpdateClassValues2 ( class USFXSaveManagerMP** MPSaveManager );
	void UpdateClassValues ( class USFXSaveManagerMP* MPSaveManager );
	void UpdateNewReinforcementsValues ( class USFXSaveManagerMP** MPSaveManager );
	void UpdateFaceCodeValues ( class USFXSaveManagerMP** MPSaveManager );
	void UpdateBaseValues2 ( unsigned long ForceResaveBase, class USFXSaveManagerMP** MPSaveManager );
	void UpdateBaseValues ( class USFXSaveManagerMP* MPSaveManager, unsigned long bForceResaveBase );
	void UpdateFromSaveManager ( unsigned long ForceResaveBase, class USFXSaveManagerMP** MPSaveManager );
	bool SetPlayerVariablesV18 ( struct FString* PlayerVariableString, class USFXSaveManagerMP** MPSaveManager );
	bool SetPlayerVariables ( struct FString* PlayerVariableString, class USFXSaveManagerMP** MPSaveManager );
	bool SetWeaponMods ( struct FString* WeaponModString, TArray< struct FWeaponModRecord >* WeaponMods );
	bool SetWeapons ( struct FString* WeaponString, TArray< struct FWeaponRecord >* Weapons );
	bool SetPowers ( int Version, struct FString* PowerString, TArray< struct FPowerRecord >* Powers );
	struct FString GetPlayerVariables2 ( class USFXSaveManagerMP** MPSaveManager );
	bool GetPlayerVariables ( class USFXSaveManagerMP* MPSaveManager, struct FString* OutVars );
	int eventGetPurchasableItemID ( struct FString* className );
	int eventGetMaxPurchaseableItemID ( );
	struct FString GetWeaponMods ( TArray< struct FWeaponModRecord >* WeaponMods );
	struct FString GetWeapons ( TArray< struct FWeaponRecord >* WeaponRecords );
	struct FString GetPowers ( TArray< struct FPowerRecord >* Powers );
	struct FString GetPowerString ( struct FPowerRecord Power );
	unsigned char SetCharacter ( int CharacterIndex, class USFXSaveManagerMP** MPSaveManager );
	struct FString GetCharacter2 ( int nCharacterIndex, class Usfxmpcharacterrecord** CharacterRecord, class USFXSaveManagerMP** MPSaveManager );
	bool GetCharacter ( class Usfxmpcharacterrecord* CharacterRecord, int Index, class USFXSaveManagerMP* MPSaveManager, struct FString* CharacterString );
	unsigned char SetClass ( int ClassIndex, class USFXSaveManagerMP** MPSaveManager );
	struct FString GetClass2 ( class Usfxmpclassrecord** ClassRecord );
	bool GetCharacterClass ( class Usfxmpclassrecord* ClassRecord, struct FString* ClassString );
	unsigned char SetNewReinforcements ( class USFXSaveManagerMP** MPSaveManager );
	struct FString GetNewReinforcements ( class USFXSaveManagerMP** MPSaveManager );
	unsigned char SetFaceCodes ( class USFXSaveManagerMP** MPSaveManager );
	struct FString GetFaceCodes ( class USFXSaveManagerMP** MPSaveManager );
	unsigned char SetBase ( class USFXSaveManagerMP** MPSaveManager );
	struct FString GetBase2 ( class USFXSaveManagerMP** MPSaveManager );
	bool GetBase ( class USFXSaveManagerMP* MPSaveManager, struct FString* BaseString );
	void AcknowledgeWriteComplete ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate );
	bool Write ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate );
	int HexDecodeNumber ( struct FString hexToDecode );
	struct FString HexEncodeNumber ( int numToEncode );
};

UClass* USFXOnlineSaveGameMP::pClassPointer = NULL;

// Class SFXGame.BioBaseSquad
// 0x0032 (0x0228 - 0x01F6)
class ABioBaseSquad : public AActor
{
public:
	TArray< class APawn* >                             Members;                                          		// 0x01F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ABioPlaypenVolume* >                 PlaypenVolumes;                                   		// 0x0204 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ASFXCombatZone* >                    CombatZones;                                      		// 0x0210 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBioSquadTargetData*                         TargetData;                                       		// 0x021C (0x0004) [0x0000000000000000]              
	class ABioPawn*                                    CachedPlayerPawn;                                 		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bSquadHasVehicle : 1;                           		// 0x0224 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsPlayerSquad : 1;                               		// 0x0224 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      m_bCombatEnabled : 1;                             		// 0x0224 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bSquadEnabled : 1;                                		// 0x0224 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      PathingTowardCombatZone : 1;                      		// 0x0224 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1950 ];

		return pClassPointer;
	};

	void NotifyCombatZoneRemoved ( );
	void NotifyCombatZoneAdded ( );
	void eventDisableSquad ( );
	void eventEnableSquad ( );
	class ABioBaseSquad* MakeHackable ( );
	void eventMemberRemoved ( class APawn* oPawn );
	void RemoveDyingMember ( class APawn* oPawn );
	int eventAddMember ( class APawn* Pawn, unsigned long bCheckPlaypens );
	bool Died ( class APawn* member, class AController* Killer );
	void NotifyPlaypenChanged ( );
	void eventNotifyNoEnemiesPerceived ( );
	void eventNotifyEnemyPerceived ( );
	bool GetClosestCombatZoneOrigin ( struct FVector Position, struct FVector* Origin );
	bool IsPositionInCombatZone ( struct FVector Position );
	bool IsCoverInCombatZone ( class ACoverSlotMarker* SlotMarker );
	bool HasCombatZone ( class ASFXCombatZone* CombatZone );
	void RemoveCombatZone ( class ASFXCombatZone* CombatZone );
	void AddCombatZone ( class ASFXCombatZone* CombatZone );
	class AActor* GetPlaypenReturnPoint ( class APawn* oPawn );
	class AActor* GetPlaypenNavOrigin ( class APawn* oPawn );
	void UpdatePlaypen ( );
	bool IsVolumeInPlaypen ( class ABioPlaypenVolume* Volume );
	void RemoveVolumeFromPlaypen ( class ABioPlaypenVolume* Volume );
	void AddVolumeToPlaypen ( class ABioPlaypenVolume* Volume );
	bool HasPlaypen ( );
	bool IsActorInSubtractivePlaypen ( class AActor* oActor );
	bool IsActorInPlaypen ( class AActor* oActor );
	bool IsPositionInSubtractivePlaypen ( struct FVector* vLocation );
	bool IsPositionInPlaypen ( struct FVector* vLocation );
	void SquadMembers ( class ABioAiController** oController );
	void SetMemberMoveIndicator ( int nIndex, class ABioTacticalMoveToIndicator* oIndicator );
	class ABioTacticalMoveToIndicator* GetMemberMoveIndicator ( int nIndex );
	bool RemoveMember ( class APawn* pPawn );
};

UClass* ABioBaseSquad::pClassPointer = NULL;

// Class SFXGame.BioPlayerSquad
// 0x0020 (0x0248 - 0x0228)
class ABioPlayerSquad : public ABioBaseSquad
{
public:
	class ABioTacticalMoveToIndicator*                 MoveIndicators[ 0x3 ];                            		// 0x0228 (0x000C) [0x0000000000000000]              
	class ABioPawn*                                    m_playerPawn;                                     		// 0x0234 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    m_InitialPlayerPawn;                              		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRevivalRange;                                  		// 0x023C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fPercentHealthOnResurrection;                   		// 0x0240 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      m_bEngagedHostileAction : 1;                      		// 0x0244 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1951 ];

		return pClassPointer;
	};

	void SetMemberMoveIndicator ( int nIndex, class ABioTacticalMoveToIndicator* oIndicator );
	class ABioTacticalMoveToIndicator* GetMemberMoveIndicator ( int nIndex );
	void eventMemberRemoved ( class APawn* oPawn );
	int eventAddMember ( class APawn* Pawn, unsigned long bCheckPlaypens );
	bool IsFieldingInitialPlayerPawn ( );
	void SquadExitCombatMode ( );
	void SquadEnterCombatMode ( unsigned long bEngageEnemy );
	void RemoveDyingMember ( class APawn* oPawn );
	bool RemoveMember ( class APawn* pPawn );
	bool Died ( class APawn* pPawn, class AController* Killer );
	void eventCombatEnded ( );
	void NotifyNoEnemiesPerceived ( );
	void NotifyEnemyPerceived ( );
	void eventSetPlayerPawn ( class ABioPawn* PlayerPawn );
	void eventPostBeginPlay ( );
};

UClass* ABioPlayerSquad::pClassPointer = NULL;

// Class SFXGame.BioSquadHoldMarker
// 0x001C (0x02E0 - 0x02C4)
class ABioSquadHoldMarker : public ANavigationPoint
{
public:
	struct FString                                     BaseTag;                                          		// 0x02C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     LiftOffset;                                       		// 0x02D0 (0x000C) [0x0000000000000000]              
	class AInterpActor*                                MyLift;                                           		// 0x02DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1952 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
	void SetBaseByTag ( );
};

UClass* ABioSquadHoldMarker::pClassPointer = NULL;

// Class SFXGame.BioSquadLinesComponent
// 0x0018 (0x01E4 - 0x01CC)
class UBioSquadLinesComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      vPlayPenLineColor;                                		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      vSquadLeaderColor;                                		// 0x01D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      vSquadMemberColor;                                		// 0x01D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      vSquadAssetColor;                                 		// 0x01D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      vDynamicCoverColor;                               		// 0x01DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bInited : 1;                                      		// 0x01E0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1953 ];

		return pClassPointer;
	};

};

UClass* UBioSquadLinesComponent::pClassPointer = NULL;

// Class SFXGame.BioSquadTargetData
// 0x0060 (0x009C - 0x003C)
class UBioSquadTargetData : public UObject
{
public:
	struct FSquadTargetData                            m_aSimpleSquadTargets[ 0x3 ];                     		// 0x003C (0x0060) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1954 ];

		return pClassPointer;
	};

};

UClass* UBioSquadTargetData::pClassPointer = NULL;

// Class SFXGame.SFXTelemetry
// 0x0074 (0x00B0 - 0x003C)
class USFXTelemetry : public UObject
{
public:
	TArray< struct FTelemetryHookConfig >              ConfigHooks;                                      		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      BlacklistPlotsInt;                                		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      BlacklistPlotsFloat;                              		// 0x0054 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      BlacklistPlotsBool;                               		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x006C (0x003C) UNKNOWN PROPERTY: MapProperty SFXGame.SFXTelemetry.Hooks
	class USFXTelemetryGameSession*                    GameSession;                                      		// 0x00A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bEnable : 1;                                      		// 0x00AC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bCachedCollectionEnabledInProfile : 1;            		// 0x00AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bInitialized : 1;                                 		// 0x00AC (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1955 ];

		return pClassPointer;
	};

	void SendCachedDisconnectEvent ( );
	void SendLanguageOverrideSettings ( );
	struct FGuid eventGetCharacterID ( class ABioPawn* Pawn );
	void SendProfileDependentTelemetry ( unsigned char LocalUserNum );
	void SendTelemetryOnProfileReadComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnAuthenticate ( );
	void eventInitConnectionDelegates ( );
	void OnDisconnect ( int Error, int PreviousState, int NewState, struct FString SessionId );
	bool IsCollectionEnabled ( );
	void AddAttributeToArray ( unsigned char Type, struct FString Key, int nData, float fData, unsigned long bData, struct FName nmData, TArray< struct FTelemetryAttribute >* Attributes, struct FString* sData );
	void SendAchievement ( int AchievementId );
	struct FString GenerateUniqueClassId ( class UObject* Object );
	struct FString GenerateUniqueClassIdFromString ( struct FString* FullFriendlyName );
	int FStringToFourCC ( struct FString* s4CharID );
	void SendArray ( struct FName HookName, TArray< struct FTelemetryAttribute > Attributes );
	void SendBool ( struct FName HookName, unsigned long B );
	void SendFloat ( struct FName HookName, float F );
	void SendInt ( struct FName HookName, int i );
	void SendString ( struct FName HookName, struct FString S );
	void SendName ( struct FName HookName, struct FName N );
	void SendVoid ( struct FName HookName );
	class USFXTelemetryGameSession* GetInstanceGameSession ( );
};

UClass* USFXTelemetry::pClassPointer = NULL;

// Class SFXGame.SFXTelemetryGameSession
// 0x0098 (0x00D4 - 0x003C)
class USFXTelemetryGameSession : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FDouble                                     CareerTime;                                       		// 0x0044 (0x0008) [0x0000000000000000]              
	struct FDouble                                     GameTime;                                         		// 0x004C (0x0008) [0x0000000000000000]              
	struct FDouble                                     SessionTime;                                      		// 0x0054 (0x0008) [0x0000000000000000]              
	struct FDouble                                     IdleTime;                                         		// 0x005C (0x0008) [0x0000000000000000]              
	struct FQWord                                      MatchID;                                          		// 0x0064 (0x0008) [0x0000000000000000]              
	struct FString                                     MapName;                                          		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Career;                                           		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Base64_CharacterID;                               		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           SessionStartMapExclusion;                         		// 0x0090 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FName                                       ChunkName;                                        		// 0x009C (0x0008) [0x0000000000000000]              
	int                                                Difficulty;                                       		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                MPDifficulty;                                     		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              MatchStartTime;                                   		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                RoundID;                                          		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                EnemyType;                                        		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                TotalCredits;                                     		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                TotalScore;                                       		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                TotalSupplyDrops;                                 		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              StoreOpenedTime;                                  		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                StoreOpenCreditsSpent;                            		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                StoreOpenCashSpent;                               		// 0x00CC (0x0004) [0x0000000000000000]              
	unsigned long                                      bStarted : 1;                                     		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSentBootHooks : 1;                               		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSentBugSentryHook : 1;                           		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRandomMap : 1;                                   		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bRandomEnemy : 1;                                 		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bPrivateGame : 1;                                 		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bPlayerHasMic : 1;                                		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bPlayerUsedMic : 1;                               		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000080] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1956 ];

		return pClassPointer;
	};

	void eventSendClientMPSessionStart ( );
	void eventSendServerMPSessionStart ( );
	void eventSendServerMPSessionEnd ( );
	void SetMPMatchSettings ( unsigned long RandomMap, unsigned long RandomEnemy, unsigned long PrivateGame, int NewDifficulty, int NewEnemyType );
	void Encode64_GUID ( struct FGuid* i_guid, struct FString* o_Base64Result );
};

UClass* USFXTelemetryGameSession::pClassPointer = NULL;

// Class SFXGame.SFXVehicle_MountedGun
// 0x006C (0x0668 - 0x05FC)
class ASFXVehicle_MountedGun : public ASVehicle
{
public:
	struct FRotator                                    AimDir;                                           		// 0x05FC (0x000C) [0x0000000000000000]              
	struct FRotator                                    DesiredAimDir;                                    		// 0x0608 (0x000C) [0x0000000000000000]              
	class AController*                                 Claim;                                            		// 0x0614 (0x0004) [0x0000000000000000]              
	class USFXLoadoutData*                             Loadout;                                          		// 0x0618 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreviousCameraPitch;                              		// 0x061C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxPitchAngle;                                    		// 0x0620 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0624 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RadarRange;                                       		// 0x0628 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RadarFOV;                                         		// 0x062C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USkelControlLookAt*                          oSkelControlGun;                                  		// 0x0630 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlLookAt*                          oSkelControlShield;                               		// 0x0634 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXAnimSetCookSpec*                         DriverAnimInfo;                                   		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              YawClamp;                                         		// 0x063C (0x0004) [0x0000000000000000]              
	float                                              TrackSpeed;                                       		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SearchSpeed;                                      		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TooCloseDist;                                     		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EligibleAIRange;                                  		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      MountingPoint;                                    		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerDamageReduction;                            		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxYawSpeed;                                      		// 0x0658 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 TurretLoopStart;                                  		// 0x065C (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 TurretLoopStop;                                   		// 0x0660 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWeaponFiring : 1;                                		// 0x0664 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIsPaused : 1;                                  		// 0x0664 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bAllowedToLeave : 1;                              		// 0x0664 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAICanUse : 1;                                    		// 0x0664 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bFiring : 1;                                      		// 0x0664 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bForceTightAim : 1;                               		// 0x0664 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1957 ];

		return pClassPointer;
	};

	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	void DriverDied ( class UClass* DamageType );
	struct FRotator GetRandomRotForTurretScan ( class Asfxai_core* C );
	void AIIdleNotification ( class Asfxai_core* C );
	void UpdateAIController ( class Asfxai_core* C, float DeltaTime );
	bool IsWithinRotationClamps ( struct FVector Loc );
	bool UnclaimTurret ( class AController* C );
	bool ClaimTurret ( class AController* C );
	bool CanEnterVehicle ( class APawn* P );
	bool PlaceExitingDriver ( class APawn* ExitingDriver );
	bool DriverLeave ( unsigned long bForceLeave );
	bool DriverEnter ( class APawn* P );
	bool TryToDrive ( class APawn* P );
	bool AITryToDriveMe ( class APawn* P );
	struct FRotator GetViewRotation ( );
	void Tick ( float DeltaTime );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRot, struct FRotator* OutDeltaRot );
	bool TurretClampYaw ( struct FRotator* Rot );
	bool IsPendingFire ( unsigned char InFiringMode );
	void AddDefaultInventory ( );
	bool CanBeDrivenBy ( class Asfxpawn* PossibleDriver );
	void Used ( class AActor* User );
	void UpdateForMovingBase ( class AActor* BaseActor );
};

UClass* ASFXVehicle_MountedGun::pClassPointer = NULL;

// Class SFXGame.SFXVehicleHover
// 0x0108 (0x0704 - 0x05FC)
class ASFXVehicleHover : public ASVehicle
{
public:
	struct FVector                                     JumpForce;                                        		// 0x05FC (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector                                     BoostForce;                                       		// 0x0608 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector                                     OffGroundForce;                                   		// 0x0614 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     m_vPauseVelocity;                                 		// 0x0620 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USFXLoadoutData*                             Loadout;                                          		// 0x062C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentThrustJuice;                               		// 0x0630 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxThrustJuice;                                   		// 0x0634 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ThrustRegenerationFactor;                         		// 0x0638 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UWwiseAudioComponent*                        AudioComponent;                                   		// 0x063C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UWwiseEventPairObject*                       VehicleMotorEventPair;                            		// 0x0640 (0x0004) [0x0000000000000000]              
	class UWwiseEventPairObject*                       VehicleVerticalBoostEventPair;                    		// 0x0644 (0x0004) [0x0000000000000000]              
	class UWwiseEventPairObject*                       VehicleForwardBoostEventPair;                     		// 0x0648 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 VehicleVerticalBoostEndEvent;                     		// 0x064C (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 VehicleForwardBoostEndEvent;                      		// 0x0650 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 VehicleBottomOutEvent;                            		// 0x0654 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 VehicleMiningSuccessEvent;                        		// 0x0658 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 VehicleMiningFailureEvent;                        		// 0x065C (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 VehicleStartupEvent;                              		// 0x0660 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 VehicleShutdownEvent;                             		// 0x0664 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 LeftSuspensionEvent;                              		// 0x0668 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 RightSuspensionEvent;                             		// 0x066C (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 HitSomething;                                     		// 0x0670 (0x0004) [0x0000000000000000]              
	class UWwiseEventPairObject*                       VehicleMiningEventPair;                           		// 0x0674 (0x0004) [0x0000000000000000]              
	class UWwiseEventPairObject*                       VehicleTurretMovementStartEventPair;              		// 0x0678 (0x0004) [0x0000000000000000]              
	float                                              LastLeftSuspension;                               		// 0x067C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRightSuspension;                              		// 0x0680 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UForceFeedbackWaveform*                      ThrustFeedback;                                   		// 0x0684 (0x0004) [0x0000000000000000]              
	float                                              PreviousCameraPitch;                              		// 0x0688 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OnGroundJumpMultiplier;                           		// 0x068C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ForwardThrustBurnRate;                            		// 0x0690 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              VerticalThrustBurnRate;                           		// 0x0694 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ThrustRegenerationDelay;                          		// 0x0698 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BurnOutPercentage;                                		// 0x069C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ForcedRegenAmount;                                		// 0x06A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeLeftToStartRegen;                             		// 0x06A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SelfRepairDelay;                                  		// 0x06A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SelfRepairRate;                                   		// 0x06AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastHitTime;                                      		// 0x06B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HitDamage;                                        		// 0x06B4 (0x0004) [0x0000000000000000]              
	float                                              MaxPitchAngle;                                    		// 0x06B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class ASFXMiningNode*                              CurrentMiningNode;                                		// 0x06BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TotalMiningTime;                                  		// 0x06C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeToNextMiningImpulse;                          		// 0x06C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UForceFeedbackWaveform*                      MiningFeedbackWaveForm;                           		// 0x06C8 (0x0004) [0x0000000000000000]              
	float                                              TimeToNextMiningFlash;                            		// 0x06CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeToFlashMiningIndicator;                       		// 0x06D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MiningIndicatorColor;                             		// 0x06D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MiningFlashDelay;                                 		// 0x06D8 (0x0004) [0x0000000000000000]              
	float                                              MiningFlashDuration;                              		// 0x06DC (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             m_oMiningVFXTemplate;                             		// 0x06E0 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    MiningPSC;                                        		// 0x06E4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             m_oAfterburnerVisual;                             		// 0x06E8 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    LeftAfterburnerPSC;                               		// 0x06EC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    RightAfterburnerPSC;                              		// 0x06F0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x06F4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RadarRange;                                       		// 0x06F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RadarFOV;                                         		// 0x06FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bWeaponFiring : 1;                                		// 0x0700 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAudioXBoostEventStopped : 1;                     		// 0x0700 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bAudioZBoostEventStopped : 1;                     		// 0x0700 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bTurrentMovementSoundStopped : 1;                 		// 0x0700 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bMiningFailed : 1;                                		// 0x0700 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bIsPaused : 1;                                  		// 0x0700 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1958 ];

		return pClassPointer;
	};

	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	void eventRanInto ( class AActor* Other );
	bool IsFriendly ( class APawn* Other );
	bool IsHostile ( class APawn* Other );
	struct FRotator GetViewRotation ( );
	void Tick ( float DeltaTime );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool IsPendingFire ( unsigned char InFiringMode );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void AddDefaultInventory ( );
};

UClass* ASFXVehicleHover::pClassPointer = NULL;

// Class SFXGame.SFXVehicleSimHover
// 0x00A4 (0x0134 - 0x0090)
class USFXVehicleSimHover : public USVehicleSimBase
{
public:
	struct FVector                                     RandForce;                                        		// 0x0090 (0x000C) [0x0000000000000000]              
	struct FVector                                     RandTorque;                                       		// 0x009C (0x000C) [0x0000000000000000]              
	struct FVector                                     OldVelocity;                                      		// 0x00A8 (0x000C) [0x0000000000000000]              
	float                                              MaxThrustForce;                                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxReverseForce;                                  		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LongDamping;                                      		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxStrafeForce;                                   		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LatDamping;                                       		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirectionChangeForce;                             		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRiseForce;                                     		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpDamping;                                        		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnTorqueFactor;                                 		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnTorqueMax;                                    		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnDamping;                                      		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxYawRate;                                       		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchTorqueFactor;                                		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchTorqueMax;                                   		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchDamping;                                     		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollTorqueTurnFactor;                             		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollTorqueStrafeFactor;                           		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollTorqueMax;                                    		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollDamping;                                      		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopThreshold;                                    		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRandForce;                                     		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandForceInterval;                                		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StrafeTurnDamping;                                		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              TargetHeading;                                    		// 0x0110 (0x0004) [0x0000000000000000]              
	float                                              TargetPitch;                                      		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              PitchViewCorrelation;                             		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              AccumulatedTime;                                  		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              StabilizationForceMultiplier;                     		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentStabilizationMultiplier;                   		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              StoppedBrakeTorque;                               		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              HardLimitAirSpeedScale;                           		// 0x012C (0x0004) [0x0000000000000000]              
	unsigned long                                      bAllowZThrust : 1;                                		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFullThrustOnDirectionChange : 1;                 		// 0x0130 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShouldCutThrustMaxOnImpact : 1;                  		// 0x0130 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRecentlyHit : 1;                                 		// 0x0130 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bStrafeAffectsTurnDamping : 1;                    		// 0x0130 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bHeadingInitialized : 1;                          		// 0x0130 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bStabilizeStops : 1;                              		// 0x0130 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDisableWheelsWhenOff : 1;                        		// 0x0130 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bRepulsorCollisionEnabled : 1;                    		// 0x0130 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bCanClimbSlopes : 1;                              		// 0x0130 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bUnPoweredDriving : 1;                            		// 0x0130 (0x0004) [0x0000000000000000] [0x00000400] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1959 ];

		return pClassPointer;
	};

};

UClass* USFXVehicleSimHover::pClassPointer = NULL;

// Class SFXGame.BioMapNote
// 0x002D (0x0223 - 0x01F6)
class ABioMapNote : public AActor
{
public:
	float                                              m_fVisibleRange;                                  		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieInfo*                               m_oAreaMap;                                       		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              m_sMapNoteName;                                   		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nLinkedQuest;                                   		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              m_sJournalTask;                                   		// 0x0208 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Argument;                                         		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nIndex;                                         		// 0x0210 (0x0004) [0x0000000000000000]              
	float                                              m_fUpdateDelay;                                   		// 0x0214 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fUpdateTimer;                                   		// 0x0218 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bReducedVisibility : 1;                         		// 0x021C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bShowOnRadar : 1;                               		// 0x021C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bShowOnAreamap : 1;                             		// 0x021C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bLinkedToJournal : 1;                           		// 0x021C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bSeen : 1;                                      		// 0x021C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bRenderInWorld : 1;                             		// 0x021C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bRenderInWorld_LastTick : 1;                    		// 0x021C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned char                                      Region;                                           		// 0x0220 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x0221 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Conditional;                                      		// 0x0222 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1960 ];

		return pClassPointer;
	};

	bool ShowMapNote ( unsigned long bAreaMap );
};

UClass* ABioMapNote::pClassPointer = NULL;

// Class SFXGame.BioPathPoint
// 0x0004 (0x02C8 - 0x02C4)
class ABioPathPoint : public ANavigationPoint
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysReachable : 1;                             		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1961 ];

		return pClassPointer;
	};

	bool OnCreatureReachedWayPoint ( class APawn* PathFindingCreature );
};

UClass* ABioPathPoint::pClassPointer = NULL;

// Class SFXGame.BioWaypointLinesComponent
// 0x0004 (0x01D0 - 0x01CC)
class UBioWaypointLinesComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x01CC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1962 ];

		return pClassPointer;
	};

};

UClass* UBioWaypointLinesComponent::pClassPointer = NULL;

// Class SFXGame.BioWaypointSet
// 0x0012 (0x0208 - 0x01F6)
class ABioWaypointSet : public AActor
{
public:
	TArray< struct FActorReference >                   WaypointReferences;                               		// 0x01F8 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      AlwaysShow : 1;                                   		// 0x0204 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1963 ];

		return pClassPointer;
	};

	class ANavigationPoint* GetWaypoint ( int nIdx );
	int FindNearestPoint ( struct FVector vLoc );
};

UClass* ABioWaypointSet::pClassPointer = NULL;

// Class SFXGame.SFXAnimNotify_RaceWwiseEvent
// 0x0000 (0x0050 - 0x0050)
class USFXAnimNotify_RaceWwiseEvent : public UAnimNotify_WwiseEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1964 ];

		return pClassPointer;
	};

};

UClass* USFXAnimNotify_RaceWwiseEvent::pClassPointer = NULL;

// Class SFXGame.RvrAnimNotifyClientEffect
// 0x0014 (0x0050 - 0x003C)
class URvrAnimNotifyClientEffect : public UAnimNotify
{
public:
	struct FVector                                     m_vSpawnParameters;                               		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   m_pEffect;                                        		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bStop : 1;                                      		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bAllowCooldown : 1;                             		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1965 ];

		return pClassPointer;
	};

};

UClass* URvrAnimNotifyClientEffect::pClassPointer = NULL;

// Class SFXGame.RvrClientEffectActor
// 0x000E (0x0204 - 0x01F6)
class ARvrClientEffectActor : public AActor
{
public:
	class URvrClientEffectComponent*                   m_pCEffectComponent;                              		// 0x01F8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class URvrClientEffectPool*                        m_pPool;                                          		// 0x01FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bDestroyOnFinished : 1;                         		// 0x0200 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1966 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* pAct );
	void OnActivateClientEffect ( class URvrSeqAct_ActivateClientEffect* pAct );
	void StopEffect ( unsigned long bAllowCooldown );
	void OnFinished ( class URvrClientEffectComponent* pComponent );
	void Destroyed ( );
	void Prime ( );
	void PostBeginPlay ( );
	void OnSpawnOrLevelLoad ( unsigned long bCalledFromSpawn );
	void SetTemplate ( class URvrClientEffectInterface* pTemplate );
};

UClass* ARvrClientEffectActor::pClassPointer = NULL;

// Class SFXGame.RvrClientEffectSpawnable
// 0x0000 (0x0204 - 0x0204)
class ARvrClientEffectSpawnable : public ARvrClientEffectActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1967 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* pAct );
	void OnActivateClientEffect ( class URvrSeqAct_ActivateClientEffect* pAct );
	void StopEffect ( unsigned long bAllowCooldown );
	void OnFinished ( class URvrClientEffectComponent* pComponent );
	void Destroyed ( );
	void Prime ( );
	void PostBeginPlay ( );
	void OnSpawnOrLevelLoad ( unsigned long bCalledFromSpawn );
	void SetTemplate ( class URvrClientEffectInterface* pTemplate );
};

UClass* ARvrClientEffectSpawnable::pClassPointer = NULL;

// Class SFXGame.RvrClientEffectComponent
// 0x00B6 (0x010C - 0x0056)
class URvrClientEffectComponent : public UActorComponent
{
public:
	TArray< struct FRvrClientEffectParameter >         m_lstParameters;                                  		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class URvrClientEffectModuleInstance* >    m_lstModuleInstances;                             		// 0x0064 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnEffectFinished__Delegate;                     		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRvrClientEffectTarget                      m_oTarget;                                        		// 0x007C (0x0070) [0x0000000000000000]              
	class URvrClientEffectInterface*                   m_pClientEffect;                                  		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nExclusivePriority;                             		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTime;                                          		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDistance;                                      		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCoolDownTime;                                  		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPostProcessChain*                           m_pPostProcessChain;                              		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nEffectIndex;                                   		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bActive : 1;                                    		// 0x0108 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bPrimed : 1;                                    		// 0x0108 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bResetPending : 1;                              		// 0x0108 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bStopRequested : 1;                             		// 0x0108 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bHidden : 1;                                    		// 0x0108 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bExclusiveOnTarget : 1;                         		// 0x0108 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bOnLocalPlayer : 1;                             		// 0x0108 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bInstigatorValid : 1;                           		// 0x0108 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bBehind : 1;                                    		// 0x0108 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bMultiplayer : 1;                               		// 0x0108 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1968 ];

		return pClassPointer;
	};

	void OnEffectFinished ( class URvrClientEffectComponent* pComponent );
	void Hide ( unsigned long bHide );
	void OnProjectileExploded ( class AProjectile* pProjectile );
	void ApplyParameters ( TArray< struct FRvrClientEffectParameter > lstParams, class URvrClientEffectModuleInstance* pInstance );
	void Tick ( float fDeltaTime );
	void UpdateDistance ( );
	void StopEffect ( unsigned long bAllowCooldown );
	void ResetEffect ( );
	void Prime ( );
	void ActivateModule ( class URvrClientEffectModuleInstance* pInstance );
	class URvrClientEffectModuleInstance* CreateModule ( class URvrClientEffectModule* pTemplate );
	void SetTemplate ( class URvrClientEffectInterface* pTemplate );
};

UClass* URvrClientEffectComponent::pClassPointer = NULL;

// Class SFXGame.RvrClientEffectInterface
// 0x0008 (0x0044 - 0x003C)
class URvrClientEffectInterface : public UObject
{
public:
	int                                                m_nPriority;                                      		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIgnoreAttachedActorHiddenState : 1;            		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1969 ];

		return pClassPointer;
	};

	void ApplyParameters ( class URvrClientEffectComponent* pComponent, class URvrClientEffectModuleInstance* pInstance, int nIndex );
	TArray< class URvrClientEffectModule* > GetModuleArray ( class URvrClientEffectComponent* pComponent );
};

UClass* URvrClientEffectInterface::pClassPointer = NULL;

// Class SFXGame.RvrClientEffect
// 0x000C (0x0050 - 0x0044)
class URvrClientEffect : public URvrClientEffectInterface
{
public:
	TArray< class URvrClientEffectModule* >            m_lstModules;                                     		// 0x0044 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1970 ];

		return pClassPointer;
	};

	void ApplyParameters ( class URvrClientEffectComponent* pComponent, class URvrClientEffectModuleInstance* pInstance, int nIndex );
	TArray< class URvrClientEffectModule* > GetModuleArray ( class URvrClientEffectComponent* pComponent );
};

UClass* URvrClientEffect::pClassPointer = NULL;

// Class SFXGame.RvrClientEffectByImpactMaterial
// 0x0010 (0x0054 - 0x0044)
class URvrClientEffectByImpactMaterial : public URvrClientEffectInterface
{
public:
	TArray< struct FCEImpactByMaterial >               m_lstImpacts;                                     		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class URvrClientEffectInterface*                   DefaultEffect;                                    		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1971 ];

		return pClassPointer;
	};

	void ApplyParameters ( class URvrClientEffectComponent* pComponent, class URvrClientEffectModuleInstance* pInstance, int nIndex );
};

UClass* URvrClientEffectByImpactMaterial::pClassPointer = NULL;

// Class SFXGame.RvrClientEffectInstanceConstant
// 0x0010 (0x0054 - 0x0044)
class URvrClientEffectInstanceConstant : public URvrClientEffectInterface
{
public:
	TArray< struct FRvrClientEffectParameter >         m_lstParameters;                                  		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class URvrClientEffectInterface*                   m_pClientEffect;                                  		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1972 ];

		return pClassPointer;
	};

	void ApplyParameters ( class URvrClientEffectComponent* pComponent, class URvrClientEffectModuleInstance* pInstance, int nIndex );
};

UClass* URvrClientEffectInstanceConstant::pClassPointer = NULL;

// Class SFXGame.RvrClientEffectMulti
// 0x000C (0x0050 - 0x0044)
class URvrClientEffectMulti : public URvrClientEffectInterface
{
public:
	TArray< class URvrClientEffectInterface* >         m_aEffects;                                       		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1973 ];

		return pClassPointer;
	};

	void ApplyParameters ( class URvrClientEffectComponent* pComponent, class URvrClientEffectModuleInstance* pInstance, int nIndex );
};

UClass* URvrClientEffectMulti::pClassPointer = NULL;

// Class SFXGame.RvrClientEffectManager
// 0x0038 (0x0074 - 0x003C)
class URvrClientEffectManager : public UObject
{
public:
	TArray< class ARvrClientEffectSpawnable* >         m_aLocalStoppableEffects;                         		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AActor* >                            m_aTargets;                                       		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FRvrClientEffectStack >             m_aStacks;                                        		// 0x0054 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	float                                              m_fMaxDistance_Multiplayer_Bias;                  		// 0x0060 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fMaxDistance_LocalPlayer_Bias;                  		// 0x0064 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fMaxDistance_Debug_Override_Value;              		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxDistance_Debug_Bias;                        		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bMaxDistance_Debug_Override : 1;                		// 0x0070 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bOnVisible_Debug_Override : 1;                  		// 0x0070 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bOnVisible_Debug_Override_Value : 1;            		// 0x0070 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bLogOnCleanup_Debug : 1;                        		// 0x0070 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1974 ];

		return pClassPointer;
	};

	void CleanUpPools ( );
	void PrimeClass ( class UClass* pClass );
	void Prime ( class URvrClientEffectInterface* pEffect, int MinCount );
	void HideOn ( class AActor* pOnActor, unsigned long bHide );
	void Stop ( class URvrClientEffectInterface* pEffect, struct FGuid Id, unsigned long bAllowCooldown, class AActor* pOwner );
	struct FGuid StartOnTarget ( class URvrClientEffectInterface* pEffect, class AActor* pOwner, struct FRvrClientEffectTarget* oTarget );
	struct FGuid StartHit ( class URvrClientEffectInterface* pEffect, class AActor* pInstigator, struct FVector vParams, struct FImpactInfo* oImpactInfo );
	struct FGuid StartAtLocation ( class URvrClientEffectInterface* pEffect, struct FVector vLocation, struct FVector vNormal, struct FVector vParams, class AActor* pOwner );
	struct FGuid Start ( class URvrClientEffectInterface* pEffect, class AActor* pInstigator, struct FVector vParams );
	void PlayOnTarget ( class URvrClientEffectInterface* pEffect, class AActor* pOwner, struct FRvrClientEffectTarget* oTarget );
	void PlayHit ( class URvrClientEffectInterface* pEffect, class AActor* pInstigator, struct FVector vParams, struct FImpactInfo* oImpactInfo );
	void PlayAtLocation ( class URvrClientEffectInterface* pEffect, struct FVector vLocation, struct FVector vNormal, struct FVector vParams, class AActor* pOwner );
	void Play ( class URvrClientEffectInterface* pEffect, class AActor* pInstigator, struct FVector vParams );
	class URvrClientEffectManager* GetClientEffectManager ( );
};

UClass* URvrClientEffectManager::pClassPointer = NULL;

// Class SFXGame.RvrClientEffectModule
// 0x0043 (0x007F - 0x003C)
class URvrClientEffectModule : public UObject
{
public:
	TArray< struct FRvrCEParameterDistribution >       m_aParameters;                                    		// 0x003C (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	class UClass*                                      m_pInstanceClass;                                 		// 0x0048 (0x0004) [0x0000000000000000]              
	struct FName                                       m_nmTag;                                          		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDuration;                                      		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDrawScale;                                     		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTimeScale;                                     		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nSortBias;                                      		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDelay;                                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxDistance;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxBehindDistance;                             		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fActivationValue;                               		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nLoops;                                         		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bEnabled : 1;                                   		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bSoftStopsAreHard : 1;                          		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bIgnoreSoftStops : 1;                           		// 0x0078 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bExclusiveOnTarget : 1;                         		// 0x0078 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bLocalPlayerOnly : 1;                           		// 0x0078 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bEndOnInstigatorDestroy : 1;                    		// 0x0078 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bHideInstigatorOnEnd : 1;                       		// 0x0078 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bSinglePlayerOnly : 1;                          		// 0x0078 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bOnVisibleInstigatorOnly : 1;                   		// 0x0078 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      m_bIsCoolDownModule : 1;                          		// 0x0078 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      m_bCapsFailKillsEffect : 1;                       		// 0x0078 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      m_bAllowPendingMode : 1;                          		// 0x0078 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      m_bLooping : 1;                                   		// 0x0078 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      m_bLoopsAreHard : 1;                              		// 0x0078 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      m_bSupportsInfiniteDuration : 1;                  		// 0x0078 (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned char                                      m_eModuleTickGroup;                               		// 0x007C (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      m_eActivationOperation;                           		// 0x007D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eActivationSelection;                           		// 0x007E (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1975 ];

		return pClassPointer;
	};

};

UClass* URvrClientEffectModule::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleCameraShake
// 0x001A (0x0099 - 0x007F)
class URvrCEffectModuleCameraShake : public URvrClientEffectModule
{
public:
	float                                              ShakeScale;                                       		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialShake_InnerRadius;                          		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialShake_OuterRadius;                          		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialShake_Falloff;                              		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraShake*                                Shake;                                            		// 0x0090 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bDoControllerVibration : 1;                       		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRadialShake : 1;                                 		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOrientTowardRadialEpicenter : 1;                 		// 0x0094 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      PlaySpace;                                        		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1976 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleCameraShake::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleEffectsMaterial
// 0x002A (0x00A9 - 0x007F)
class URvrCEffectModuleEffectsMaterial : public URvrClientEffectModule
{
public:
	struct FRawDistributionFloat                       m_FractionEnabled;                                		// 0x0080 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FName                                       m_nmEffect;                                       		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bAllAttachments : 1;                            		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      m_eTarget;                                        		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1977 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleEffectsMaterial::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleEmitter
// 0x0008 (0x0087 - 0x007F)
class URvrCEffectModuleEmitter : public URvrClientEffectModule
{
public:
	class UParticleSystem*                             m_pParticleSystem;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eEmitterTarget;                                 		// 0x0084 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eEmitterInstigator;                             		// 0x0085 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eDPG;                                           		// 0x0086 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1978 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleEmitter::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleFramebuffer
// 0x0009 (0x0088 - 0x007F)
class URvrCEffectModuleFramebuffer : public URvrClientEffectModule
{
public:
	class UPostProcessChain*                           m_pPostProcess;                                   		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bResetTime : 1;                                 		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bInstantiateMaterials : 1;                      		// 0x0084 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bSendTimeParam : 1;                             		// 0x0084 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1979 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleFramebuffer::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleLensFlare
// 0x0005 (0x0084 - 0x007F)
class URvrCEffectModuleLensFlare : public URvrClientEffectModule
{
public:
	class ULensFlare*                                  m_pLensFlare;                                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1980 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleLensFlare::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleLifetime
// 0x000D (0x008C - 0x007F)
class URvrCEffectModuleLifetime : public URvrClientEffectModule
{
public:
	float                                              m_fMin;                                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMax;                                           		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRequestStop;                                   		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1981 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleLifetime::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleLight
// 0x005D (0x00DC - 0x007F)
class URvrCEffectModuleLight : public URvrClientEffectModule
{
public:
	struct FRawDistributionFloat                       Brightness;                                       		// 0x0080 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x009C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Radius;                                           		// 0x00B8 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	class UClass*                                      m_pLightClass;                                    		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bCastShadows : 1;                               		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bCastStaticShadows : 1;                         		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bCastDynamicShadows : 1;                        		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bCastCompositeShadow : 1;                       		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1982 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleLight::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleLocation
// 0x0095 (0x0114 - 0x007F)
class URvrCEffectModuleLocation : public URvrClientEffectModule
{
public:
	struct FRawDistributionVector                      m_LocationAdjust;                                 		// 0x0080 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      m_RotationAdjust;                                 		// 0x009C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRvrClientEffectParameter                   m_oLocationParam;                                 		// 0x00B8 (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FRvrClientEffectParameter                   m_oNormalParam;                                   		// 0x00DC (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       m_sAttachment;                                    		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_HitLocationPullback;                            		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bSetEffectLocation : 1;                         		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bContinuous : 1;                                		// 0x010C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bSendLocation : 1;                              		// 0x010C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bSendNormal : 1;                                		// 0x010C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bAttach : 1;                                    		// 0x010C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      m_eTarget;                                        		// 0x0110 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eReference;                                     		// 0x0111 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eRotationTarget;                                		// 0x0112 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eBoneAxis;                                      		// 0x0113 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1983 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleLocation::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleMeta
// 0x0000 (0x007F - 0x007F)
class URvrCEffectModuleMeta : public URvrClientEffectModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1984 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleMeta::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleParameters
// 0x0000 (0x007F - 0x007F)
class URvrCEffectModuleParameters : public URvrClientEffectModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1985 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleParameters::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleRadialBlur
// 0x0019 (0x0098 - 0x007F)
class URvrCEffectModuleRadialBlur : public URvrClientEffectModule
{
public:
	class UMaterialInterface*                          m_pMaterial;                                      		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBlurFalloffExponent;                           		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBlurOpacity;                                   		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxCullDistance;                               		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDistanceFalloffExponent;                       		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bRenderAsVelocity : 1;                          		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1986 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleRadialBlur::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleSkelMesh
// 0x0021 (0x00A0 - 0x007F)
class URvrCEffectModuleSkelMesh : public URvrClientEffectModule
{
public:
	TArray< class UMaterialInterface* >                m_lstMaterials;                                   		// 0x0080 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       m_nmAnimSeq;                                      		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               m_pSkeletalMesh;                                  		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    m_pAnimSet;                                       		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bParentToPrimary : 1;                           		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bInstantiateMaterials : 1;                      		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1987 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleSkelMesh::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleSound
// 0x0009 (0x0088 - 0x007F)
class URvrCEffectModuleSound : public URvrClientEffectModule
{
public:
	class UWwiseEvent*                                 m_pStartEvent;                                    		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_pStopEvent;                                     		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1988 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleSound::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleSpawnActor
// 0x00BD (0x013C - 0x007F)
class URvrCEffectModuleSpawnActor : public URvrClientEffectModule
{
public:
	struct FRawDistributionFloat                       m_SpawnRate;                                      		// 0x0080 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       m_Lifetime;                                       		// 0x009C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      m_Offset;                                         		// 0x00B8 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      m_Rotation;                                       		// 0x00D4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       m_CopyDelay;                                      		// 0x00F0 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	TArray< class UMaterialInterface* >                m_lstMaterials;                                   		// 0x010C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      m_pActorClass;                                    		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmEffectsMaterial;                              		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmAnimSeq;                                      		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nNumActors;                                     		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               m_pSkeletalMesh;                                  		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    m_pAnimSet;                                       		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bCopyPosition : 1;                              		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bCopyRotation : 1;                              		// 0x0138 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bPositionSmoothing : 1;                         		// 0x0138 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bCopyAnimation : 1;                             		// 0x0138 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bCopySkeletalMesh : 1;                          		// 0x0138 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bCopyMaterialParams : 1;                        		// 0x0138 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bCopyAttachments : 1;                           		// 0x0138 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bCopyAttachmentAnim : 1;                        		// 0x0138 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bDontMove : 1;                                  		// 0x0138 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      m_bHideFirstFrame : 1;                            		// 0x0138 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      m_bSendTimeParam : 1;                             		// 0x0138 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      m_bInstantiateOtherMaterials : 1;                 		// 0x0138 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1989 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleSpawnActor::pClassPointer = NULL;

// Class SFXGame.RvrClientEffectModuleInstance
// 0x0038 (0x0074 - 0x003C)
class URvrClientEffectModuleInstance : public UObject
{
public:
	struct FVector                                     m_vModifierParameter;                             		// 0x003C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class URvrClientEffectModule*                      m_pModule;                                        		// 0x0048 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class URvrClientEffectComponent*                   m_pComponent;                                     		// 0x004C (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              m_fDuration;                                      		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDrawScale;                                     		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTimeScale;                                     		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDelay;                                         		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxDistance;                                   		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fActivationValue;                               		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAccumulatedTime;                               		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nLoopsSoFar;                                    		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bActive : 1;                                    		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bPrimed : 1;                                    		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bFinished : 1;                                  		// 0x0070 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bTick : 1;                                      		// 0x0070 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bStopRequested : 1;                             		// 0x0070 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bHasBeenActivated : 1;                          		// 0x0070 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bHidInstigator : 1;                             		// 0x0070 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bCounted : 1;                                   		// 0x0070 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bHiddenDueToCapsFail : 1;                       		// 0x0070 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1990 ];

		return pClassPointer;
	};

};

UClass* URvrClientEffectModuleInstance::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleCameraShakeInstance
// 0x0000 (0x0074 - 0x0074)
class URvrCEffectModuleCameraShakeInstance : public URvrClientEffectModuleInstance
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1991 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleCameraShakeInstance::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleEffectsMaterialInstance
// 0x0008 (0x007C - 0x0074)
class URvrCEffectModuleEffectsMaterialInstance : public URvrClientEffectModuleInstance
{
public:
	class AActor*                                      m_pTargetActor;                                   		// 0x0074 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      m_pTargetWeapon;                                  		// 0x0078 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1992 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleEffectsMaterialInstance::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleEmitterInstance
// 0x0004 (0x0078 - 0x0074)
class URvrCEffectModuleEmitterInstance : public URvrClientEffectModuleInstance
{
public:
	class UParticleSystemComponent*                    m_pPSysComponent;                                 		// 0x0074 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1993 ];

		return pClassPointer;
	};

	void OnFinished ( class UParticleSystemComponent* PSystem );
};

UClass* URvrCEffectModuleEmitterInstance::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleFramebufferInstance
// 0x0004 (0x0078 - 0x0074)
class URvrCEffectModuleFramebufferInstance : public URvrClientEffectModuleInstance
{
public:
	class UPostProcessChain*                           m_pPostProcessInstance;                           		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1994 ];

		return pClassPointer;
	};

	void InstantiateMaterials ( );
	void ResetMaterials ( );
};

UClass* URvrCEffectModuleFramebufferInstance::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleLensFlareInstance
// 0x0004 (0x0078 - 0x0074)
class URvrCEffectModuleLensFlareInstance : public URvrClientEffectModuleInstance
{
public:
	class ULensFlareComponent*                         m_pLFComponent;                                   		// 0x0074 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1995 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleLensFlareInstance::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleLifetimeInstance
// 0x0010 (0x0084 - 0x0074)
class URvrCEffectModuleLifetimeInstance : public URvrClientEffectModuleInstance
{
public:
	float                                              m_fMin;                                           		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              m_fMax;                                           		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              m_fRequestStop;                                   		// 0x007C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSoftStopSent : 1;                              		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1996 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleLifetimeInstance::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleLightInstance
// 0x0004 (0x0078 - 0x0074)
class URvrCEffectModuleLightInstance : public URvrClientEffectModuleInstance
{
public:
	class ALight*                                      m_pLight;                                         		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1997 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleLightInstance::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleLocationInstance
// 0x0014 (0x0088 - 0x0074)
class URvrCEffectModuleLocationInstance : public URvrClientEffectModuleInstance
{
public:
	struct FVector                                     m_vHitBoneOffset;                                 		// 0x0074 (0x000C) [0x0000000000000000]              
	struct FName                                       m_nmHitBone;                                      		// 0x0080 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1998 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleLocationInstance::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleMetaInstance
// 0x0000 (0x0074 - 0x0074)
class URvrCEffectModuleMetaInstance : public URvrClientEffectModuleInstance
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1999 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleMetaInstance::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleParametersInstance
// 0x0000 (0x0074 - 0x0074)
class URvrCEffectModuleParametersInstance : public URvrClientEffectModuleInstance
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2000 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleParametersInstance::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleRadialBlurInstance
// 0x0004 (0x0078 - 0x0074)
class URvrCEffectModuleRadialBlurInstance : public URvrClientEffectModuleInstance
{
public:
	class URadialBlurComponent*                        m_pRBComponent;                                   		// 0x0074 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2001 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleRadialBlurInstance::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleSkelMeshInstance
// 0x0004 (0x0078 - 0x0074)
class URvrCEffectModuleSkelMeshInstance : public URvrClientEffectModuleInstance
{
public:
	class USkeletalMeshComponent*                      m_pSkelMesh;                                      		// 0x0074 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2002 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleSkelMeshInstance::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleSoundInstance
// 0x0000 (0x0074 - 0x0074)
class URvrCEffectModuleSoundInstance : public URvrClientEffectModuleInstance
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2003 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleSoundInstance::pClassPointer = NULL;

// Class SFXGame.RvrCEffectModuleSpawnActorInstance
// 0x0034 (0x00A8 - 0x0074)
class URvrCEffectModuleSpawnActorInstance : public URvrClientEffectModuleInstance
{
public:
	TArray< struct FRvrClientEffectSpawnedActor >      m_lstSpawns;                                      		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRvrClientEffectSavedState >        m_lstSavedStates;                                 		// 0x0080 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< int >                                      m_lstBoneMap;                                     		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nSavedStateHead;                                		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                m_nSavedStates;                                   		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                m_nRemainingSpawns;                               		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              m_fSpawnPotential;                                		// 0x00A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2004 ];

		return pClassPointer;
	};

};

UClass* URvrCEffectModuleSpawnActorInstance::pClassPointer = NULL;

// Class SFXGame.RvrClientEffectPointLight
// 0x0000 (0x0200 - 0x0200)
class ARvrClientEffectPointLight : public APointLightMovable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2005 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ARvrClientEffectPointLight::pClassPointer = NULL;

// Class SFXGame.RvrClientEffectPool
// 0x0138 (0x0174 - 0x003C)
class URvrClientEffectPool : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x003C (0x003C) UNKNOWN PROPERTY: MapProperty SFXGame.RvrClientEffectPool.m_mModuleCount
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0078 (0x003C) UNKNOWN PROPERTY: MapProperty SFXGame.RvrClientEffectPool.m_mModuleMax
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x00B4 (0x003C) UNKNOWN PROPERTY: MapProperty SFXGame.RvrClientEffectPool.m_mHighestPriorityHiddenModules
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x00F0 (0x003C) UNKNOWN PROPERTY: MapProperty SFXGame.RvrClientEffectPool.m_mLowestPriorityActiveModules
	unsigned char                                      UnknownData04[ 0x3C ];                            		// 0x012C (0x003C) UNKNOWN PROPERTY: MapProperty SFXGame.RvrClientEffectPool.m_mEffects
	int                                                m_nTotalEffectCount;                              		// 0x0168 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMaxTotalEffects;                               		// 0x016C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bInitialized : 1;                               		// 0x0170 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2006 ];

		return pClassPointer;
	};

	bool ShouldReactivate ( class URvrClientEffectModuleInstance* pModule );
	void RecomputePriorities ( class UClass* pClass );
	void UpdatePriorities ( class URvrClientEffectModuleInstance* pModule, unsigned long bActivate );
	bool CountModule ( class URvrClientEffectModuleInstance* pModule, unsigned long bInc );
	void Prime ( class URvrClientEffectInterface* pTemplate, int nMin, int nMax );
	void ResetAllPools ( unsigned long bSpawnableOnly );
	void FlushAllPools ( unsigned long bPreserveRunningEffects );
};

UClass* URvrClientEffectPool::pClassPointer = NULL;

// Class SFXGame.RvrClientEffectTrigger
// 0x0024 (0x0228 - 0x0204)
class ARvrClientEffectTrigger : public ATrigger
{
public:
	TArray< class URvrClientEffectInstanceConstant* >  m_lstEffects;                                     		// 0x0204 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class AActor* >                            m_lstTargetActors;                                		// 0x0210 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     m_vSpawnParameters;                               		// 0x021C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2007 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ARvrClientEffectTrigger::pClassPointer = NULL;

// Class SFXGame.RvrComponentPCNetClientEffects
// 0x0000 (0x0056 - 0x0056)
class URvrComponentPCNetClientEffects : public UActorComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2008 ];

		return pClassPointer;
	};

};

UClass* URvrComponentPCNetClientEffects::pClassPointer = NULL;

// Class SFXGame.RvrPhysicalMaterialProperty
// 0x0001 (0x003D - 0x003C)
class URvrPhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
	unsigned char                                      m_eImpactClientEffect;                            		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2009 ];

		return pClassPointer;
	};

};

UClass* URvrPhysicalMaterialProperty::pClassPointer = NULL;

// Class SFXGame.RvrSeqAct_ActivateClientEffect
// 0x0004 (0x00B4 - 0x00B0)
class URvrSeqAct_ActivateClientEffect : public USequenceAction
{
public:
	unsigned long                                      bAllowCooldown : 1;                               		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2010 ];

		return pClassPointer;
	};

};

UClass* URvrSeqAct_ActivateClientEffect::pClassPointer = NULL;

// Class SFXGame.RvrSeqAct_SpawnClientEffect
// 0x0018 (0x00C8 - 0x00B0)
class URvrSeqAct_SpawnClientEffect : public USequenceAction
{
public:
	TArray< class URvrClientEffectInterface* >         m_lstEffects;                                     		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     m_vSpawnParameters;                               		// 0x00BC (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2011 ];

		return pClassPointer;
	};

};

UClass* URvrSeqAct_SpawnClientEffect::pClassPointer = NULL;

// Class SFXGame.RvrSeqAct_StoppableClientEffect
// 0x0024 (0x00D4 - 0x00B0)
class URvrSeqAct_StoppableClientEffect : public USequenceAction
{
public:
	struct FGuid                                       m_LastStarted;                                    		// 0x00B0 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vSpawnParameters;                               		// 0x00C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   m_pEffect;                                        		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bAllowCooldown : 1;                             		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2012 ];

		return pClassPointer;
	};

};

UClass* URvrSeqAct_StoppableClientEffect::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackClientEffect
// 0x0014 (0x0080 - 0x006C)
class USFXInterpTrackClientEffect : public UInterpTrackToggle
{
public:
	struct FVector                                     m_vSpawnParameters;                               		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   m_pEffect;                                        		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bAllowCooldown : 1;                             		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bStopAllMatchingEffects : 1;                    		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2013 ];

		return pClassPointer;
	};

	struct FString eventGetNewTrackSubMenuName ( );
};

UClass* USFXInterpTrackClientEffect::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackInstClientEffect
// 0x0013 (0x0058 - 0x0045)
class USFXInterpTrackInstClientEffect : public UInterpTrackInstToggle
{
public:
	struct FGuid                                       m_ID;                                             		// 0x0048 (0x0010) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2014 ];

		return pClassPointer;
	};

};

UClass* USFXInterpTrackInstClientEffect::pClassPointer = NULL;

// Class SFXGame.SFXPatchLinkerLoad
// 0x0050 (0x0764 - 0x0714)
class USFXPatchLinkerLoad : public ULinkerLoad
{
public:
	unsigned char                                      UnknownData00[ 0x50 ];                            		// 0x0714 (0x0050) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3644 ];

		return pClassPointer;
	};

};

UClass* USFXPatchLinkerLoad::pClassPointer = NULL;

// Class SFXGame.SFXWeapon
// 0x0ADB (0x0DD2 - 0x02F7)
class ASFXWeapon : public ASFXWeapon_NativeBase
{
public:
	struct FScaledFloat                                AI_AccCone_Min;                                   		// 0x02F8 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                AI_AccCone_Max;                                   		// 0x031C (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                ReloadDuration;                                   		// 0x0340 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                Damage;                                           		// 0x0364 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MagSize;                                          		// 0x0388 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MaxSpareAmmo;                                     		// 0x03AC (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MinAimError;                                      		// 0x03D0 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MaxAimError;                                      		// 0x03F4 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MinZoomAimError;                                  		// 0x0418 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MaxZoomAimError;                                  		// 0x043C (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                RateOfFire;                                       		// 0x0460 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                NoAmmoUseChance;                                  		// 0x0484 (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScaledFloat                                HeadshotDamageMultiplier;                         		// 0x04A8 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                ImpactForceModifier;                              		// 0x04CC (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                ReactionChanceModifier;                           		// 0x04F0 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MeleeDamageModifier;                              		// 0x0514 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                EncumbranceWeight;                                		// 0x0538 (0x0024) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                Recoil;                                           		// 0x055C (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                ZoomRecoil;                                       		// 0x0580 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                AccFirePenalty;                                   		// 0x05A4 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                AccFireInterpSpeed;                               		// 0x05C8 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                ZoomAccFirePenalty;                               		// 0x05EC (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                ZoomAccFireInterpSpeed;                           		// 0x0610 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MinCrosshairRange;                                		// 0x0634 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MaxCrosshairRange;                                		// 0x0658 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MinZoomCrosshairRange;                            		// 0x067C (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MaxZoomCrosshairRange;                            		// 0x06A0 (0x0024) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                PenetrationBonus;                                 		// 0x06C4 (0x0024) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                PenetrationDamageBonus;                           		// 0x06E8 (0x0024) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                ArmorPiercing;                                    		// 0x070C (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScaledFloat                                StatBarAccuracy;                                  		// 0x0730 (0x0024) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                StatBarDamage;                                    		// 0x0754 (0x0024) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                StatBarRateOfFire;                                		// 0x0778 (0x0024) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                ZoomDamageShakeModifier;                          		// 0x079C (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSFXWeaponAimMode >                 AimModes;                                         		// 0x07C0 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             AimOffsetProfileNames;                            		// 0x07CC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GUIImage;                                         		// 0x07D8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NotificationImage;                                		// 0x07E4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     AmmoRTPCName;                                     		// 0x07F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FZoomSnapInfo >                     ZoomSnapList;                                     		// 0x07FC (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             FadingParameters;                                 		// 0x0808 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< void* >                                    DamageUpgradeTokens;                              		// 0x0814 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< void* >                                    ResearchUpgradeTokens;                            		// 0x0820 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      ResearchUpgradeIds;                               		// 0x082C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           AllowableWeaponMods;                              		// 0x0838 (0x000C) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FWeaponModMeshOverride >            WeaponModMeshOverrides;                           		// 0x0844 (0x000C) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCoverLeanPosition >                CoverLeanPositions;                               		// 0x0850 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      WeaponModGripColours;                             		// 0x085C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      WeaponModBodyColours;                             		// 0x0868 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      WeaponModEmissiveColours;                         		// 0x0874 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RTPCName;                                         		// 0x0880 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           DefaultModOptions;                                		// 0x088C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   ImpactSubscriptions;                              		// 0x0898 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ASFXProjectile* >                    PredictedProjectiles;                             		// 0x08A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWeaponImpact__Delegate;                       		// 0x08B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GetDamageVocProbabilityMod__Delegate;           		// 0x08BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWeaponReload__Delegate;                       		// 0x08C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWeaponEquip__Delegate;                        		// 0x08D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWeaponUnequip__Delegate;                      		// 0x08E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      DroppedAmmoClass;                                 		// 0x08EC (0x0004) [0x0000000000000000]              
	class UClass*                                      GUIReticleClass;                                  		// 0x08F0 (0x0004) [0x0000000000000000]              
	class UClass*                                      GUIZoomReticleClass;                              		// 0x08F4 (0x0004) [0x0000000000000000]              
	struct FScreenShakeStruct                          FiringShake;                                      		// 0x08F8 (0x0078) [0x0000000000000001]              ( CPF_Edit )
	struct FScreenShakeStruct                          TightAimFiringShake;                              		// 0x0970 (0x0078) [0x0000000000000001]              ( CPF_Edit )
	struct FScreenShakeStruct                          ChargeCameraShake;                                		// 0x09E8 (0x0078) [0x0000000000000000]              
	struct FTracerSpec                                 TracerInfo;                                       		// 0x0A60 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       AttachedFlashlightVFXGuid;                        		// 0x0A84 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                WeaponModBaseGripColour;                          		// 0x0A94 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                WeaponModBaseBodyColour;                          		// 0x0AA4 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                WeaponModBaseEmissiveColour;                      		// 0x0AB4 (0x0010) [0x0000000000000000]              
	struct FVector                                     DebugShotStartLoc;                                		// 0x0AC4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    DebugShotAimRot;                                  		// 0x0AD0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MuzzleIdlePosition;                               		// 0x0ADC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FrictionTargetOffset;                             		// 0x0AE8 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector                                     DummyFireTargetLoc;                               		// 0x0AF4 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartFireLocation;                                		// 0x0B00 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartFireDirection;                               		// 0x0B0C (0x000C) [0x0000000000000000]              
	struct FName                                       MeleePowerName;                                   		// 0x0B18 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   AI_BurstFireCount;                                		// 0x0B20 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AI_BurstFireDelay;                                		// 0x0B28 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AI_AimDelay;                                      		// 0x0B30 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FName                                       MuzzleSocketName;                                 		// 0x0B38 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShellCasingSocketName;                            		// 0x0B40 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   FrictionMultiplierRange;                          		// 0x0B48 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AdhesionStrengthRange;                            		// 0x0B50 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FName                                       AmmoPowerName;                                    		// 0x0B58 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       AmmoPowerSourceTag;                               		// 0x0B60 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                RemainingBurstFireCount;                          		// 0x0B68 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RemainingBurstsToFire;                            		// 0x0B6C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentAimMode;                                   		// 0x0B70 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverLeanExitDelay;                               		// 0x0B74 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CoverPartialLeanExitDelay;                        		// 0x0B78 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                SwitchPriority;                                   		// 0x0B7C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class USFXAnimSetCookSpec*                         ReloadAnimInfo;                                   		// 0x0B80 (0x0004) [0x0000000000000000]              
	class UAnimNodeSlot*                               WeaponAnimNode;                                   		// 0x0B84 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    PSC_OutOfAmmoEffect;                              		// 0x0B88 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UForceFeedbackWaveform*                      OutOfAmmoRumble;                                  		// 0x0B8C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      WeaponFireWaveForm;                               		// 0x0B90 (0x0004) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      EjectRumble;                                      		// 0x0B94 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactRelevanceDistance;                          		// 0x0B98 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UParticleSystem*                             PS_DefaultImpactEffect;                           		// 0x0B9C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UParticleSystem*                             PS_DefaultMaterialImpactEffect;                   		// 0x0BA0 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              ImpactScale;                                      		// 0x0BA4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDecalComponent*                             DefaultDecalProperties;                           		// 0x0BA8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UMaterialInterface*                          DefaultDecalMaterial;                             		// 0x0BAC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShowTracerDistance;                               		// 0x0BB0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UParticleSystemComponent*                    PSC_ShellCasing;                                  		// 0x0BB4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    PSC_ReloadVent;                                   		// 0x0BB8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              TracerSpawnOffset;                                		// 0x0BBC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UParticleSystemComponent*                    PSC_MuzFlashEmitter;                              		// 0x0BC0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    PSC_PermanentMuzzle;                              		// 0x0BC4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UWwiseEvent*                                 OnMuzzleSound;                                    		// 0x0BC8 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 OffMuzzleSound;                                   		// 0x0BCC (0x0004) [0x0000000000000000]              
	float                                              TimeToHideMuzzleFlashPSC;                         		// 0x0BD0 (0x0004) [0x0000000000000000]              
	float                                              TimeToDeactivateMuzzleFlashPSC;                   		// 0x0BD4 (0x0004) [0x0000000000000000]              
	class ALight*                                      AttachedFlashlight;                               		// 0x0BD8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ALight*                                      AttachedAmbientLight;                             		// 0x0BDC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      FlashlightFireColor;                              		// 0x0BE0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlashlightFireBrightnessIncrease;                 		// 0x0BE4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlashlightFireRadiusIncrease;                     		// 0x0BE8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlashlightStopFireDelay;                          		// 0x0BEC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponLevel;                                      		// 0x0BF0 (0x0004) [0x0000000000000000]              
	float                                              EjectShellCasingTimeRatio;                        		// 0x0BF4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ReloadReactionWindow;                             		// 0x0BF8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LastBulletStrongerPercent;                        		// 0x0BFC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StealthDamageIncrease;                            		// 0x0C00 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageHench;                                      		// 0x0C04 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LowAmmoSoundThreshold;                            		// 0x0C08 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SteamSoundThreshold;                              		// 0x0C0C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              NoAmmoFireSoundDelay;                             		// 0x0C10 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinRefireTime;                                    		// 0x0C14 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LazyRateOfFire;                                   		// 0x0C18 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RateOfFireAI;                                     		// 0x0C1C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RoundsPerBurst;                                   		// 0x0C20 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ModCrosshairMultiplier;                           		// 0x0C24 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AmmoPerShot;                                      		// 0x0C28 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RecoilInterpSpeed;                                		// 0x0C2C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilFadeSpeed;                                  		// 0x0C30 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilZoomFadeSpeed;                              		// 0x0C34 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilMinFade;                                    		// 0x0C38 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilCap;                                        		// 0x0C3C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ZoomRecoilCap;                                    		// 0x0C40 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilYawScale;                                   		// 0x0C44 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilYawFrequency;                               		// 0x0C48 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TraceRange;                                       		// 0x0C4C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MeleeRange;                                       		// 0x0C50 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              IdealMinRange;                                    		// 0x0C54 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              IdealTargetDistance;                              		// 0x0C58 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              IdealMaxRange;                                    		// 0x0C5C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MagneticCorrectionThresholdAngle;                 		// 0x0C60 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxMagneticCorrectionAngle;                       		// 0x0C64 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DistancePenetrated;                               		// 0x0C68 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UGFxMovieInfo*                               IconResource;                                     		// 0x0C6C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                IconRef;                                          		// 0x0C70 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              PrettyName;                                       		// 0x0C74 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              ShortPrettyName;                                  		// 0x0C78 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              GUIClassName;                                     		// 0x0C7C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              GUIClassDescription;                              		// 0x0C80 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              AmmoPrettyName;                                   		// 0x0C84 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              ShortDescription;                                 		// 0x0C88 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              GeneralDescription;                               		// 0x0C8C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              WeaponUnlockMessage;                              		// 0x0C90 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              WeaponUpgradeMessage;                             		// 0x0C94 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                GUIWeaponOrder;                                   		// 0x0C98 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              NuiSpeechName;                                    		// 0x0C9C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UWwiseEvent*                                 DefaultImpactSound;                               		// 0x0CA0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 FireSound;                                        		// 0x0CA4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 PlayerFireSound;                                  		// 0x0CA8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponLoudness;                                   		// 0x0CAC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WeaponPowerFireSound;                             		// 0x0CB0 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 FireNoAmmoSound;                                  		// 0x0CB4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WeaponWhipSoundLeft;                              		// 0x0CB8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WeaponWhipSoundRight;                             		// 0x0CBC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WeaponReloadSound;                                		// 0x0CC0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WeaponSteamReloadSound;                           		// 0x0CC4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 StopWeaponReloadSound;                            		// 0x0CC8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WeaponExpandSound;                                		// 0x0CCC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WeaponCollapseSound;                              		// 0x0CD0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 NeedReloadNotifySound;                            		// 0x0CD4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 SteamReloadNotifySound;                           		// 0x0CD8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 ActivateModScopeZoomWwiseEvent;                   		// 0x0CDC (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 DeActivateModScopeZoomWwiseEvent;                 		// 0x0CE0 (0x0004) [0x0000000000000000]              
	float                                              MinFrictionDistance;                              		// 0x0CE4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxFrictionDistance;                              		// 0x0CE8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PeakFrictionDistance;                             		// 0x0CEC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PeakFrictionRadiusScale;                          		// 0x0CF0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PeakFrictionHeightScale;                          		// 0x0CF4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinAdhesionDistance;                              		// 0x0CF8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxAdhesionDistance;                              		// 0x0CFC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinAdhesionVelocity;                              		// 0x0D00 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CamInputAdhesionDamping;                          		// 0x0D04 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxLateralAdhesionDist;                           		// 0x0D08 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AimCorrectionAmount;                              		// 0x0D0C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinZoomSnapDistance;                              		// 0x0D10 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxZoomSnapDistance;                              		// 0x0D14 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UParticleSystemComponent*                    AmmoPowerPSCO;                                    		// 0x0D18 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    AmmoPowerIconPSCO;                                		// 0x0D1C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                DamageUpgradeId;                                  		// 0x0D20 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AActor*                                      DummyFireParent;                                  		// 0x0D24 (0x0004) [0x0000000000000000]              
	class AActor*                                      DummyFireTargetActor;                             		// 0x0D28 (0x0004) [0x0000000000000000]              
	float                                              DummyFireInaccuracy;                              		// 0x0D2C (0x0004) [0x0000000000000000]              
	float                                              DummyFireShotsRemaining;                          		// 0x0D30 (0x0004) [0x0000000000000000]              
	class APawn*                                       PreDummyFireInstigator;                           		// 0x0D34 (0x0004) [0x0000000000000000]              
	int                                                MaxWeaponMods;                                    		// 0x0D38 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	class USFXCameraSetup*                             CameraSetup;                                      		// 0x0D3C (0x0004) [0x0000000000000000]              
	float                                              TaserMeleeModStunDuration;                        		// 0x0D40 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class URvrClientEffectInterface*                   TaserMeleeModImpactEffect;                        		// 0x0D44 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 TaserMeleeModImpactSound;                         		// 0x0D48 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             BladeMeleeModImpactEffect;                        		// 0x0D4C (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 BladeMeleeModImpactSound;                         		// 0x0D50 (0x0004) [0x0000000000000000]              
	float                                              ClientSideHitLeeway;                              		// 0x0D54 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ClientSideHitMaxDistReallyClose;                  		// 0x0D58 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ClientSideHitMaxAngle;                            		// 0x0D5C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ClientSideHitMaxDistClose;                        		// 0x0D60 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ClientSideHitMaxAngleClose;                       		// 0x0D64 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NumberOfDefaultModsToAttach;                      		// 0x0D68 (0x0004) [0x0000000000000000]              
	float                                              HearNoiseTimeout;                                 		// 0x0D6C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ChargeAmount;                                     		// 0x0D70 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    ChargeUpPS;                                       		// 0x0D74 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ChargeDownPS;                                     		// 0x0D78 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UWwiseEvent*                                 PowerUpSound;                                     		// 0x0D7C (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 PowerDownSound;                                   		// 0x0D80 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 NPCPowerUpSound;                                  		// 0x0D84 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 NPCPowerDownSound;                                		// 0x0D88 (0x0004) [0x0000000000000000]              
	float                                              MinChargeTime;                                    		// 0x0D8C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxChargeTime;                                    		// 0x0D90 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxChargeFireRumble;                              		// 0x0D94 (0x0004) [0x0000000000000000]              
	float                                              MinChargeFireRumble;                              		// 0x0D98 (0x0004) [0x0000000000000000]              
	float                                              MaxChargeCameraShake;                             		// 0x0D9C (0x0004) [0x0000000000000000]              
	float                                              ChargeStartTime;                                  		// 0x0DA0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastFireTime;                                     		// 0x0DA4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxLevel;                                         		// 0x0DA8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WeaponAcquiredID;                                 		// 0x0DAC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WeaponAcquiredID_NGP;                             		// 0x0DB0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AActor*                                      StartFireTarget;                                  		// 0x0DB4 (0x0004) [0x0000000000000000]              
	int                                                NewGamePlusID;                                    		// 0x0DB8 (0x0004) [0x0000000000000000]              
	int                                                CodexPlotID;                                      		// 0x0DBC (0x0004) [0x0000000000000000]              
	unsigned long                                      bSuperDamage : 1;                                 		// 0x0DC0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSuppressMuzzleFlash : 1;                         		// 0x0DC0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSuppressTracers : 1;                             		// 0x0DC0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSuppressImpactFX : 1;                            		// 0x0DC0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSuppressDecal : 1;                               		// 0x0DC0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSuppressDamage : 1;                              		// 0x0DC0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bSuppressCameraShake : 1;                         		// 0x0DC0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPlayerUsable : 1;                                		// 0x0DC0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bLoopingFlashEmitter : 1;                         		// 0x0DC0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bPlayingMuzzleFlashEffect : 1;                    		// 0x0DC0 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bPermanentMuzzle : 1;                             		// 0x0DC0 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bForceSpawnTracer : 1;                            		// 0x0DC0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bFlashlightAttached : 1;                          		// 0x0DC0 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bWeaponCanBeReloaded : 1;                         		// 0x0DC0 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bDrawingWeapon : 1;                               		// 0x0DC0 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bHolsteringWeapon : 1;                            		// 0x0DC0 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bFiringAnimationPlaying : 1;                      		// 0x0DC0 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bNotRegularWeaponGUI : 1;                         		// 0x0DC0 (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	unsigned long                                      bPlayZoomSound : 1;                               		// 0x0DC0 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bPlaySoundOncePerBurst : 1;                       		// 0x0DC0 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bAIPlaySoundOncePerBurst : 1;                     		// 0x0DC0 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bFrictionEnabled : 1;                             		// 0x0DC0 (0x0004) [0x0000000000004001] [0x00200000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bFrictionDistanceScalingEnabled : 1;              		// 0x0DC0 (0x0004) [0x0000000000004001] [0x00400000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bAdhesionEnabled : 1;                             		// 0x0DC0 (0x0004) [0x0000000000004001] [0x00800000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bAdhesionDuringCam : 1;                           		// 0x0DC0 (0x0004) [0x0000000000004001] [0x01000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bZoomSnapEnabled : 1;                             		// 0x0DC0 (0x0004) [0x0000000000004001] [0x02000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bScaleAnimDurationByFireRate : 1;                 		// 0x0DC0 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bWeaponAndEffectsHidden : 1;                      		// 0x0DC0 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      bNoAmmoPowerTracers : 1;                          		// 0x0DC0 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bDummyFireWeapon : 1;                             		// 0x0DC0 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bDamagesFriends : 1;                              		// 0x0DC0 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bSuppressDummyFireLineCheck : 1;                  		// 0x0DC0 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      DummyFireInstigatorSet : 1;                       		// 0x0DC4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDoesNotUnlock : 1;                               		// 0x0DC4 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bTaserMeleeModApplied : 1;                        		// 0x0DC4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bBladeMeleeModApplied : 1;                        		// 0x0DC4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bAutoModdingEnabled : 1;                          		// 0x0DC4 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bNeedPowerDownSound : 1;                          		// 0x0DC4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bForceFireAfterCharge : 1;                        		// 0x0DC4 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bFired : 1;                                       		// 0x0DC4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bIsCharged : 1;                                   		// 0x0DC4 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bQuickSwitchEligible : 1;                         		// 0x0DC4 (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned char                                      AimNodeProfileID;                                 		// 0x0DC8 (0x0001) [0x0000000000000000]              
	unsigned char                                      IKProfileID;                                      		// 0x0DC9 (0x0001) [0x0000000000000000]              
	unsigned char                                      DefaultFireMode;                                  		// 0x0DCA (0x0001) [0x0000000000000000]              
	unsigned char                                      AnimType;                                         		// 0x0DCB (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AttachSlot;                                       		// 0x0DCC (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      FireOnceFiringMode;                               		// 0x0DCD (0x0001) [0x0000000000000000]              
	unsigned char                                      PendingFireMode;                                  		// 0x0DCE (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      DummyTeamIndex;                                   		// 0x0DCF (0x0001) [0x0000000000000000]              
	unsigned char                                      RTPCPlayerPosition;                               		// 0x0DD0 (0x0001) [0x0000000000000000]              
	unsigned char                                      RepChargeEffect;                                  		// 0x0DD1 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41446 ];

		return pClassPointer;
	};

	void GiveWeaponCodex ( );
	void ClearFizzleCount ( );
	void IncrementFizzleCount ( );
	bool IsClientReadyToInitialize ( );
	void UnsubscribeFromImpactNotifications ( struct FScriptDelegate Callback );
	void SubscribeToImpactNotifications ( struct FScriptDelegate Callback );
	float eventGetPenetrationDepth ( );
	class UClass* LoadWeaponClass ( struct FString WeaponClassName );
	class UClass* FindWeaponClass ( struct FString WeaponClassName );
	unsigned char GetStoreQualification ( );
	void SetWeaponHidden ( unsigned long bWeaponHidden );
	void GetWeaponStatBarValues ( unsigned char StatBar, float* WeaponValue );
	bool eventHasLoopingFire ( );
	void ClearFlashLocation ( );
	void SetFlashLocation ( struct FVector HitLocation );
	void ApplyDefaultWeaponMods ( unsigned long bClearOldMods );
	void SetWeaponModBodyColour ( int ModLevel );
	void SetWeaponModGripColour ( int ModLevel );
	void SetWeaponModEmissiveValue ( int ModLevel );
	void ClearWeaponModMaterialParameters ( );
	void RestoreFlashlightToNormal ( );
	void DelayedRestoreFlashlightToNormal ( );
	void SetFlashlightFireMode ( );
	void DetachFlashlight ( );
	void AttachFlashlight ( );
	bool IsWeaponAlreadyAwarded ( class UClass* WeaponClass );
	bool IsWeaponUnlocked ( class UClass* WeaponClass );
	bool Upgrade ( class ASFXPawn_Player* Player, class UClass* WeaponClass, unsigned long bNoNotification, unsigned long bIsMultiplayer, unsigned long bDoesNotCountasNGPFound, unsigned long bUnlockOnly );
	bool IsAnimTypeSniper ( );
	bool IsAnimTypeShotgun ( );
	bool IsAnimTypePistol ( );
	float eventGetReactionChanceModifier ( );
	void ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void eventCleanUpDummyFire ( );
	void eventWeaponStoppedFiring ( unsigned char FiringMode );
	void eventDummyFire ( unsigned char FireModeNum, struct FVector TargetLoc, class AActor* AttachedTo, float AimErrorDeg, class AActor* TargetActor );
	float GetInitialDummyFireDelay ( );
	void BeginDummyFire ( unsigned char FiringMode, class AActor* AttachedTo );
	void WeaponFired ( unsigned char FiringMode, unsigned long bViaReplication, struct FVector HitLocation );
	class AProjectile* eventProjectileFireSimple ( float AimErrorDeg );
	void CalcRemoteImpactEffects ( unsigned char FireModeNum, struct FVector GivenHitLocation, unsigned long bViaReplication );
	bool eventCalculateCoverLeanOutOffset ( unsigned char Direction, unsigned char Type, struct FVector* Offset );
	struct FString GetGeneralDescription ( );
	struct FString GetShortDescription ( );
	struct FString GetPrettyName ( int Level );
	void GetWeaponDebug ( TArray< struct FString >* DebugInfo );
	void DrawDebugShot ( struct FVector StartLocation, struct FVector EndLocation );
	void SetAmmoPowerHologramEnabled ( unsigned long bEnabled, unsigned long bForceEnabled );
	void SetAmmoPowerHologramTemplates ( class UParticleSystem* Template, class UParticleSystem* IconTemplate );
	void eventDestroyed ( );
	void HolderDied ( );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
	void ClientWeaponThrown ( );
	bool CanThrow ( );
	void DetachWeapon ( );
	void AttachMuzzleEffectsComponents ( class USkeletalMeshComponent* SkelMesh, struct FName MuzzleSocket, struct FName CasingSocket );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	void Internal_AssignToSlot ( );
	void AssignToSlot ( unsigned char Slot );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	void EquipTimedOut ( );
	void EquipFinished ( );
	void EquipNearFinished ( );
	void Collapse ( );
	void Expand ( );
	void StopChargeEffects ( );
	void ShutOffAllEmitters ( );
	void UnEquipTimedOut ( );
	void UnEquipFinished ( );
	void ServerCancelReload ( );
	void CancelReload ( );
	void DoAReload ( );
	void ReloadNearFinished ( );
	void NotifyWeaponRefireDelayExpired ( );
	void NotifyWeaponFired ( unsigned char FireMode );
	void HandleFinishedFiring ( );
	bool ShouldRefire ( );
	int GetBurstsToFire ( );
	int GetBurstFireCount ( );
	void SetupWeaponFire ( unsigned char FireModeNum );
	void ServerStopFire ( unsigned char FireModeNum );
	void EndFire ( unsigned char FireModeNum );
	class AActor* SelectTarget ( );
	void StartFire ( unsigned char FireModeNum );
	bool CanFire ( );
	void StartFullChargeRumble ( );
	void StartChargeEffects ( );
	bool IsChargingWeapon ( );
	void ServerFireChargedShot ( float SentChargeAmount );
	void PlayNoAmmoFireSound ( );
	void PlayNoAmmoEffects ( );
	void TryReload ( unsigned long bDisplayHint );
	void DoReload ( );
	int GetAmmoRestoredPerReload ( );
	float GetReloadDuration ( );
	bool ShouldAutoReload ( );
	bool CanReload ( );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	void PlayReloadEject ( );
	void StopFireEffects ( unsigned char FireModeNum );
	void HearNoiseTimer ( );
	void WeaponPlayWwiseEvent ( class UWwiseEvent* Sound, float NoiseLoudness, struct FVector SoundLoc, struct FName NoiseType );
	void SpawnTracerEffect ( struct FVector HitLocation, float HitDistance );
	bool ShouldSpawnTracerFX ( );
	void PlayOwnedFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void HideReloadEmitters ( );
	void HideMuzzleFlashEmitter ( );
	void StopMuzzleFlashEffect ( );
	bool IsCameraWithinRadius ( struct FVector TestLocation, float Radius );
	bool IsMuzzleFlashRelevant ( );
	void PlayMuzzleFlashEffect ( );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void DummyFireTimerFunction ( );
	void DummyFireNumTimes ( int nNumTimes, struct FVector vHitLocation, class AActor* AttachedTo, float fInaccuracy, class AActor* TargetActor );
	void CheckTimerFireOnce ( );
	void PlayFireEffectsOnce ( struct FVector HitLocation );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	class UDecalComponent* GetWeaponSpecificDecalData ( class USFXPhysicalMaterialDecals* DecalEffects, float* FadeTime );
	class UDecalComponent* GetDecalData ( class UPhysicalMaterial* PhysMat, float* FadeTime );
	void SpawnADecal ( struct FImpactInfo Impact );
	class UWwiseEvent* GetWeaponSpecificImpactSound ( class USFXPhysicalMaterialImpactSounds* ImpactSounds );
	class UWwiseEvent* GetImpactSound ( class UPhysicalMaterial* PhysMat );
	void SpawnImpactSounds ( struct FImpactInfo Impact );
	class UParticleSystem* GetWeaponSpecificImpactEffect ( class USFXPhysicalMaterialImpactEffects* ImpactEffects );
	class UParticleSystem* GetImpactEffect ( class UPhysicalMaterial* PhysMat );
	void SpawnImpactEffects ( struct FImpactInfo Impact );
	void ReplicateImpact ( class ABioPawn* ImpactedPawn, class ASFXProjectile* InProjectile, float fDelay );
	void ClientDoImpact ( class ABioPawn* InImpactedPawn );
	void ProcessInstantHit_Internal ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits );
	void ProcessInstantHitNearMiss ( struct FVector StartTrace, struct FVector HitLocation );
	void ServerProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int HitArmourIdx, unsigned long bSuppressedAudio, int NumHits );
	void ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits );
	struct FImpactInfo CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList );
	void InstantFire ( );
	int GetAmmoCountInMagazine ( );
	float GetLazyFireInterval ( unsigned char FireModeNum );
	float GetFireInterval ( unsigned char FireModeNum );
	bool HasAnyAmmo ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	bool HasSpareAmmo ( );
	int AddAmmo ( int Amount );
	void ConsumeAmmo ( unsigned char FireModeNum );
	void InitializeAmmo ( );
	unsigned char GetWeaponFireType ( );
	float GetZoomFOV ( );
	bool GetModifiedFOV ( float* FOV );
	struct FVector GetMuzzleLoc ( );
	void SetWeaponRecoil ( float PitchRecoil );
	void ServerSetIsZoomed ( unsigned long bState );
	void SetRTPCPlayerPosition ( unsigned char NewPlayerPosition );
	void SetZoomed ( unsigned long bState );
	float GetAIAimDelay ( );
	float GetPlayerAimError ( float Accuracy );
	struct FRotator GetAdjustedAim ( struct FVector StartFireLoc );
	float GetRateOfFire ( );
	float GetTraceRange ( );
	struct FVector2D GetWeaponAimErrorRange ( );
	float GetWeaponRecoil ( );
	void ResetAmmoOnHolster ( );
	int GetMaxTotalAmmo ( );
	int GetCurrentTotalAmmo ( );
	int GetCurrentSpareAmmo ( );
	int GetMaxSpareAmmo ( unsigned long bIgnoreCurrentMag );
	int GetMagazineSize ( );
	bool OutOfAmmo ( );
	class UClass* GetDamageType ( unsigned char FiringMode );
	void CalculateBonus ( struct FVector HitLocation, class AActor* HitActor, struct FDamageCalculationAlgorithm* DamageCalc );
	float GetFireModeBaseDamage ( );
	void NotifyUnpossessed ( );
	bool UseFirstPersonCamera ( );
	void GetProjectileFirePosition ( struct FVector* out_ProjLoc, struct FVector* out_ProjDir );
	struct FVector GetPhysicalFireStartLoc ( struct FVector AimDir );
	void OnClientProjectileSpawned ( class ASFXProjectile* NewProjectile );
	class AProjectile* Internal_ProjectileFire ( );
	void ServerProjectileFire ( class AActor* Target, struct FVector ProjLocation, struct FVector ProjDirection );
	class AProjectile* ProjectileFire ( );
	void ForceEndFire ( );
	void InitDefaultDecalProperties ( );
	void ScaleWeapon ( );
	void CacheAnimNodes ( );
	void PostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void InitializeWeapon ( );
	void DeferredPostBeginPlay ( );
	void PostBeginPlay ( );
	void FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication );
	void CharacterSlotUpdated ( );
	void eventReplicatedEvent ( struct FName VarName );
	void OnWeaponUnequip ( class ASFXWeapon* Weapon );
	void OnWeaponEquip ( class ASFXWeapon* Weapon );
	void OnWeaponReload ( class ASFXWeapon* Weapon );
	float GetDamageVocProbabilityMod ( );
	void OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact );
};

UClass* ASFXWeapon::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_OnStoppedSleeping
// 0x0000 (0x00D2 - 0x00D2)
class USFXSeqEvt_OnStoppedSleeping : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41479 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USFXSeqEvt_OnStoppedSleeping::pClassPointer = NULL;

// Class SFXGame.sfxpowercustomaction
// 0x024B (0x0695 - 0x044A)
class Usfxpowercustomaction : public USFXPowerCustomActionBase
{
public:
	TArray< class AActor* >                            m_ImpactedActors;                                 		// 0x044C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ASFXProjectile_PowerCustomAction* >  Projectiles;                                      		// 0x0458 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            ComboDetonators;                                  		// 0x0464 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           PowerComboTypes;                                  		// 0x0470 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_StartCastAnimation;                            		// 0x047C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBodyStance                                 BS_EndCastAnimation;                              		// 0x0488 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FEvolvedSoundStruct >               EvolvedImpactSounds;                              		// 0x0494 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FEvolvedSoundStruct >               EvolvedReleaseSounds;                             		// 0x04A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FEvolvedSoundStruct >               EvolvedCastSounds;                                		// 0x04AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FEvolvedSoundStruct >               HenchmanEvolvedImpactSounds;                      		// 0x04B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FEvolvedSoundStruct >               HenchmanEvolvedReleaseSounds;                     		// 0x04C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FEvolvedSoundStruct >               HenchmanEvolvedCastSounds;                        		// 0x04D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      DefaultDamageType;                                		// 0x04DC (0x0004) [0x0000000000000000]              
	class UClass*                                      NonRagdollDamageType;                             		// 0x04E0 (0x0004) [0x0000000000000000]              
	class UClass*                                      ProjectileClass;                                  		// 0x04E4 (0x0004) [0x0000000000000000]              
	class UClass*                                      DetonationRumbleClass;                            		// 0x04E8 (0x0004) [0x0000000000000000]              
	class UClass*                                      DetonationScreenShakeClass;                       		// 0x04EC (0x0004) [0x0000000000000000]              
	struct FAreaEffectParameters                       DetonationParameters;                             		// 0x04F0 (0x0020) [0x0000000000004000]              ( CPF_Config )
	struct FDelayedPowerComboData                      DelayedPowerCombo;                                		// 0x0510 (0x0020) [0x0000000000000000]              
	struct FVector                                     m_vDetonationHitLocation;                         		// 0x0530 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vDetonationHitNormal;                           		// 0x053C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CustomCasterCrustParameters;                      		// 0x0548 (0x000C) [0x0000000000000000]              
	struct FName                                       ProjectileAttachPoint;                            		// 0x0554 (0x0008) [0x0000000000000000]              
	struct FName                                       ReleaseEffectBoneName;                            		// 0x055C (0x0008) [0x0000000000000000]              
	float                                              ProjectileRadius;                                 		// 0x0564 (0x0004) [0x0000000000000000]              
	float                                              ReleaseTime;                                      		// 0x0568 (0x0004) [0x0000000000000000]              
	float                                              TimeSinceStart;                                   		// 0x056C (0x0004) [0x0000000000000000]              
	float                                              LastPhysicsCallbackTime;                          		// 0x0570 (0x0004) [0x0000000000000000]              
	float                                              MinTimeBetweenPhysicsCallbacks;                   		// 0x0574 (0x0004) [0x0000000000000000]              
	float                                              PhysicsToDamageMultiplier;                        		// 0x0578 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PowerAssistFullControlValue;                      		// 0x057C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PowerAssistPartialControlValue;                   		// 0x0580 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PowerComboDelay;                                  		// 0x0584 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              Recommended_TargetVulnerable;                     		// 0x0588 (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_TargetOrganic;                     		// 0x058C (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_TargetMachine;                     		// 0x0590 (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_TargetHasShields;                  		// 0x0594 (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_TargetHasBiotics;                  		// 0x0598 (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_TargetHasArmor;                    		// 0x059C (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_NoMedigel;                         		// 0x05A0 (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_NoSquadMemberDead;                 		// 0x05A4 (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_NoSquadMemberInjured;              		// 0x05A8 (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_WeaponPowerAlreadyOn;              		// 0x05AC (0x0004) [0x0000000000000000]              
	void*                                              NotRecommended_TargetImmune;                      		// 0x05B0 (0x0004) [0x0000000000000000]              
	void*                                              StatBarTitle_Damage;                              		// 0x05B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_DamagePerSecond;                     		// 0x05B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_Force;                               		// 0x05BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_Cooldown;                            		// 0x05C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_Duration;                            		// 0x05C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_ImpactRadius;                        		// 0x05C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_Range;                               		// 0x05CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_ParagonRenegade;                     		// 0x05D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_PowerDamage;                         		// 0x05D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_WeaponDamage;                        		// 0x05D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_WeightCapacity;                      		// 0x05DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_HealthShield;                        		// 0x05E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_MeleeDamage;                         		// 0x05E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_HealthDamage;                        		// 0x05E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_ArmorDamage;                         		// 0x05EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_BarrierDamage;                       		// 0x05F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_ShieldBarrierDamage;                 		// 0x05F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_FreezeDuration;                      		// 0x05F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarTitle_DamageReduction;                     		// 0x05FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarToken_RawValue;                            		// 0x0600 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarToken_Force;                               		// 0x0604 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarToken_Time;                                		// 0x0608 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarToken_Distance;                            		// 0x060C (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarToken_Percent;                             		// 0x0610 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarToken_PositivePercent;                     		// 0x0614 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              StatBarToken_NegativePercent;                     		// 0x0618 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAnimSet*                                    CastAnimSet;                                      		// 0x061C (0x0004) [0x0000000000000000]              
	class UAnimSet*                                    HenchCastAnimSet;                                 		// 0x0620 (0x0004) [0x0000000000000000]              
	class UCameraAnim*                                 CastCameraAnim;                                   		// 0x0624 (0x0004) [0x0000000000000000]              
	float                                              CameraAnimPlayRate;                               		// 0x0628 (0x0004) [0x0000000000000000]              
	float                                              CameraAnimBlendIn;                                		// 0x062C (0x0004) [0x0000000000000000]              
	float                                              CameraAnimBlendOut;                               		// 0x0630 (0x0004) [0x0000000000000000]              
	float                                              CameraAnimDuration;                               		// 0x0634 (0x0004) [0x0000000000000000]              
	float                                              fAnimPlayRate;                                    		// 0x0638 (0x0004) [0x0000000000000000]              
	float                                              fStartAnimBlendInTime;                            		// 0x063C (0x0004) [0x0000000000000000]              
	float                                              fStartAnimBlendOutTime;                           		// 0x0640 (0x0004) [0x0000000000000000]              
	float                                              fEndAnimBlendInTime;                              		// 0x0644 (0x0004) [0x0000000000000000]              
	float                                              fEndAnimBlendOutTime;                             		// 0x0648 (0x0004) [0x0000000000000000]              
	float                                              fAnimStartTime;                                   		// 0x064C (0x0004) [0x0000000000000000]              
	class URvrClientEffectInterface*                   CE_CasterCrustTemplate;                           		// 0x0650 (0x0004) [0x0000000000000000]              
	class URvrClientEffectInterface*                   CE_TargetCrustTemplate;                           		// 0x0654 (0x0004) [0x0000000000000000]              
	class URvrClientEffectInterface*                   CE_ReleaseEffectTemplate;                         		// 0x0658 (0x0004) [0x0000000000000000]              
	class URvrClientEffectInterface*                   CE_ProjectileTemplate;                            		// 0x065C (0x0004) [0x0000000000000000]              
	class URvrClientEffectInterface*                   CE_ImpactTemplate;                                		// 0x0660 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 ImpactSound;                                      		// 0x0664 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 ReleaseSound;                                     		// 0x0668 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 CastSound;                                        		// 0x066C (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 HenchmanImpactSound;                              		// 0x0670 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 HenchmanReleaseSound;                             		// 0x0674 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 HenchmanCastSound;                                		// 0x0678 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 ImpactDistanceLayer;                              		// 0x067C (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 HenchmanImpactDistanceLayer;                      		// 0x0680 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 CancelCastSound;                                  		// 0x0684 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 HenchmanCancelCastSound;                          		// 0x0688 (0x0004) [0x0000000000000000]              
	unsigned long                                      bProjectileUsePawnRotation : 1;                   		// 0x068C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCustomImpactLogic : 1;                           		// 0x068C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      ImpactDeadPawns : 1;                              		// 0x068C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      ImpactFriends : 1;                                		// 0x068C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      ImpactPlaceables : 1;                             		// 0x068C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      BlockedByObjects : 1;                             		// 0x068C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      BuffAppliesToSquad : 1;                           		// 0x068C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bPowerStarted : 1;                                		// 0x068C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bPowerReleased : 1;                               		// 0x068C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      RestoreCoverAction : 1;                           		// 0x068C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      WaitingOnLeanOut : 1;                             		// 0x068C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      LeanOutToCast : 1;                                		// 0x068C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bOverrideComboDetonate : 1;                       		// 0x068C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bDynamicLoadAnimSet : 1;                          		// 0x068C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bPlayStartCastAnim : 1;                           		// 0x068C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bPlayEndCastAnim : 1;                             		// 0x068C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bAllowAnimInterrupt : 1;                          		// 0x068C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bCustomCasterCrustParameters : 1;                 		// 0x068C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bReleaseFBUsesEffectDuration : 1;                 		// 0x068C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bCustomImpactSound : 1;                           		// 0x068C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned char                                      CapabilityType;                                   		// 0x0690 (0x0001) [0x0000000000000000]              
	unsigned char                                      Discipline;                                       		// 0x0691 (0x0001) [0x0000000000000000]              
	unsigned char                                      InitialCoverAction;                               		// 0x0692 (0x0001) [0x0000000000000000]              
	unsigned char                                      CastingPhase;                                     		// 0x0693 (0x0001) [0x0000000000000000]              
	unsigned char                                      ERootMotionMode;                                  		// 0x0694 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41506 ];

		return pClassPointer;
	};

	int GetSaveGamePowerState ( );
	void SetSaveGamePowerState ( int nState );
	struct FName GetUniquePowerPlayerVariable ( );
	void RestoreSaveState ( );
	void ReplicationDecodeDelayAndResistance ( int EncodedData, float* fDelay, unsigned char* Resistance );
	int ReplicationEncodeDelayAndResistance ( float fDelay, unsigned char Resistance );
	void OnSourcePowerBioticDetonation ( );
	struct FString GetPowerComboClassFromUniqueID ( int PowerComboTypeUniqueID );
	int GetPowerComboTypeUniqueIDFromClass ( struct FString className );
	void ClientDoPowerComboImpactFromEffect ( class AActor* oTarget, int CustomActionReactionType, struct FString EffectClassName, float DetonatorPowerRank, int MiscFlags );
	void ClientDoPowerCombo ( class UClass* EffectClass, int SourcePowerID, class ABioPawn* SourcePowerInstigator, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal );
	void ReplicatePowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal );
	void DelayedDoPowerCombo ( );
	void DoPowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal, unsigned long bDelayed );
	void CheckForPowerCombo ( class AActor* Target, unsigned char Resistance, struct FVector HitLocation, struct FVector HitNormal );
	class Usfxgameeffect_powercombo* AddComboEffect ( class AActor* Target, class UClass* ComboClass, float Duration );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	void CombatEnded ( );
	void ReplaceAnimSetWithDynamic ( class UAnimSet* DynAnimSet );
	void GetPowerAnimInfo ( class UAnimSet** AnimSet, TArray< struct FName >* AnimNames );
	void CleanUpProjectile ( class ASFXProjectile_PowerCustomAction* oProjectile );
	void ReplicatePowerComboImpact ( class ABioPawn* Target, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags );
	void ReplicatePowerSubsequentImpact ( class ABioPawn* Target, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback );
	void ReplicateImpact ( class ABioPawn* Target, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType );
	void ClientDoCustomAction ( unsigned long bForced );
	void Replicate ( );
	void PlayPowerScreenShake ( class UClass* ScreenShakeClass, struct FVector HitLocation );
	void PlayPowerControllerRumble ( class UClass* RumbleClass, struct FVector HitLocation );
	struct FVector GetDefaultClientEffectParams ( );
	void AddEvolvedRankBonus ( float Bonus, struct FPowerData* Data );
	void ApplyForceToActor ( class AActor* oActor, struct FVector vForce );
	void ApplyShieldBonus ( class ABioPawn* oPawn, float fShieldValue, unsigned long bShieldValueIsPercent, float fDuration, struct FName Category, unsigned long bRemoveEffectWhenShieldsDown );
	void ApplyHealthBonus ( class ABioPawn* oPawn, float fHealthValue, unsigned long bHealthValueIsPercent, float fDuration, struct FName Category );
	void PlayParticleSystemOnSocket ( class UParticleSystem* PS_Template, class ABioPawn* TargetPawn, struct FName SocketName, struct FRotator Rotation );
	bool HasRemainingShieldOfType ( class ABioPawn* oPawn, class UClass* ShieldClass );
	bool IsPlaceable ( class AActor* oImpacted );
	bool ApplyPermanentGameEffect ( class AActor* oTarget, class UClass* className, float fEffectValue, struct FName nmCategory, class AController* Instigator );
	bool ApplyTemporaryGameEffect ( class AActor* oTarget, class UClass* className, float fDuration, float fEffectValue, struct FName nmCategory, class AController* Instigator );
	bool IsOfRace ( class AActor* oImpacted, unsigned char eRace );
	bool CanBeRagdolledByPowers ( class ABioPawn* oPawn );
	bool ImpactPlaceable ( class AActor* oCaster, class AActor* oImpacted, struct FVector Momentum, float PlotPlaceableDamage, unsigned long bForceDamage );
	float GetPhysicsLevelResistance ( class AActor* oTarget );
	int GetPhysicsLevel ( class AActor* oImpacted, unsigned long bIgnoreResistance );
	bool IsMachineRace ( class AActor* oImpacted );
	bool ShouldUsePowerOnShields ( class ABioPawn* Target, class UClass* DamageType, struct FString* sOptionalInfo );
	void RagdollPhysicsImpact ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir );
	bool CanImpactActor ( class AActor* oActor );
	bool AddActorToImpactedList ( class AActor* oActor, struct FVector vImpactLocation, TArray< class AActor* >* ImpactedActors );
	bool DetonationHitsTarget ( struct FVector HitLocation, float MaxRange, class AActor* HitActor, struct FAreaEffectParameters DetonationParams );
	bool GetNearbyActors ( struct FVector HitLocation, float Radius, float MaxRange, struct FAreaEffectParameters Param, TArray< class AActor* >* ImpactedActors );
	void ApplyBonusToParameter ( class USFXGameEffect* Bonus, unsigned long bRemove, struct FPowerData* Parameter );
	void ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove );
	void PlayImpactEffects ( class AActor* oImpacted, struct FVector ImpactLocation, struct FVector ImpactNormal );
	void PlayImpactSounds ( struct FVector ImpactLocation, class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds );
	void PlayCasterSounds ( class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds );
	void PlayDetonationEffects ( struct FVector ImpactLocation, struct FVector ImpactNormal, class ASFXProjectile_PowerCustomAction* oProjectile );
	void PlayReleaseEffects ( );
	bool OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal );
	float GetImpactForce ( class AActor* oImpacted );
	class UClass* GetNonRagdollDamageType ( );
	float GetImpactDamage ( class AActor* oImpacted, class UClass** DamageType );
	bool DoAreaExplosionForActor ( class AActor* oActor, struct FVector location, int ImpactCount, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxRagdollOverride, struct FScriptDelegate ImpactCallback, class UClass* MaxRagdollDmgTypeOverride );
	void AreaExplosion ( struct FVector location, float fRadius, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxImpactCount, struct FScriptDelegate ImpactCallback, int MaxRagdollOverride, class UClass* MaxRagdollDmgTypeOverride );
	void ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback );
	void ClientDoPowerComboImpact ( class AActor* oActor, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags );
	void ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType );
	bool DoPowerDetonatedForActor ( class AActor* oActor, struct FVector HitLocation, struct FVector HitNormal, int nImpactCount, unsigned long bFirstTarget, class ASFXProjectile_PowerCustomAction* oProjectile );
	void OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor );
	void ReleaseBuffPower ( );
	void ReleaseMeleePower ( );
	void ReleaseInstantPower ( );
	void OnClientPowerProjectileSpawned ( class ASFXProjectile_PowerCustomAction* NewProjectile );
	class ASFXProjectile_PowerCustomAction* ReleaseProjectilePower ( );
	bool GetProjectileAttachPoint ( struct FVector* AttachPoint );
	void ReleasePower ( );
	void ResetPowerCooldown ( );
	void StartPowerCooldown ( );
	float GetPowerCooldown ( );
	void eventTickCustomAction ( float fDeltaTime );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void EndThisCustomAction ( );
	bool PlayBodyStance ( struct FBodyStance BodyStance, float fStanceBlendInTime, float fStanceBlendOutTime );
	void StartCastAnimations ( );
	void StartPower ( );
	void StartCustomAction ( );
	bool ChangeCoverAction ( );
	struct FBodyStance GetCurrentBodyStance ( );
	bool LoadAnimSet ( );
	bool CanUsePower ( class AActor* oTarget );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* Usfxpowercustomaction::pClassPointer = NULL;

// Class SFXGame.sfxpawn
// 0x0173 (0x0D40 - 0x0BCD)
class Asfxpawn : public ABioPawn
{
public:
	struct FReplicatedGib                              ReplicatedGibInfo;                                		// 0x0BD0 (0x0020) [0x0000000000000020]              ( CPF_Net )
	struct FDeathInfo                                  ReplicatedDeathInfo;                              		// 0x0BF0 (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FPowerImpactNotification >          PowerImpactNotifications;                         		// 0x0C00 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScoreRecord >                      ScoreRecords;                                     		// 0x0C0C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FChallengeScoreRecord >             ChallengeScores;                                  		// 0x0C18 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScreenShakeStruct                          FootstepShake;                                    		// 0x0C24 (0x0078) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       HeadCapGuid;                                      		// 0x0C9C (0x0010) [0x0000000000000000]              
	struct FName                                       MuzzleSocketName;                                 		// 0x0CAC (0x0008) [0x0000000000000000]              
	struct FName                                       ShellCasingSocketName;                            		// 0x0CB4 (0x0008) [0x0000000000000000]              
	struct FName                                       ScoreSourceOverrideSetter;                        		// 0x0CBC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystem*                             PS_HeadGib;                                       		// 0x0CC4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             PS_LimbGib;                                       		// 0x0CC8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_HeadGibCap;                                    		// 0x0CCC (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 PlayerHeadShot;                                   		// 0x0CD0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 NonPlayerHeadShot;                                		// 0x0CD4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeadshotMultiplier;                               		// 0x0CD8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UWwiseEvent*                                 AmbientVoc;                                       		// 0x0CDC (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 PainVoc;                                          		// 0x0CE0 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 ShieldsDownVoc;                                   		// 0x0CE4 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 MoveToCoverVoc;                                   		// 0x0CE8 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 MeleedVoc;                                        		// 0x0CEC (0x0004) [0x0000000000000000]              
	void*                                              PrettyName;                                       		// 0x0CF0 (0x0004) [0x0000000000000000]              
	class Asfxpawn*                                    DrivenAtlas;                                      		// 0x0CF4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class Asfxpawn*                                    ThreateningPawn;                                  		// 0x0CF8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fThreatDuration;                                  		// 0x0CFC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fAssistVocDelay;                                  		// 0x0D00 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastTimeEaten;                                    		// 0x0D04 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumConsumeTickets;                                		// 0x0D08 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumReleasedConsumeTickets;                        		// 0x0D0C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AmmoDropPct;                                      		// 0x0D10 (0x0004) [0x0000000000000000]              
	int                                                MaxConsumeTickets;                                		// 0x0D14 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              PowerControlResistance;                           		// 0x0D18 (0x0004) [0x0000000000000000]              
	int                                                CodexPlotState;                                   		// 0x0D1C (0x0004) [0x0000000000000000]              
	float                                              DamageScoreBudget;                                		// 0x0D20 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              KillBonusScore;                                   		// 0x0D24 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PowerControlAssistBudget;                         		// 0x0D28 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srScoreTickerEntry;                               		// 0x0D2C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srScoreTickerValueToken;                          		// 0x0D30 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class ASFXPawn_Player*                             ScoreSourceOverride;                              		// 0x0D34 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UForceFeedbackWaveform*                      FootstepForceFeedback;                            		// 0x0D38 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bAllowHeadGib : 1;                                		// 0x0D3C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPlayFootstepScreenShake : 1;                     		// 0x0D3C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPlayFootstepRumble : 1;                          		// 0x0D3C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLimitConsoleLOD : 1;                             		// 0x0D3C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCanPartialLean : 1;                              		// 0x0D3C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSupportsVisibleWeapons : 1;                      		// 0x0D3C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bIsMeleeThreat : 1;                               		// 0x0D3C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bCanBeEaten : 1;                                  		// 0x0D3C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bCorpseDestroyed : 1;                             		// 0x0D3C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bRecentlyDeceased : 1;                            		// 0x0D3C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bCanUseTurrets : 1;                               		// 0x0D3C (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bCanDriveAtlas : 1;                               		// 0x0D3C (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bCanBeRepaired : 1;                               		// 0x0D3C (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bCanBeMarauderBuffed : 1;                         		// 0x0D3C (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bCanBeMeleed : 1;                                 		// 0x0D3C (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bIgnoreTarget : 1;                                		// 0x0D3C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bIgnoresPets : 1;                                 		// 0x0D3C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bScoreDistributed : 1;                            		// 0x0D3C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bIsPet : 1;                                       		// 0x0D3C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bCanDropAmmo : 1;                                 		// 0x0D3C (0x0004) [0x0000000000000000] [0x00080000] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41510 ];

		return pClassPointer;
	};

	class AActor* GetPetOwner ( );
	void ReplicatedGibUpdated ( );
	void ReplicateGibHead ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType );
	void GibHead ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType );
	void ReleaseConsumeTicket ( );
	bool AcquireConsumeTicket ( );
	void AllowDeath ( );
	void OnCorpseDestroyed ( );
	void DeferredResetReplicatedDeathInfoDamageType ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	unsigned char GetPowerResistance ( class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, class UClass* DamageType, float* Damage, struct FVector* Force, class AActor** TargetOverride );
	void TakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void ResetThreat ( );
	void SetThreat ( class Asfxpawn* oPawn, unsigned long bMelee );
	void DistributeScore ( );
	void AddPowerAssistEvent ( class ABioPawn* PlayerPawn, void* SourceName, float fAmount );
	void AddDamageEvent ( class Asfxpawn* PlayerPawn, class AController* instigatedBy, float fAmount, void* SourceName );
	void PlayDeathVocalization ( class ABioPawn* Killer );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void OnPowersLoaded ( );
	void* GetPrettyName ( );
	struct FString GetShieldTypeAsDisplayString ( );
	bool CanUseWeapon ( class UClass* WeaponClass );
	void PlayStepEffect ( int FootDown, struct FTraceHitInfo HitInfo, float Loudness );
	void PlayRepairEffects ( unsigned long bActivate );
	void ApplyMarauderArmourBuff ( );
	void NotifyHealed ( );
	void DriverDied ( );
	bool TryToExitMe ( );
	void TryToDriveMe ( class Asfxpawn* NewDriver );
	bool CanBeDrivenBy ( class Asfxpawn* PossibleDriver );
	void PlayMeleedVoc ( );
	void PlayMoveToCoverSound ( );
	void ShieldsDown ( );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void PlayAmbientSound ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* Asfxpawn::pClassPointer = NULL;

// Class SFXGame.SFXPawn_PlayerParty
// 0x0050 (0x0D90 - 0x0D40)
class ASFXPawn_PlayerParty : public Asfxpawn
{
public:
	TArray< struct FPowerUnlockRequirement >           PowerUnlockRequirements;                          		// 0x0D40 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            SquadScreenPowerOrder;                            		// 0x0D4C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPowerStartingRank >                StartingPowerRanks;                               		// 0x0D58 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPowerAutoLevelUp >                 AutoLevelUpInfo;                                  		// 0x0D64 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CharacterLevel;                                   		// 0x0D70 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      UIWorldArchetype;                                 		// 0x0D74 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeToRevive;                                    		// 0x0D78 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fPostResInvulnerability;                          		// 0x0D7C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fReviveRange;                                     		// 0x0D80 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class Asfxpawn*                                    Reviver;                                          		// 0x0D84 (0x0004) [0x0000000000000000]              
	unsigned long                                      bHelmetHidesHead : 1;                             		// 0x0D88 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHelmetHidesHair : 1;                             		// 0x0D88 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bHelmetAffectsVO : 1;                             		// 0x0D88 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bHelmetIsFull : 1;                                		// 0x0D88 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bBeingRevived : 1;                                		// 0x0D88 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bRecentlyResurrected : 1;                         		// 0x0D88 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bDamagedHarvester : 1;                            		// 0x0D88 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned char                                      ForcedHelmetState[ 0x4 ];                         		// 0x0D8C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41509 ];

		return pClassPointer;
	};

	void InstancePrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	struct FName GetUIAppearanceTag ( );
	void PlayerRevivedMessage ( );
	void SetExecutioner ( class APawn* Killer );
	void AttemptKillingBlow ( class APawn* Killer );
	void UpdateReviveHud ( unsigned long bSuccess, unsigned long bReviverPawn );
	class Usfxgui_playercountdown* GetPlayerCountdownMovie ( class ABioPlayerController* BioPC );
	bool IsReadyForExecution ( class Asfxpawn* Killer );
	void EnableUsage ( unsigned long enable );
	void Used ( class AActor* User );
	void StartRevive ( class ASFXPawn_PlayerParty* TargetPawn );
	bool eventResurrect ( float PercentOfHealthRegained, unsigned long bIsInstantaneous );
	void ResurrectionTimer ( );
	bool InGodMode ( );
	void TransferModsToNewWeapon ( TArray< struct FName > PreviousWeaponNames, struct FName NewWeaponClass );
	void ApplyAppropriateModsIfNoneExist ( TArray< struct FName > PreviousWeaponNames );
	void ShieldsDown ( );
	void ShieldsUp ( );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	unsigned char GetPowerResistance ( class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, class UClass* DamageType, float* Damage, struct FVector* Force, class AActor** TargetOverride );
	void SetupWeaponAnimations ( class ASFXWeapon* NewWeapon, class ASFXWeapon* OldWeapon, unsigned long bDrawOnly );
	void CollapseWeapon ( );
	void ExpandWeapon ( );
	void FadeOutHolsterAnim ( );
	void SwapHolsterAnim ( );
	void FadeOutDrawAnim ( );
	void SwapDrawAnim ( );
	void SetPowerStartingRanks ( );
	void eventSetRTPCHelmetIsEnabled ( class UWwiseAudioComponent* WwiseComponent );
	void ForceSquadHelmet ( unsigned char InController, unsigned char InState );
	bool ShouldShowHelmet ( );
	void RestoreDefaultHelmetState ( unsigned long bForceUpdate );
	unsigned char GetCurrentHelmetState ( );
	void AttachHelmet ( unsigned long bAttachHelmet, unsigned long bUpdateComponents );
	void PostBeginPlay ( );
	void InitDefaultHelmetState ( );
};

UClass* ASFXPawn_PlayerParty::pClassPointer = NULL;

// Class SFXGame.SFXPawn_Henchman
// 0x0034 (0x0DC4 - 0x0D90)
class ASFXPawn_Henchman : public ASFXPawn_PlayerParty
{
public:
	TArray< class UClass* >                            ArmorBonuses;                                     		// 0x0D90 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< void* >                                    ArmorBonusStrings;                                		// 0x0D9C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FHenchmanInfoStruct >               HenchmenInfo;                                     		// 0x0DA8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FName                                       m_nmMappedPower;                                  		// 0x0DB4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              PowerUseDelay;                                    		// 0x0DBC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTexture2D*                                  m_GUI_Icon;                                       		// 0x0DC0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41508 ];

		return pClassPointer;
	};

	struct FName GetUIAppearanceTag ( );
	bool CanPlayDeathEffect ( );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void ShieldsUp ( );
	void ShieldsDown ( );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	void GetDefaultLoadout ( struct FName HTag, struct FName* DLoadout );
	void PlayDeathVocalization ( class ABioPawn* Killer );
	class UTexture2D* GetGUIIcon ( );
	bool ValidateRagdoll ( );
	void ApplyArmorBonuses ( );
	void InitializeHenchman ( int DesiredLevel );
	void SpawnDefaultWeapons ( );
	bool eventResurrect ( float PercentOfHealthRegained, unsigned long bIsInstantaneous );
	void Revive ( class AActor* User );
	void PostBeginPlay ( );
	bool GetAttackOrderPower ( class USFXPowerCustomActionBase** Power );
	bool InCombat ( );
	void eventBioBaseRemovedFromWorld ( );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	int GetScaledLevel ( );
};

UClass* ASFXPawn_Henchman::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendAdditivePower
// 0x0000 (0x00DC - 0x00DC)
class UBioAnimNodeBlendAdditivePower : public UBioAnimNodeBlendAdditive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41638 ];

		return pClassPointer;
	};

	void SetChildAnimTime ( class UAnimNode* oChild, float fTime );
};

UClass* UBioAnimNodeBlendAdditivePower::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeBlendWeaponEquip
// 0x0000 (0x00BD - 0x00BD)
class UBioAnimNodeBlendWeaponEquip : public UAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41985 ];

		return pClassPointer;
	};

	void ReplayAnim ( );
	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float Rate, float StartTime );
};

UClass* UBioAnimNodeBlendWeaponEquip::pClassPointer = NULL;

// Class SFXGame.BioAnimNodeCameraShake
// 0x0000 (0x00DC - 0x00DC)
class UBioAnimNodeCameraShake : public UBioAnimNodeBlendAdditive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41987 ];

		return pClassPointer;
	};

	void SetChildAnimTime ( class UAnimNode* oChild, float fTime );
};

UClass* UBioAnimNodeCameraShake::pClassPointer = NULL;

// Class SFXGame.BioAnimNotify_CustomAction
// 0x0008 (0x0044 - 0x003C)
class UBioAnimNotify_CustomAction : public UAnimNotify_Scripted
{
public:
	struct FName                                       Info;                                             		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42122 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UBioAnimNotify_CustomAction::pClassPointer = NULL;

// Class SFXGame.BioAreaTransition
// 0x0010 (0x023C - 0x022C)
class ABioAreaTransition : public ATriggerVolume
{
public:
	struct FName                                       sMoveToArea;                                      		// 0x022C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       sMoveToStartPoint;                                		// 0x0234 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42133 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ABioAreaTransition::pClassPointer = NULL;

// Class SFXGame.SFXPawn_Player
// 0x045B (0x11EB - 0x0D90)
class ASFXPawn_Player : public ASFXPawn_PlayerParty
{
public:
	struct FScaledFloat                                WeaponEncumbranceModifiers[ 0x6 ];                		// 0x0D90 (0x00D8) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMorphHeadSaveRecord                        PendingMorphHeadData;                             		// 0x0E68 (0x0080) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     firstName;                                        		// 0x0EE8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     PlayerClassName;                                  		// 0x0EF4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     faceCode;                                         		// 0x0F00 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_sWwiseRTPCNameUseCasual;                        		// 0x0F0C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class USkeletalMeshComponent* >            AsyncAppearanceMeshes;                            		// 0x0F18 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FPermanentGameEffect >              PermanentGameEffects;                             		// 0x0F24 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class USFXGameEffect* >                    EncumbranceCapacityBonuses;                       		// 0x0F30 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXAsyncAssetRequest >             PendingMorphHeadResources;                        		// 0x0F3C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FArmorEffectDescription >           ArmorEffectDescriptions;                          		// 0x0F48 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class USkeletalMeshComponent* >            DetachOnDestroy;                                  		// 0x0F54 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FScriptDelegate                             __AsyncUpdating_OnCompleted__Delegate;            		// 0x0F60 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScreenShakeStruct                          HitShake;                                         		// 0x0F6C (0x0078) [0x0000000000000001]              ( CPF_Edit )
	struct FScreenShakeStruct                          ZoomHitShake;                                     		// 0x0FE4 (0x0078) [0x0000000000000001]              ( CPF_Edit )
	struct FScreenShakeStruct                          CoverShake;                                       		// 0x105C (0x0078) [0x0000000000000000]              
	struct FGuid                                       CharacterGUID;                                    		// 0x10D4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CamperAverageLoc;                                 		// 0x10E4 (0x000C) [0x0000000000000000]              
	struct FName                                       AsyncGroupName;                                   		// 0x10F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       PermanentGameEffect_CategoryPrefix;               		// 0x10F8 (0x0008) [0x0000000000000000]              
	struct FName                                       EncumbranceEffectName;                            		// 0x1100 (0x0008) [0x0000000000000000]              
	struct FName                                       PrimaryWeapon;                                    		// 0x1108 (0x0008) [0x0000000000000000]              
	struct FName                                       SecondaryWeapon;                                  		// 0x1110 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   PopUpDamageMultiplier;                            		// 0x1118 (0x0008) [0x0000000000004000]              ( CPF_Config )
	int                                                CasualID;                                         		// 0x1120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                OverrideCasualID;                                 		// 0x1124 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                FullBodyID;                                       		// 0x1128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TorsoID;                                          		// 0x112C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShoulderID;                                       		// 0x1130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ArmID;                                            		// 0x1134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LegID;                                            		// 0x1138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpecID;                                           		// 0x113C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Tint1ID;                                          		// 0x1140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Tint2ID;                                          		// 0x1144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PatternID;                                        		// 0x1148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PatternColorID;                                   		// 0x114C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HelmetID;                                         		// 0x1150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EmissiveID;                                       		// 0x1154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXVocalizationBank*                        PlayerCombatVoc;                                  		// 0x1158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXVocalizationBank*                        PlayerExplorationVoc;                             		// 0x115C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXVocalizationBank*                        PlayerStealthVoc;                                 		// 0x1160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXVocalizationBank*                        GenericPlayerCombatVoc;                           		// 0x1164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                OverrideHelmetID;                                 		// 0x1168 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class USkeletalMesh*                               BaseHelmetMesh;                                   		// 0x116C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FHelmetMetaData                             BaseHelmetData;                                   		// 0x1170 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMesh*                               OverrideHelmetMesh;                               		// 0x1174 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FHelmetMetaData                             OverrideHelmetData;                               		// 0x1178 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPhysicsAsset*                               MalePhys;                                         		// 0x117C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               FemalePhys;                                       		// 0x1180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXCharacterClass*                          PlayerClass;                                      		// 0x1184 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              OutOfAmmoTimestamp;                               		// 0x1188 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OutOfAmmoSwapThreshold;                           		// 0x118C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UWwiseEvent*                                 ShieldImpactSound;                                		// 0x1190 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 ImpactSound;                                      		// 0x1194 (0x0004) [0x0000000000000000]              
	float                                              TotalXP;                                          		// 0x1198 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UTexture2D*                                  m_GUI_Icon;                                       		// 0x119C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CampingTickCounter;                               		// 0x11A0 (0x0004) [0x0000000000000000]              
	float                                              CampingTolerance;                                 		// 0x11A4 (0x0004) [0x0000000000000000]              
	float                                              CamperBusterDelay;                                		// 0x11A8 (0x0004) [0x0000000000000000]              
	float                                              EncumbranceCapacity;                              		// 0x11AC (0x0004) [0x0000000000000000]              
	float                                              EncumbranceMinCooldown;                           		// 0x11B0 (0x0004) [0x0000000000000000]              
	float                                              EncumbranceMaxCooldown;                           		// 0x11B4 (0x0004) [0x0000000000000000]              
	float                                              CurrentWeaponEncumbrance;                         		// 0x11B8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UWwiseEvent*                                 EnterCoverSound;                                  		// 0x11BC (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 EnterCoverVoc;                                    		// 0x11C0 (0x0004) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      CoverForceFeedback;                               		// 0x11C4 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 CoverEnterFoleySound;                             		// 0x11C8 (0x0004) [0x0000000000000000]              
	float                                              LastCoverEnterDistance;                           		// 0x11CC (0x0004) [0x0000000000000000]              
	float                                              PopUpDamageMultiplierDuration;                    		// 0x11D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxTotalReputation;                               		// 0x11D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ParagonScarBias;                                  		// 0x11D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FullParagonScarBiasValue;                         		// 0x11DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              NoParagonScarBiasValue;                           		// 0x11E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bUseCasualAppearance : 1;                         		// 0x11E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUsingOverrideHelmet : 1;                         		// 0x11E4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bFullHelmetRequired : 1;                          		// 0x11E4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsFullAmmo : 1;                                  		// 0x11E4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bOverrideHideScars : 1;                           		// 0x11E4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bIgnoreHeadOffsetsInMeshMerge : 1;                		// 0x11E4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bInPersonalization : 1;                           		// 0x11E4 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bAsyncUpdatingAppearance : 1;                     		// 0x11E4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bCanRoll : 1;                                     		// 0x11E4 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bCannotUseCover : 1;                              		// 0x11E4 (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      bCanBeStopped : 1;                                		// 0x11E4 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bHasPendingSavedMorphHead : 1;                    		// 0x11E4 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bHasPendingExistingMorphHead : 1;                 		// 0x11E4 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned char                                      CombatAppearance;                                 		// 0x11E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Origin;                                           		// 0x11E9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Notoriety;                                        		// 0x11EA (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42139 ];

		return pClassPointer;
	};

	void RemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void AddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void Destroyed ( );
	bool ShouldShowHUDGrenadeCounter ( );
	struct FName GetUIAppearanceTag ( );
	void EquipWeaponToPlayerAndSquad ( class UClass* NewWeaponClass );
	struct FString GetArmorEffectDescription ( TArray< struct FString > ArmorEffects );
	void PreClientTravel ( );
	class USFXCustomizationInstance* CreateTemporaryCustomizationInstance ( );
	void ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags );
	void ResetSkeletalMesh ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void ApplyPendingMorphHead ( );
	void ResetPendingMorphData ( );
	bool HasPendingMorphData ( );
	void EnqueueMorphHeadForLoad ( struct FMorphHeadSaveRecord InRecord );
	void EnqueueIconicHeadForLoad ( );
	void EnqueueExistingMorphHead ( class UBioMorphFace* InMorphHead );
	void UpdateMappedPowerDisplay ( );
	void eventCollectAnimListForCooking ( class ABioPawn* Pawn, TArray< struct FName >* OutResults );
	void UseReviveConsumablePower ( );
	bool IsTestFrameworkSetupComplete ( );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void KillAndFreeze ( class AController* Killer, class UClass* dmgType, struct FString Cause );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	bool IsUpdatingAppearanceAsync ( );
	void GetHelmetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequest ( int Id, unsigned char Part, TArray< struct FCustomizableElement >* ArrayToSearch, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequestByElement ( unsigned char Part, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetMeshAssetRequest ( int Id, TArray< struct FCustomizableElement >* Meshes );
	void GetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	void ClearAsyncAssetLoader ( );
	void AbortAsyncUpdateAppearance ( );
	void OnAsyncAppearanceTexturesPreloaded ( );
	void OnAsyncAssetsLoaded ( );
	void UpdateAppearanceAsync ( struct FScriptDelegate CompletedDelegate, unsigned long bBlockForAssetLoad );
	void UpdateAppearance ( );
	void UpdatePlayerLoadoutInfo ( );
	void GiveWeaponToPlayer ( class ASFXWeapon* NewWeapon, unsigned long DeleteTossedWeapons );
	bool ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	void UpdatePrimaryAndSecondaryWeapons ( struct FName NewWeaponName );
	bool SwitchToBackupWeapon ( );
	class ASFXWeapon* BackupWeapon ( class ASFXWeapon* PreferredWeapon );
	void PlayCoverPresentation ( );
	void NotifyFinishedCoverAlign ( );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	class UTexture2D* GetGUIIcon ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void AutoMapPC ( );
	void AutoMapXbox ( );
	struct FName ConstructedPermanentGECategoryName ( struct FName UniqueName );
	bool ApplyPermanentPlayerGameEffect ( struct FName UniqueName );
	void ApplyBonuses ( );
	void AutoMap ( );
	class USFXPowerCustomActionBase* FindPower ( struct FName nmPowerClass );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void InitializePlayerVoc ( );
	void SPCamperBuster ( );
	void PostBeginPlay ( );
	void AddPlayerInventory ( );
	int GetScaledLevel ( );
	void SyncPawnAppearance ( class ABioPawn* SourcePawn );
	void CopyPawnAppearance ( class ABioPawn* SourcePawn );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void RestoreDefaultHelmetState ( unsigned long bForceUpdate );
	void InitDefaultHelmetState ( );
	int FindOverrideHelmet ( );
	bool GetBaseHelmetElement ( struct FCustomizableElement* OutElement );
	int GetBaseHelmetID ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	bool GetKnockbackReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void UpdateWeaponVisibility_DEPRECATED ( );
	void TransferModsToNewWeapon ( TArray< struct FName > PreviousWeaponNames, struct FName NewWeaponClass );
	void ApplyAppropriateModsIfNoneExist ( TArray< struct FName > PreviousWeaponNames );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void UpdateMaterialParameters ( class USFXCustomizationInstance* InSettings, class AActor* InTargetActor, class USkeletalMeshComponent* InHeadMesh, unsigned long bHideScars );
	void GetCurrentScarStruct ( unsigned long bHideScars, struct FScarInfo* Scar );
	int CalculateScarIndex ( unsigned long bHideScars, int CharmSkill, int IntimidateSkill, int ReputationSkill );
	void UpdateParameters ( );
	void InternalGetParagonRenegadePercentage ( float Paragon, float ParagonOffset, float Renegade, float Reputation, float* ParagonPercent, float* RenegadePercent );
	void GetParagonRenegadePercentage ( float* ParagonPercent, float* RenegadePercent );
	int GetReputationSkill ( );
	int GetCharmSkill ( );
	int GetIntimidateSkill ( );
	class USkeletalMeshComponent* AddMeshForTexturePrestream ( class USkeletalMesh* PrestreamMesh );
	void PrestreamTexturesRequiredForAppearance ( );
	void UpdateBodyAppearance ( );
	void UpdateHeadAppearance ( );
	void SetFaceFXAsset ( struct FString dynamicLoadPath );
	void UpdateMeshComponent ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void UpdateHelmetComponent ( );
	void ApplyAppearance ( );
	void UpdateHairAppearance ( );
	void UpdateGameEffects ( );
	void GetHelmetGameEffects ( TArray< class UClass* >* Effects );
	void GetGameEffects ( int Id, TArray< struct FCustomizableElement >* Meshes, TArray< class UClass* >* Effects );
	void ValidateAppearanceIDs ( );
	class UMaterialInstanceConstant* EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx );
	bool RequiresFullHelmet ( );
	class USkeletalMesh* BuildHelmetMesh ( int Id, unsigned long bUseFullArmourHelmets, struct FHelmetMetaData* HelmetDetails );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	struct FString GetFullName ( );
	float GetWeaponEncumbranceCooldown ( float Encumbrance );
	void ApplyWeaponEncumbrance ( );
	void UpdateWeaponEncumbrance ( );
	void RemoveWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void AddWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void LoadCharacterClassData ( );
	void eventReplicatedEvent ( struct FName VarName );
	void* GetLastNameStringRef ( );
	void AsyncUpdating_OnCompleted ( TArray< class UObject* >* LoadedAssets );
};

UClass* ASFXPawn_Player::pClassPointer = NULL;

// Class SFXGame.sfxai_core
// 0x01EF (0x0690 - 0x04A1)
class Asfxai_core : public ASFXAI_NativeBase
{
public:
	struct FKismetOrder                                CurrentKismetOrder;                               		// 0x04A4 (0x002C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UsePowerDelegate__Delegate;                     		// 0x04D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __FireWeaponDelegate__Delegate;                   		// 0x04DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __MoveToDelegate__Delegate;                       		// 0x04E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __TryInvalidateTargetRange__Delegate;             		// 0x04F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __TryInvalidateTargetFlank__Delegate;             		// 0x0500 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      DefaultCommand;                                   		// 0x050C (0x0004) [0x0000000000000000]              
	class UClass*                                      FallbackCommand;                                  		// 0x0510 (0x0004) [0x0000000000000000]              
	class UClass*                                      AggressiveCommand;                                		// 0x0514 (0x0004) [0x0000000000000000]              
	class UClass*                                      BerserkCommand;                                   		// 0x0518 (0x0004) [0x0000000000000000]              
	class UClass*                                      PendingCommand;                                   		// 0x051C (0x0004) [0x0000000000000000]              
	struct FVector                                     AimOverrideLoc;                                   		// 0x0520 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_PowerTargetLocation;                            		// 0x052C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vPushDirection;                                 		// 0x0538 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vOriginalMoveGoalLocation;                      		// 0x0544 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   EvadeDamagePct;                                   		// 0x0550 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SyncMeleeAbilityName;                             		// 0x0558 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FVector2D                                   MoveFireDelayTime;                                		// 0x0560 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   AI_BurstsToFire;                                  		// 0x0568 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              m_fNearbyEnemyDistance;                           		// 0x0570 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LastFireTime;                                     		// 0x0574 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastDamagedTime;                                  		// 0x0578 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastMeleeTime;                                    		// 0x057C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastSyncMeleeTime;                                		// 0x0580 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MeleeAttackInterval;                              		// 0x0584 (0x0004) [0x0000000000000000]              
	float                                              SyncMeleeAttackInterval;                          		// 0x0588 (0x0004) [0x0000000000000000]              
	float                                              EvadeFrequency;                                   		// 0x058C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastEvadeTime;                                    		// 0x0590 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EvadeDamageTaken;                                 		// 0x0594 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EvadeHealthThreshold;                             		// 0x0598 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EvadeResetDuration;                               		// 0x059C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PowerEvadeChance;                                 		// 0x05A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PartialLeanPct;                                   		// 0x05A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeMoveOffset;                                  		// 0x05A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CoverLeanAimOffset;                               		// 0x05AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverAimOffset;                                   		// 0x05B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirectAimOffset;                                  		// 0x05B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimInstability;                                   		// 0x05B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastInstabilityTime;                              		// 0x05BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AI_Acc_InstabilityDecayRate;                      		// 0x05C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AI_Acc_Base;                                      		// 0x05C4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_Acc_Target;                                    		// 0x05C8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_AccMod_Move;                                   		// 0x05CC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_AccMod_TargMove;                               		// 0x05D0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_AccMod_BriefAcquire;                           		// 0x05D4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_AccMod_BriefVisibility;                        		// 0x05D8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_AccMod_ShortRange;                             		// 0x05DC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_AccMod_MediumRange;                            		// 0x05E0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_AccMod_LongRange;                              		// 0x05E4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                DesiredBurstsToFire;                              		// 0x05E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CancelFirePct;                                    		// 0x05EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponAimDelay;                                   		// 0x05F0 (0x0004) [0x0000000000000000]              
	class APawn*                                       DriveTarget;                                      		// 0x05F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       ExecutionTarget;                                  		// 0x05F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fFiringArcAngle;                                		// 0x05FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fReloadThreshold;                               		// 0x0600 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCancelReasons;                                 		// 0x0604 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_PowerTargetActor;                               		// 0x0608 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nReservationID;                                 		// 0x060C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMoveAttemptCounter;                            		// 0x0610 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastFailedPathTime;                               		// 0x0614 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastSuccessfulPathTime;                           		// 0x0618 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCombatActionTime;                             		// 0x061C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StuckTimeout;                                     		// 0x0620 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AActor*                                      m_RequestedActorToFollow;                         		// 0x0624 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_ActorToFollow;                                  		// 0x0628 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPowerCompletionReason;                         		// 0x062C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nWeaponCompletionReason;                        		// 0x0630 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMoveCompletionReason;                          		// 0x0634 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRunThreshold;                                  		// 0x0638 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       m_oLastBumped;                                    		// 0x063C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastBumpTime;                                  		// 0x0640 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    m_oPushingPawn;                                   		// 0x0644 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastPushTime;                                  		// 0x0648 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurrentAttackID;                               		// 0x064C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFXWeapon*                                  m_oNextWeapon;                                    		// 0x0650 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      PreferredAnchor;                                  		// 0x0654 (0x0004) [0x0000000000000000]              
	float                                              AnchorDistance;                                   		// 0x0658 (0x0004) [0x0000000000000000]              
	float                                              TimeOfLastCombatEvent;                            		// 0x065C (0x0004) [0x0000000000000000]              
	float                                              TimeUntilAggressive;                              		// 0x0660 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MaxNumAggressive;                                 		// 0x0664 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                m_nTargetTicketCost;                              		// 0x0668 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fPlayerTargetWeightBonus;                       		// 0x066C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AActor*                                      m_oGoalActor;                                     		// 0x0670 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_oLastApproachTarget;                            		// 0x0674 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastApproachDistance;                          		// 0x0678 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastApproachCheckTime;                         		// 0x067C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveTimerPenalty;                                 		// 0x0680 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      ObjectiveGoalActor;                               		// 0x0684 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseTicketing : 1;                                		// 0x0688 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bAllowCombatTransitions : 1;                      		// 0x0688 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bPowerProjectileReleased : 1;                   		// 0x0688 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bNotifyFriendsOnDeath : 1;                        		// 0x0688 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bReceiveDeathNotifications : 1;                   		// 0x0688 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bNotifiedNewEnemySoundPlayed : 1;                 		// 0x0688 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bCheckLOS : 1;                                  		// 0x0688 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bCancelAction : 1;                              		// 0x0688 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bWaitBeforeNextAttack : 1;                      		// 0x0688 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bClearVelocityAfterMove : 1;                    		// 0x0688 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bUsePowerReservations : 1;                      		// 0x0688 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bStuck : 1;                                       		// 0x0688 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bGetFirstMoveTargetFailed : 1;                    		// 0x0688 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      m_bAllowedToLeavePlaypen : 1;                     		// 0x0688 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      m_bIgnorePowerSuppression : 1;                    		// 0x0688 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      m_bStayLeanedOut : 1;                             		// 0x0688 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      m_bAvoidDangerLinks : 1;                          		// 0x0688 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      m_bAvoidFireFromPlayerOnly : 1;                   		// 0x0688 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      m_bDelayWeaponUse : 1;                            		// 0x0688 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      m_bFailedTicket : 1;                              		// 0x0688 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      m_bCustomActionFailed : 1;                        		// 0x0688 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      m_bPendingWeaponSwitch : 1;                       		// 0x0688 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      m_bCanResurrect : 1;                              		// 0x0688 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      m_bFollowingActor : 1;                            		// 0x0688 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bKismetForcedWalk : 1;                            		// 0x0688 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      m_bFirstIdle : 1;                                 		// 0x0688 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bDying : 1;                                       		// 0x0688 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      bIsAutoBot : 1;                                   		// 0x0688 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned char                                      PendingCoverAction;                               		// 0x068C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      BestTargetCoverAction;                            		// 0x068D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_AttackResult;                                   		// 0x068E (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PreviousCombatMood;                               		// 0x068F (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42217 ];

		return pClassPointer;
	};

	void CheckDownedPlayers ( );
	void DrawDifficulty ( class UBioCheatManager* CM );
	bool CanTurretFireAt ( class AActor* TestActor );
	void OnPossessTurret ( class USFXSeqAct_PossessTurret* Action );
	void FindDrivablePawn ( );
	float GetMinDistanceToAnyPlayer ( );
	void CleanUpStaleAI ( );
	void NotifyStuck ( );
	void NotifyCombatZoneRemoved ( );
	void NotifyCombatZoneAdded ( );
	bool eventIsAtCover ( );
	void NotifyKnockedOutOfCover ( );
	float GetMoveFireDelayTime ( );
	void DoMeleeAttack ( );
	bool ShouldKillPlayer ( class APawn* PartyPawn );
	bool ShouldPowerEvade ( );
	bool ShouldSyncMelee ( class AActor* MeleeTarget );
	bool ShouldMelee ( class AActor* MeleeTarget );
	unsigned char GetBestEvadeDir ( struct FVector DangerPoint, class AProjectile* Prj, class APawn* Shooter );
	bool ShouldPartialLean ( );
	bool ShouldCancelMove ( int nReason );
	bool ShouldStayLeanedOut ( );
	bool HasNearbyEnemy ( class APawn** NearbyPawn );
	void eventGetActorToFollow ( class AActor** oActor, struct FVector* vLocation );
	void BeginCombatCommand ( class UClass* CmdClass, struct FString Reason, unsigned long bForced );
	void BeginDefaultCommand ( struct FString Reason, unsigned long bForced );
	void CheckTimedCombatTransition ( );
	void InitialCheckTimedCombatTransition ( );
	bool ReactToFlank ( class APawn* FlankingPawn );
	bool ReactToNearbyEnemy ( class APawn* NearbyPawn );
	bool IsTargetStealthed ( );
	bool IsCombatStale ( );
	void CheckInterruptCombatTransitions ( );
	bool IgnoreTimeTransitions ( );
	bool eventEnableAI ( unsigned long bEnable, int nRequestedBy );
	void NotifyArmourHit ( float Damage, struct FName ArmourPiece, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	void NotifyArmourDestroyed ( struct FName ArmourPiece, class AController* instigatedBy );
	class ANavigationPoint* FindSuppressionPoint ( class AActor* Target, unsigned char Range, float MinDistance, float MaxDistance );
	float FindClosestApproachDistance ( class AActor* oActor );
	bool TeleportToActor ( class AActor* oActor, unsigned long bForceTeleport, unsigned long bOffsetTeleport );
	bool IsInWeaponRange ( class AActor* oTarget );
	float TargetRange ( );
	bool ShootWeaponAtFireTarget ( float DmgThreshold, unsigned long bForceShoot );
	bool CanShootWeapon ( class AActor* oTarget );
	bool ChooseDefensivePower ( struct FName* nmPower );
	bool ChooseAttackPower ( class AActor* oTarget, unsigned long bPlayerRequest, struct FName* nmPower, int* nRequiresAttackTicket, struct FVector* AttackOrigin );
	bool CanChoosePower ( class Usfxpowercustomaction* oPower, class AActor* oTarget, unsigned long bPlayerRequest );
	void UpdateMovementFocus ( );
	void eventUpdateMovementActions ( );
	void eventOnEnteredPlaypen ( );
	float GetPeriodicMoveInterval ( );
	bool RespondToBump ( class AActor* Other, struct FVector HitNormal );
	void DrawLocationMarker ( struct FVector vLocation, float fSize, int nRed, int nGreen, int nBlue );
	void eventBioClearCrossLevelReferences ( class ULevel* oLevel );
	bool IsActorInPlaypen ( class AActor* oActor );
	void eventOnLeftPlaypen ( );
	bool IsReturningToPlaypen ( );
	bool IsFlankedByTarget ( class AActor* oTarget, unsigned long bUseExactLocation );
	void OnEnteringStasis ( );
	void NotifyFriendDied ( class ABioPawn* FriendPawn );
	void NotifyDeathBlow ( class UClass* DamageType );
	void CheckPendingWeaponSwitch ( );
	void PlayAmbientVoc ( );
	void Taunt ( );
	bool IsInFightingState ( );
	void SwitchWeapon ( class ASFXWeapon* oWeapon );
	void SetSquadIntoCombat ( );
	float GetPowerUsePercent ( );
	void ReleaseTicket ( class AActor* oTarget, unsigned char eTicket, unsigned long bKillAttackTicket );
	bool AcquireTicket ( class AActor* oTarget, unsigned char eTicket, int nAttackTicketCost );
	void ClearPowerReservation ( struct FName nmPower, unsigned long bSkipProjectilePowers );
	bool RequestPowerReservation ( struct FName nmPower, unsigned long bForceSuccess );
	bool RELOAD ( );
	bool ShouldReload ( );
	bool ChooseAttack ( class AActor* oTarget, struct FName* nmPowerName );
	unsigned char Attack ( );
	void ClearCancelAction ( );
	void CancelAction ( int nReason );
	void PrecisionMove ( struct FVector vLocation, struct FRotator rRotation );
	bool WantsToRun ( float fDistance );
	void SetMovementSpeed ( );
	void PeriodicMoveCheck ( );
	bool SetMoveGoal ( class AActor* NewMoveGoal, float NewMoveOffset );
	void ApplyBasePathConstraints ( );
	void NotifyWeaponDelayFinished ( );
	void CalculateGrenadeArc ( float MinSpeed, float MaxSpeed, float MaxRange, float* InitialSpeed, struct FVector* InitialDirection );
	struct FVector GetAimLocation ( class AActor* oAimTarget );
	unsigned char GetBestTargetCoverAction ( class ABioPawn* TargetPawn, struct FCoverInfo TargetCover );
	bool RespondToPush ( );
	void PushPawn ( class ABioPawn* oPawn, struct FVector HitNormal );
	void NotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	void NotifyUnderAttack ( unsigned long bHit );
	void NotifyPendingPowerImpact ( struct FName Label, float TimeBeforeImpact, class Usfxpowercustomaction* Power, class ASFXProjectile_PowerCustomAction* Projectile );
	void NotifyNearMiss ( struct FVector HitLocation );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	bool GetBestCoverAction ( struct FCoverInfo ChkCover, class AActor* ChkTarget, unsigned char* AttackerCoverAction, unsigned char* TargetCoverAction );
	bool CanAttack ( class AActor* oTarget );
	bool GetAttackOrigin ( class AActor* oTarget, struct FVector* AttackOrigin );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void UpdateAccuracy ( );
	void ResetAimInstability ( );
	void NotifyChangedWeapon ( class AWeapon* PrevWeapon, class AWeapon* NewWeapon );
	void NotifyAiming ( class AActor* AimTarget, unsigned long bAiming );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyWeaponFired ( class AWeapon* W, unsigned char FireMode );
	void StartFiring ( int InBurstsToFire );
	bool IsFriendlyBlockingFireLine ( );
	bool IsFireLineObstructed ( );
	bool CanFireWeaponNoLOS ( class AWeapon* Wpn, unsigned char FireModeNum );
	bool CanFireWeapon ( class AWeapon* Wpn, unsigned char FireModeNum );
	bool IsFiringWeapon ( );
	void TriggerAttackVocalization ( );
	void OnTargetChanged ( );
	void AdjustEnemyRating ( class APawn* EnemyPawn, float* fRating );
	void AdjustRatingByTickets ( int EnemyIdx, float* out_Rating );
	bool SelectTarget ( );
	bool NotifyMoodChange ( );
	void ResetCombatMood ( );
	bool CanSwitchMood ( unsigned char NewMood );
	bool SetCombatMood ( unsigned char NewMood, float fDuration );
	void Initialize ( );
	void ResetEvadeDamage ( );
	void PostBeginPlay ( );
	void Reset ( );
	void ClearGoHereDelegates ( );
	void AssignGoHereDelegates ( struct FScriptDelegate RangeDel, struct FScriptDelegate FlankDel );
	void StopFollowingActor ( );
	bool StartFollowingActor ( class AActor* ActorToFollow );
	unsigned char GetCurrentKismetOrder ( );
	void MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, unsigned long bImmediateMove, unsigned long bForceWalk, struct FScriptDelegate MoveDelegate );
	void FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, unsigned long bForceShoot, float fAttackDuration, struct FScriptDelegate FireDelegate );
	void UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression );
	void NotifyPlaypenChanged ( );
	bool TryInvalidateTargetFlank ( );
	bool TryInvalidateTargetRange ( float fRangeToTarget );
	void MoveToDelegate ( int nReason );
	void FireWeaponDelegate ( int nReason );
	void UsePowerDelegate ( int nReason );
};

UClass* Asfxai_core::pClassPointer = NULL;

// Class SFXGame.BioBaseSquadDesign
// 0x0000 (0x0228 - 0x0228)
class ABioBaseSquadDesign : public ABioBaseSquad
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42262 ];

		return pClassPointer;
	};

	void NotifyCombatZoneRemoved ( );
	void NotifyCombatZoneAdded ( );
	void eventDisableSquad ( );
	void eventEnableSquad ( );
	class ABioBaseSquad* MakeHackable ( );
	void eventMemberRemoved ( class APawn* oPawn );
	void RemoveDyingMember ( class APawn* oPawn );
	int eventAddMember ( class APawn* Pawn, unsigned long bCheckPlaypens );
	bool Died ( class APawn* member, class AController* Killer );
	void NotifyPlaypenChanged ( );
	void eventNotifyNoEnemiesPerceived ( );
	void eventNotifyEnemyPerceived ( );
	bool GetClosestCombatZoneOrigin ( struct FVector Position, struct FVector* Origin );
	bool IsPositionInCombatZone ( struct FVector Position );
	bool IsCoverInCombatZone ( class ACoverSlotMarker* SlotMarker );
	bool HasCombatZone ( class ASFXCombatZone* CombatZone );
	void RemoveCombatZone ( class ASFXCombatZone* CombatZone );
	void AddCombatZone ( class ASFXCombatZone* CombatZone );
	class AActor* GetPlaypenReturnPoint ( class APawn* oPawn );
	class AActor* GetPlaypenNavOrigin ( class APawn* oPawn );
	void UpdatePlaypen ( );
	bool IsVolumeInPlaypen ( class ABioPlaypenVolume* Volume );
	void RemoveVolumeFromPlaypen ( class ABioPlaypenVolume* Volume );
	void AddVolumeToPlaypen ( class ABioPlaypenVolume* Volume );
	bool HasPlaypen ( );
	bool IsActorInSubtractivePlaypen ( class AActor* oActor );
	bool IsActorInPlaypen ( class AActor* oActor );
	bool IsPositionInSubtractivePlaypen ( struct FVector* vLocation );
	bool IsPositionInPlaypen ( struct FVector* vLocation );
	void SquadMembers ( class ABioAiController** oController );
	void SetMemberMoveIndicator ( int nIndex, class ABioTacticalMoveToIndicator* oIndicator );
	class ABioTacticalMoveToIndicator* GetMemberMoveIndicator ( int nIndex );
	bool RemoveMember ( class APawn* pPawn );
};

UClass* ABioBaseSquadDesign::pClassPointer = NULL;

// Class SFXGame.BioBaseSquadDesignCombat
// 0x0000 (0x0228 - 0x0228)
class ABioBaseSquadDesignCombat : public ABioBaseSquadDesign
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42266 ];

		return pClassPointer;
	};

	void NotifyCombatZoneRemoved ( );
	void NotifyCombatZoneAdded ( );
	void eventDisableSquad ( );
	void eventEnableSquad ( );
	class ABioBaseSquad* MakeHackable ( );
	void eventMemberRemoved ( class APawn* oPawn );
	void RemoveDyingMember ( class APawn* oPawn );
	int eventAddMember ( class APawn* Pawn, unsigned long bCheckPlaypens );
	bool Died ( class APawn* member, class AController* Killer );
	void NotifyPlaypenChanged ( );
	void eventNotifyNoEnemiesPerceived ( );
	void eventNotifyEnemyPerceived ( );
	bool GetClosestCombatZoneOrigin ( struct FVector Position, struct FVector* Origin );
	bool IsPositionInCombatZone ( struct FVector Position );
	bool IsCoverInCombatZone ( class ACoverSlotMarker* SlotMarker );
	bool HasCombatZone ( class ASFXCombatZone* CombatZone );
	void RemoveCombatZone ( class ASFXCombatZone* CombatZone );
	void AddCombatZone ( class ASFXCombatZone* CombatZone );
	class AActor* GetPlaypenReturnPoint ( class APawn* oPawn );
	class AActor* GetPlaypenNavOrigin ( class APawn* oPawn );
	void UpdatePlaypen ( );
	bool IsVolumeInPlaypen ( class ABioPlaypenVolume* Volume );
	void RemoveVolumeFromPlaypen ( class ABioPlaypenVolume* Volume );
	void AddVolumeToPlaypen ( class ABioPlaypenVolume* Volume );
	bool HasPlaypen ( );
	bool IsActorInSubtractivePlaypen ( class AActor* oActor );
	bool IsActorInPlaypen ( class AActor* oActor );
	bool IsPositionInSubtractivePlaypen ( struct FVector* vLocation );
	bool IsPositionInPlaypen ( struct FVector* vLocation );
	void SquadMembers ( class ABioAiController** oController );
	void SetMemberMoveIndicator ( int nIndex, class ABioTacticalMoveToIndicator* oIndicator );
	class ABioTacticalMoveToIndicator* GetMemberMoveIndicator ( int nIndex );
	bool RemoveMember ( class APawn* pPawn );
};

UClass* ABioBaseSquadDesignCombat::pClassPointer = NULL;

// Class SFXGame.biocamerabehaviorflourish
// 0x0028 (0x0118 - 0x00F0)
class Ubiocamerabehaviorflourish : public UBioCameraBehavior
{
public:
	struct FRotator                                    CameraRotation;                                   		// 0x00F0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentTime;                                      		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InterpTime;                                       		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              InterpSpeed;                                      		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              DistanceOffset;                                   		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              YawSpeed;                                         		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              DistanceSpeed;                                    		// 0x0110 (0x0004) [0x0000000000000000]              
	unsigned long                                      bInterpToStart : 1;                               		// 0x0114 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42429 ];

		return pClassPointer;
	};

	void Tick ( float TimeDelta );
	struct FVector GetCameraLocation ( );
	void Initialize ( );
};

UClass* Ubiocamerabehaviorflourish::pClassPointer = NULL;

// Class SFXGame.BioCameraBehaviorFree
// 0x0004 (0x00F4 - 0x00F0)
class UBioCameraBehaviorFree : public UBioCameraBehavior
{
public:
	unsigned long                                      m_bCameraLocked : 1;                              		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42454 ];

		return pClassPointer;
	};

	void Tick ( float TimeDelta );
	void Initialize ( );
};

UClass* UBioCameraBehaviorFree::pClassPointer = NULL;

// Class SFXGame.SFXGameModeOrbital
// 0x01E4 (0x0290 - 0x00AC)
class USFXGameModeOrbital : public USFXGameModeGalaxy
{
public:
	TArray< class UParticleSystemComponent* >          TemporaryComponents;                              		// 0x00AC (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FScreenShakeStruct                          Shake;                                            		// 0x00B8 (0x0078) [0x0000000000000000]              
	struct FScreenShakeStruct                          BigShake;                                         		// 0x0130 (0x0078) [0x0000000000000000]              
	struct FRotator                                    ReticleRot;                                       		// 0x01A8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    ReticleRotStart;                                  		// 0x01B4 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FRotator                                    ReticleRotTopLeftClamp;                           		// 0x01C0 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FRotator                                    ReticleRotBottomRightClamp;                       		// 0x01CC (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     ProbeLaunchLocation;                              		// 0x01D8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ProbeTargetLocation;                              		// 0x01E4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ProbeControlPtLocation;                           		// 0x01F0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ScanReticleInputMovement;                         		// 0x01FC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlanetRotationDegreesPerSecond;                   		// 0x0208 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ScanningPlanetRotationDegreesPerSecond;           		// 0x020C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ReticleDegreesPerSecond;                          		// 0x0210 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ScanningReticleDegreesPerSecond;                  		// 0x0214 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InputAttenuation;                                 		// 0x0218 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RumbleScale;                                      		// 0x021C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MoveDist;                                         		// 0x0220 (0x0004) [0x0000000000000000]              
	float                                              ProbeControlAxisOffset;                           		// 0x0224 (0x0004) [0x0000000000000000]              
	float                                              ProbeControlTargetOffset;                         		// 0x0228 (0x0004) [0x0000000000000000]              
	float                                              ScannerRotateSpeed;                               		// 0x022C (0x0004) [0x0000000000000000]              
	float                                              ProbeLaunchTime;                                  		// 0x0230 (0x0004) [0x0000000000000000]              
	float                                              ProbeLaunchTimeMax;                               		// 0x0234 (0x0004) [0x0000000000000000]              
	float                                              ScanDist;                                         		// 0x0238 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    ReticleEffect;                                    		// 0x023C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ScanReticleEffect;                                		// 0x0240 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ScanWipeEffect;                                   		// 0x0244 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ScanBlipEffect;                                   		// 0x0248 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ScanDirectionEffect;                              		// 0x024C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    LaunchReticleEffect;                              		// 0x0250 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ProbeExplosionEffect;                             		// 0x0254 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              ScanDirectionPulseLifeTime;                       		// 0x0258 (0x0004) [0x0000000000000000]              
	float                                              ScanDirectionPulseTimeToLive;                     		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReticleScale;                                     		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Roll;                                             		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fRescaleTime;                                     		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fInitialScale;                                    		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fNewScale;                                        		// 0x0270 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fMaxRescaleTime;                                  		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ImpactTime;                                       		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ImpactTimeMax;                                    		// 0x027C (0x0004) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      ScanFFWaveForm;                                   		// 0x0280 (0x0004) [0x0000000000000000]              
	class UWwiseAudioComponent*                        AudioComponent;                                   		// 0x0284 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              PlanetScanInputMovement;                          		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      Scanning : 1;                                     		// 0x028C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      ProbeActive : 1;                                  		// 0x028C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bRescaling : 1;                                   		// 0x028C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bExiting : 1;                                     		// 0x028C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      ImpactActive : 1;                                 		// 0x028C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      DrawProbeDebugLines : 1;                          		// 0x028C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bMouseLock : 1;                                   		// 0x028C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42932 ];

		return pClassPointer;
	};

	void setshakelfreq ( float X, float Y, float Z );
	void setshakelamp ( float X, float Y, float Z );
	void setshakerfreq ( float X, float Y, float Z );
	void setshakeramp ( float X, float Y, float Z );
	void setshaket ( float T );
	void ToggleProbeDebug ( );
	void SetProbeTime ( float T );
	void SetProbeControl ( float A, float T );
	void SetReticleScale ( float Scale );
	void SetInputAttenuation ( float fAttenuation );
	void SetPlanetRotateRate ( float fDegPerSec );
	void SetPlanetScanRotateRate ( float fDegPerSec );
	void SetScanReticleRate ( float fDegPerSec );
	void SetReticleRate ( float fDegPerSec );
	void SetScanDist ( float A );
	void RingReticleUpDown ( float Axis );
	void RingReticleLeftRight ( float Axis );
	void UpdatePlanetRotationFromInput ( float fDeltaT );
	void UpdateReticleRotationFromInput ( float fDeltaT );
	void UpdateReticle ( float fDeltaT );
	void PlanetLeftRight ( float Axis );
	void LaunchProbe ( );
	void EndImpact ( );
	void ShowProbeImpactVFX ( class UBioPlanet* PlanetData, struct FVector pos, class AInterpActor* Planet );
	void ProbeImpact ( );
	void StopScanning ( );
	void StartScanning ( );
	void ToggleMouseLock ( unsigned long bNewMouseLock );
	void StopFeatureSounds ( );
	void StartFeatureSounds ( );
	struct FVector GetRelativeReticlePosition ( );
	void UpdateAnomalyIndicator ( struct FVector toLanding, float DeltaTime, unsigned long flashIndicator );
	void ShowHUDAnomalyIndicator ( );
	void ScanPlanet ( float fDeltaTime );
	void Update ( float DeltaTime );
	void UpdatePlanetScale ( float DeltaTime );
	void ResetProbe ( );
	bool eventCanExit ( );
	class UBioSeqAct_OrbitalGame* GetGameData ( );
	void BeginExitGalaxyMap ( unsigned long resize );
	void Deactivated ( );
	void Activated ( );
	void DoPatchDefaultPropertyUpdates ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

UClass* USFXGameModeOrbital::pClassPointer = NULL;

// Class SFXGame.BioCameraBehaviorLocked
// 0x0000 (0x00F0 - 0x00F0)
class UBioCameraBehaviorLocked : public UBioCameraBehavior
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43091 ];

		return pClassPointer;
	};

};

UClass* UBioCameraBehaviorLocked::pClassPointer = NULL;

// Class SFXGame.SFXModule_WeaponModManager
// 0x0018 (0x0060 - 0x0048)
class USFXModule_WeaponModManager : public USFXModule
{
public:
	TArray< class USFXWeaponMod* >                     WeaponMods;                                       		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FExtraMeshComponent >               ExtraMeshComponents;                              		// 0x0054 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43494 ];

		return pClassPointer;
	};

	void SetWeaponModHidden ( unsigned long bHidden );
	void RemoveAllMods ( );
	bool RemoveMod ( class UClass* ModClass );
	bool AddMod ( class UClass* ModClass, int nLevel );
};

UClass* USFXModule_WeaponModManager::pClassPointer = NULL;

// Class SFXGame.SFXWeaponMod
// 0x00AE (0x00EE - 0x0040)
class USFXWeaponMod : public USFXWeaponMod_NativeBase
{
public:
	TArray< class UMeshComponent* >                    Meshes;                                           		// 0x0040 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UClass* >                            GameEffectClasses;                                		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FWeaponModEffect >                  GameEffects;                                      		// 0x0058 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class UClass* >                            Reticules;                                        		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXWeaponAimMode >                 AimModes;                                         		// 0x0070 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< void* >                                    ModLevelTokens;                                   		// 0x007C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NotificationImage;                                		// 0x0088 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     LargeNotificationImage;                           		// 0x0094 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RTPCName;                                         		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FWeaponModStatConversion >          WeaponModConversions;                             		// 0x00AC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FName                                       SocketName;                                       		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                Level;                                            		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              DisplayName;                                      		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              FormattedName_ModName;                            		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              FormattedName_ModCategory;                        		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              Description;                                      		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              NotificationTitle;                                		// 0x00D4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	void*                                              NotificationDescription;                          		// 0x00D8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	class USFXCameraSetup*                             Camera;                                           		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ASFXWeapon*                                  MyWeapon;                                         		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                MAX_RANK;                                         		// 0x00E4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      bMaterialEmissiveChange : 1;                      		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bMaterialGripColorChange : 1;                     		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bMaterialBodyColorChange : 1;                     		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIsScoped : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned char                                      WeaponModCategory;                                		// 0x00EC (0x0001) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      ToolTipText;                                      		// 0x00ED (0x0001) [0x0000000000004002]              ( CPF_Const | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43498 ];

		return pClassPointer;
	};

	class UClass* GetGameEffectClass ( struct FName EffectClassName );
	float GetGameEffectDisplayValue ( int GameEffectIdx );
	void OnVisibilityChanged ( unsigned long bHidden );
	void RemoveEffects ( );
	void ApplyEffects ( );
	bool Upgrade ( class ABioPawn* Instigator, unsigned long bNoNotification );
	class UClass* LoadModClass ( struct FString ModClassName );
	struct FString GetModDescription ( int nLevel );
	struct FString GetModName ( int nLevel, unsigned long bShortForm );
	bool IsUnlocked ( int* nUnlockLevel );
	int GetMaxRank ( );
};

UClass* USFXWeaponMod::pClassPointer = NULL;

// Class SFXGame.SFXGAWAssetsHandler
// 0x00EC (0x0128 - 0x003C)
class USFXGAWAssetsHandler : public UObject
{
public:
	TArray< struct FGAWGUICategory >                   GAWGUICategories;                                 		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FGAWAsset >                         AllAssets;                                        		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FGAWAssetSaveInfo >                 UnlockedGAWAssets;                                		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FGAWIntelRewardInfo >               IntelRewards;                                     		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FEndGameOptionSet >                 EndGameOptionSets;                                		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ShepardLivesStates;                               		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FEndGameOption >                    EndGameOptions;                                   		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FCutscenePlotState >                CutscenePlotStates;                               		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      AllEndingPlotStates;                              		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FGAWZoneData >                      GAWTheatreData;                                   		// 0x00A8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      CachedGAWRatings;                                 		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      CachedGAWWarAssets;                               		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FWarAssetSummaryWithThreshold >     OverallWarAssetSummaries;                         		// 0x00CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __RequestGAWDataCallback__Delegate;               		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdatedRankingsCallback__Delegate;              		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                AchievementThreshold;                             		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                MinimumStrengthForGUI;                            		// 0x00F4 (0x0004) [0x0000000000000000]              
	int                                                MaxStrengthForGUI;                                		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                SaveAndersonScoreBonus;                           		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                ShepardLivesThreshold;                            		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                SaveAndersonPlotBool;                             		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                FinalGAWRatingID;                                 		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                OverallReadinessRating;                           		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                GAWExternalAssetStrengthPerTick_Multiplayer;      		// 0x0110 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                GAWExternalAssetStrengthPerTick_IPhone;           		// 0x0114 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                GAWExternalAssetStrengthPerTick_Facebook;         		// 0x0118 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              GUIDescription_Formatter;                         		// 0x011C (0x0004) [0x0000000000000000]              
	void*                                              GUIDescription_UpdatedTag;                        		// 0x0120 (0x0004) [0x0000000000000000]              
	unsigned long                                      bInitialized : 1;                                 		// 0x0124 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bEvaluateAchievement : 1;                         		// 0x0124 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bBrainUsed : 1;                                   		// 0x0124 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43542 ];

		return pClassPointer;
	};

	bool IsAssetUnlockedForGUICategory ( int nAssetIndex, int nCategoryID, int* nCurrentStrength );
	void FlagAllUnlockedAssetsAsDisplayedInGUI ( );
	bool DoesCategoryHaveNewAssets ( int categoryId );
	void MarkAssetAsNew ( int AssetID );
	void MarkAssetAsRead ( int AssetID );
	bool IsAssetNew ( int AssetID );
	struct FName GetPVSeenInGUI ( int Id );
	struct FString GetWarAssetsSummaryText ( );
	struct FString GetCategoryImagePath ( int Id );
	struct FString GetImagePath ( int Id );
	void GetExternalAssetInfo ( unsigned char ExternalAssetIndex, int NumberOfTicks, int* FinalScore, struct FString* GUIDescription, struct FString* GUITitle );
	void MultiplayerAssetIncreaseComplete ( TArray< int > updatedSecurityRatings, TArray< int > updatedWarAssets, int Level, int errorCode );
	bool IncrementMultiplayerAsset ( );
	struct FString GetGAWAssetDebugConditionDescription ( struct FString AssetName );
	void Cleanup ( );
	int GetOverallReadiness ( );
	void OnGetRatingsComplete ( TArray< int > updatedSecurityRatings, TArray< int > updatedWarAssets, int Level, int errorCode );
	void RequestGAWRatings ( struct FScriptDelegate Callback, unsigned long bCached );
	void IncreaseRatingsCompleted ( TArray< int > updatedSecurityRatings, TArray< int > updatedWarAssets, int Level, int errorCode );
	void UpdateSecurityRating ( int ZoneID, float Increase, float GlobalIncrease, struct FScriptDelegate Callback );
	bool GetGAWAssetGUIInfoByName ( struct FString AssetName, unsigned long bGetDescription, struct FString* GUIName, struct FString* GUIDescription );
	bool GetGAWAssetGUIInfo ( int Id, unsigned long bGetDescription, struct FString* GUIName, struct FString* GUIDescription );
	bool BuffGAWAsset ( int Id, float PercentIncrease );
	bool UpdateGAWAssetByName ( struct FString AssetName, int NewStrength );
	bool UpdateGAWAsset ( int Id, int NewStrength, unsigned long bAddToTotal );
	bool GiveGAWCreditsForAsset ( int Id );
	bool GiveGAWCreditsForAssetByName ( struct FString AssetName );
	int GetGAWAssetIndex ( struct FString AssetName );
	bool GAWAssetCreditRewardAvailable ( int Id );
	bool GAWAssetCreditRewardAvailableByName ( struct FString AssetName );
	void ApplyIntelReward ( struct FName UniqueName );
	int GetTotalScore ( );
	int GetFinalScore ( int SecurityLevel, unsigned long EndingGame );
	void AdjustEndingsForSavingAnderson ( );
	void GetRatingsCompleted ( TArray< int > updatedSecurityRatings, TArray< int > updatedWarAssets, int Level, int errorCode );
	void NotifyCheatManagerEndGameOptions ( TArray< unsigned char > Options );
	void SetEndGameOptions ( unsigned long bBrain, unsigned long bAchievement );
	void ResetAllGAWAssets ( );
	bool ResetGAWAssetByName ( struct FString AssetName );
	bool ResetGAWAsset ( int Id );
	struct FString GetGUIDescription ( int Id, unsigned char Type, void* GUIDescription );
	void GetGAWAssetsByType ( unsigned char Type, TArray< struct FGAWAsset >* UnlockedAssets );
	bool UnlockExplorationGAWAsset ( void** srAssetName );
	bool UnlockNextGAWAsset ( unsigned char AssetType );
	void UnlockAllGAWAssets ( );
	bool UnlockGAWAssetByAssetName ( struct FString AssetName );
	bool UnlockGAWAsset ( int Id );
	bool IsGAWAssetUnlockedByName ( struct FString AssetName, int* CurrentStrength );
	bool IsGAWAssetUnlocked ( int Id, TArray< int > WarAssets, int* CurrentStrength );
	int GetExplorationAssetCount ( );
	int GetTotalStrengthByType ( unsigned char Type, int* AssetCount );
	class USFXGAWAssetsHandler* GetGAWHandler ( );
	int GetOverallReadinessRating ( );
	void UpdatedRankingsCallback ( int errorCode );
	void RequestGAWDataCallback ( TArray< struct FGAWZoneGUIData > ZoneData, int Level, int errorCode );
};

UClass* USFXGAWAssetsHandler::pClassPointer = NULL;

// Class SFXGame.sfxmodule_damage
// 0x0144 (0x01C5 - 0x0081)
class Usfxmodule_damage : public USFXModule_DamageNativeBase
{
public:
	struct FScaledFloat                                DamageMultiplier;                                 		// 0x0084 (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScaledFloat                                PowerDamageTakenMultiplier;                       		// 0x00A8 (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScaledFloat                                BioticPowerDamageTakenMultiplier;                 		// 0x00CC (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScaledFloat                                TechPowerDamageTakenMultiplier;                   		// 0x00F0 (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScaledFloat                                CombatPowerDamageTakenMultiplier;                 		// 0x0114 (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScaledFloat                                WeaponDamageTakenMultiplier;                      		// 0x0138 (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScaledFloat                                PartBasedDamageMultiplier;                        		// 0x015C (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScaledFloat                                AIArmorDamageReduction;                           		// 0x0180 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDamagePart >                       DamageParts;                                      		// 0x01A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              HeadShotVODistance;                               		// 0x01B0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DeathMomentumMultiplier;                          		// 0x01B4 (0x0004) [0x0000000000000000]              
	float                                              AIArmorDamageReductionMinDamage;                  		// 0x01B8 (0x0004) [0x0000000000000000]              
	float                                              AntiArmorDamageThreshold;                         		// 0x01BC (0x0004) [0x0000000000000000]              
	unsigned long                                      bGoreActorEnabled : 1;                            		// 0x01C0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bPartBasedDamageEnabled : 1;                      		// 0x01C0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bOwnerIsDead : 1;                                 		// 0x01C0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      HealthType;                                       		// 0x01C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43639 ];

		return pClassPointer;
	};

	bool KillForStasis ( unsigned long bImmediate, class AController* Killer, class UClass* DamageType );
	void PlayHitEffects ( struct FVector HitLocation, class AActor* DamageCauser, struct FTraceHitInfo* HitInfo );
	struct FName GetPartFromHit ( struct FTraceHitInfo* HitInfo );
	void SFXTakeRadiusDamage ( float Damage, float DamageRadius, unsigned long bFullDamage, struct FVector HurtOrigin, float Momentum, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, struct FTraceHitInfo HitInfo );
	void ProcessHit ( float Damage, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, unsigned long HeadShot, struct FTraceHitInfo* HitInfo );
	void ApplyDamageToHealth ( float Damage, class AController* instigatedBy, class UClass* DamageType, struct FVector HitLocation, float* AppliedDamage );
	void SFXTakeDamage ( float Damage, struct FVector Momentum, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation );
	void SetPlayerHealthFromSave ( float Health );
	void DeferedHandlePostBeginPlay ( );
	void eventHandlePostBeginPlay ( );
};

UClass* Usfxmodule_damage::pClassPointer = NULL;

// Class SFXGame.SFXCharacterClass
// 0x0159 (0x01CD - 0x0074)
class USFXCharacterClass : public USFXCharacterClass_NativeBase
{
public:
	struct FScaledFloat                                WeaponEncumbranceModifiers[ 0x6 ];                		// 0x0074 (0x00D8) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     className;                                        		// 0x014C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             MappedPowers;                                     		// 0x0158 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FPowerUnlockRequirement >           PowerUnlockRequirements;                          		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            SquadScreenPowerOrder;                            		// 0x0170 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPowerStartingRank >                StartingPowerRanks;                               		// 0x017C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPowerAutoLevelUp >                 AutoLevelUpInfo;                                  		// 0x0188 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXLoadoutData*                             Loadout;                                          		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BioticStrength;                                   		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TechStrength;                                     		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CombatStrength;                                   		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                srClassName;                                      		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                srClassDesc;                                      		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                srClassPrimaryDesc;                               		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                srClassSecondaryDesc;                             		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BloodColor;                                       		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RichPresenceContextStringIndex;                   		// 0x01B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StartingEncumbranceCapacity;                      		// 0x01BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EncumbranceMinCooldown;                           		// 0x01C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EncumbranceMaxCooldown;                           		// 0x01C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxWeapons;                                       		// 0x01C8 (0x0004) [0x0000000000000000]              
	unsigned char                                      ClassType;                                        		// 0x01CC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43764 ];

		return pClassPointer;
	};

};

UClass* USFXCharacterClass::pClassPointer = NULL;

// Class SFXGame.sfxshield_base
// 0x00D2 (0x0316 - 0x0244)
class Asfxshield_base : public AInventory
{
public:
	struct FScaledFloat                                MaxShields;                                       		// 0x0244 (0x0024) [0x0000000000404021]              ( CPF_Edit | CPF_Net | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                ShieldRegenDelay;                                 		// 0x0268 (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScaledFloat                                ShieldDamageMultiplier;                           		// 0x028C (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ShieldDestroyedPowerCallback__Delegate;         		// 0x02B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FShieldBreachReplication                    ShieldBreachReplicationInfo;                      		// 0x02BC (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     ShieldOffset;                                     		// 0x02C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	void*                                              ShieldDisplayName;                                		// 0x02D0 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             PS_Impact;                                        		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             PS_Recharged;                                     		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             PS_Breach;                                        		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShieldScale;                                      		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           PhysMat;                                          		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 ShieldsBreakSound;                                		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 ShieldsUpSound;                                   		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 PCShieldsUpStopSound;                             		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentShields;                                   		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OldCurrentShields;                                		// 0x02F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxEnemyShieldRecharge;                           		// 0x02FC (0x0004) [0x0000000000000000]              
	float                                              ShieldRegenTimer;                                 		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShieldRegenPct;                                   		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AIEnergyShieldGatePct;                            		// 0x0308 (0x0004) [0x0000000000000000]              
	int                                                TOTAL_SHIELD_STEPS;                               		// 0x030C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bRechargeable : 1;                                		// 0x0310 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRecentShieldDamage : 1;                          		// 0x0310 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      Resistance;                                       		// 0x0314 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      ReplicatedShield;                                 		// 0x0315 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43807 ];

		return pClassPointer;
	};

	void SetMaxShields ( struct FScaledFloat NewMaxShields );
	struct FScaledFloat GetMaxShieldStruct ( );
	float GetMaxShields ( );
	void SetCurrentShields ( float NewCurrentShields );
	float GetCurrentShields ( );
	void ItemRemovedFromInvManager ( );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	float GetImpactScale ( class ASFXWeapon* Weapon, struct FVector HitLocation );
	void PlayShieldSound ( class ASFXWeapon* Weapon, struct FTraceHitInfo HitInfo, struct FVector HitLocation );
	void ActivateWeaponImpact ( class ASFXWeapon* Weapon, class UParticleSystem* Template, class UPrimitiveComponent* PrimComp, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	void ActivatePSC ( class UParticleSystem* Template, float ImpactScale, struct FVector Offset );
	float GetDamageResistance ( class UClass* DamageType );
	void BreachShields ( class UClass* DamageType );
	void ClientDeferredBreachShields ( );
	void ApplyDamageToShields ( class UClass* DamageType, struct FVector Momentum, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class AController* instigatedBy, float* Damage, float* TotalDamageDone );
	void ApplyDamage ( struct FVector Momentum, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, float* TotalDamageDone );
	void ResetShieldRegenTimer ( );
	void PlayRecharge ( );
	void BeginRecharge ( );
	void Tick ( float DeltaSeconds );
	float GetShieldRegenRate ( );
	float GetShieldRegenDelay ( );
	void ScaleShields ( );
	void InitializeMaxShields ( float NewMaxShields );
	void Initialize ( );
	void PostBeginPlay ( );
	void ReplicateShieldBreach ( class UClass* DamageType );
	void ReplicateCurrentShields ( );
	void ClientDeferredSetResistance ( );
	void eventReplicatedEvent ( struct FName VarName );
	void ShieldDestroyedPowerCallback ( class AActor* ShieldActor, class Asfxshield_base* Shield );
};

UClass* Asfxshield_base::pClassPointer = NULL;

// Class SFXGame.sfxhostmigration
// 0x0004 (0x0040 - 0x003C)
class Usfxhostmigration : public UObject
{
public:
	unsigned long                                      bNeedRestoration : 1;                             		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44389 ];

		return pClassPointer;
	};

	void ResetWaveToRestore ( );
	struct FWaveEventInfo GetWaveToRestore ( );
	void SetWaveToRestore ( struct FWaveEventInfo InWave );
	bool CanRestoreWave ( );
	void RestorePRI ( class Asfxpri* PRI );
	void SaveGRI ( class ASFXGRI* GRI );
	void InvalidateAll ( );
	bool HasCompleteAndValidState ( class ASFXGRI* GRI );
	void EnableRestoration ( unsigned long bEnable );
	class Usfxhostmigration* GetHostMigration ( );
};

UClass* Usfxhostmigration::pClassPointer = NULL;

// Class SFXGame.sfxplayercontroller
// 0x00A1 (0x0B9C - 0x0AFB)
class Asfxplayercontroller : public ABioPlayerController
{
public:
	TArray< class USFXSeqAct_LookAtPOI* >              m_aPOIKismet;                                     		// 0x0AFC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ANavigationPoint* >                  NavList;                                          		// 0x0B08 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             SPMapNames;                                       		// 0x0B14 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             SPN7MapNames;                                     		// 0x0B20 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnDestroyDelegates;                               		// 0x0B2C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDestroyCallback__Delegate;                    		// 0x0B38 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FOnlineGameSearchResult                     CachedInviteResult;                               		// 0x0B44 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXSeqAct_LookAtPOI*                        m_pActivePOI;                                     		// 0x0B4C (0x0004) [0x0000000000000000]              
	class Asfxplayercamera*                            MyCamera;                                         		// 0x0B50 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	int                                                CurrentNavIdx;                                    		// 0x0B54 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ANavigationPoint*                            CurrentNavGoal;                                   		// 0x0B58 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              srConnectionLost;                                 		// 0x0B5C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	void*                                              srHostLeft;                                       		// 0x0B60 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	void*                                              srInviteFailure;                                  		// 0x0B64 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	void*                                              srInviteGameFull;                                 		// 0x0B68 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	void*                                              srInviterLeft;                                    		// 0x0B6C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	void*                                              srInviteProtocolMismatch;                         		// 0x0B70 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	void*                                              srInviteMissingDLCInvitee;                        		// 0x0B74 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	void*                                              srInviteMissingDLCInviter;                        		// 0x0B78 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	void*                                              srMultiplayerUpdate;                              		// 0x0B7C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	void*                                              srPlayerKicked;                                   		// 0x0B80 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                nInviteWaitDelay;                                 		// 0x0B84 (0x0004) [0x0000000000000000]              
	int                                                nMaxInviteWaitDelay;                              		// 0x0B88 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ObjectiveTimerPositionY;                          		// 0x0B8C (0x0004) [0x0000000000000000]              
	float                                              QuickMantleDelay;                                 		// 0x0B90 (0x0004) [0x0000000000000000]              
	class USFXLadderReachSpec*                         FoundLadder;                                      		// 0x0B94 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bLeanDisabled : 1;                                		// 0x0B98 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44446 ];

		return pClassPointer;
	};

	void ClientShowExtractionCredits ( float Credits );
	void ClientUpdateKillChallenges ( class UClass* KilledPawn, struct FPlayerChallengeScoreData ChallengeScoreData, struct Asfxpawn_FScoreEvent* records );
	void ClientSetSharedCooldown ( float Cooldown );
	bool LoadingScreenTimedOut ( unsigned char WaitMessage );
	void Destroyed ( );
	void RemoveOnDestroyDelegate ( struct FScriptDelegate OnDestroyDelegate );
	void AddOnDestroyDelegate ( struct FScriptDelegate OnDestroyDelegate );
	void TickCoverVisualization ( );
	void CheckCancelCover ( );
	void TryQuickMantle ( );
	void CheckQuickCoverAction ( );
	void OnBeginIllusiveManConflict ( class USFXSeqAct_BeginIllusiveManConflict* Seq );
	void OnWaveFinished ( );
	float GetRemainingCountdownTime ( );
	void UpdateCountdownTimer ( );
	void CancelCountdownTimer ( );
	void BeginCountdownTimer ( float CountdownTime, float CountdownWarningTime );
	void PulsePowerDisplay ( );
	void EnterStartState ( );
	void HideInGameConsumableUI ( );
	void UpdateInGameConsumableUI ( );
	void SetObjectiveCircleText ( struct FString s1, struct FString s2, struct FString s3, struct FString s4 );
	void SetObjectiveCircleProgress ( int nNumComplete );
	void SetScoreHudObjectiveProgress ( float Progress, unsigned long bBoostAnim );
	void SetScoreHudObjectiveText ( void* ObjectiveText );
	struct FString BuildMissingDLCString ( unsigned long bInvitee );
	void NotifyInviteFailed ( );
	void ContinueGameInviteAcceptedPart2 ( );
	void ContinueGameInviteAccepted ( struct FOnlineGameSearchResult* InviteResult );
	void OnGameInviteAccepted ( struct FOnlineGameSearchResult* InviteResult );
	void ConnectToMPMap ( struct FString mapPackageName, unsigned long fromGalaxyMap, unsigned char Difficulty, int objectiveMode );
	void DisplayTextPopup ( struct FString Text );
	void DUI_SetTimerDetails ( unsigned long bModalTimer, unsigned long bVisible, float fStartTime, float fEndTime, float fInterval );
	void DUI_SetQuasarLayout ( unsigned long bShow );
	void DUI_SetBarFillDirection ( unsigned long bModalBar, unsigned long bLeftToRight );
	void DUI_SetBarFillPercent ( unsigned long bModalBar, int nPercent );
	void DUI_SetBarMarkerPoints ( unsigned long bModalBar, int nMarker1, int nMarker2 );
	void DUI_SetCounterValue ( unsigned long bModalCounter, int nValue );
	void DUI_SetElementText ( unsigned char nElement, struct FString sText );
	void DUI_SetTextStringRef ( unsigned char nElement, void* srText );
	void DUI_ClearElementPulse ( unsigned char nElement );
	void DUI_SetupElementPulse ( unsigned char nElement, float fMinAlpha, float fCycleTime );
	void DUI_SetElementAlpha ( unsigned char nElement, float fAlpha );
	void DUI_SetElementColor ( unsigned char nElement, struct FColor stColor );
	void DUI_SetElementVisible ( unsigned char nElement, unsigned long bVisible, float fFadeTime );
	void DUI_ClearAll ( unsigned long bModal );
	class UBioSFHandler_DesignerUI* GetDUIHandler ( );
	void ComputeConstrainedAngle ( float* Mag );
	void ForceOnlineSubCleanUp ( );
	void Callback_GameDestroyedMessage ( unsigned long bAPressed, int Context );
	void ShowNetworkErrorMessage ( );
	void Callback_HostLeftMessage ( unsigned long bAPressed, int Context );
	void QueueHostLeftMessage ( unsigned long bTransitionToMainMenu );
	void OnMultiplayerGameDestroyed ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnGameConnectionLost ( );
	bool WasKickedOutOfGame ( );
	bool IsSignedIn ( );
	void UpdateHUDPOIIcon ( );
	void UpdateMapsCompletedHelper ( struct FName MapName, struct FName PlayedMaps, struct FName PlayedMapsCount, TArray< struct FName > MapNames );
	void eventUpdateSPN7MapsCompleted ( struct FName MapName );
	void eventUpdateSPInsaneMapsCompleted ( struct FName MapName );
	void PlayDistanceScaledForceFeedback ( struct FVector ImpactLocation, class UForceFeedbackWaveform* ForceFeedback, float MinShakeDistance, float MinShakeMultiplier );
	void PlayDistanceScaledCameraShake ( struct FVector ImpactLocation, struct FScreenShakeStruct CameraShake, float MinShakeDistance, float MinShakeMultiplier );
	void PlayScaledCameraShake ( struct FScreenShakeStruct CameraShake, float ScaleFactor );
	void ServerBecomeActivePlayer ( );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	void CheckNearMiss ( class APawn* Shooter, class AWeapon* W, struct FVector WeapLoc, struct FVector LineDir, struct FVector HitLocation );
	void DeactivatePOI ( );
	bool ActivatePOI ( );
	void SetZoomed ( unsigned long bEnabled );
	void ResetLean ( );
	void ForceUnZoom ( float Time );
	void eventSpawnPlayerCamera ( );
	void eventPostBeginPlay ( );
	void OnDestroyCallback ( );
};

UClass* Asfxplayercontroller::pClassPointer = NULL;

// Class SFXGame.BioDynamicLoadInterface
// 0x0000 (0x003C - 0x003C)
class UBioDynamicLoadInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44527 ];

		return pClassPointer;
	};

};

UClass* UBioDynamicLoadInterface::pClassPointer = NULL;

// Class SFXGame.SFXPawn_PlayerVanguard
// 0x0000 (0x11EB - 0x11EB)
class ASFXPawn_PlayerVanguard : public ASFXPawn_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44528 ];

		return pClassPointer;
	};

	void RemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void AddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void Destroyed ( );
	bool ShouldShowHUDGrenadeCounter ( );
	struct FName GetUIAppearanceTag ( );
	void EquipWeaponToPlayerAndSquad ( class UClass* NewWeaponClass );
	struct FString GetArmorEffectDescription ( TArray< struct FString > ArmorEffects );
	void PreClientTravel ( );
	class USFXCustomizationInstance* CreateTemporaryCustomizationInstance ( );
	void ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags );
	void ResetSkeletalMesh ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void ApplyPendingMorphHead ( );
	void ResetPendingMorphData ( );
	bool HasPendingMorphData ( );
	void EnqueueMorphHeadForLoad ( struct FMorphHeadSaveRecord InRecord );
	void EnqueueIconicHeadForLoad ( );
	void EnqueueExistingMorphHead ( class UBioMorphFace* InMorphHead );
	void UpdateMappedPowerDisplay ( );
	void eventCollectAnimListForCooking ( class ABioPawn* Pawn, TArray< struct FName >* OutResults );
	void UseReviveConsumablePower ( );
	bool IsTestFrameworkSetupComplete ( );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void KillAndFreeze ( class AController* Killer, class UClass* dmgType, struct FString Cause );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	bool IsUpdatingAppearanceAsync ( );
	void GetHelmetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequest ( int Id, unsigned char Part, TArray< struct FCustomizableElement >* ArrayToSearch, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequestByElement ( unsigned char Part, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetMeshAssetRequest ( int Id, TArray< struct FCustomizableElement >* Meshes );
	void GetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	void ClearAsyncAssetLoader ( );
	void AbortAsyncUpdateAppearance ( );
	void OnAsyncAppearanceTexturesPreloaded ( );
	void OnAsyncAssetsLoaded ( );
	void UpdateAppearanceAsync ( struct FScriptDelegate CompletedDelegate, unsigned long bBlockForAssetLoad );
	void UpdateAppearance ( );
	void UpdatePlayerLoadoutInfo ( );
	void GiveWeaponToPlayer ( class ASFXWeapon* NewWeapon, unsigned long DeleteTossedWeapons );
	bool ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	void UpdatePrimaryAndSecondaryWeapons ( struct FName NewWeaponName );
	bool SwitchToBackupWeapon ( );
	class ASFXWeapon* BackupWeapon ( class ASFXWeapon* PreferredWeapon );
	void PlayCoverPresentation ( );
	void NotifyFinishedCoverAlign ( );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	class UTexture2D* GetGUIIcon ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void AutoMapPC ( );
	void AutoMapXbox ( );
	struct FName ConstructedPermanentGECategoryName ( struct FName UniqueName );
	bool ApplyPermanentPlayerGameEffect ( struct FName UniqueName );
	void ApplyBonuses ( );
	void AutoMap ( );
	class USFXPowerCustomActionBase* FindPower ( struct FName nmPowerClass );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void InitializePlayerVoc ( );
	void SPCamperBuster ( );
	void PostBeginPlay ( );
	void AddPlayerInventory ( );
	int GetScaledLevel ( );
	void SyncPawnAppearance ( class ABioPawn* SourcePawn );
	void CopyPawnAppearance ( class ABioPawn* SourcePawn );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void RestoreDefaultHelmetState ( unsigned long bForceUpdate );
	void InitDefaultHelmetState ( );
	int FindOverrideHelmet ( );
	bool GetBaseHelmetElement ( struct FCustomizableElement* OutElement );
	int GetBaseHelmetID ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	bool GetKnockbackReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void UpdateWeaponVisibility_DEPRECATED ( );
	void TransferModsToNewWeapon ( TArray< struct FName > PreviousWeaponNames, struct FName NewWeaponClass );
	void ApplyAppropriateModsIfNoneExist ( TArray< struct FName > PreviousWeaponNames );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void UpdateMaterialParameters ( class USFXCustomizationInstance* InSettings, class AActor* InTargetActor, class USkeletalMeshComponent* InHeadMesh, unsigned long bHideScars );
	void GetCurrentScarStruct ( unsigned long bHideScars, struct FScarInfo* Scar );
	int CalculateScarIndex ( unsigned long bHideScars, int CharmSkill, int IntimidateSkill, int ReputationSkill );
	void UpdateParameters ( );
	void InternalGetParagonRenegadePercentage ( float Paragon, float ParagonOffset, float Renegade, float Reputation, float* ParagonPercent, float* RenegadePercent );
	void GetParagonRenegadePercentage ( float* ParagonPercent, float* RenegadePercent );
	int GetReputationSkill ( );
	int GetCharmSkill ( );
	int GetIntimidateSkill ( );
	class USkeletalMeshComponent* AddMeshForTexturePrestream ( class USkeletalMesh* PrestreamMesh );
	void PrestreamTexturesRequiredForAppearance ( );
	void UpdateBodyAppearance ( );
	void UpdateHeadAppearance ( );
	void SetFaceFXAsset ( struct FString dynamicLoadPath );
	void UpdateMeshComponent ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void UpdateHelmetComponent ( );
	void ApplyAppearance ( );
	void UpdateHairAppearance ( );
	void UpdateGameEffects ( );
	void GetHelmetGameEffects ( TArray< class UClass* >* Effects );
	void GetGameEffects ( int Id, TArray< struct FCustomizableElement >* Meshes, TArray< class UClass* >* Effects );
	void ValidateAppearanceIDs ( );
	class UMaterialInstanceConstant* EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx );
	bool RequiresFullHelmet ( );
	class USkeletalMesh* BuildHelmetMesh ( int Id, unsigned long bUseFullArmourHelmets, struct FHelmetMetaData* HelmetDetails );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	struct FString GetFullName ( );
	float GetWeaponEncumbranceCooldown ( float Encumbrance );
	void ApplyWeaponEncumbrance ( );
	void UpdateWeaponEncumbrance ( );
	void RemoveWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void AddWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void LoadCharacterClassData ( );
	void eventReplicatedEvent ( struct FName VarName );
	void* GetLastNameStringRef ( );
	void AsyncUpdating_OnCompleted ( TArray< class UObject* >* LoadedAssets );
};

UClass* ASFXPawn_PlayerVanguard::pClassPointer = NULL;

// Class SFXGame.SFXCustomActionTypes
// 0x0000 (0x003C - 0x003C)
class USFXCustomActionTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44531 ];

		return pClassPointer;
	};

};

UClass* USFXCustomActionTypes::pClassPointer = NULL;

// Class SFXGame.SFXAICommand
// 0x002C (0x0084 - 0x0058)
class USFXAICommand : public UGameAICommand
{
public:
	struct FScriptDelegate                             __UsePowerDelegate__Delegate;                     		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __FireWeaponDelegate__Delegate;                   		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __MoveToDelegate__Delegate;                       		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXAICommand*                               SFXChildCommand;                                  		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAbortIfChildFailed : 1;                          		// 0x0080 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44634 ];

		return pClassPointer;
	};

	void NotifyFriendDied ( class ABioPawn* FriendPawn );
	void OnEnteredPlaypen ( );
	bool StartFollowingActor ( class AActor* ActorToFollow );
	bool MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, unsigned long bForceWalk, struct FScriptDelegate MoveDelegate );
	bool FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, unsigned long bForceShoot, float fAttackDuration, struct FScriptDelegate FireDelegate );
	bool UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression );
	void MoveToDelegate ( int nReason );
	void FireWeaponDelegate ( int nReason );
	void UsePowerDelegate ( int nReason );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	bool ShouldRun ( );
	bool CancelCommand ( int nReason );
	void NotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	bool NotifyMoodChange ( );
	void NotifyPendingPowerImpact ( struct FName Label, float TimeBeforeImpact, class Usfxpowercustomaction* Power, class ASFXProjectile_PowerCustomAction* Projectile );
	void NotifyNearMiss ( struct FVector HitLocation );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void NotifyArmourDestroyed ( struct FName ArmourPiece, class AController* instigatedBy );
	void NotifyArmourHit ( float Damage, struct FName ArmourPiece, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyNewEnemy ( class APawn* NewEnemy );
	void PeriodicMoveCheck ( );
	void UpdateMovementActions ( );
	bool CanInterruptCurrentCommand ( );
	void Resumed ( struct FName OldCommandName );
	void Paused ( class UGameAICommand* NewCommand );
};

UClass* USFXAICommand::pClassPointer = NULL;

// Class SFXGame.SFXNav_InteractionPoint
// 0x0010 (0x02D4 - 0x02C4)
class ASFXNav_InteractionPoint : public APathNode
{
public:
	int                                                InteractionCustomActionID;                        		// 0x02C4 (0x0004) [0x0000000000000000]              
	class USFXAnimSetCookSpec*                         AnimInfo;                                         		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXAnimSetCookSpec*                         PistolAnimInfo;                                   		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPreciseLocation : 1;                             		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPreciseRotation : 1;                             		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bModifyPerception : 1;                            		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44712 ];

		return pClassPointer;
	};

	bool StartInteraction ( class ABioPawn* oPawn );
};

UClass* ASFXNav_InteractionPoint::pClassPointer = NULL;

// Class SFXGame.SFXVocalizationManager
// 0x000C (0x0234 - 0x0228)
class ASFXVocalizationManager : public ASFXVocalizationManagerNativeBase
{
public:
	TArray< struct FVocEventLog >                      PastEvents;                                       		// 0x0228 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44843 ];

		return pClassPointer;
	};

	void DrawActorLog ( class AActor* oActor, class ABioHUD* H );
	void DebugDraw ( class ABioHUD* H );
	void eventTickEvents ( float DeltaTime );
	bool eventPlaySFXVocalizationSLineInternal ( class ABioPawn* Speaker, float DelaySec, struct FSFXVocalizationEvent* E, struct FSFXVocalizationLine* LineToPlay );
	void TriggerVocalizationEvent ( unsigned char Id, class ABioPawn* inInstigator, class ABioPawn* Recipient, class ABioPawn* ReferringTo, float DelaySec, float fChanceToPlayModifier, unsigned long bReplicated );
	void eventPostBeginPlay ( );
};

UClass* ASFXVocalizationManager::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_CheatKill
// 0x0000 (0x00E2 - 0x00E2)
class USFXDamageType_CheatKill : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45038 ];

		return pClassPointer;
	};

	float CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc );
	void ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc );
	bool CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer );
};

UClass* USFXDamageType_CheatKill::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_Default
// 0x0000 (0x00E2 - 0x00E2)
class USFXDamageType_Default : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45052 ];

		return pClassPointer;
	};

	float CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc );
	void ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc );
	bool CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer );
};

UClass* USFXDamageType_Default::pClassPointer = NULL;

// Class SFXGame.SFXHeavyWeapon
// 0x0006 (0x0DD8 - 0x0DD2)
class ASFXHeavyWeapon : public ASFXWeapon
{
public:
	unsigned long                                      bTossOnWeaponSwitch : 1;                          		// 0x0DD4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45204 ];

		return pClassPointer;
	};

	void DropGun ( );
	unsigned char GetStoreQualification ( );
	void PutDownWeapon ( );
	void PlayLowAmmoVocalization ( );
	int AddHeavyAmmo ( int Ammo );
	int GetCurrentSpareAmmo ( );
	int AddAmmo ( int Amount );
	void ConsumeAmmo ( unsigned char FireModeNum );
};

UClass* ASFXHeavyWeapon::pClassPointer = NULL;

// Class SFXGame.SFXModule_GameEffectManager
// 0x0124 (0x017C - 0x0058)
class USFXModule_GameEffectManager : public USFXModule_GameEffectManager_NativeBase
{
public:
	struct FScaledFloat                                WeaponPassiveDamageBonus;                         		// 0x0058 (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScaledFloat                                HeavyWeaponPassiveDamageBonus;                    		// 0x007C (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScaledFloat                                WeaponPassiveConstraintDamageBonus;               		// 0x00A0 (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScaledFloat                                GlobalCooldownBonus;                              		// 0x00C4 (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScaledFloat                                PhysicsDamageTakenBonus;                          		// 0x00E8 (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScaledFloat                                NegotiationBonus;                                 		// 0x010C (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScaledFloat                                WeaponModDamageBonus;                             		// 0x0130 (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScaledFloat                                WeaponMatchConsumableDamageBonus;                 		// 0x0154 (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              RecoilBonus;                                      		// 0x0178 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45232 ];

		return pClassPointer;
	};

	void UnpauseEffectsByType ( class UClass* EffectClass );
	void PauseEffectsByType ( class UClass* EffectClass );
	class USFXGameEffect* GetFirstEffectOfTypeAndCategory ( class UClass* EffectClass, struct FName Category );
	class USFXGameEffect* GetFirstEffectOfCategory ( struct FName Category );
	class USFXGameEffect* GetFirstEffectOfType ( class UClass* EffectClass );
	void OnCombatEnd ( );
	void eventRemoveAllEffects ( );
	void RemoveEffectsByTypeAndCategory ( class UClass* EffectClass, struct FName Category );
	void UpdateEffectsByCategory ( struct FName Category, class AController* Instigator, TArray< class UClass* >* EffectClasses );
	void RemoveEffectsByDuration ( unsigned char Duration );
	void RemoveEffectsByCategory ( struct FName Category );
	void RemoveEffectsByParentType ( class UClass* ParentClass );
	void RemoveEffectsByType ( class UClass* EffectClass );
	void RemoveEffectAt ( int Index );
	void RemoveEffect ( class USFXGameEffect* Effect );
	class USFXGameEffect* CreateEffect ( class UClass* EffectClass, struct FName Category, float Duration, unsigned char DurationType, float EffectValue, class AController* Instigator, class AActor* Causer );
	class USFXGameEffect* CreateAndApplyEffect ( class UClass* EffectClass, struct FName Category, float Duration, unsigned char DurationType, float EffectValue, class AController* Instigator, class AActor* Causer );
	bool HasEffectOfTypeAndCategory ( class UClass* EffectClass, struct FName Category );
	bool HasEffectOfCategory ( struct FName Category );
	bool HasEffectOfType ( class UClass* EffectClass );
	void eventHandlePostBeginPlay ( );
};

UClass* USFXModule_GameEffectManager::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_PassiveWeaponBonus
// 0x0000 (0x0062 - 0x0062)
class USFXGameEffect_PassiveWeaponBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45241 ];

		return pClassPointer;
	};

	class AController* CheckOwnerInstigator ( class AController* Attacker );
	void SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	class UClass* LoadGameEffectClass ( struct FString GEClassName );
	void OnUnpaused ( );
	void OnPaused ( );
	void OnCombatEnd ( );
	void eventOnRemoved ( );
	void eventOnUpdate ( float DeltaSeconds );
	void OnApplied ( );
	void ComputeCustomEffectValue ( float* Value );
};

UClass* USFXGameEffect_PassiveWeaponBonus::pClassPointer = NULL;

// Class SFXGame.SFXModule_AimAssist
// 0x00CC (0x0114 - 0x0048)
class USFXModule_AimAssist : public USFXModule
{
public:
	struct FVector                                     LastCamLoc;                                       		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastMagneticEllipse;                              		// 0x0054 (0x000C) [0x0000000000000000]              
	struct FRotator                                    DebugAdhesion_Smoothed;                           		// 0x0060 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    DebugAdhesion_Final;                              		// 0x006C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    DebugAdhesion_Combined;                           		// 0x0078 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    DebugAdhesion_PerfectAim;                         		// 0x0084 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    DebugAdhesion_StrafeAssist;                       		// 0x0090 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ZoomSnapTarget;                                   		// 0x009C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     AdhesionSmoothForce;                              		// 0x00A8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CurrentAimAssistBoneLocation;                     		// 0x00B4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              GlobalFrictionFactor;                             		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GlobalAimCorrectionFactor;                        		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GlobalAdhesionFactor;                             		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GlobalSweepFactor;                                		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EnemyMovementAdhesionFactor;                      		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastDistToTarget;                                 		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              LastDistMultiplier;                               		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              LastDistFromAimZ;                                 		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              LastDistFromAimY;                                 		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              LastFrictionMultiplier;                           		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              LastTargetRadius;                                 		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              LastTargetHeight;                                 		// 0x00EC (0x0004) [0x0000000000000000]              
	class APawn*                                       LastAdhesionTarget;                               		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       LastFrictionTarget;                               		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      LastZoomSnapTarget;                               		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AdhesionSmoothRate;                               		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              AdhesionSmoothMag;                                		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FrictionSmoothValue;                              		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FrictionSmoothRate;                               		// 0x0108 (0x0004) [0x0000000000000000]              
	class AActor*                                      CurrentAimAssistTarget;                           		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentAimAssistSoftMargin;                       		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45351 ];

		return pClassPointer;
	};

	void DebugDraw_ZoomSnap ( class ABioHUD* H );
	void ZoomSnap ( );
	void DebugDraw_Adhesion ( class ABioHUD* H );
	struct FString PrintQuat ( struct FQuat Q );
	struct FRotator ViewAdhesion ( float DeltaTime, class ASFXWeapon* Weapon );
	struct FQuat StripRoll ( struct FQuat Q );
	void DebugDraw_Friction ( class ABioHUD* H );
	float ViewFriction ( float DeltaTime, class ASFXWeapon* Weapon );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void DebugDraw_Magnetism ( class ABioHUD* H );
	float GetStickRelativeDot ( struct FVector ScreenAimOffset );
	struct FRotator GetMagneticAimCorrection ( struct FVector StartFireLoc, struct FRotator BaseAimRot, float MaxAngle, float Threshold, float Range );
	void ProcessRotation ( float DeltaTime, struct FRotator* DeltaRot );
	void CacheCurrentAimAssistTarget ( );
};

UClass* USFXModule_AimAssist::pClassPointer = NULL;

// Class SFXGame.SFXPlotTreasure
// 0x0028 (0x0070 - 0x0048)
class USFXPlotTreasure : public UBioPlotTreasure
{
public:
	float                                              fFullPriceMultiplier;                             		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                nLastUnlockedTech;                                		// 0x004C (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srMultiLevelUpgradeName;                          		// 0x0050 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                nProfessorInPartyId;                              		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                nProfessorIsDeadId;                               		// 0x0058 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srLabOpenResearchMessage;                         		// 0x005C (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srLabClosedResearchMessage;                       		// 0x0060 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                StateNewResearchAvailable;                        		// 0x0064 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                StateNewUpgradesAvailable;                        		// 0x0068 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srCanAffordResearch;                              		// 0x006C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45444 ];

		return pClassPointer;
	};

	void TriggerResourceHint ( unsigned char InvType, int nAmount );
	void SetNewUpgradesAvailable ( unsigned long bUpgadesAvailable );
	void SetNewResearchAvailable ( unsigned long bResearchAvailable );
	class UTexture2D* FindImage ( struct FString Path );
	void GetTechImageResourcePath ( struct FName nmTech, unsigned long bNoLookup, struct FString* sImagePath, struct FString* sLargeImagePath );
	struct FString GetTreasureLargeImageResourcePath ( int nTreasureId );
	struct FString GetTreasureImageResourcePath ( int nTreasureId );
	float Price ( int nTreasureId, unsigned long bDiscount );
	int CalculateResearchLevelMultiplier ( struct FName nmTech );
	bool ChargeForTreasure ( int nTreasureId, unsigned long bDiscount );
	bool QualifiesForTreasure ( int nTreasureId );
	bool DiscoveredResearch ( int nTreasureId );
	bool CanAffordTreasure ( int nTreasureId, unsigned long bDiscount );
	struct FString GetTechName ( struct FSTech stTech, unsigned long bAddOne );
	void CheckForUpgradedWeaponAccomplishment ( );
	void ReLockTech ( struct FSTech stTech );
	bool AwardTech ( struct FName nmTech, unsigned long bNoAnimation, unsigned long bStorePurchase );
	struct FName FindTechByResearch ( struct FName nmTech );
	bool AwardTreasure ( int nTreasureId, unsigned long bDiscount );
	void LogWarning ( struct FString Msg );
	struct FName CurrentLevel ( );
	struct FSTech Tech ( struct FName nmTech );
	struct FSTreasure TREASURE ( int nTreasureId );
	struct FSResourceBudget Budget ( struct FName nmLevel );
	struct FSResourceBudget BudgetFromId ( int nID );
};

UClass* USFXPlotTreasure::pClassPointer = NULL;

// Class SFXGame.SFXWeapon_Shotgun_Base
// 0x008A (0x0E5C - 0x0DD2)
class ASFXWeapon_Shotgun_Base : public ASFXWeapon
{
public:
	struct FScaledFloat                                AccuracyBonus;                                    		// 0x0DD4 (0x0024) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                ZoomAccuracyBonus;                                		// 0x0DF8 (0x0024) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FVector2D >                         PelletSpread;                                     		// 0x0E1C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FRotator                                    LatentFire_AimRotation;                           		// 0x0E28 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LatentFire_StartLocation;                         		// 0x0E34 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TraceExtent;                                      		// 0x0E40 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartTraceAdjustDist;                             		// 0x0E4C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AmmoRestoredPerReload;                            		// 0x0E50 (0x0004) [0x0000000000000000]              
	float                                              LatentFireTime;                                   		// 0x0E54 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LatentFire_CurrentPellet;                         		// 0x0E58 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45544 ];

		return pClassPointer;
	};

	unsigned char GetStoreQualification ( );
	void eventDummyFire ( unsigned char FireModeNum, struct FVector TargetLoc, class AActor* AttachedTo, float AimErrorDeg, class AActor* TargetActor );
	class UWwiseEvent* GetWeaponSpecificImpactSound ( class USFXPhysicalMaterialImpactSounds* ImpactSounds );
	class UParticleSystem* GetWeaponSpecificImpactEffect ( class USFXPhysicalMaterialImpactEffects* ImpactEffects );
	class UDecalComponent* GetWeaponSpecificDecalData ( class USFXPhysicalMaterialDecals* DecalEffects, float* FadeTime );
	void FinishLatentFire ( );
	void PollLatentFire ( );
	void FirePellets ( struct FVector StartLocation, struct FRotator AimRotation, unsigned char FireMode );
	void CalcRemoteImpactEffects ( unsigned char FireModeNum, struct FVector GivenHitLocation, unsigned long bViaReplication );
	void DrawDebugShotgunCone ( struct FVector StartLocation, struct FRotator AimRot );
	void CustomFire ( );
	bool ShouldSpawnTracerFX ( );
	void ScaleWeapon ( );
};

UClass* ASFXWeapon_Shotgun_Base::pClassPointer = NULL;

// Class SFXGame.SFXModule_DamageParty
// 0x001C (0x01E1 - 0x01C5)
class USFXModule_DamageParty : public Usfxmodule_damage
{
public:
	float                                              HealthRegenDelay;                                 		// 0x01C8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              LastShieldGateTime;                               		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastHealthGateTime;                               		// 0x01D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinShieldGateInterval;                            		// 0x01D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MinHealthGateInterval;                            		// 0x01D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HealthGateThreshold;                              		// 0x01DC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned char                                      CurrentBleedoutState;                             		// 0x01E0 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45596 ];

		return pClassPointer;
	};

	bool KillForStasis ( unsigned long bImmediate, class AController* Killer, class UClass* DamageType );
	void RecoverFromBleedout ( unsigned long bResetHealth );
	void TurnOffShieldGate ( );
	void TurnOffHealthGate ( );
	void StartBleedOut ( );
	void OnShieldBreached ( );
	void ApplyDamageToHealth ( float Damage, class AController* instigatedBy, class UClass* DamageType, struct FVector HitLocation, float* AppliedDamage );
	void SFXTakeDamage ( float Damage, struct FVector Momentum, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation );
	void ResetRegenTimer ( );
	void RegenFullHealth ( );
};

UClass* USFXModule_DamageParty::pClassPointer = NULL;

// Class SFXGame.sfxpri
// 0x011A (0x03D4 - 0x02BA)
class Asfxpri : public ASFXPRI_NativeBase
{
public:
	TArray< struct Asfxpri_FScoreEvent >               ScoreLog;                                         		// 0x02BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FDamageCalculationAlgorithm                 LastWeaponDamage;                                 		// 0x02C8 (0x0060) [0x0000000000002000]              ( CPF_Transient )
	struct FDamageCalculationAlgorithm                 LastPowerDamage;                                  		// 0x0328 (0x0060) [0x0000000000002000]              ( CPF_Transient )
	struct FActiveMatchConsumable                      ActiveMatchConsumables[ 0x4 ];                    		// 0x0388 (0x0030) [0x0000000000000020]              ( CPF_Net )
	struct FScoreInfo                                  ReplicatedScoreInfo;                              		// 0x03B8 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                TotalPointsAtStartOfWave;                         		// 0x03C4 (0x0004) [0x0000000000000000]              
	float                                              PointsEarned;                                     		// 0x03C8 (0x0004) [0x0000000000000000]              
	float                                              CreditsEarned;                                    		// 0x03CC (0x0004) [0x0000000000000000]              
	float                                              ScoreReplicationPeriod;                           		// 0x03D0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45654 ];

		return pClassPointer;
	};

	void SendTelemetryForWeapons ( );
	void OnCharacterChanged ( );
	void SetReadyInLobby ( unsigned long NewReadyState );
	void* GetPlayerChallengeTitle ( );
	bool CanSetReadyInLobby ( );
	bool IsReadyInLobby ( );
	void GetActiveMatchConsumables ( TArray< struct FActiveMatchConsumable >* OutActiveMatchConsumables );
	bool GetActiveMatchConsumable ( int ConsumableIndex, struct FName* ConsumableClass, int* ConsumableValue );
	void RemoveActiveMatchConsumable ( int ClassNameID, float Value );
	void ServerRemoveActiveMatchConsumable ( int ClassNameID, float Value );
	bool IsMatchConsumableActive ( int UniqueConsumableID, float Value );
	void AddActiveMatchConsumable ( int ClassNameID, float Value );
	void ServerAddActiveMatchConsumable ( int ClassNameID, float Value );
	void ReplicateScoreInfo ( );
	float GetTotalCredits ( );
	float GetTotalPoints ( );
	void AddPlayerMedal ( int Medal, int ReplaceMedal, unsigned long bDisplay );
	void AddCredits ( float Amount );
	void AddPoints ( float Amount );
	void TriggerNewScoreTag ( int Amount, struct FString Message );
	int GetWeaponLevel ( struct FName WeaponClassPath );
	void StoreDamageCalculation ( struct FDamageCalculationAlgorithm* DamageCalc );
	class Asfxpri* FindLocalPRI ( );
	void PostBeginPlay ( );
	void Tick ( float DeltaTime );
	void ReplicatedScoreUpdated ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* Asfxpri::pClassPointer = NULL;

// Class SFXGame.sfxplayercamera
// 0x006C (0x04FC - 0x0490)
class Asfxplayercamera : public ASFXCameraNativeBase
{
public:
	struct FInterpCurveFloat                           CameraRubberBandCurve;                            		// 0x0490 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FTPOV                                       CameraDesiredPosition;                            		// 0x04A0 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    KickBackModifier;                                 		// 0x04BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USFXCameraTransition_FaceTarget*             FaceTargetTransition;                             		// 0x04C8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class USFXCameraModifier_ScreenShake*              ScreenShakeModifier;                              		// 0x04CC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class USFXCameraMode*                              CurrentModalAction;                               		// 0x04D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TransitionTimeout;                                		// 0x04D4 (0x0004) [0x0000000000000000]              
	float                                              LastTransitionTime;                               		// 0x04D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastAspectRatio;                               		// 0x04DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraRubberBandMaxStretchLength;                 		// 0x04E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CameraRubberBandSpeed;                            		// 0x04E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RotationalDecay;                                  		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxTransitionStackDepth;                          		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXCameraMode*                              FreeCam;                                          		// 0x04F0 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_Interpolate*                  DefaultTransition;                                		// 0x04F4 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bCurrentTransitionIsModal : 1;                    		// 0x04F8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDebugging : 1;                                   		// 0x04F8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bLastConstrainAspect : 1;                       		// 0x04F8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45953 ];

		return pClassPointer;
	};

	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot );
	void SetBaseRotation ( struct FRotator NewRotation );
	struct FRotator GetBaseRotation ( );
	void SwitchTo ( class USFXCameraMode* NewMode );
	class USFXCameraMode_Interpolate* SetBehavior ( class USFXCameraMode* mode, class USFXCameraMode_Interpolate* NewTransitionTemplate, float Time, unsigned long PreserveTarget );
	void UpdateCameraMode ( float fDeltaTime, struct FTViewTarget* OutVT );
	struct FVector SmoothPosition ( struct FVector Start, struct FVector Target, float TimeDelta );
	void PickCameraMode ( float DeltaTime, struct FTViewTarget* OutVT );
	class USFXCameraMode_Interpolate* PlayCameraTransition ( class USFXCameraMode_Interpolate* Transition, float Time, class USFXCameraMode* mode );
	void RotateToFace ( struct FVector AimPoint, float Time );
	void UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT );
	class UCameraModifier* CreateCameraModifier ( class UClass* ModifierClass );
	bool IsPlayingCameraAnim ( );
	void AddScreenShake ( struct FScreenShakeStruct Shake );
	void PostBeginPlay ( );
};

UClass* Asfxplayercamera::pClassPointer = NULL;

// Class SFXGame.SFXAI_Cover
// 0x0058 (0x06E8 - 0x0690)
class ASFXAI_Cover : public Asfxai_core
{
public:
	struct FVector2D                                   NearCoverDelayTime;                               		// 0x0690 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   FarCoverDelayTime;                                		// 0x0698 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   AggressiveCoverDelayTime;                         		// 0x06A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   ActionDelayTime_Normal;                           		// 0x06A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   ActionDelayTime_Aggressive;                       		// 0x06B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   ActionDelayTime_FallBack;                         		// 0x06B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UGoal_AtCover*                               MyCoverEval;                                      		// 0x06C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastCoverEnterTime;                            		// 0x06C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxFireWaitTime;                                  		// 0x06C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlankReactionTime;                                		// 0x06CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastTimeDamageCoverDecaySet;                      		// 0x06D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGoal_AtCover*                               AtCover_WeaponRange;                              		// 0x06D4 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UGoal_AtCover*                               AtCover_Defensive;                                		// 0x06D8 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UGoal_AtCover*                               AtCover_Aggressive;                               		// 0x06DC (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UGoal_AtCover*                               AtCover_NearMoveGoal;                             		// 0x06E0 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      m_bInvalidatedCover : 1;                          		// 0x06E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bUsePeriodicCoverCheck : 1;                     		// 0x06E4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45976 ];

		return pClassPointer;
	};

	void OnCoverUserEvade ( class USFXSeqAct_CoverUserEvade* Seq );
	bool ReactToFlank ( class APawn* FlankingPawn );
	bool ReactToNearbyEnemy ( class APawn* NearbyPawn );
	void ApplyCoverDecay ( float DecayValue );
	void NotifyDeathBlow ( class UClass* DamageType );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void NotifyStuck ( );
	void NotifyKnockedOutOfCover ( );
	void NotifyReachedCover ( );
	void eventNotifyPlayerFocus ( );
	void NotifyUnsafeCover ( );
	void NotifyCoverDisabled ( class ACoverLink* Link, int SlotIdx, unsigned long bAdjacentIdx );
	bool GetAttackOrigin ( class AActor* oTarget, struct FVector* AttackOrigin );
	bool IsMovingToCover ( );
	bool ShouldFindBerserkCover ( );
	void PawnDied ( class APawn* inPawn );
	float GetCoverDelayTime ( );
	float GetActionDelayTime ( );
	void FindNewCover ( );
	bool MoveToCover ( class UGoal_AtCover* GoalEvaluator, class AActor* GoalActor, unsigned long bUsePeriodicCheck, unsigned long bAllowedToFire );
	void UnClaimCover ( );
	bool ClaimCover ( struct FCoverInfo NewCover );
	bool ShouldPathTowardCombatZone ( class UGoal_AtCover* Evaluator );
	void InitializeCoverConstraints ( class UGoal_AtCover* Evaluator, class AActor* GoalActor );
	bool AcquireCoverGoal ( class UGoal_AtCover* GoalEvaluator, class AActor* GoalActor, struct FCoverInfo* NewCoverGoal );
	bool SetCombatMood ( unsigned char NewMood, float fDuration );
};

UClass* ASFXAI_Cover::pClassPointer = NULL;

// Class SFXGame.SFXAI_Henchman
// 0x0084 (0x076C - 0x06E8)
class ASFXAI_Henchman : public ASFXAI_Cover
{
public:
	TArray< struct FHenchmanOrder >                    m_Orders;                                         		// 0x06E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __ReachedInteractionPoint__Delegate;              		// 0x06F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __StoppedWorldInteraction__Delegate;              		// 0x0700 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      CurrentCommand;                                   		// 0x070C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vHoldLocation;                                  		// 0x0710 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                FindCoverNearHoldLocationCount;                   		// 0x071C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxAttemptsToFindCoverNearHoldLocation;           		// 0x0720 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nTeleportAttemptCounter;                        		// 0x0724 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TetherDistance;                                   		// 0x0728 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TetherDistanceWhileExecutingOrder;                		// 0x072C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TetherDistanceForFollowOrder;                     		// 0x0730 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DistanceToStartCombatWhileFollowing;              		// 0x0734 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AttackDelayAfterBeingShot;                        		// 0x0738 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamagePercentToRemainInCover;                     		// 0x073C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFXAI_Henchman*                             m_OtherHenchman;                                  		// 0x0740 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fHeadshotProbability;                           		// 0x0744 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinDistanceFromTargetForCrouch;                   		// 0x0748 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCoverEvaluationCount;                          		// 0x074C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nBackingAwayCount;                              		// 0x0750 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxBackAwayDistance;                              		// 0x0754 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HenchmanAttackBonus;                              		// 0x0758 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HenchmanDefenseBonus;                             		// 0x075C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HenchmanAttackDuration;                           		// 0x0760 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HenchmanDefenseDuration;                          		// 0x0764 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bFollowPlayer : 1;                              		// 0x0768 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bHoldingPosition : 1;                           		// 0x0768 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bResetHenchman : 1;                             		// 0x0768 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bTeleportHenchman : 1;                          		// 0x0768 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bDelayPowerUse : 1;                             		// 0x0768 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bTooFarToAttack : 1;                            		// 0x0768 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bMeleeAttacker : 1;                             		// 0x0768 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bEnemiesPerceived : 1;                          		// 0x0768 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bOriginalStartRootMotion : 1;                   		// 0x0768 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bOriginalStopRootMotion : 1;                    		// 0x0768 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bAllowInstantPowerWhileVisible : 1;             		// 0x0768 (0x0004) [0x0000000000004000] [0x00000400] ( CPF_Config )
	unsigned long                                      bUsingInstantPower : 1;                           		// 0x0768 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      m_bBackingAwayFromTarget : 1;                     		// 0x0768 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      PreventSquadPowerUse : 1;                         		// 0x0768 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45975 ];

		return pClassPointer;
	};

	bool HasAnyEnemies ( );
	bool CanChoosePower ( class Usfxpowercustomaction* oPower, class AActor* oTarget, unsigned long bPlayerRequest );
	void eventResetToIdle ( unsigned long bTeleport );
	void NotifyStuck ( );
	bool IsCombatStale ( );
	bool ReactToFlank ( class APawn* FlankingPawn );
	bool ReactToNearbyEnemy ( class APawn* NearbyPawn );
	bool ShouldMelee ( class AActor* MeleeTarget );
	bool ShouldCancelMove ( int nReason );
	bool ShouldStayLeanedOut ( );
	void CheckThreatRadius ( );
	bool IsWithinThreatRadius ( );
	void NotifyKnockedOutOfCover ( );
	bool CanInstantlyUsePowers ( );
	void InstantUsePower ( );
	void OnCombatStart ( );
	bool ShouldWaitForPlayer ( );
	void AdjustEnemyRating ( class APawn* EnemyPawn, float* fRating );
	void AdjustRatingByTickets ( int EnemyIdx, float* out_Rating );
	void CheckInCombat ( );
	void NotifyNewEnemy ( class APawn* NewEnemy, unsigned long bPerceivedDirectly, unsigned long bFirstEnemy );
	void ApplyOrderBonus ( );
	void OnTargetChanged ( );
	void CheckMeleeAttacker ( );
	void CheckLineOfFireClear ( );
	void CheckPlayerLineOfFire ( );
	bool IsInPlayerLineOfFire ( int* nPlayerIsFiring );
	bool StartFollowingActor ( class AActor* ActorToFollow );
	struct FVector GetAimLocation ( class AActor* oAimTarget );
	void NotifyPowerDelayFinished ( );
	void PowerCooldownFinished ( );
	bool ArePowersCoolingDown ( );
	void NotifyHenchmenLoaded ( );
	bool ShouldAttack ( );
	bool CanUsePowers ( unsigned long bCheckProfileOption );
	bool ChooseDefensivePower ( struct FName* nmPower );
	bool ChooseAttackPowerHelper ( class AActor* oTarget, unsigned long bPlayerRequest, struct FName* nmPower, int* nRequiresAttackTicket, struct FVector* AttackOrigin );
	bool ChooseAttackPower ( class AActor* oTarget, unsigned long bPlayerRequest, struct FName* nmPower, int* nRequiresAttackTicket, struct FVector* AttackOrigin );
	bool RespondToBump ( class AActor* Other, struct FVector HitNormal );
	float GetPeriodicMoveInterval ( );
	bool WantsToRun ( float fDistance );
	void SetSquadIntoCombat ( );
	bool IsInCombat ( unsigned long bForceCheck );
	bool IsInMoveTo ( );
	bool ShouldFollowPlayer ( );
	bool TeleportNearLeader ( );
	bool TeleportToActor ( class AActor* oActor, unsigned long bForceTeleport, unsigned long bOffsetTeleport );
	void NotifyUnderAttack ( unsigned long bHit );
	void ResetFarAwayFlag ( );
	bool NotifyCoverClaimViolation ( class AController* NewClaim, class ACoverLink* Link, int SlotIdx );
	bool PathfindToHoldLocation ( );
	bool MoveToCoverNearHoldLocation ( unsigned long bInitialOrder );
	void HenchmanMoveToCover ( );
	void FindNewCover ( );
	void eventBioClearCrossLevelReferences ( class ULevel* oLevel );
	void NotifyChangedWeapon ( class AWeapon* PreviousWeapon, class AWeapon* NewWeapon );
	void TriggerAttackVocalization ( );
	void StopInteraction ( );
	bool UseInteractionPoint ( class AActor* InteractionPoint, float fFidelityTimeout, struct FScriptDelegate ReachedDelegate, struct FScriptDelegate StoppedDelegate, int* bBusy );
	struct FHenchmanOrder GetNextOrder ( unsigned char eOrder );
	void RemoveOldSwitchWeaponOrders ( );
	bool CanStartImmediateOrder ( );
	bool CanQueueOrder ( );
	bool CancelOrder ( unsigned char eOrder, struct FName nmPower );
	int GetInstantOrderCount ( );
	bool AddOrder ( unsigned char eOrder, class AActor* oTargetActor, struct FVector vTargetLocation, struct FName nmPower, class ASFXWeapon* oWeapon, int nQueue );
	void Initialize ( );
	void Reset ( );
	void StoppedWorldInteraction ( unsigned long bSuccess );
	void ReachedInteractionPoint ( );
};

UClass* ASFXAI_Henchman::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_PowerBonus
// 0x001A (0x007C - 0x0062)
class USFXGameEffect_PowerBonus : public USFXGameEffect
{
public:
	TArray< class UClass* >                            IgnoredPowers;                                    		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       AffectedParameter;                                		// 0x0070 (0x0008) [0x0000000000000000]              
	unsigned long                                      bApplyToBiotics : 1;                              		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bApplyToTech : 1;                                 		// 0x0078 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bApplyToCombat : 1;                               		// 0x0078 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bApplyToWeapons : 1;                              		// 0x0078 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46325 ];

		return pClassPointer;
	};

	void ApplyBonus ( unsigned long bRemove );
	void RemoveBonuses ( );
	void OnRemoved ( );
	void OnApplied ( );
};

UClass* USFXGameEffect_PowerBonus::pClassPointer = NULL;

// Class SFXGame.BioHintSystem
// 0x0065 (0x012D - 0x00C8)
class UBioHintSystem : public UBioHintSystemBase
{
public:
	struct FName                                       m_nmCurrentWeapon;                                		// 0x00C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmLastUsedPower;                                		// 0x00D0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmMappedPower;                                  		// 0x00D8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmLeftMappedPower;                              		// 0x00E0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmRightMappedPower;                             		// 0x00E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmClassMappedPower;                             		// 0x00F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmNearestEnemy;                                 		// 0x00F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmTutorialSelectHint;                           		// 0x0100 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmTutorialHighlightHint;                        		// 0x0108 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAmmoPercent;                                   		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fShieldsPercent;                                		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fNearestEnemyDistance;                          		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMedigel;                                       		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMostUnspentTalentPoints;                       		// 0x0120 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRealTimeSeconds;                               		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bInCombat : 1;                                  		// 0x0128 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bOutOfAmmo : 1;                                 		// 0x0128 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bUsingHeavyWeapon : 1;                          		// 0x0128 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bUsingTurret : 1;                               		// 0x0128 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bAllowedToLeaveTurret : 1;                      		// 0x0128 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bUsingSniperRifle : 1;                          		// 0x0128 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bUsingShotgun : 1;                              		// 0x0128 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bUsingAmmoPower : 1;                            		// 0x0128 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bHasAnyAmmoPowers : 1;                          		// 0x0128 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bNearestEnemyCanBeMeleed : 1;                   		// 0x0128 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bAnyHenchmenDead : 1;                           		// 0x0128 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      m_bPowerWheelTutorialEnabled : 1;                 		// 0x0128 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      m_bWeaponWheelTutorialEnabled : 1;                		// 0x0128 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      m_bShowingSelectHint : 1;                         		// 0x0128 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned char                                      m_ePowerTutorialType;                             		// 0x012C (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46629 ];

		return pClassPointer;
	};

	void AddNotificationOneParameter ( struct FSFXNotificationData oNoteData, int nParam1 );
	void eventJournalUpdate ( void* srTitle, void* srDescription );
	void eventCodexUpdate ( void* srTitle, void* srDescription );
	void AddNotification_MPMedalGranted ( struct FString sName, int nScoreBonus, struct FString sImage );
	void AddNotification_HeavyAmmoFull ( );
	void AddNotification_BonusPower ( int PlotStateID );
	void AddNotification_GalaxyAtWarArtifactCredits ( );
	void AddNotification_GalaxyAtWarSalvage ( );
	void AddNotification_GalaxyAtWarIntel ( void* srTitle );
	void AddNotification_GalaxyAtWarArtifact ( void* srTitle );
	void AddNotification_GalaxyAtWarModifier ( void* srTitle );
	void AddNotification_GalaxyAtWarAsset ( void* srTitle );
	void AddNotification_MediGelFull ( );
	void AddNotification_SalvageRecovery ( int Amount );
	void AddNotification_LevelUp ( int Level );
	void AddNotification_XP ( int Amount );
	void AddNotification_TechUnlocked ( struct FString sTitle, struct FString sName, struct FString sMessage, struct FString sImagePath );
	void AddNotification_Tech ( struct FString sTitle, struct FString sName, struct FString sMessage, struct FString sImagePath );
	void AddNotification_TreasureError ( struct FString sTitle, struct FString sName, struct FString sMessage, struct FString sImagePath );
	void AddNotification_WeaponMod ( struct FString sTitle, struct FString sName, struct FString sMessage, struct FString sImagePath );
	void AddNotification_Weapon ( struct FString sTitle, struct FString sName, struct FString sMessage, struct FString sImagePath );
	void AddNotification_ArmorTreasureUnlocked ( struct FString sSubtitle );
	void AddNotification_AllianceCredits ( int Credits );
	void AddNotification_StorePurchase ( struct FString sName, struct FString sMessage, struct FString sImagePath );
	void AddNotification_ResearchRecovered ( struct FString sName, struct FString sMessage, struct FString sImagePath );
	bool PowerCast ( struct FName* nmContext );
	void UpdateWeaponWheelTutorialHint ( int nWeaponType );
	void UpdatePowerWheelTutorialHint ( struct FName nmPower );
	void GeneratePowerWheelTutorialHint ( unsigned long bPowerWheel, unsigned long bWeaponWheel );
	bool FindHintDefinition ( struct FName nmHint, struct FHintDefinition* oHint );
	void EnableWeaponTutorialHint ( unsigned long bOn );
	void EnablePowerTutorialHint ( unsigned long bOn, unsigned char eTutType );
	bool ChargedWeaponHint ( );
	bool ExitTurretHint ( );
	bool MedigelHint ( );
	bool GrenadeHint ( );
	bool UseAmmoPowerHint ( );
	bool FindLandingSite ( );
	bool LaunchProbeHint ( );
	bool PlanetScanHint ( );
	bool CooldownHint ( );
	bool LevelUpHint ( );
	bool HackGameHint ( );
	bool BypassGameHint ( );
	bool ResurrectHint ( );
	bool SyncMeleeHint ( );
	bool MeleeHint ( );
	bool ClassMappedPowerHint ( );
	bool RightMappedPowerHint ( );
	bool LeftMappedPowerHint ( );
	bool PCMappedPowerHint ( );
	bool ZoomHint ( );
	bool TakeCoverHint ( );
	bool ManualReloadHint ( );
	void eventCacheCurrentState ( );
};

UClass* UBioHintSystem::pClassPointer = NULL;

// Class SFXGame.SFXWeapon_AssaultRifle_Base
// 0x0006 (0x0DD8 - 0x0DD2)
class ASFXWeapon_AssaultRifle_Base : public ASFXWeapon
{
public:
	int                                                ShotsTillMissTracer;                              		// 0x0DD4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46716 ];

		return pClassPointer;
	};

	unsigned char GetStoreQualification ( );
	class UWwiseEvent* GetWeaponSpecificImpactSound ( class USFXPhysicalMaterialImpactSounds* ImpactSounds );
	class UParticleSystem* GetWeaponSpecificImpactEffect ( class USFXPhysicalMaterialImpactEffects* ImpactEffects );
	class UDecalComponent* GetWeaponSpecificDecalData ( class USFXPhysicalMaterialDecals* DecalEffects, float* FadeTime );
	void PlayFireEffects ( unsigned char FiringMode, struct FVector HitLocation );
	bool ShouldSpawnTracerFX ( );
};

UClass* ASFXWeapon_AssaultRifle_Base::pClassPointer = NULL;

// Class SFXGame.SFXWeapon_Pistol_Base
// 0x0000 (0x0DD2 - 0x0DD2)
class ASFXWeapon_Pistol_Base : public ASFXWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46717 ];

		return pClassPointer;
	};

	void GiveWeaponCodex ( );
	void ClearFizzleCount ( );
	void IncrementFizzleCount ( );
	bool IsClientReadyToInitialize ( );
	void UnsubscribeFromImpactNotifications ( struct FScriptDelegate Callback );
	void SubscribeToImpactNotifications ( struct FScriptDelegate Callback );
	float eventGetPenetrationDepth ( );
	class UClass* LoadWeaponClass ( struct FString WeaponClassName );
	class UClass* FindWeaponClass ( struct FString WeaponClassName );
	unsigned char GetStoreQualification ( );
	void SetWeaponHidden ( unsigned long bWeaponHidden );
	void GetWeaponStatBarValues ( unsigned char StatBar, float* WeaponValue );
	bool eventHasLoopingFire ( );
	void ClearFlashLocation ( );
	void SetFlashLocation ( struct FVector HitLocation );
	void ApplyDefaultWeaponMods ( unsigned long bClearOldMods );
	void SetWeaponModBodyColour ( int ModLevel );
	void SetWeaponModGripColour ( int ModLevel );
	void SetWeaponModEmissiveValue ( int ModLevel );
	void ClearWeaponModMaterialParameters ( );
	void RestoreFlashlightToNormal ( );
	void DelayedRestoreFlashlightToNormal ( );
	void SetFlashlightFireMode ( );
	void DetachFlashlight ( );
	void AttachFlashlight ( );
	bool IsWeaponAlreadyAwarded ( class UClass* WeaponClass );
	bool IsWeaponUnlocked ( class UClass* WeaponClass );
	bool Upgrade ( class ASFXPawn_Player* Player, class UClass* WeaponClass, unsigned long bNoNotification, unsigned long bIsMultiplayer, unsigned long bDoesNotCountasNGPFound, unsigned long bUnlockOnly );
	bool IsAnimTypeSniper ( );
	bool IsAnimTypeShotgun ( );
	bool IsAnimTypePistol ( );
	float eventGetReactionChanceModifier ( );
	void ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void eventCleanUpDummyFire ( );
	void eventWeaponStoppedFiring ( unsigned char FiringMode );
	void eventDummyFire ( unsigned char FireModeNum, struct FVector TargetLoc, class AActor* AttachedTo, float AimErrorDeg, class AActor* TargetActor );
	float GetInitialDummyFireDelay ( );
	void BeginDummyFire ( unsigned char FiringMode, class AActor* AttachedTo );
	void WeaponFired ( unsigned char FiringMode, unsigned long bViaReplication, struct FVector HitLocation );
	class AProjectile* eventProjectileFireSimple ( float AimErrorDeg );
	void CalcRemoteImpactEffects ( unsigned char FireModeNum, struct FVector GivenHitLocation, unsigned long bViaReplication );
	bool eventCalculateCoverLeanOutOffset ( unsigned char Direction, unsigned char Type, struct FVector* Offset );
	struct FString GetGeneralDescription ( );
	struct FString GetShortDescription ( );
	struct FString GetPrettyName ( int Level );
	void GetWeaponDebug ( TArray< struct FString >* DebugInfo );
	void DrawDebugShot ( struct FVector StartLocation, struct FVector EndLocation );
	void SetAmmoPowerHologramEnabled ( unsigned long bEnabled, unsigned long bForceEnabled );
	void SetAmmoPowerHologramTemplates ( class UParticleSystem* Template, class UParticleSystem* IconTemplate );
	void eventDestroyed ( );
	void HolderDied ( );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
	void ClientWeaponThrown ( );
	bool CanThrow ( );
	void DetachWeapon ( );
	void AttachMuzzleEffectsComponents ( class USkeletalMeshComponent* SkelMesh, struct FName MuzzleSocket, struct FName CasingSocket );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	void Internal_AssignToSlot ( );
	void AssignToSlot ( unsigned char Slot );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	void EquipTimedOut ( );
	void EquipFinished ( );
	void EquipNearFinished ( );
	void Collapse ( );
	void Expand ( );
	void StopChargeEffects ( );
	void ShutOffAllEmitters ( );
	void UnEquipTimedOut ( );
	void UnEquipFinished ( );
	void ServerCancelReload ( );
	void CancelReload ( );
	void DoAReload ( );
	void ReloadNearFinished ( );
	void NotifyWeaponRefireDelayExpired ( );
	void NotifyWeaponFired ( unsigned char FireMode );
	void HandleFinishedFiring ( );
	bool ShouldRefire ( );
	int GetBurstsToFire ( );
	int GetBurstFireCount ( );
	void SetupWeaponFire ( unsigned char FireModeNum );
	void ServerStopFire ( unsigned char FireModeNum );
	void EndFire ( unsigned char FireModeNum );
	class AActor* SelectTarget ( );
	void StartFire ( unsigned char FireModeNum );
	bool CanFire ( );
	void StartFullChargeRumble ( );
	void StartChargeEffects ( );
	bool IsChargingWeapon ( );
	void ServerFireChargedShot ( float SentChargeAmount );
	void PlayNoAmmoFireSound ( );
	void PlayNoAmmoEffects ( );
	void TryReload ( unsigned long bDisplayHint );
	void DoReload ( );
	int GetAmmoRestoredPerReload ( );
	float GetReloadDuration ( );
	bool ShouldAutoReload ( );
	bool CanReload ( );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	void PlayReloadEject ( );
	void StopFireEffects ( unsigned char FireModeNum );
	void HearNoiseTimer ( );
	void WeaponPlayWwiseEvent ( class UWwiseEvent* Sound, float NoiseLoudness, struct FVector SoundLoc, struct FName NoiseType );
	void SpawnTracerEffect ( struct FVector HitLocation, float HitDistance );
	bool ShouldSpawnTracerFX ( );
	void PlayOwnedFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void HideReloadEmitters ( );
	void HideMuzzleFlashEmitter ( );
	void StopMuzzleFlashEffect ( );
	bool IsCameraWithinRadius ( struct FVector TestLocation, float Radius );
	bool IsMuzzleFlashRelevant ( );
	void PlayMuzzleFlashEffect ( );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void DummyFireTimerFunction ( );
	void DummyFireNumTimes ( int nNumTimes, struct FVector vHitLocation, class AActor* AttachedTo, float fInaccuracy, class AActor* TargetActor );
	void CheckTimerFireOnce ( );
	void PlayFireEffectsOnce ( struct FVector HitLocation );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	class UDecalComponent* GetWeaponSpecificDecalData ( class USFXPhysicalMaterialDecals* DecalEffects, float* FadeTime );
	class UDecalComponent* GetDecalData ( class UPhysicalMaterial* PhysMat, float* FadeTime );
	void SpawnADecal ( struct FImpactInfo Impact );
	class UWwiseEvent* GetWeaponSpecificImpactSound ( class USFXPhysicalMaterialImpactSounds* ImpactSounds );
	class UWwiseEvent* GetImpactSound ( class UPhysicalMaterial* PhysMat );
	void SpawnImpactSounds ( struct FImpactInfo Impact );
	class UParticleSystem* GetWeaponSpecificImpactEffect ( class USFXPhysicalMaterialImpactEffects* ImpactEffects );
	class UParticleSystem* GetImpactEffect ( class UPhysicalMaterial* PhysMat );
	void SpawnImpactEffects ( struct FImpactInfo Impact );
	void ReplicateImpact ( class ABioPawn* ImpactedPawn, class ASFXProjectile* InProjectile, float fDelay );
	void ClientDoImpact ( class ABioPawn* InImpactedPawn );
	void ProcessInstantHit_Internal ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits );
	void ProcessInstantHitNearMiss ( struct FVector StartTrace, struct FVector HitLocation );
	void ServerProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int HitArmourIdx, unsigned long bSuppressedAudio, int NumHits );
	void ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits );
	struct FImpactInfo CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList );
	void InstantFire ( );
	int GetAmmoCountInMagazine ( );
	float GetLazyFireInterval ( unsigned char FireModeNum );
	float GetFireInterval ( unsigned char FireModeNum );
	bool HasAnyAmmo ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	bool HasSpareAmmo ( );
	int AddAmmo ( int Amount );
	void ConsumeAmmo ( unsigned char FireModeNum );
	void InitializeAmmo ( );
	unsigned char GetWeaponFireType ( );
	float GetZoomFOV ( );
	bool GetModifiedFOV ( float* FOV );
	struct FVector GetMuzzleLoc ( );
	void SetWeaponRecoil ( float PitchRecoil );
	void ServerSetIsZoomed ( unsigned long bState );
	void SetRTPCPlayerPosition ( unsigned char NewPlayerPosition );
	void SetZoomed ( unsigned long bState );
	float GetAIAimDelay ( );
	float GetPlayerAimError ( float Accuracy );
	struct FRotator GetAdjustedAim ( struct FVector StartFireLoc );
	float GetRateOfFire ( );
	float GetTraceRange ( );
	struct FVector2D GetWeaponAimErrorRange ( );
	float GetWeaponRecoil ( );
	void ResetAmmoOnHolster ( );
	int GetMaxTotalAmmo ( );
	int GetCurrentTotalAmmo ( );
	int GetCurrentSpareAmmo ( );
	int GetMaxSpareAmmo ( unsigned long bIgnoreCurrentMag );
	int GetMagazineSize ( );
	bool OutOfAmmo ( );
	class UClass* GetDamageType ( unsigned char FiringMode );
	void CalculateBonus ( struct FVector HitLocation, class AActor* HitActor, struct FDamageCalculationAlgorithm* DamageCalc );
	float GetFireModeBaseDamage ( );
	void NotifyUnpossessed ( );
	bool UseFirstPersonCamera ( );
	void GetProjectileFirePosition ( struct FVector* out_ProjLoc, struct FVector* out_ProjDir );
	struct FVector GetPhysicalFireStartLoc ( struct FVector AimDir );
	void OnClientProjectileSpawned ( class ASFXProjectile* NewProjectile );
	class AProjectile* Internal_ProjectileFire ( );
	void ServerProjectileFire ( class AActor* Target, struct FVector ProjLocation, struct FVector ProjDirection );
	class AProjectile* ProjectileFire ( );
	void ForceEndFire ( );
	void InitDefaultDecalProperties ( );
	void ScaleWeapon ( );
	void CacheAnimNodes ( );
	void PostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void InitializeWeapon ( );
	void DeferredPostBeginPlay ( );
	void PostBeginPlay ( );
	void FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication );
	void CharacterSlotUpdated ( );
	void eventReplicatedEvent ( struct FName VarName );
	void OnWeaponUnequip ( class ASFXWeapon* Weapon );
	void OnWeaponEquip ( class ASFXWeapon* Weapon );
	void OnWeaponReload ( class ASFXWeapon* Weapon );
	float GetDamageVocProbabilityMod ( );
	void OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact );
};

UClass* ASFXWeapon_Pistol_Base::pClassPointer = NULL;

// Class SFXGame.SFXWeapon_SMG_Base
// 0x0000 (0x0DD2 - 0x0DD2)
class ASFXWeapon_SMG_Base : public ASFXWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46718 ];

		return pClassPointer;
	};

	void GiveWeaponCodex ( );
	void ClearFizzleCount ( );
	void IncrementFizzleCount ( );
	bool IsClientReadyToInitialize ( );
	void UnsubscribeFromImpactNotifications ( struct FScriptDelegate Callback );
	void SubscribeToImpactNotifications ( struct FScriptDelegate Callback );
	float eventGetPenetrationDepth ( );
	class UClass* LoadWeaponClass ( struct FString WeaponClassName );
	class UClass* FindWeaponClass ( struct FString WeaponClassName );
	unsigned char GetStoreQualification ( );
	void SetWeaponHidden ( unsigned long bWeaponHidden );
	void GetWeaponStatBarValues ( unsigned char StatBar, float* WeaponValue );
	bool eventHasLoopingFire ( );
	void ClearFlashLocation ( );
	void SetFlashLocation ( struct FVector HitLocation );
	void ApplyDefaultWeaponMods ( unsigned long bClearOldMods );
	void SetWeaponModBodyColour ( int ModLevel );
	void SetWeaponModGripColour ( int ModLevel );
	void SetWeaponModEmissiveValue ( int ModLevel );
	void ClearWeaponModMaterialParameters ( );
	void RestoreFlashlightToNormal ( );
	void DelayedRestoreFlashlightToNormal ( );
	void SetFlashlightFireMode ( );
	void DetachFlashlight ( );
	void AttachFlashlight ( );
	bool IsWeaponAlreadyAwarded ( class UClass* WeaponClass );
	bool IsWeaponUnlocked ( class UClass* WeaponClass );
	bool Upgrade ( class ASFXPawn_Player* Player, class UClass* WeaponClass, unsigned long bNoNotification, unsigned long bIsMultiplayer, unsigned long bDoesNotCountasNGPFound, unsigned long bUnlockOnly );
	bool IsAnimTypeSniper ( );
	bool IsAnimTypeShotgun ( );
	bool IsAnimTypePistol ( );
	float eventGetReactionChanceModifier ( );
	void ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void eventCleanUpDummyFire ( );
	void eventWeaponStoppedFiring ( unsigned char FiringMode );
	void eventDummyFire ( unsigned char FireModeNum, struct FVector TargetLoc, class AActor* AttachedTo, float AimErrorDeg, class AActor* TargetActor );
	float GetInitialDummyFireDelay ( );
	void BeginDummyFire ( unsigned char FiringMode, class AActor* AttachedTo );
	void WeaponFired ( unsigned char FiringMode, unsigned long bViaReplication, struct FVector HitLocation );
	class AProjectile* eventProjectileFireSimple ( float AimErrorDeg );
	void CalcRemoteImpactEffects ( unsigned char FireModeNum, struct FVector GivenHitLocation, unsigned long bViaReplication );
	bool eventCalculateCoverLeanOutOffset ( unsigned char Direction, unsigned char Type, struct FVector* Offset );
	struct FString GetGeneralDescription ( );
	struct FString GetShortDescription ( );
	struct FString GetPrettyName ( int Level );
	void GetWeaponDebug ( TArray< struct FString >* DebugInfo );
	void DrawDebugShot ( struct FVector StartLocation, struct FVector EndLocation );
	void SetAmmoPowerHologramEnabled ( unsigned long bEnabled, unsigned long bForceEnabled );
	void SetAmmoPowerHologramTemplates ( class UParticleSystem* Template, class UParticleSystem* IconTemplate );
	void eventDestroyed ( );
	void HolderDied ( );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
	void ClientWeaponThrown ( );
	bool CanThrow ( );
	void DetachWeapon ( );
	void AttachMuzzleEffectsComponents ( class USkeletalMeshComponent* SkelMesh, struct FName MuzzleSocket, struct FName CasingSocket );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	void Internal_AssignToSlot ( );
	void AssignToSlot ( unsigned char Slot );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	void EquipTimedOut ( );
	void EquipFinished ( );
	void EquipNearFinished ( );
	void Collapse ( );
	void Expand ( );
	void StopChargeEffects ( );
	void ShutOffAllEmitters ( );
	void UnEquipTimedOut ( );
	void UnEquipFinished ( );
	void ServerCancelReload ( );
	void CancelReload ( );
	void DoAReload ( );
	void ReloadNearFinished ( );
	void NotifyWeaponRefireDelayExpired ( );
	void NotifyWeaponFired ( unsigned char FireMode );
	void HandleFinishedFiring ( );
	bool ShouldRefire ( );
	int GetBurstsToFire ( );
	int GetBurstFireCount ( );
	void SetupWeaponFire ( unsigned char FireModeNum );
	void ServerStopFire ( unsigned char FireModeNum );
	void EndFire ( unsigned char FireModeNum );
	class AActor* SelectTarget ( );
	void StartFire ( unsigned char FireModeNum );
	bool CanFire ( );
	void StartFullChargeRumble ( );
	void StartChargeEffects ( );
	bool IsChargingWeapon ( );
	void ServerFireChargedShot ( float SentChargeAmount );
	void PlayNoAmmoFireSound ( );
	void PlayNoAmmoEffects ( );
	void TryReload ( unsigned long bDisplayHint );
	void DoReload ( );
	int GetAmmoRestoredPerReload ( );
	float GetReloadDuration ( );
	bool ShouldAutoReload ( );
	bool CanReload ( );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	void PlayReloadEject ( );
	void StopFireEffects ( unsigned char FireModeNum );
	void HearNoiseTimer ( );
	void WeaponPlayWwiseEvent ( class UWwiseEvent* Sound, float NoiseLoudness, struct FVector SoundLoc, struct FName NoiseType );
	void SpawnTracerEffect ( struct FVector HitLocation, float HitDistance );
	bool ShouldSpawnTracerFX ( );
	void PlayOwnedFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void HideReloadEmitters ( );
	void HideMuzzleFlashEmitter ( );
	void StopMuzzleFlashEffect ( );
	bool IsCameraWithinRadius ( struct FVector TestLocation, float Radius );
	bool IsMuzzleFlashRelevant ( );
	void PlayMuzzleFlashEffect ( );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void DummyFireTimerFunction ( );
	void DummyFireNumTimes ( int nNumTimes, struct FVector vHitLocation, class AActor* AttachedTo, float fInaccuracy, class AActor* TargetActor );
	void CheckTimerFireOnce ( );
	void PlayFireEffectsOnce ( struct FVector HitLocation );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	class UDecalComponent* GetWeaponSpecificDecalData ( class USFXPhysicalMaterialDecals* DecalEffects, float* FadeTime );
	class UDecalComponent* GetDecalData ( class UPhysicalMaterial* PhysMat, float* FadeTime );
	void SpawnADecal ( struct FImpactInfo Impact );
	class UWwiseEvent* GetWeaponSpecificImpactSound ( class USFXPhysicalMaterialImpactSounds* ImpactSounds );
	class UWwiseEvent* GetImpactSound ( class UPhysicalMaterial* PhysMat );
	void SpawnImpactSounds ( struct FImpactInfo Impact );
	class UParticleSystem* GetWeaponSpecificImpactEffect ( class USFXPhysicalMaterialImpactEffects* ImpactEffects );
	class UParticleSystem* GetImpactEffect ( class UPhysicalMaterial* PhysMat );
	void SpawnImpactEffects ( struct FImpactInfo Impact );
	void ReplicateImpact ( class ABioPawn* ImpactedPawn, class ASFXProjectile* InProjectile, float fDelay );
	void ClientDoImpact ( class ABioPawn* InImpactedPawn );
	void ProcessInstantHit_Internal ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits );
	void ProcessInstantHitNearMiss ( struct FVector StartTrace, struct FVector HitLocation );
	void ServerProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int HitArmourIdx, unsigned long bSuppressedAudio, int NumHits );
	void ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits );
	struct FImpactInfo CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList );
	void InstantFire ( );
	int GetAmmoCountInMagazine ( );
	float GetLazyFireInterval ( unsigned char FireModeNum );
	float GetFireInterval ( unsigned char FireModeNum );
	bool HasAnyAmmo ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	bool HasSpareAmmo ( );
	int AddAmmo ( int Amount );
	void ConsumeAmmo ( unsigned char FireModeNum );
	void InitializeAmmo ( );
	unsigned char GetWeaponFireType ( );
	float GetZoomFOV ( );
	bool GetModifiedFOV ( float* FOV );
	struct FVector GetMuzzleLoc ( );
	void SetWeaponRecoil ( float PitchRecoil );
	void ServerSetIsZoomed ( unsigned long bState );
	void SetRTPCPlayerPosition ( unsigned char NewPlayerPosition );
	void SetZoomed ( unsigned long bState );
	float GetAIAimDelay ( );
	float GetPlayerAimError ( float Accuracy );
	struct FRotator GetAdjustedAim ( struct FVector StartFireLoc );
	float GetRateOfFire ( );
	float GetTraceRange ( );
	struct FVector2D GetWeaponAimErrorRange ( );
	float GetWeaponRecoil ( );
	void ResetAmmoOnHolster ( );
	int GetMaxTotalAmmo ( );
	int GetCurrentTotalAmmo ( );
	int GetCurrentSpareAmmo ( );
	int GetMaxSpareAmmo ( unsigned long bIgnoreCurrentMag );
	int GetMagazineSize ( );
	bool OutOfAmmo ( );
	class UClass* GetDamageType ( unsigned char FiringMode );
	void CalculateBonus ( struct FVector HitLocation, class AActor* HitActor, struct FDamageCalculationAlgorithm* DamageCalc );
	float GetFireModeBaseDamage ( );
	void NotifyUnpossessed ( );
	bool UseFirstPersonCamera ( );
	void GetProjectileFirePosition ( struct FVector* out_ProjLoc, struct FVector* out_ProjDir );
	struct FVector GetPhysicalFireStartLoc ( struct FVector AimDir );
	void OnClientProjectileSpawned ( class ASFXProjectile* NewProjectile );
	class AProjectile* Internal_ProjectileFire ( );
	void ServerProjectileFire ( class AActor* Target, struct FVector ProjLocation, struct FVector ProjDirection );
	class AProjectile* ProjectileFire ( );
	void ForceEndFire ( );
	void InitDefaultDecalProperties ( );
	void ScaleWeapon ( );
	void CacheAnimNodes ( );
	void PostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void InitializeWeapon ( );
	void DeferredPostBeginPlay ( );
	void PostBeginPlay ( );
	void FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication );
	void CharacterSlotUpdated ( );
	void eventReplicatedEvent ( struct FName VarName );
	void OnWeaponUnequip ( class ASFXWeapon* Weapon );
	void OnWeaponEquip ( class ASFXWeapon* Weapon );
	void OnWeaponReload ( class ASFXWeapon* Weapon );
	float GetDamageVocProbabilityMod ( );
	void OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact );
};

UClass* ASFXWeapon_SMG_Base::pClassPointer = NULL;

// Class SFXGame.SFXWeapon_SniperRifle_Base
// 0x007A (0x0E4C - 0x0DD2)
class ASFXWeapon_SniperRifle_Base : public ASFXWeapon
{
public:
	struct FScaledFloat                                ZoomTimeDilation;                                 		// 0x0DD4 (0x0024) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                ZoomTimeDilationDuration;                         		// 0x0DF8 (0x0024) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                OwnerTimeDilationCounterScale;                    		// 0x0E1C (0x0024) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UWwiseEvent*                                 ActivateSniperZoomWwiseEvent;                     		// 0x0E40 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 DeActivateSniperZoomWwiseEvent;                   		// 0x0E44 (0x0004) [0x0000000000000000]              
	float                                              SniperRifleDamagePenalty;                         		// 0x0E48 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46719 ];

		return pClassPointer;
	};

	float GetFireModeBaseDamage ( );
	unsigned char GetStoreQualification ( );
	void SetZoomed ( unsigned long bState );
	class UWwiseEvent* GetWeaponSpecificImpactSound ( class USFXPhysicalMaterialImpactSounds* ImpactSounds );
	class UParticleSystem* GetWeaponSpecificImpactEffect ( class USFXPhysicalMaterialImpactEffects* ImpactEffects );
	class UDecalComponent* GetWeaponSpecificDecalData ( class USFXPhysicalMaterialDecals* DecalEffects, float* FadeTime );
	void ScaleWeapon ( );
};

UClass* ASFXWeapon_SniperRifle_Base::pClassPointer = NULL;

// Class SFXGame.SFXModule_QAModule
// 0x0028 (0x0070 - 0x0048)
class USFXModule_QAModule : public USFXModule
{
public:
	struct FString                                     barkName;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UWwiseEvent*                                 m_nextBark;                                       		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              m_fBarkDelay;                                     		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                AIBarkI;                                          		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                AIBarkJ;                                          		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                AIBarkK;                                          		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                AIBarkVar;                                        		// 0x0068 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDoneCombatBarks : 1;                             		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDoneExploreBarks : 1;                            		// 0x006C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDoneStealthBarks : 1;                            		// 0x006C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDoneCombatVarBarks : 1;                          		// 0x006C (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46808 ];

		return pClassPointer;
	};

	void Tick ( float TimeDelta );
	void eventHandlePostBeginPlay ( );
	class UWwiseEvent* GetNextAIBark ( );
	class UWwiseEvent* GetNextCombatVariantBark ( class ABioPawn* pPawn );
	class UWwiseEvent* GetNextStealthBark ( class ABioPawn* pPawn );
	class UWwiseEvent* GetNextExploreBark ( class ABioPawn* pPawn );
	class UWwiseEvent* GetNextCombatBark ( class ABioPawn* pPawn );
};

UClass* USFXModule_QAModule::pClassPointer = NULL;

// Class SFXGame.SFXMPEventTicker
// 0x000C (0x0048 - 0x003C)
class USFXMPEventTicker : public UObject
{
public:
	TArray< struct FString >                           Events;                                           		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47185 ];

		return pClassPointer;
	};

	void ClearTicker ( );
	void AddTickerEntry ( struct FString Text );
};

UClass* USFXMPEventTicker::pClassPointer = NULL;

// Class SFXGame.sfxgui_weaponselection
// 0x0109 (0x036A - 0x0261)
class Usfxgui_weaponselection : public USFXGUIMovie
{
public:
	TArray< int >                                      TeamSelectPawns;                                  		// 0x0264 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      CurrentInventoryWeapons;                          		// 0x0270 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             EntryWeaponNames;                                 		// 0x027C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     WeaponActionMethod;                               		// 0x0288 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FWeaponStatesToKeep >               SavedWeaponStates;                                		// 0x0294 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFXWeaponUIPawnPositioning >       AppearancePositions;                              		// 0x02A0 (0x000C) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	int                                                CurrentLoadoutWeapons[ 0x6 ];                     		// 0x02AC (0x0018) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    BaseRotationOffset;                               		// 0x02C4 (0x000C) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	struct FVector                                     BasePositionOffset;                               		// 0x02D0 (0x000C) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	struct FRotator                                    InitialRotation;                                  		// 0x02DC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     InitialPosition;                                  		// 0x02E8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	void*                                              WeaponLoadoutTitle;                               		// 0x02F4 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              ChangeWeaponButtonText;                           		// 0x02F8 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              SelectWeaponButtonText;                           		// 0x02FC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              ExitButtonText;                                   		// 0x0300 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              ReturnToLoadoutText;                              		// 0x0304 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              ModifyWeaponText;                                 		// 0x0308 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              EmptyModSlotText;                                 		// 0x030C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              LoadingDataText;                                  		// 0x0310 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              EmptySlotText;                                    		// 0x0314 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              EncumbranceText;                                  		// 0x0318 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              EncumbranceTitle;                                 		// 0x031C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              DiscardWeaponMessageText;                         		// 0x0320 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              CancelDiscardWeaponButtonText;                    		// 0x0324 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              MinimumWeaponCountRequirementMessage;             		// 0x0328 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              MinimumWeaponCountRequirementPluralMessage;       		// 0x032C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              MinimumWeaponCountAwknowledgementButtonText;      		// 0x0330 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              StatsButtonText;                                  		// 0x0334 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              DescriptionButtonText;                            		// 0x0338 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              WeaponModTitle;                                   		// 0x033C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              InstructionText;                                  		// 0x0340 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              EquipButtonText;                                  		// 0x0344 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                CurrentlySelectedLoadoutWeapon;                   		// 0x0348 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentlySelectedSelectionWeapon;                 		// 0x034C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentPawnID;                                    		// 0x0350 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              WeaponActionText;                                 		// 0x0354 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinDisplayBonus;                                  		// 0x0358 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                nMinimumRequiredWeapons;                          		// 0x035C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXWeaponUIDataManager*                     DataManager;                                      		// 0x0360 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      ShowAllWeapons : 1;                               		// 0x0364 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      AutoEquipWhenDone : 1;                            		// 0x0364 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      InWeaponSelection : 1;                            		// 0x0364 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      LoadoutLoaded : 1;                                		// 0x0364 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      LaunchOnStart : 1;                                		// 0x0364 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bWasPaused : 1;                                   		// 0x0364 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bSwitchingHenchmen : 1;                           		// 0x0364 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned char                                      CurrentLoadoutWeaponType;                         		// 0x0368 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      EntryWeaponGroup;                                 		// 0x0369 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47197 ];

		return pClassPointer;
	};

	void AS_SetCurrentNameText ( struct FString sName );
	void AS_TeamSetHenchman ( int nIndex, struct FString sName, struct FString sIconResource );
	void AS_TeamSetVisible ( unsigned long bVisible );
	void AS_SetModDisplay ( int nDisplay, struct FString sName, struct FString sImgPath );
	void AS_AddWeaponStat ( struct FString sName, float fValue, float fBonus, float fCompare );
	void AS_ClearWeaponStatsDisplay ( );
	void AS_SelectWeaponSlot ( int nSlotID );
	void AS_PerformPlayerWeaponAction ( unsigned long bAccept );
	void AS_ScrollInfoText ( float fScroll );
	void AS_SetSlotNewIcon ( int nSlot, unsigned long bHasNew );
	void AS_SetWeaponAction ( struct FString sButtonText, struct FString sCallbackMethodName );
	void AS_SetInventoryWeapon ( struct FString sName, struct FString sDesc, struct FString sIconResource, unsigned long bNew, int nNum, int nTotal, unsigned long bFlourish, struct FString sClassPath );
	void AS_SetWeightDisplay ( int nPercent, int nComparePct, struct FString sBarLabel, struct FString sInfo );
	void AS_SetWeaponInfoDisplay ( struct FString sWeaponName, struct FString sWeaponDescription, struct FString sCategory, struct FString sWeaponImage );
	void AS_SetWeaponSlot ( int nSlotID, int nWeaponID, struct FString sWeaponIconResource, int nWeaponIconIndex, int nNumOtherWeapons, unsigned long bHaveNewWeapons, int nCategory, unsigned long bValid, unsigned long bHasModsAvailable );
	void AS_SetLoading ( unsigned long bLoading, struct FString sText );
	void AS_SetVisible ( unsigned long bVisible );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void PlayerDiscardWeaponCallback ( class UBioSFHandler_MessageBox* oMsgBox, int nChoiceID, unsigned long bCancelled );
	void PromptPlayerToDiscardMPWeapon ( int nWeapCategory );
	bool CheckCanEquipWeapon ( int nWeapCategory );
	bool CheckCanSelectWeapon ( int nWeapCategory );
	void UpdateWeaponEncumbranceDisplay ( );
	void UpdateCurrentLoadoutWeaponDisplay ( );
	void SelectNextHenchman ( );
	void SelectPreviousHenchman ( );
	void WeaponSelectionItemChanged ( );
	void WeaponLoadoutItemChanged ( int nID, int nCategory );
	void SwitchToWeaponLoadout ( );
	void UndoWeaponSelection ( );
	void SelectPrevWeapon ( );
	void SelectNextWeapon ( );
	void DisplayCurrentWeaponSelection ( unsigned long bFlourish );
	void SwitchToWeaponSelection ( int nWeaponType );
	void MainMovieLoaded ( );
	void SetWeaponInfoDisplay ( int nWeaponIndex, int nCategory );
	void SetWeaponModsDisplay ( int nWeapIndex );
	void SetWeaponStatsDisplay ( int nWeapIndex );
	void RestorePowerBonuses ( );
	void MakeLoadoutsActive ( );
	void ApplyWeaponLoadout ( );
	void ShowMinimumRequiredWeaponsMessage ( );
	void Exit ( );
	int CountCurrentPawnWeapons ( );
	bool CurrentPawnHasWeapon ( );
	struct FName GetCurrentHenchTag ( );
	class ABioPawn* GetBioPawn ( int nPawnID );
	bool CanPawnUseWeaponGroup ( int nPawnID, unsigned char eWeaponGroupID );
	int WeaponTypeToSlotIndex ( unsigned char eWeaponType );
	void RefreshLoadoutWeaponDisplay ( unsigned char eWeaponType );
	void BuildWeaponLoadout ( int nPawnID );
	void UpdateUIWorldPawnPosition ( );
	void CleanupUIWorld ( );
	void ApplyPlayerPawnCustomization ( class UObject* InData );
	void SetupUIWorld ( );
	void UpdateHenchmenDisplay ( );
	void SetCurrentPawnID ( int nID );
	void OnWeaponUIDataLoaded ( );
	void InitializeTeamSelectOverlay ( );
	void PreLoadData ( struct FScriptDelegate doneCallback );
	void Launch ( unsigned long bPauseGame );
	bool IsMultiPlayerCharacter ( );
	void DisplayNoEngineMessage ( );
	void eventOnClose ( );
	void eventOnStart ( );
};

UClass* Usfxgui_weaponselection::pClassPointer = NULL;

// Class SFXGame.SFXTreasureData
// 0x0018 (0x0054 - 0x003C)
class USFXTreasureData : public UObject
{
public:
	TArray< struct FTD >                               LevelTreasure;                                    		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FArmorTreasureData >                ArmorTreasure;                                    		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47400 ];

		return pClassPointer;
	};

	void GetArmorTreasure ( TArray< struct FArmorTreasureData >* OutArmorTreasure );
	bool IsArmorUnlocked ( unsigned char Armor );
	bool IsTreasureUnlocked ( struct FString TREASURE, struct FString Level );
	bool HasConditionalGAWAsset ( struct FString TREASURE, struct FString Level );
	bool HasTreasure ( struct FString TREASURE, struct FString Level );
	bool GetLevelData ( struct FString Level, struct FTD* tData );
	struct FName CurrentLevel ( );
};

UClass* USFXTreasureData::pClassPointer = NULL;

// Class SFXGame.biocheatmanagernonnative
// 0x005B (0x0164 - 0x0109)
class Ubiocheatmanagernonnative : public UBioCheatManager
{
public:
	struct FString                                     sTreasureLevelOverride;                           		// 0x010C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSetupMissionData >                 SetupMissionArray;                                		// 0x0118 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSetupModifierData >                SetupModifierArray;                               		// 0x0124 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             ReplicationTestNames;                             		// 0x0130 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           ReplicationTestNameStrings;                       		// 0x013C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     AutoBotAIControllerName;                          		// 0x0148 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class Usfxscoremanager*                            LastScoreManager;                                 		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      MPBotsUsedLast;                                   		// 0x0158 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    MPBotsUsedLastPawn;                               		// 0x015C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDebugScore : 1;                                  		// 0x0160 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      MPBotsIgnoreHostInternal : 1;                     		// 0x0160 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bDebugHeadLOD : 1;                                		// 0x0160 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47465 ];

		return pClassPointer;
	};

	void SpawnSeeker ( struct FString TargetName );
	void CollectorPossess ( struct FString TargetName );
	void SetPlotState ( struct FString DataType, int Id, struct FString Value );
	void GetPlotState ( struct FString DataType, int Id );
	void ResetMPTutorialMessage ( );
	void ToggleDebugMPPlayerVariables ( );
	void OutputMultiplayerAssetStrength ( TArray< int > updatedSecurityRatings, TArray< int > updatedWarAssets, int Level, int errorCode );
	void GetMultiplayerAssetStrength ( );
	void TickMultiplayerAsset ( );
	void SetWeaponLevels ( int Level );
	void DebugBlockingSeekFree ( unsigned long DoDebug );
	void ResetMPData ( );
	void UnlockAllMPKits ( );
	void ToggleFullGuiSoundLogging ( );
	void UnlockArmorPiece ( unsigned char ArmorPiece );
	void UnlockAllBonusPowers ( );
	void GiveBonusPower ( struct FString BonusPowerClassName );
	void SetModLevel ( struct FString ModClassName, int nLevel );
	void DebugDraw_Distance ( class ABioHUD* HUD );
	void DebugDistance ( );
	void ForceLOD ( struct FString Target, int LOD );
	void DebugDraw_LOD ( class ABioHUD* HUD );
	void DebugLOD ( unsigned long bShowHeadLOD );
	void DebugDraw_Projectile ( class ABioHUD* HUD );
	void DebugProjectile ( );
	void UpgradeExternalAssetCallback ( TArray< int > updatedSecurityRatings, TArray< int > updatedWarAssets, int Level, int errorCode );
	void UpgradeExternalAsset ( int AssetID );
	void EndGameChoices ( TArray< unsigned char > Options );
	void SetEndGameOptions ( unsigned long bBrain );
	void GAWAuthenticateCompleted ( TArray< int > updatedSecurityRatings, TArray< int > updatedWarAssets, int Level, int errorCode );
	void AuthenticateGAWServer ( );
	void UpgradeWeapon ( struct FString WeaponClassStr, int Count );
	void WeaponSelection ( );
	class AWeapon* GiveWeapon ( struct FString WeaponClassStr );
	void DeleteModSaveData ( );
	void SetLanguageForSpeech ( struct FString Language, unsigned long UpdateProfile );
	void SetLanguageForText ( struct FString Language, unsigned long UpdateProfile );
	void SetLanguageForVO ( struct FString Language, unsigned long UpdateProfile );
	void MPBotsLevelUp ( class Asfxpawn* inPawn, int Level );
	void MPBotsDisableTick ( class ABioPawn* P );
	class ABioPawn* MPBotsGetUsedLastPawn ( );
	void MPBotsClearUsedLast ( );
	void MPBotsUse ( class ABioPawn* P, class AActor* Objective );
	void BotsSuperGun ( );
	void MPBotsInternal ( unsigned long bEnable );
	void MPBots ( unsigned long bEnable, unsigned long bIgnoreHost );
	void DebugScore ( );
	void SetPlayerVariable ( struct FString PlayerVariable, int Value );
	void ListPlayerVariables ( struct FString sSearchString );
	void ProfileTreasure ( );
	void DebugTreasure ( struct FString LevelName );
	void DebugAllLevels ( );
	void FastResumeGame ( );
	void IncreaseGalaxyAtWarRating ( int defaultRatingIncrease, int ZoneID, int zoneRating, int zoneAsset );
	void BlazeDisconnect ( );
	void SimulateHostDisconnect ( );
	void SetMMBotOptions ( unsigned long withDisconnections, unsigned long fastForward );
	void ValidateMatchMakingStates ( unsigned long writeToFile );
	void ToggleSkynetSaves ( );
	void TestNameReplicationResponse ( struct FName InName, struct FString InConfirmString );
	void CallRemoteTestNameReplication ( struct FName InName, struct FString InConfirmString );
	void TestNameReplication ( );
	void DebugText ( struct FString S, int Duration, int Index );
	void ShowNavSightLines ( struct FName NavName );
	void CreateCareer ( struct FString firstName );
	void ToggleQASaveLibrary ( );
	void ResetMPCharacter ( struct FString KitName, unsigned long RetainCustomization );
	void ResetMPClass ( struct FString className, unsigned long RetainCustomization );
	void GrantMPCredits ( int nCredits );
	void GrantMPExperience ( struct FString className, float fXP );
	void AT ( struct FName newArea, struct FName StartPoint );
	void SetMission ( struct FName Command, unsigned long NoTP );
	void AutoLevelUp ( struct FName Command );
	void SetupModifier ( class UBioGlobalVariableTable* gv, struct FName Command );
	void SetupMission ( class UBioGlobalVariableTable* gv, struct FName Command, unsigned long NoTP );
	void SetupPlayer ( );
};

UClass* Ubiocheatmanagernonnative::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_AutoLevelPlayer
// 0x0014 (0x00C4 - 0x00B0)
class USFXSeqAct_AutoLevelPlayer : public USequenceAction
{
public:
	TArray< struct FMissionScore >                     MissionScores;                                    		// 0x00B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                FullGameExperience;                               		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SideContentXP;                                    		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47540 ];

		return pClassPointer;
	};

	void AutoLevelUpPlot ( );
	void Activated ( );
};

UClass* USFXSeqAct_AutoLevelPlayer::pClassPointer = NULL;

// Class SFXGame.sfxscoremanager
// 0x00C8 (0x0104 - 0x003C)
class Usfxscoremanager : public UObject
{
public:
	TArray< struct FDifficultyScoreMultiplier >        DifficultyScoreMultipliers;                       		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCreditBudget >                     CreditBudgets;                                    		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FXPBonus >                          FactionBonuses;                                   		// 0x0054 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FXPBonus >                          MapBonuses;                                       		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FPlayerMedalRecord >                PlayerMedalRecords;                               		// 0x006C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      SquadMedalRecords;                                		// 0x0078 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMedalDefinition >                  PlayerMedalDefinitions;                           		// 0x0084 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FMedalDefinition >                  SquadMedalDefinitions;                            		// 0x0090 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      ExtractedPlayerIDs;                               		// 0x009C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              KillTimeStamps[ 0x5 ];                            		// 0x00A8 (0x0014) [0x0000000000002000]              ( CPF_Transient )
	float                                              ScoreMultiplier;                                  		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	class ABioWorldInfo*                               BioWorldInfo;                                     		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EnemyScoreBudget;                                 		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TotalEnemyScoreRewarded;                          		// 0x00C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ObjectiveCreditBudget;                            		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ObjectiveScoreBudget;                             		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ObjectiveScoreRewarded;                           		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              srKillScoreTag;                                   		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srAssistScoreTag;                                 		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srObjectiveScoreTag;                              		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ScorePerExtractedPlayer;                          		// 0x00E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              KillstreakMedalWindow;                            		// 0x00E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srCreditsEarned;                                  		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srBonusCreditsEarned;                             		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srExtractionCreditsEarned;                        		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                LastCreditsEarned;                                		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastBonusCreditsEarned;                           		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bPlayerDownedInWave : 1;                          		// 0x0100 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47931 ];

		return pClassPointer;
	};

	void ShowExtractionCreditsEarnedMessage ( class Asfxplayercontroller* PC, float Credits );
	void ShowBonusCreditsEarnedMessage ( );
	void ShowCreditsEarnedMessage ( );
	void UpdateKillStreakTracking ( class ASFXPawn_Player* PlayerPawn );
	void ProcessKill ( class APawn* Killed, float Damage, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, unsigned long HeadShot );
	void IncrementMedalStanding ( class ASFXPawn_Player* PlayerPawn, unsigned char MedalType, int Inc );
	void ClearSquadMedalStanding ( unsigned char MedalType );
	void DisplayScoreTag ( class ASFXPawn_Player* Player, float Amount, unsigned char Type );
	void PlayersExtracted ( TArray< class ASFXPawn_Player* > ExtractedPlayers );
	float AddCredits ( class ASFXPawn_Player* PlayerPawn, float Amount, unsigned long RoundToMultipleOf25 );
	float AddScore ( class ASFXPawn_Player* PlayerPawn, float Amount, unsigned char Type );
	float GetFinalCreditsMultiplier ( );
	float GetFinalScoreMultiplier ( );
	float GetBaseScoreMultiplier ( );
	void WaveCompleted ( );
	float GetBonus ( TArray< struct FXPBonus > Bonuses, int Id, unsigned long GetXP );
	float GetMapBonus ( int Id, unsigned long GetXP );
	float GetFactionBonus ( int Id, unsigned long GetXP );
	void NewWaveStarted ( );
	void PlayerDown ( );
	bool Init ( );
};

UClass* Usfxscoremanager::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_BioToggleCinematicMode
// 0x0010 (0x00C4 - 0x00B4)
class UBioSeqAct_BioToggleCinematicMode : public USeqAct_ToggleCinematicMode
{
public:
	struct FString                                     sSkipEvent;                                       		// 0x00B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bCinematicInputMode : 1;                          		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableCinematicSkip : 1;                        		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bSupportsPlayerHelmet : 1;                      		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bSupportsPlayerFace : 1;                        		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48152 ];

		return pClassPointer;
	};

	void ToggleCineMode ( );
	void Activated ( );
};

UClass* UBioSeqAct_BioToggleCinematicMode::pClassPointer = NULL;

// Class SFXGame.BioConvNodeTrackDebugInst
// 0x0000 (0x0040 - 0x0040)
class UBioConvNodeTrackDebugInst : public USFXGameInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48301 ];

		return pClassPointer;
	};

};

UClass* UBioConvNodeTrackDebugInst::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_DamageTakenBonus
// 0x0000 (0x0062 - 0x0062)
class USFXGameEffect_DamageTakenBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48359 ];

		return pClassPointer;
	};

	class AController* CheckOwnerInstigator ( class AController* Attacker );
	void SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	class UClass* LoadGameEffectClass ( struct FString GEClassName );
	void OnUnpaused ( );
	void OnPaused ( );
	void OnCombatEnd ( );
	void eventOnRemoved ( );
	void eventOnUpdate ( float DeltaSeconds );
	void OnApplied ( );
	void ComputeCustomEffectValue ( float* Value );
};

UClass* USFXGameEffect_DamageTakenBonus::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_Interpolate
// 0x0055 (0x0141 - 0x00EC)
class USFXCameraMode_Interpolate : public USFXCameraMode
{
public:
	struct FInterpCurveFloat                           Curve;                                            		// 0x00EC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     AimPoint;                                         		// 0x00FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationOffset;                                   		// 0x0108 (0x000C) [0x0000000000000000]              
	struct FVector                                     LocationOffset;                                   		// 0x0114 (0x000C) [0x0000000000000000]              
	float                                              TotalTime;                                        		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentTime;                                      		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXCameraMode*                              From;                                             		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXCameraMode*                              To;                                               		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultTime;                                      		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimPointDistance;                                 		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinAimPointPreservationDistance;                  		// 0x0138 (0x0004) [0x0000000000000000]              
	unsigned long                                      bComplete : 1;                                    		// 0x013C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableAimPointPreservation : 1;                 		// 0x013C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      InterpMethod;                                     		// 0x0140 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48462 ];

		return pClassPointer;
	};

	void DrawHUD ( class UBioCheatManager* M );
	struct FRotator GetCurrentShake ( );
	void Tick ( float TimeDelta );
	bool GetActorCameraHook ( struct FVector* OutLocation );
	void Trace ( class AActor** HitActor, struct FVector* HitLocation );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
	bool CheckLoop ( class USFXCameraMode* mode, int RecurseLevel );
	float Interpolate ( float T );
};

UClass* USFXCameraMode_Interpolate::pClassPointer = NULL;

// Class SFXGame.SFXCameraTransition_FaceTarget
// 0x0027 (0x0168 - 0x0141)
class USFXCameraTransition_FaceTarget : public USFXCameraMode_Interpolate
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x0144 (0x000C) [0x0000000000000000]              
	struct FRotator                                    StartRotation;                                    		// 0x0150 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartLocation;                                    		// 0x015C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48461 ];

		return pClassPointer;
	};

	void Tick ( float TimeDelta );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
};

UClass* USFXCameraTransition_FaceTarget::pClassPointer = NULL;

// Class SFXGame.SFXModule_Timeline
// 0x0024 (0x006C - 0x0048)
class USFXModule_Timeline : public USFXModule
{
public:
	TArray< class USFXTimelineData* >                  Timelines;                                        		// 0x0048 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __AOEEvalFunc__Delegate;                          		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __InputHandler__Delegate;                         		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48498 ];

		return pClassPointer;
	};

	void CleanupTimeline ( class USFXTimelineData* Data );
	void ApplyTimelineEffect ( class USFXTimelineData* Data, int idx );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects, class USFXTimelineData* Data );
	void UpdateTimeline ( class USFXTimelineData* Data, float DeltaTime );
	void Tick ( float DeltaTime );
	void eventHandlePreRemove ( );
	void RemoveAllTimelines ( );
	void RemoveTimeline ( class USFXTimelineData* Data );
	class USFXTimelineData* SpawnTimeline ( class USFXTimelineData* Template, class UObject* FuncOwner, class AActor* Source, class AActor* Target );
	void AddTimeline ( class USFXTimelineData* Data, class UObject* FuncOwner, class AActor* Source, class AActor* Target );
	class Asfxplayercontroller* GetTargetPlayer ( class USFXTimelineData* Data, int idx );
	class AActor* GetTargetActor ( class USFXTimelineData* Data, int idx );
	void InputHandler ( );
	bool AOEEvalFunc ( class AActor* ChkOwner, class AActor* ChkTarget );
};

UClass* USFXModule_Timeline::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_CustomAction
// 0x0004 (0x0088 - 0x0084)
class USFXAICmd_CustomAction : public USFXAICommand
{
public:
	unsigned long                                      bPendingTransition : 1;                           		// 0x0084 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48610 ];

		return pClassPointer;
	};

	bool IsCustomActionComplete ( );
	bool ExecuteCustomAction ( );
	float GetPostCustomActionSleepTime ( );
	void FinishedCustomAction ( );
	bool ShouldFinishPostRotation ( );
	bool ShouldFinishRotation ( );
	void eventPopped ( );
	void eventPushed ( );
	bool AllowTransitionTo ( class UClass* AttemptCommand );
	bool CanInterruptCurrentCommand ( );
	bool StartCustomAction ( class Asfxai_core* AI, class UClass* AICommandClass );
};

UClass* USFXAICmd_CustomAction::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_Ragdoll
// 0x0037 (0x00F8 - 0x00C1)
class USFXCustomAction_Ragdoll : public UBioCustomAction
{
public:
	struct FVector                                     impulse;                                          		// 0x00C4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     HitLocation;                                      		// 0x00D0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastRecoveryLocation;                             		// 0x00DC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       HitBone;                                          		// 0x00E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRecoveryAttemptTime;                          		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHeldInRagdoll : 1;                               		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bVelocityChange : 1;                              		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48611 ];

		return pClassPointer;
	};

	bool CanOverrideMoveWith ( int OldCustomAction, int NewCustomAction );
	bool CanBeInterrupted ( );
	void CheckEndRecovery ( );
	bool CheckBeginRecovery ( );
	void RegisterRagdollVocCallback ( );
	void OnRagdollPhysicsImpact ( class APawn* Pawn, class AActor* oImpactActor, struct FVector vImpactDir );
	void RestartScream ( );
	void PlayScream ( );
	void StopCustomAction ( );
	void ClientDoCustomAction ( unsigned long bForced );
	void Replicate ( );
	void StartCustomAction ( );
};

UClass* USFXCustomAction_Ragdoll::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_AnimatedRagdoll
// 0x0038 (0x00F9 - 0x00C1)
class USFXCustomAction_AnimatedRagdoll : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_Start;                                         		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_Loop;                                          		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     impulse;                                          		// 0x00DC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USFXAnimSetCookSpec*                         AnimInfo;                                         		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              fLoopAnimPlayRate;                                		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              OldZVelocity;                                     		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bFinishedStartAnim : 1;                           		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      RootMotionMode;                                   		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48612 ];

		return pClassPointer;
	};

	bool CanOverrideMoveWith ( int OldCustomAction, int NewCustomAction );
	bool CanBeInterrupted ( );
	void CheckEndRecovery ( );
	bool CheckBeginRecovery ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void AddImpulse ( struct FVector ImpulseForce );
	void eventTickCustomAction ( float DeltaTime );
	void StartCustomAction ( );
};

UClass* USFXCustomAction_AnimatedRagdoll::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_Frozen
// 0x0007 (0x00C8 - 0x00C1)
class USFXCustomAction_Frozen : public UBioCustomAction
{
public:
	unsigned long                                      bWelded : 1;                                      		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48613 ];

		return pClassPointer;
	};

	bool CanBeInterrupted ( );
	bool CanOverrideMoveWith ( int OldCustomAction, int NewCustomAction );
	void CheckEndRecovery ( );
	void CheckBeginRecovery ( );
	void StopCustomAction ( );
	void StartRagdollPhase ( );
	void UnWeldPhysicsAssetInstance ( );
	void HackFreeze ( );
	void StartCustomAction ( );
};

UClass* USFXCustomAction_Frozen::pClassPointer = NULL;

// Class SFXGame.BioCustomAction_CombatActivate
// 0x000F (0x00D0 - 0x00C1)
class UBioCustomAction_CombatActivate : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_CombatActivate;                                		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48614 ];

		return pClassPointer;
	};

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void ContinueCustomAction ( );
	void PauseCustomAction ( );
	void StartCustomAction ( );
};

UClass* UBioCustomAction_CombatActivate::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_CombatActivate
// 0x0000 (0x0088 - 0x0088)
class USFXAICmd_CombatActivate : public USFXAICmd_CustomAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48630 ];

		return pClassPointer;
	};

	bool IsCustomActionComplete ( );
	bool ExecuteCustomAction ( );
	float GetPostCustomActionSleepTime ( );
	void FinishedCustomAction ( );
	bool ShouldFinishPostRotation ( );
	bool ShouldFinishRotation ( );
	void eventPopped ( );
	void eventPushed ( );
	bool AllowTransitionTo ( class UClass* AttemptCommand );
	bool CanInterruptCurrentCommand ( );
	bool StartCustomAction ( class Asfxai_core* AI, class UClass* AICommandClass );
};

UClass* USFXAICmd_CombatActivate::pClassPointer = NULL;

// Class SFXGame.BioCustomAction_CoverClimbMantleBase
// 0x0034 (0x00F5 - 0x00C1)
class UBioCustomAction_CoverClimbMantleBase : public UBioCustomAction
{
public:
	struct FBodyStance                                 m_BS_StanceFromExplore;                           		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 m_BS_StanceFromCombat;                            		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 m_BS_StanceFromCover;                             		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fCollisionOffPerioud;                           		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              m_fCollisionOffTime;                              		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bWasInCover : 1;                                  		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      m_CurrentBodyStance;                              		// 0x00F4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48631 ];

		return pClassPointer;
	};

	void EndPlayBodyStance ( unsigned char StanceID );
	void StopPlayBodyStance ( unsigned char StanceID );
	bool StartPlayBodyStance ( unsigned char StanceID );
	bool GetBodyStance ( unsigned char StanceID, struct FBodyStance* out_BodyStance );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void eventTickCustomAction ( float fDeltaTime );
	void StopCustomAction ( );
	void StartCustomAction ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* UBioCustomAction_CoverClimbMantleBase::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_CA_CoverMantleClimbBase
// 0x0008 (0x0090 - 0x0088)
class USFXAICmd_CA_CoverMantleClimbBase : public USFXAICmd_CustomAction
{
public:
	class AActor*                                      OriginalMoveTarget;                               		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ANavigationPoint*                            OriginalAnchor;                                   		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48673 ];

		return pClassPointer;
	};

	bool GetCustomActionMovementState ( );
	void FinishedCustomAction ( );
	void eventPushed ( );
	bool ShouldFinishRotation ( );
};

UClass* USFXAICmd_CA_CoverMantleClimbBase::pClassPointer = NULL;

// Class SFXGame.BioCustomAction_CoverClimb
// 0x0000 (0x00F5 - 0x00F5)
class UBioCustomAction_CoverClimb : public UBioCustomAction_CoverClimbMantleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48674 ];

		return pClassPointer;
	};

	void EndPlayBodyStance ( unsigned char StanceID );
	void StopPlayBodyStance ( unsigned char StanceID );
	bool StartPlayBodyStance ( unsigned char StanceID );
	bool GetBodyStance ( unsigned char StanceID, struct FBodyStance* out_BodyStance );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void eventTickCustomAction ( float fDeltaTime );
	void StopCustomAction ( );
	void StartCustomAction ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* UBioCustomAction_CoverClimb::pClassPointer = NULL;

// Class SFXGame.BioCustomAction_CoverMantle
// 0x001B (0x0110 - 0x00F5)
class UBioCustomAction_CoverMantle : public UBioCustomAction_CoverClimbMantleBase
{
public:
	TArray< class AActor* >                            aBumpList;                                        		// 0x00F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     vStartLocation;                                   		// 0x0104 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48682 ];

		return pClassPointer;
	};

	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void StartCustomAction ( );
};

UClass* UBioCustomAction_CoverMantle::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_CA_KroganCharge
// 0x0008 (0x0090 - 0x0088)
class USFXAICmd_CA_KroganCharge : public USFXAICmd_CustomAction
{
public:
	float                                              m_fCachedTurnSpeed;                               		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fChargeTurnSpeed;                               		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48732 ];

		return pClassPointer;
	};

	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	bool eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool BreakHitObject ( class AActor* Other, struct FVector HitNormal );
	bool ShouldFinishRotation ( );
	bool ExecuteCustomAction ( );
	void SetDesiredRotationAndLocation ( );
	void eventPopped ( );
	void eventPushed ( );
};

UClass* USFXAICmd_CA_KroganCharge::pClassPointer = NULL;

// Class SFXGame.BioDebugMenu
// 0x0000 (0x003C - 0x003C)
class UBioDebugMenu : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48733 ];

		return pClassPointer;
	};

};

UClass* UBioDebugMenu::pClassPointer = NULL;

// Class SFXGame.BioDeprecated
// 0x0000 (0x003C - 0x003C)
class UBioDeprecated : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48758 ];

		return pClassPointer;
	};

};

UClass* UBioDeprecated::pClassPointer = NULL;

// Class SFXGame.BioDestinationArrow
// 0x0000 (0x01F6 - 0x01F6)
class ABioDestinationArrow : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48760 ];

		return pClassPointer;
	};

	struct FVector LocalToWorld ( struct FVector vLocal );
	void eventBioBaseRemovedFromWorld ( );
	void BioRestoreFromStasis ( );
	void BioApplyStasis ( struct FString Cause );
	void eventPlayFootStepSound ( int FootDown );
	void eventSFXSetAudioComponentRTPCs ( class UActorComponent* pWwiseAudioComponent );
	class USkeletalMeshComponent* GetHeadSkelMeshComponent ( );
	class USkeletalMeshComponent* GetPrimarySkelMeshComponent ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	unsigned char GetPowerResistance ( class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, class UClass* DamageType, float* Damage, struct FVector* Force, class AActor** TargetOverride );
	void RemoveSFXModuleIndex ( int nIndex );
	void RemoveSFXModule ( class USFXModule* oModule );
	void AddSFXModule ( class USFXModule* oModule, unsigned long bUserModule );
	void StopAllSounds ( );
	bool WillOverlap ( struct FVector PosA, struct FVector VelA, struct FVector PosB, struct FVector VelB, float StepSize, float Radius, float* Time );
	struct FVector GetAvoidanceVector ( struct FVector GoalLocation, float CollisionRadius, float MaxSpeed, int NumSamples, float VelocityStepRate, float MaxTimeTilOverlap, TArray< class AActor* >* Obstacles );
	bool IsClient ( );
	bool IsServer ( );
	bool IsOwningClient ( );
	void eventReplicationEnded ( );
	void eventPostDemoRewind ( );
	void eventAnimTreeUpdated ( class USkeletalMeshComponent* SkelMesh );
	bool SupportsKismetModification ( class USequenceOp* AskingOp, struct FString* Reason );
	void eventTrailsNotifyEnd ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotifyTick ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotify ( class UAnimNotify_Trails* AnimNotifyData );
	void eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	void GetAimAdhesionExtent ( float* Width, float* Height, struct FVector* Center );
	void GetAimFrictionExtent ( float* Width, float* Height, struct FVector* Center );
	bool IsInPersistentLevel ( );
	void SetActive ( unsigned long bActive );
	class USFXModule* GetModule ( class UClass* ModuleClass );
	void eventExceededPhysicsThreshold ( class AActor* instigatedBy );
	void eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance );
	struct FGuid GetPackageGuid ( struct FName PackageName );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void SetHUDLocation ( struct FVector NewHUDLocation );
	void eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void PickedUpBy ( class APawn* P );
	void eventSpawnedByKismet ( );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	void FindGoodEndView ( class APlayerController* PC, struct FRotator* GoodRotation );
	void NotifyLocalPlayerTeamReceived ( );
	struct FString GetLocationStringFor ( class APlayerReplicationInfo* PRI );
	unsigned char eventScriptGetTeamNum ( );
	unsigned char GetTeamNum ( );
	void PawnBaseDied ( );
	bool IsPlayerOwned ( );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_rotation );
	bool IsStationary ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	bool CanActorPlayFaceFXAnim ( );
	bool IsActorPlayingFaceFXAnim ( );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay );
	void eventFinishMovementControl ( class UInterpGroup* InInterpGroup );
	void eventBeginMovementControl ( class UInterpGroup* InInterpGroup );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnAttachToActor ( class USeqAct_AttachToActor* Action );
	void BioEnqueueDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation );
	void eventBioDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void OnChangeCollision ( class USeqAct_ChangeCollision* Action );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	void OnSetBlockRigidBody ( class USeqAct_SetBlockRigidBody* Action );
	void OnSetVelocity ( class USeqAct_SetVelocity* Action );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnModifyHealth ( class USeqAct_ModifyHealth* Action );
	void BlockForTextureStreaming ( );
	bool TexturePrestreamIsRequired ( );
	void PrestreamTextures ( float Seconds, unsigned long bEnableStreaming, int CinematicTextureGroups );
	void eventShutDown ( );
	void SetNetUpdateTime ( float NewUpdateTime );
	void eventForceNetRelevant ( );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void ClearLatentAction ( class UClass* actionClass, unsigned long bAborted, class USeqAct_Latent* exceptionAction, unsigned long bCancelled );
	bool FindEventsOfClass ( class UClass* EventClass, unsigned long bIncludeDisabled, TArray< class USequenceEvent* >* out_EventList );
	bool ActivateEventClass ( class UClass* InClass, class AActor* inInstigator, unsigned long bTest, TArray< class USequenceEvent* >* EventList, TArray< int >* ActivateIndices, TArray< class USequenceEvent* >* ActivatedEvents );
	bool TriggerGlobalEventClass ( class UClass* InEventClass, class AActor* inInstigator, int ActivateIndex );
	void eventReceivedNewEvent ( class USequenceEvent* Evt );
	bool TriggerEventClass ( class UClass* InEventClass, class AActor* inInstigator, int ActivateIndex, unsigned long bTest, TArray< class USequenceEvent* >* ActivatedEvents );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	bool CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance );
	void ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation );
	bool CanSplash ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	bool IsInPain ( );
	bool IsInVolume ( class AVolume* aVolume );
	void eventReset ( );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventModifyHearSoundComponent ( class UAudioComponent* AC );
	struct FString GetPhysicsName ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FString GetDebugName ( );
	void MatchStarting ( );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void ReplaceText ( struct FString Replace, struct FString With, struct FString* Text );
	struct FString GetHumanReadableName ( );
	struct FString GetItemName ( struct FString FullName );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void eventEndViewTarget ( class APlayerController* PC );
	void eventBecomeViewTarget ( class APlayerController* PC );
	bool CheckForErrors ( );
	void eventDebugFreezeGame ( class AActor* ActorToLookAt );
	float GetGravityZ ( );
	void CheckHitInfo ( class UPrimitiveComponent* FallBackComponent, struct FVector Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation );
	void eventTakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void KilledBy ( class APawn* EventInstigator );
	bool HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool StopsProjectile ( class AProjectile* P );
	void eventNotifySkelControlBeyondLimit ( class USkelControlLookAt* LookAt );
	void eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance );
	void eventSetInitialState ( );
	void eventPostBeginPlay ( );
	void eventBroadcastLocalizedTeamMessage ( int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalizedMessage ( class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventPreBeginPlay ( );
	bool FindActorsOfClass ( class UClass* ActorClass, TArray< class AActor* >* out_Actors );
	bool MoveActorToFloor ( );
	class APlayerController* GetALocalPlayerController ( );
	void LocalPlayerControllers ( class UClass* BaseClass, class APlayerController** PC );
	void AllOwnedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	void ComponentList ( class UClass* BaseClass, class UActorComponent** out_Component );
	void OverlappingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** out_Actor );
	void CollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bUseOverlapCheck, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleCollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, struct FVector Extent, unsigned long bTraceActors, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor );
	void TraceActors ( class UClass* BaseClass, struct FVector End, struct FVector Start, struct FVector Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo );
	void TouchingActors ( class UClass* BaseClass, unsigned long bReverse, class AActor** Actor );
	void BasedActors ( class UClass* BaseClass, class AActor** Actor );
	void ChildActors ( class UClass* BaseClass, class AActor** Actor );
	void DynamicActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	void AllActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	struct FString GetURLMap ( );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	bool PreTeleport ( class ATeleporter* InTeleporter );
	struct FVector GetDestination ( class AController* C );
	bool SuggestTossVelocity ( struct FVector Destination, struct FVector Start, float TossSpeed, float BaseTossZ, float DesiredZPct, struct FVector CollisionSize, float TerminalVelocity, float OverrideGravityZ, unsigned long bOnlyTraceUp, struct FVector* TossVelocity );
	bool PlayerCanSeeMe ( );
	void MakeNoise ( float Loudness, struct FName NoiseType );
	void StopSound ( class UWwiseBaseSoundObject* InSoundEvent );
	void PlaySound ( class UWwiseBaseSoundObject* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	class UAudioComponent* CreateAudioComponent ( class USoundCue* InSoundCue, unsigned long bPlay, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation, unsigned long bAttachToSelf );
	void ResetTimerTimeDilation ( struct FName TimerName, class UObject* inObj );
	void ModifyTimerTimeDilation ( struct FName TimerName, float InTimerTimeDilation, class UObject* inObj );
	float GetRemainingTimeForTimer ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerRate ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerCount ( struct FName inTimerFunc, class UObject* inObj );
	bool IsTimerActive ( struct FName inTimerFunc, class UObject* inObj );
	void PauseTimer ( unsigned long bPause, struct FName inTimerFunc, class UObject* inObj );
	void ClearAllTimers ( class UObject* inObj );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	void eventTornOff ( );
	bool Destroy ( );
	class AActor* Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail, unsigned long bFindSafeLocation );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void GetComponentsBoundingBox ( struct FBox* ActorBox );
	bool IsOverlapping ( class AActor* A );
	bool ContainsPoint ( struct FVector Spot );
	bool FindSpot ( struct FVector BoxExtent, struct FVector* SpotLocation );
	bool TraceAllPhysicsAssetInteractions ( class USkeletalMeshComponent* SkelMeshComp, struct FVector EndTrace, struct FVector StartTrace, struct FVector Extent, TArray< struct FImpactInfo >* out_Hits );
	bool FastTrace ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceBullet );
	bool PointCheckComponent ( class UPrimitiveComponent* InComponent, struct FVector PointLocation, struct FVector PointExtent );
	bool TraceComponent ( class UPrimitiveComponent* InComponent, struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, unsigned long bComplexCollision, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	class AActor* Trace ( struct FVector TraceEnd, struct FVector TraceStart, unsigned long bTraceActors, struct FVector Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	void VolumeBasedDestroy ( class APhysicsVolume* PV );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool UsedBy ( class APawn* User );
	bool eventOverRotated ( struct FRotator* out_Desired, struct FRotator* out_Actual );
	bool ClampRotation ( struct FRotator rBase, struct FRotator rUpperLimits, struct FRotator rLowerLimits, struct FRotator* out_Rot );
	void eventOnSleepRBPhysics ( );
	void eventOnWakeRBPhysics ( );
	void eventRanInto ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void eventCollisionChanged ( );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventBaseChange ( );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void eventUnTouch ( class AActor* Other );
	void eventPostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventFalling ( );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventTimer ( );
	void eventTick ( float DeltaTime );
	void eventLostChild ( class AActor* Other );
	void eventGainedChild ( class AActor* Other );
	void eventDestroyed ( );
	void SetTickIsDisabled ( unsigned long bInDisabled );
	void SetTickGroup ( unsigned char NewTickGroup );
	void ReattachComponent ( class UActorComponent* ComponentToReattach );
	void DetachComponent ( class UActorComponent* ExComponent );
	void AttachComponent ( class UActorComponent* NewComponent );
	void UnClock ( float* Time );
	void Clock ( float* Time );
	void SetPhysics ( unsigned char newPhysics );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetHidden ( unsigned long bNewHidden );
	void ChartData ( struct FString DataName, float DataValue );
	void FlushDebugStrings ( );
	void DrawDebugFrustrum ( unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, struct FMatrix* FrustumToWorld );
	void DrawDebugString ( struct FVector TextLocation, struct FString Text, class AActor* TestBaseActor, struct FColor TextColor, float Duration );
	void DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines );
	void DrawDebugCylinder ( struct FVector Start, struct FVector End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines );
	void DrawDebugStar ( struct FVector Position, float Size, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugBox ( struct FVector Center, struct FVector Extent, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugPoint ( struct FVector Position, float Size, struct FLinearColor PointColor, unsigned long bPersistentLines );
	void DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void FlushPersistentDebugLines ( );
	struct FVector GetBasedPosition ( struct FBasedPosition BP );
	void SetBasedPosition ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	struct FVector BP2Vect ( struct FBasedPosition BP );
	void Vect2BP ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	void SetForcedInitialReplicatedProperty ( class UProperty* PropToReplicate, unsigned long bAdd );
	void eventReplicatedDataBinding ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsOwnedBy ( class AActor* TestActor );
	class AActor* GetBaseMost ( );
	bool IsBasedOn ( class AActor* TestActor );
	void FindBase ( );
	void SetOwner ( class AActor* NewOwner );
	void SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName );
	float GetTerminalVelocity ( );
	void AutonomousPhysics ( float DeltaSeconds );
	bool MoveSmooth ( struct FVector Delta );
	int fixedTurn ( int Current, int Desired, int DeltaRate );
	void SetHardAttach ( unsigned long bNewHardAttach );
	bool SetRelativeLocation ( struct FVector NewLocation );
	bool SetRelativeRotation ( struct FRotator NewRotation );
	void SetZone ( unsigned long bForceRefresh );
	unsigned char MovingWhichWay ( float* Amount );
	bool SetRotation ( struct FRotator NewRotation );
	bool SetLocation ( struct FVector NewLocation, unsigned long bDebugFailure );
	bool Move ( struct FVector Delta );
	void SetDrawScale3D ( struct FVector NewScale3D );
	void SetDrawScale ( float NewScale );
	void SetCollisionType ( unsigned char NewCollisionType );
	void SetCollisionSize ( float NewRadius, float NewHeight );
	void SetCollision ( unsigned long bNewColActors, unsigned long bNewBlockActors, unsigned long bNewIgnoreEncroachers );
	void FinishAnim ( class UAnimNodeSequence* SeqNode );
	void Sleep ( float Seconds );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	void ForceUpdateComponents ( unsigned long bCollisionUpdate, unsigned long bTransformOnly );
};

UClass* ABioDestinationArrow::pClassPointer = NULL;

// Class SFXGame.SFXPlayerCustomization
// 0x0128 (0x0164 - 0x003C)
class USFXPlayerCustomization : public UObject
{
public:
	TArray< struct FCustomizableElement >              CasualAppearances;                                		// 0x003C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCustomizableElement >              FullBodyAppearances;                              		// 0x0048 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCustomizableElement >              FullBodyHelmetAppearances;                        		// 0x0054 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCustomizableElement >              TorsoAppearances;                                 		// 0x0060 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCustomizableElement >              ShoulderAppearances;                              		// 0x006C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCustomizableElement >              ArmAppearances;                                   		// 0x0078 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCustomizableElement >              LegAppearances;                                   		// 0x0084 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCustomizableElement >              HelmetAppearances;                                		// 0x0090 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCustomizableElement >              SpecAppearances;                                  		// 0x009C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCustomizableElement >              Tint1Appearances;                                 		// 0x00A8 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCustomizableElement >              Tint2Appearances;                                 		// 0x00B4 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCustomizableElement >              PatternAppearances;                               		// 0x00C0 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCustomizableElement >              PatternColorAppearances;                          		// 0x00CC (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCustomizableElement >              EmissiveAppearances;                              		// 0x00D8 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FemaleIconicHeadMesh;                             		// 0x00E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     MaleIconicHeadMesh;                               		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FemaleCustomMorphHead;                            		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     MaleCustomMorphHead;                              		// 0x0108 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     MaleIconicFaceFXAsset;                            		// 0x0114 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     MaleMorphHeadFaceFXAsset;                         		// 0x0120 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FemaleIconicFaceFXAsset;                          		// 0x012C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FemaleMorphHeadFaceFXAsset;                       		// 0x0138 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FScarInfo >                         Scars;                                            		// 0x0144 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                CosmeticSurgeryPlotID;                            		// 0x0150 (0x0004) [0x0000000000000000]              
	int                                                CosmeticSUrgeryPlotID_ME3;                        		// 0x0154 (0x0004) [0x0000000000000000]              
	void*                                              N7ArmourName;                                     		// 0x0158 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	void*                                              N7ArmourDescription;                              		// 0x015C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UBioMaterialOverride*                        IconicFemaleMaterialOverride;                     		// 0x0160 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49609 ];

		return pClassPointer;
	};

	class UBioMaterialOverride* FindIconicMaterialOverride ( unsigned long bIsFemale );
	void ApplyScarParameters ( struct FScarInfo Scar, unsigned long bIsFemale, class USkeletalMeshComponent* InHead );
	class USkeletalMesh* GetHelmetMesh ( int Id, unsigned long bIsFemale, unsigned char Part, TArray< struct FCustomizableElement >* Meshes, struct FCustomizableElement* Element );
	class UMaterialInstance* GetMaterialOverride ( int Id, unsigned long bIsFemale, TArray< struct FCustomizableElement >* Meshes, struct FCustomizableElement* Element );
	class USkeletalMesh* GetMesh ( int Id, unsigned long bIsFemale, TArray< struct FCustomizableElement >* Meshes, struct FCustomizableElement* Element );
};

UClass* USFXPlayerCustomization::pClassPointer = NULL;

// Class SFXGame.BioGUIBox
// 0x0000 (0x003C - 0x003C)
class UBioGUIBox : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49744 ];

		return pClassPointer;
	};

};

UClass* UBioGUIBox::pClassPointer = NULL;

// Class SFXGame.sfxgamemodedefault
// 0x001B (0x00B8 - 0x009D)
class Usfxgamemodedefault : public USFXGameModeBase
{
public:
	float                                              InputDelayStormExit;                              		// 0x00A0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              InputDelayTightAimExit;                           		// 0x00A4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CoverCamAlign;                                    		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 UseSucceeded;                                     		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 UseFailed;                                        		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXCameraSetup*                             CameraSetup;                                      		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50418 ];

		return pClassPointer;
	};

	bool HasCoverTurn ( );
	bool TryCoverAction ( );
	bool TryCoverTurn ( );
	bool TrySwatTurn ( );
	void MantleCover ( );
	void ClimbCover ( );
	void SwitchToBackup ( );
	void TryUsePower ( int Power );
	void UsePower ( struct FName PowerName, class Asfxpawn* User );
	void TurnStormOff ( );
	void StormOff ( );
	void CanEnterCover ( );
	void StormOn ( );
	void NextWeapon ( );
	void PrevWeapon ( );
	void TrySwapWeapon ( );
	void ResetSelectionMaterialParams ( );
	bool Used ( );
	void TryHolster ( );
	void TryCoverSlip ( );
	bool TryForwardRoll ( );
	void HoldAction ( );
	void TapAction ( );
	bool PressAction ( );
	bool TryRoll ( );
	void TryHeavyMelee ( );
	void TryMelee ( );
	void TryReload ( );
	void DisableWalking ( );
	void EnableWalking ( );
	void UseAbility ( int Ability );
	void TurnOffTightAim ( );
	void StopTightAim ( );
	void TrySnap ( );
	bool GetSnapTarget ( int* TargetSlotIdx, float* TargetSlotPct, unsigned char* TargetDir );
	void TightAim ( );
	bool ShouldUseScope ( class APawn* inPawn );
	bool ShouldAllowTightAim ( class APawn* inPawn );
	void TransitionToFutureSlot ( float Time, class ACoverSlotMarker* Target );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	bool TryExitLadder ( );
	bool TryExitCover ( );
	void CanLeaveCover ( );
	bool TryAcquireCover ( unsigned long bWideCheck, unsigned long bTestOnly );
	bool FindCover ( unsigned long bWideCheck, struct FCovPosInfo* FoundCover );
	bool FindPlayerCover_Internal ( unsigned long bWideCheck, struct FCovPosInfo* FoundCover );
	bool TryStandingJump ( );
	void Initialize ( );
};

UClass* Usfxgamemodedefault::pClassPointer = NULL;

// Class SFXGame.SFXGameModeVehicle
// 0x0013 (0x00B0 - 0x009D)
class USFXGameModeVehicle : public USFXGameModeBase
{
public:
	class UWwiseEvent*                                 EnterTightAimSound;                               		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 ExitTightAimSound;                                		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXCameraMode_Vehicle*                      VehicleCam;                                       		// 0x00A8 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_MountedGunTightAim*           TightAimCam;                                      		// 0x00AC (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50419 ];

		return pClassPointer;
	};

	void EnterWeaponWheel ( );
	void EnterPowerWheel ( );
	void EnterCommandMenu ( );
	bool TryRoll ( );
	void ExitVehicle ( );
	void TurnOffTightAim ( );
	void StopTightAim ( );
	void TryReload ( );
	void TightAim ( );
	void ShowMenu ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	void Initialize ( );
};

UClass* USFXGameModeVehicle::pClassPointer = NULL;

// Class SFXGame.SFXGameModeAtlas
// 0x0013 (0x00B0 - 0x009D)
class USFXGameModeAtlas : public USFXGameModeBase
{
public:
	float                                              AtlasCamTransitionTime;                           		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              InputDelayTightAimExit;                           		// 0x00A4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class USFXCameraMode_Atlas*                        AtlasCam;                                         		// 0x00A8 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_FaceTarget*             AtlasTrans;                                       		// 0x00AC (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50420 ];

		return pClassPointer;
	};

	void EnterWeaponWheel ( );
	void EnterPowerWheel ( );
	void EnterCommandMenu ( );
	void ExitAtlas ( );
	void TightAim ( );
	void TryReload ( );
	void TryAutoMantle ( );
	void TryHeavyMelee ( );
	void TryMelee ( );
	void Deactivated ( );
	void Activated ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

UClass* USFXGameModeAtlas::pClassPointer = NULL;

// Class SFXGame.SFXGameModePowerWheel
// 0x0007 (0x00A4 - 0x009D)
class USFXGameModePowerWheel : public USFXGameModeBase
{
public:
	float                                              DisableMoveTime;                                  		// 0x00A0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50421 ];

		return pClassPointer;
	};

	void ShowMenu ( );
	void ExitPowerWheel ( );
	void EnableMovement ( );
	void Deactivated ( );
	void Activated ( );
};

UClass* USFXGameModePowerWheel::pClassPointer = NULL;

// Class SFXGame.SFXGameModeWeaponWheel
// 0x0007 (0x00A4 - 0x009D)
class USFXGameModeWeaponWheel : public USFXGameModeBase
{
public:
	float                                              DisableMoveTime;                                  		// 0x00A0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50422 ];

		return pClassPointer;
	};

	void ShowMenu ( );
	void ExitWeaponWheel ( );
	void EnableMovement ( );
	void Deactivated ( );
	void Activated ( );
};

UClass* USFXGameModeWeaponWheel::pClassPointer = NULL;

// Class SFXGame.SFXGameModeCommand
// 0x0007 (0x00A4 - 0x009D)
class USFXGameModeCommand : public USFXGameModeBase
{
public:
	unsigned long                                      bCameraEnabled : 1;                               		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50423 ];

		return pClassPointer;
	};

	void ShowMenu ( );
	void ExitCommandMenu ( );
	void DisableCamera ( );
	void EnableCamera ( );
	void Deactivated ( );
	void Activated ( );
};

UClass* USFXGameModeCommand::pClassPointer = NULL;

// Class SFXGame.SFXGameModeInjuredShepard
// 0x000B (0x00A8 - 0x009D)
class USFXGameModeInjuredShepard : public USFXGameModeBase
{
public:
	float                                              InputDelayTightAimExit;                           		// 0x00A0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class USFXCameraMode_Combat*                       InjuredCamera;                                    		// 0x00A4 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50424 ];

		return pClassPointer;
	};

	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	void ResetSelectionMaterialParams ( );
	bool Used ( );
	void TurnOffTightAim ( );
	void StopTightAim ( );
	void TightAim ( );
	void TryReload ( );
};

UClass* USFXGameModeInjuredShepard::pClassPointer = NULL;

// Class SFXGame.SFXGameModeConversation
// 0x000B (0x00A8 - 0x009D)
class USFXGameModeConversation : public USFXGameModeBase
{
public:
	class UBioCameraBehaviorConversation*              ConversationCam;                                  		// 0x00A0 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_GalaxyMap*              InstantTransition;                                		// 0x00A4 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50425 ];

		return pClassPointer;
	};

	void HighlightDefaultResponse ( );
	void SkipConversation ( );
	void SelectResponse ( );
	void InterruptParagon ( );
	void InterruptRenegade ( );
	void Deactivated ( );
	void Activated ( );
	class USFXCameraMode* HACK_GetCameraMode ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

UClass* USFXGameModeConversation::pClassPointer = NULL;

// Class SFXGame.SFXGameModeCinematic
// 0x0000 (0x009D - 0x009D)
class USFXGameModeCinematic : public USFXGameModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50426 ];

		return pClassPointer;
	};

	bool ShowAreaMap ( );
	void StopObjectiveDisplay ( );
	void HoldObjectiveDisplay ( );
	void PulseObjectiveDisplay ( );
	void TurnObjectiveRadarDisplayOff ( );
	void TurnObjectiveRadarDisplayOn ( );
	void ToggleObjectiveRadarDisplay ( unsigned long bTurnOn );
	void PulseRadarDisplay ( float fPulseTime );
	void UnpauseTimeDilationEffects ( );
	void PauseTimeDilationEffects ( );
	void EnterWeaponWheel ( );
	void EnterPowerWheel ( );
	void EnterCommandMenu ( );
	void RemoveTimeDilationEffects ( );
	void GuiKey ( unsigned char Event );
	void LeaveWorld ( );
	void StartIngamePropertyEditor ( );
	void SquadCommand_Move2 ( );
	void SquadCommand_Move1 ( );
	void SquadCommand_Follow ( );
	void SquadCommand_Attack ( );
	void ShowMenu ( );
	void eventHidePauseMenu ( );
	void eventShowPauseMenu ( );
	void StopFiringWeapon ( );
	void FireWeapon ( );
	void CollectBindings ( );
	void eventInitialize ( );
	void DeactivateSpecifier ( struct FName ModeSpecifier );
	void ActivateSpecifier ( struct FName ModeSpecifier );
	void Deactivated ( );
	void Activated ( );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	class USFXCameraMode* eventHACK_GetCameraMode ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

UClass* USFXGameModeCinematic::pClassPointer = NULL;

// Class SFXGame.SFXGameModeGUI
// 0x001B (0x00B8 - 0x009D)
class USFXGameModeGUI : public USFXGameModeBase
{
public:
	TArray< struct FName >                             StackedGuis;                                      		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              DeathTransitionTime;                              		// 0x00AC (0x0004) [0x0000000000000000]              
	class Ubiocamerabehaviorflourish*                  DeathCam;                                         		// 0x00B0 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_GalaxyMap*              InstantTransition;                                		// 0x00B4 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50427 ];

		return pClassPointer;
	};

	void SlideshowExit ( );
	void SlideshowAdvance ( unsigned long bForward );
	bool HideAreaMap ( );
	void MPToggleReady ( );
	void ConnectToCerberus ( );
	void PrevCerberusItem ( );
	void NextCerberusItem ( );
	void DeactivateSpecifier ( struct FName ModeSpecifier );
	void ActivateSpecifier ( struct FName ModeSpecifier );
	void Deactivated ( );
	void Activated ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

UClass* USFXGameModeGUI::pClassPointer = NULL;

// Class SFXGame.SFXGameModeMovie
// 0x0007 (0x00A4 - 0x009D)
class USFXGameModeMovie : public USFXGameModeBase
{
public:
	unsigned long                                      bLoadingMovie : 1;                                		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50428 ];

		return pClassPointer;
	};

	void SkipMovie ( );
	void Deactivated ( );
	void ActivateSpecifier ( struct FName ModeSpecifier );
};

UClass* USFXGameModeMovie::pClassPointer = NULL;

// Class SFXGame.SFXGameModeCheatMenu
// 0x0000 (0x009D - 0x009D)
class USFXGameModeCheatMenu : public USFXGameModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50429 ];

		return pClassPointer;
	};

	bool ShowAreaMap ( );
	void StopObjectiveDisplay ( );
	void HoldObjectiveDisplay ( );
	void PulseObjectiveDisplay ( );
	void TurnObjectiveRadarDisplayOff ( );
	void TurnObjectiveRadarDisplayOn ( );
	void ToggleObjectiveRadarDisplay ( unsigned long bTurnOn );
	void PulseRadarDisplay ( float fPulseTime );
	void UnpauseTimeDilationEffects ( );
	void PauseTimeDilationEffects ( );
	void EnterWeaponWheel ( );
	void EnterPowerWheel ( );
	void EnterCommandMenu ( );
	void RemoveTimeDilationEffects ( );
	void GuiKey ( unsigned char Event );
	void LeaveWorld ( );
	void StartIngamePropertyEditor ( );
	void SquadCommand_Move2 ( );
	void SquadCommand_Move1 ( );
	void SquadCommand_Follow ( );
	void SquadCommand_Attack ( );
	void ShowMenu ( );
	void eventHidePauseMenu ( );
	void eventShowPauseMenu ( );
	void StopFiringWeapon ( );
	void FireWeapon ( );
	void CollectBindings ( );
	void eventInitialize ( );
	void DeactivateSpecifier ( struct FName ModeSpecifier );
	void ActivateSpecifier ( struct FName ModeSpecifier );
	void Deactivated ( );
	void Activated ( );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	class USFXCameraMode* eventHACK_GetCameraMode ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

UClass* USFXGameModeCheatMenu::pClassPointer = NULL;

// Class SFXGame.SFXGameModeAIDebug
// 0x0043 (0x00E0 - 0x009D)
class USFXGameModeAIDebug : public USFXGameModeBase
{
public:
	struct FViewTargetTransitionParams                 VTTransParms;                                     		// 0x00A0 (0x0010) [0x0000000000000000]              
	struct FVector2D                                   TopLeft;                                          		// 0x00B0 (0x0008) [0x0000000000000000]              
	class USFXPathWeightLog*                           TotalWeightLog;                                   		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                CurrentConstraintIndex;                           		// 0x00BC (0x0004) [0x0000000000000000]              
	class APawn*                                       DebugTarget;                                      		// 0x00C0 (0x0004) [0x0000000000000000]              
	struct FColor                                      TitleColor;                                       		// 0x00C4 (0x0004) [0x0000000000000000]              
	struct FColor                                      DrawWhite;                                        		// 0x00C8 (0x0004) [0x0000000000000000]              
	struct FColor                                      DrawRed;                                          		// 0x00CC (0x0004) [0x0000000000000000]              
	struct FColor                                      DrawOrange;                                       		// 0x00D0 (0x0004) [0x0000000000000000]              
	struct FColor                                      DrawGreen;                                        		// 0x00D4 (0x0004) [0x0000000000000000]              
	class USFXCameraMode_AIDebug*                      AICamera;                                         		// 0x00D8 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bPaused : 1;                                      		// 0x00DC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowAITarget : 1;                                		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShowAIPath : 1;                                  		// 0x00DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bShowDecisionLog : 1;                             		// 0x00DC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bViewingConstraintEvals : 1;                      		// 0x00DC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bLoggingAllAI : 1;                                		// 0x00DC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bUnPauseOnExit : 1;                               		// 0x00DC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bShowLegend : 1;                                  		// 0x00DC (0x0004) [0x0000000000000000] [0x00000080] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50430 ];

		return pClassPointer;
	};

	void ToggleLegend ( );
	void KeepPaused ( unsigned long bKeepPaused );
	void UnzoomCamera ( );
	void ZoomCamera ( );
	void PrevPawn ( );
	void NextPawn ( );
	void UnpauseAI ( );
	void PauseAI ( );
	void ToggleAIPause ( );
	void DisableAllCoverLogging ( );
	void EnableAllCoverLogging ( );
	void ViewCoverEval ( );
	void ViewConstraint ( int Param );
	void Option ( struct FString Param );
	void Eval ( struct FString param1, int param2 );
	void DrawAIHUD ( class ABioHUD* H );
	struct FString PrettyFloat ( float F, int decimals );
	void Deactivated ( );
	void Activated ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

UClass* USFXGameModeAIDebug::pClassPointer = NULL;

// Class SFXGame.SFXGameModeProto
// 0x0000 (0x009D - 0x009D)
class USFXGameModeProto : public USFXGameModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50431 ];

		return pClassPointer;
	};

	bool ShowAreaMap ( );
	void StopObjectiveDisplay ( );
	void HoldObjectiveDisplay ( );
	void PulseObjectiveDisplay ( );
	void TurnObjectiveRadarDisplayOff ( );
	void TurnObjectiveRadarDisplayOn ( );
	void ToggleObjectiveRadarDisplay ( unsigned long bTurnOn );
	void PulseRadarDisplay ( float fPulseTime );
	void UnpauseTimeDilationEffects ( );
	void PauseTimeDilationEffects ( );
	void EnterWeaponWheel ( );
	void EnterPowerWheel ( );
	void EnterCommandMenu ( );
	void RemoveTimeDilationEffects ( );
	void GuiKey ( unsigned char Event );
	void LeaveWorld ( );
	void StartIngamePropertyEditor ( );
	void SquadCommand_Move2 ( );
	void SquadCommand_Move1 ( );
	void SquadCommand_Follow ( );
	void SquadCommand_Attack ( );
	void ShowMenu ( );
	void eventHidePauseMenu ( );
	void eventShowPauseMenu ( );
	void StopFiringWeapon ( );
	void FireWeapon ( );
	void CollectBindings ( );
	void eventInitialize ( );
	void DeactivateSpecifier ( struct FName ModeSpecifier );
	void ActivateSpecifier ( struct FName ModeSpecifier );
	void Deactivated ( );
	void Activated ( );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	class USFXCameraMode* eventHACK_GetCameraMode ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

UClass* USFXGameModeProto::pClassPointer = NULL;

// Class SFXGame.SFXGameModeDreamSequence
// 0x0000 (0x009D - 0x009D)
class USFXGameModeDreamSequence : public USFXGameModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50432 ];

		return pClassPointer;
	};

	bool ShowAreaMap ( );
	void StopObjectiveDisplay ( );
	void HoldObjectiveDisplay ( );
	void PulseObjectiveDisplay ( );
	void TurnObjectiveRadarDisplayOff ( );
	void TurnObjectiveRadarDisplayOn ( );
	void ToggleObjectiveRadarDisplay ( unsigned long bTurnOn );
	void PulseRadarDisplay ( float fPulseTime );
	void UnpauseTimeDilationEffects ( );
	void PauseTimeDilationEffects ( );
	void EnterWeaponWheel ( );
	void EnterPowerWheel ( );
	void EnterCommandMenu ( );
	void RemoveTimeDilationEffects ( );
	void GuiKey ( unsigned char Event );
	void LeaveWorld ( );
	void StartIngamePropertyEditor ( );
	void SquadCommand_Move2 ( );
	void SquadCommand_Move1 ( );
	void SquadCommand_Follow ( );
	void SquadCommand_Attack ( );
	void ShowMenu ( );
	void eventHidePauseMenu ( );
	void eventShowPauseMenu ( );
	void StopFiringWeapon ( );
	void FireWeapon ( );
	void CollectBindings ( );
	void eventInitialize ( );
	void DeactivateSpecifier ( struct FName ModeSpecifier );
	void ActivateSpecifier ( struct FName ModeSpecifier );
	void Deactivated ( );
	void Activated ( );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	class USFXCameraMode* eventHACK_GetCameraMode ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

UClass* USFXGameModeDreamSequence::pClassPointer = NULL;

// Class SFXGame.SFXGameModeIllusiveManConflict
// 0x009B (0x0138 - 0x009D)
class USFXGameModeIllusiveManConflict : public USFXGameModeBase
{
public:
	struct FScreenShakeStruct                          PainShake;                                        		// 0x00A0 (0x0078) [0x0000000000000000]              
	struct FVector                                     TargetOffset;                                     		// 0x0118 (0x000C) [0x0000000000000000]              
	class USFXSeqAct_BeginIllusiveManConflict*         DesignerSeq;                                      		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                Difficulty;                                       		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              AccumulatedMovement;                              		// 0x012C (0x0004) [0x0000000000000000]              
	class USFXCameraMode_IllusiveManConflict*          CameraMode;                                       		// 0x0130 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bPushing : 1;                                     		// 0x0134 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50433 ];

		return pClassPointer;
	};

	void StartPush ( );
	void DecreaseDifficulty ( );
	void IncreaseDifficulty ( );
	void FireWeapon ( );
	float GetSpringStiffness ( );
	void InitializeMiniGame ( class USFXSeqAct_BeginIllusiveManConflict* Seq );
	struct FVector IllusiveManTargetLocation ( );
	struct FVector AndersonTargetLocation ( );
	void PollInput ( );
	void UpdateInput ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	void Deactivated ( );
	void Activated ( );
};

UClass* USFXGameModeIllusiveManConflict::pClassPointer = NULL;

// Class SFXGame.SFXGameModeSpectator
// 0x0007 (0x00A4 - 0x009D)
class USFXGameModeSpectator : public USFXGameModeBase
{
public:
	class USFXCameraMode_Spectator*                    SpectatorCam;                                     		// 0x00A0 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50434 ];

		return pClassPointer;
	};

	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	void ValidateTarget ( );
	void Deactivated ( );
	void Activated ( );
};

UClass* USFXGameModeSpectator::pClassPointer = NULL;

// Class SFXGame.sfxgamemodedying
// 0x0013 (0x00B0 - 0x009D)
class Usfxgamemodedying : public USFXGameModeBase
{
public:
	float                                              ProlongLifeBoost;                                 		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ProlongLifeDecay;                                 		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StartBoostTime;                                   		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class Ubiocamerabehaviorflourish*                  DeathCam;                                         		// 0x00AC (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50435 ];

		return pClassPointer;
	};

	void UseRevivePower ( );
	bool ProlongLife ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	float GetTotalPossibleBoost ( );
	bool ShouldShowTappingPrompt ( float TimeLeft );
	void Deactivated ( );
	void Activated ( );
	bool WasInstaKilled ( );
	void ClearHints ( );
};

UClass* Usfxgamemodedying::pClassPointer = NULL;

// Class SFXGame.SFXGameModeFlyCam
// 0x0007 (0x00A4 - 0x009D)
class USFXGameModeFlyCam : public USFXGameModeBase
{
public:
	class UBioCameraBehaviorFree*                      FreeCam;                                          		// 0x00A0 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50436 ];

		return pClassPointer;
	};

	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

UClass* USFXGameModeFlyCam::pClassPointer = NULL;

// Class SFXGame.SFXGameModeReplicationDebug
// 0x0007 (0x00A4 - 0x009D)
class USFXGameModeReplicationDebug : public USFXGameModeBase
{
public:
	class USFXCameraMode_ReplicationDebug*             ReplicationDebugCam;                              		// 0x00A0 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50437 ];

		return pClassPointer;
	};

	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

UClass* USFXGameModeReplicationDebug::pClassPointer = NULL;

// Class SFXGame.SFXGameModeLobby
// 0x000F (0x00AC - 0x009D)
class USFXGameModeLobby : public USFXGameModeBase
{
public:
	TArray< struct FName >                             StackedGuis;                                      		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50438 ];

		return pClassPointer;
	};

	void MPToggleReady ( );
	void Deactivated ( );
	void DeactivateSpecifier ( struct FName ModeSpecifier );
	void ActivateSpecifier ( struct FName ModeSpecifier );
};

UClass* USFXGameModeLobby::pClassPointer = NULL;

// Class SFXGame.SFXGameConfig
// 0x0064 (0x00A0 - 0x003C)
class USFXGameConfig : public UObject
{
public:
	TArray< struct FLevelReward >                      LevelRewards;                                     		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FPurchasableItem >                  MPPlayerVariableMappings;                         		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FVector2D                                   AmmoDropChance;                                   		// 0x0054 (0x0008) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxPlayerExperience;                              		// 0x005C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnInRagdollDamageMultiplier;                    		// 0x0060 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DroppedWeaponLifespan;                            		// 0x0064 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EmptyDroppedWeaponLifespan;                       		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CreditsGlobal;                                    		// 0x006C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                IridiumGlobal;                                    		// 0x0070 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PlatinumGlobal;                                   		// 0x0074 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PalladiumGlobal;                                  		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                EezoGlobal;                                       		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                IdGlobal;                                         		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                CreditsLocal;                                     		// 0x0084 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                EezoLocal;                                        		// 0x0088 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                IridiumLocal;                                     		// 0x008C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PalladiumLocal;                                   		// 0x0090 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PlatinumLocal;                                    		// 0x0094 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                IdLocal;                                          		// 0x0098 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bShieldsBlockPowers : 1;                          		// 0x009C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bAimAssistEnabled : 1;                            		// 0x009C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bUseConsoleControls : 1;                          		// 0x009C (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      DropHeavyWeaponOnHolster : 1;                     		// 0x009C (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bCoverProtectedCone : 1;                          		// 0x009C (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      ScoreEnabled : 1;                                 		// 0x009C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bBudgetEnforced : 1;                              		// 0x009C (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51382 ];

		return pClassPointer;
	};

	bool VerifyPurchasableItems ( );
	int GetMaxPurchasableItemID ( );
	int GetPurchasableItemID ( struct FString className );
	struct FString GetPurchasableItemClassName ( int Id );
	int RecordTreasure ( unsigned char eType, int Award, int LevelId );
	struct FTreasureBudget GetGlobalBudget ( );
	struct FTreasureBudget GetLevelBudget ( );
};

UClass* USFXGameConfig::pClassPointer = NULL;

// Class SFXGame.SFXPowerLevelUpHelper
// 0x0020 (0x005C - 0x003C)
class USFXPowerLevelUpHelper : public UObject
{
public:
	TArray< class USFXPowerCustomActionBase* >         m_Powers;                                         		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSavedPawnPowerData >               m_SavedPawnPowerStates;                           		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ABioWorldInfo*                               m_WorldInfo;                                      		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    m_Pawn;                                           		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51412 ];

		return pClassPointer;
	};

	bool CanMakePurchase ( );
	int GetNextWheelDisplayIndex ( );
	float GetCurrentRank ( int nPowerIndex );
	void EvolvePower ( class USFXPowerCustomActionBase* OriginalPower, int nEvolveIndex );
	void SaveCurrentPowerStates ( );
	void UndoChanges ( );
	bool CanEvolvePower ( int nPowerIndex );
	bool IsUnlocked ( int nPowerIndex, int* RequiredLevel );
	int GetRemainingPoints ( );
	bool CanIncreaseRank ( int PowerIndex, int* CostToIncrease );
	bool IncreaseRank ( int PowerIndex );
	void AutoLevelUp ( );
	bool SetPawn ( class ABioPawn* Pawn );
	bool Initialize ( class ABioWorldInfo* WorldInfo );
};

UClass* USFXPowerLevelUpHelper::pClassPointer = NULL;

// Class SFXGame.BioLookAtTarget
// 0x001E (0x0214 - 0x01F6)
class ABioLookAtTarget : public AActor
{
public:
	float                                              m_fDelay;                                         		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fConeDeg;                                       		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMinDistance;                                   		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCODelayRemaining;                              		// 0x0204 (0x0004) [0x0000000000000000]              
	float                                              m_fNCODelayRemaining;                             		// 0x0208 (0x0004) [0x0000000000000000]              
	float                                              m_fConeCos;                                       		// 0x020C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bCOSeen : 1;                                    		// 0x0210 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bNCOSeen : 1;                                   		// 0x0210 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51485 ];

		return pClassPointer;
	};

};

UClass* ABioLookAtTarget::pClassPointer = NULL;

// Class SFXGame.SFXDefine
// 0x0000 (0x003C - 0x003C)
class USFXDefine : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51495 ];

		return pClassPointer;
	};

};

UClass* USFXDefine::pClassPointer = NULL;

// Class SFXGame.BioMessageBox
// 0x0000 (0x003C - 0x003C)
class UBioMessageBox : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51572 ];

		return pClassPointer;
	};

};

UClass* UBioMessageBox::pClassPointer = NULL;

// Class SFXGame.BioMetaVFX
// 0x0000 (0x003C - 0x003C)
class UBioMetaVFX : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51574 ];

		return pClassPointer;
	};

};

UClass* UBioMetaVFX::pClassPointer = NULL;

// Class SFXGame.BioPathPointFactory
// 0x0000 (0x005C - 0x005C)
class UBioPathPointFactory : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51926 ];

		return pClassPointer;
	};

	void eventPostCreateActor ( class AActor* NewActor );
};

UClass* UBioPathPointFactory::pClassPointer = NULL;

// Class SFXGame.sfxgameeffect_powercombo
// 0x008E (0x00F0 - 0x0062)
class Usfxgameeffect_powercombo : public USFXGameEffect
{
public:
	TArray< struct FName >                             EffectsRemovedOnCombo;                            		// 0x0064 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      DetonationScreenShakeClass;                       		// 0x0070 (0x0004) [0x0000000000000000]              
	class UClass*                                      DetonationRumbleClass;                            		// 0x0074 (0x0004) [0x0000000000000000]              
	class UClass*                                      DamageType;                                       		// 0x0078 (0x0004) [0x0000000000000000]              
	class UClass*                                      MaxRagdollDmgTypeOverride;                        		// 0x007C (0x0004) [0x0000000000000000]              
	struct FAreaEffectParameters                       DetonationParameters;                             		// 0x0080 (0x0020) [0x0000000000004000]              ( CPF_Config )
	struct FGuid                                       CrustGuid;                                        		// 0x00A0 (0x0010) [0x0000000000000000]              
	struct FVector2D                                   ComboDamage;                                      		// 0x00B0 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   ComboForce;                                       		// 0x00B8 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   ComboRadius;                                      		// 0x00C0 (0x0008) [0x0000000000004000]              ( CPF_Config )
	class Usfxpowercustomaction*                       SourcePower;                                      		// 0x00C8 (0x0004) [0x0000000000000000]              
	class Usfxpowercustomaction*                       CurrentDetonationPower;                           		// 0x00CC (0x0004) [0x0000000000000000]              
	class URvrClientEffectInterface*                   DetonationVFX;                                    		// 0x00D0 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 DetonationSound;                                  		// 0x00D4 (0x0004) [0x0000000000000000]              
	class URvrClientEffectInterface*                   TargetCrustVFX;                                   		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                MaxTargets;                                       		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fPowerRatio;                                      		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                MaximumRagdollTargets;                            		// 0x00E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaximumRagdollTargetsMP;                          		// 0x00E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bOnlyOnDeath : 1;                                 		// 0x00EC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52004 ];

		return pClassPointer;
	};

	void ClientDoPowerComboImpact ( class AActor* oActor, int CustomActionReactionType, float DetonationPowerRank, int MiscFlags );
	bool OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal );
	float GetForce ( float fRatio );
	float GetDamage ( float fRatio );
	void OnPowerComboDetonated ( class Usfxpowercustomaction* DetonationPower, struct FVector HitLocation, struct FVector HitNormal );
	float CalculatePowerRatio ( float DetonationPowerRank );
	void OnRemoved ( );
	void OnApplied ( );
};

UClass* Usfxgameeffect_powercombo::pClassPointer = NULL;

// Class SFXGame.SFXPowerCustomAction_PassivePower
// 0x0000 (0x0695 - 0x0695)
class USFXPowerCustomAction_PassivePower : public Usfxpowercustomaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52205 ];

		return pClassPointer;
	};

	int GetSaveGamePowerState ( );
	void SetSaveGamePowerState ( int nState );
	struct FName GetUniquePowerPlayerVariable ( );
	void RestoreSaveState ( );
	void ReplicationDecodeDelayAndResistance ( int EncodedData, float* fDelay, unsigned char* Resistance );
	int ReplicationEncodeDelayAndResistance ( float fDelay, unsigned char Resistance );
	void OnSourcePowerBioticDetonation ( );
	struct FString GetPowerComboClassFromUniqueID ( int PowerComboTypeUniqueID );
	int GetPowerComboTypeUniqueIDFromClass ( struct FString className );
	void ClientDoPowerComboImpactFromEffect ( class AActor* oTarget, int CustomActionReactionType, struct FString EffectClassName, float DetonatorPowerRank, int MiscFlags );
	void ClientDoPowerCombo ( class UClass* EffectClass, int SourcePowerID, class ABioPawn* SourcePowerInstigator, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal );
	void ReplicatePowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal );
	void DelayedDoPowerCombo ( );
	void DoPowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal, unsigned long bDelayed );
	void CheckForPowerCombo ( class AActor* Target, unsigned char Resistance, struct FVector HitLocation, struct FVector HitNormal );
	class Usfxgameeffect_powercombo* AddComboEffect ( class AActor* Target, class UClass* ComboClass, float Duration );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	void CombatEnded ( );
	void ReplaceAnimSetWithDynamic ( class UAnimSet* DynAnimSet );
	void GetPowerAnimInfo ( class UAnimSet** AnimSet, TArray< struct FName >* AnimNames );
	void CleanUpProjectile ( class ASFXProjectile_PowerCustomAction* oProjectile );
	void ReplicatePowerComboImpact ( class ABioPawn* Target, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags );
	void ReplicatePowerSubsequentImpact ( class ABioPawn* Target, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback );
	void ReplicateImpact ( class ABioPawn* Target, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType );
	void ClientDoCustomAction ( unsigned long bForced );
	void Replicate ( );
	void PlayPowerScreenShake ( class UClass* ScreenShakeClass, struct FVector HitLocation );
	void PlayPowerControllerRumble ( class UClass* RumbleClass, struct FVector HitLocation );
	struct FVector GetDefaultClientEffectParams ( );
	void AddEvolvedRankBonus ( float Bonus, struct FPowerData* Data );
	void ApplyForceToActor ( class AActor* oActor, struct FVector vForce );
	void ApplyShieldBonus ( class ABioPawn* oPawn, float fShieldValue, unsigned long bShieldValueIsPercent, float fDuration, struct FName Category, unsigned long bRemoveEffectWhenShieldsDown );
	void ApplyHealthBonus ( class ABioPawn* oPawn, float fHealthValue, unsigned long bHealthValueIsPercent, float fDuration, struct FName Category );
	void PlayParticleSystemOnSocket ( class UParticleSystem* PS_Template, class ABioPawn* TargetPawn, struct FName SocketName, struct FRotator Rotation );
	bool HasRemainingShieldOfType ( class ABioPawn* oPawn, class UClass* ShieldClass );
	bool IsPlaceable ( class AActor* oImpacted );
	bool ApplyPermanentGameEffect ( class AActor* oTarget, class UClass* className, float fEffectValue, struct FName nmCategory, class AController* Instigator );
	bool ApplyTemporaryGameEffect ( class AActor* oTarget, class UClass* className, float fDuration, float fEffectValue, struct FName nmCategory, class AController* Instigator );
	bool IsOfRace ( class AActor* oImpacted, unsigned char eRace );
	bool CanBeRagdolledByPowers ( class ABioPawn* oPawn );
	bool ImpactPlaceable ( class AActor* oCaster, class AActor* oImpacted, struct FVector Momentum, float PlotPlaceableDamage, unsigned long bForceDamage );
	float GetPhysicsLevelResistance ( class AActor* oTarget );
	int GetPhysicsLevel ( class AActor* oImpacted, unsigned long bIgnoreResistance );
	bool IsMachineRace ( class AActor* oImpacted );
	bool ShouldUsePowerOnShields ( class ABioPawn* Target, class UClass* DamageType, struct FString* sOptionalInfo );
	void RagdollPhysicsImpact ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir );
	bool CanImpactActor ( class AActor* oActor );
	bool AddActorToImpactedList ( class AActor* oActor, struct FVector vImpactLocation, TArray< class AActor* >* ImpactedActors );
	bool DetonationHitsTarget ( struct FVector HitLocation, float MaxRange, class AActor* HitActor, struct FAreaEffectParameters DetonationParams );
	bool GetNearbyActors ( struct FVector HitLocation, float Radius, float MaxRange, struct FAreaEffectParameters Param, TArray< class AActor* >* ImpactedActors );
	void ApplyBonusToParameter ( class USFXGameEffect* Bonus, unsigned long bRemove, struct FPowerData* Parameter );
	void ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove );
	void PlayImpactEffects ( class AActor* oImpacted, struct FVector ImpactLocation, struct FVector ImpactNormal );
	void PlayImpactSounds ( struct FVector ImpactLocation, class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds );
	void PlayCasterSounds ( class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds );
	void PlayDetonationEffects ( struct FVector ImpactLocation, struct FVector ImpactNormal, class ASFXProjectile_PowerCustomAction* oProjectile );
	void PlayReleaseEffects ( );
	bool OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal );
	float GetImpactForce ( class AActor* oImpacted );
	class UClass* GetNonRagdollDamageType ( );
	float GetImpactDamage ( class AActor* oImpacted, class UClass** DamageType );
	bool DoAreaExplosionForActor ( class AActor* oActor, struct FVector location, int ImpactCount, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxRagdollOverride, struct FScriptDelegate ImpactCallback, class UClass* MaxRagdollDmgTypeOverride );
	void AreaExplosion ( struct FVector location, float fRadius, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxImpactCount, struct FScriptDelegate ImpactCallback, int MaxRagdollOverride, class UClass* MaxRagdollDmgTypeOverride );
	void ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback );
	void ClientDoPowerComboImpact ( class AActor* oActor, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags );
	void ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType );
	bool DoPowerDetonatedForActor ( class AActor* oActor, struct FVector HitLocation, struct FVector HitNormal, int nImpactCount, unsigned long bFirstTarget, class ASFXProjectile_PowerCustomAction* oProjectile );
	void OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor );
	void ReleaseBuffPower ( );
	void ReleaseMeleePower ( );
	void ReleaseInstantPower ( );
	void OnClientPowerProjectileSpawned ( class ASFXProjectile_PowerCustomAction* NewProjectile );
	class ASFXProjectile_PowerCustomAction* ReleaseProjectilePower ( );
	bool GetProjectileAttachPoint ( struct FVector* AttachPoint );
	void ReleasePower ( );
	void ResetPowerCooldown ( );
	void StartPowerCooldown ( );
	float GetPowerCooldown ( );
	void eventTickCustomAction ( float fDeltaTime );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void EndThisCustomAction ( );
	bool PlayBodyStance ( struct FBodyStance BodyStance, float fStanceBlendInTime, float fStanceBlendOutTime );
	void StartCastAnimations ( );
	void StartPower ( );
	void StartCustomAction ( );
	bool ChangeCoverAction ( );
	struct FBodyStance GetCurrentBodyStance ( );
	bool LoadAnimSet ( );
	bool CanUsePower ( class AActor* oTarget );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXPowerCustomAction_PassivePower::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_Power
// 0x0007 (0x00E9 - 0x00E2)
class USFXDamageType_Power : public USFXDamageType_Default
{
public:
	float                                              PowerReactionChance;                              		// 0x00E4 (0x0004) [0x0000000000000000]              
	unsigned char                                      Discipline;                                       		// 0x00E8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52512 ];

		return pClassPointer;
	};

};

UClass* USFXDamageType_Power::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_Weapon
// 0x0000 (0x00E2 - 0x00E2)
class USFXDamageType_Weapon : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52549 ];

		return pClassPointer;
	};

	float CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc );
	void ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc );
	bool CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer );
};

UClass* USFXDamageType_Weapon::pClassPointer = NULL;

// Class SFXGame.SFXPhysicalMaterialProperty
// 0x0014 (0x0050 - 0x003C)
class USFXPhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
	class USFXPhysicalMaterialDecals*                  PhysicalMaterialDecals;                           		// 0x003C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class USFXPhysicalMaterialImpactEffects*           PhysicalMaterialImpactEffects;                    		// 0x0040 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class USFXPhysicalMaterialImpactSounds*            PhysicalMaterialImpactSounds;                     		// 0x0044 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class USFXPhysicalMaterialFootSteps*               PhysicalMaterialFootSteps;                        		// 0x0048 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class USFXPhysicalMaterialPhysics*                 PhysicalMaterialPhysics;                          		// 0x004C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52724 ];

		return pClassPointer;
	};

};

UClass* USFXPhysicalMaterialProperty::pClassPointer = NULL;

// Class SFXGame.SFXPhysicalMaterialBase
// 0x0000 (0x003C - 0x003C)
class USFXPhysicalMaterialBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52732 ];

		return pClassPointer;
	};

};

UClass* USFXPhysicalMaterialBase::pClassPointer = NULL;

// Class SFXGame.SFXPhysicalMaterialFootSteps
// 0x005C (0x0098 - 0x003C)
class USFXPhysicalMaterialFootSteps : public USFXPhysicalMaterialBase
{
public:
	class UWwiseEvent*                                 HHWalkingSound;                                   		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HHRunningSound;                                   		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WalkingSound;                                     		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 RunningSound;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HLWalkingSound;                                   		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HLRunningSound;                                   		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 RHWalkingSound;                                   		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 RHRunningSound;                                   		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 RMWalkingSound;                                   		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 RMRunningSound;                                   		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 RLWalkingSound;                                   		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 RLRunningSound;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HuskWalkingSound;                                 		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HuskRunningSound;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 CollectorWalkingSound;                            		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 CollectorRunningSound;                            		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 OtherWalkingSound;                                		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 OtherRunningSound;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Landing;                                          		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Leaping;                                          		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FootstepWalk;                                     		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FootstepRun;                                      		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 TireSound;                                        		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52731 ];

		return pClassPointer;
	};

};

UClass* USFXPhysicalMaterialFootSteps::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_DamageReaction
// 0x0040 (0x0101 - 0x00C1)
class USFXCustomAction_DamageReaction : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_Reaction;                                      		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_ReactionExplore;                               		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fAnimPlayRate;                                    		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimBlendInTime;                                 		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimBlendOutTime;                                		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimStartTime;                                   		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fReactionDuration;                                		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationTime;                                     		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactScale;                                      		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             PS_Impact;                                        		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAnimLooping : 1;                                 		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAllowAnimInterrupt : 1;                          		// 0x00FC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRagdollOnFinish : 1;                             		// 0x00FC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRotateOnHit : 1;                                 		// 0x00FC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDeathReaction : 1;                               		// 0x00FC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      ERootMotionMode;                                  		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52844 ];

		return pClassPointer;
	};

	void ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FName BoneName, class UClass* DamageType );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	void CheckForRagdollRecovery ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void OnCustomActionTimeUp ( );
	void StartCustomAction ( );
	void Init ( struct FVector HitLocation, struct FVector HitNormal, int BoneIndex, unsigned long bPlayImpact, class UClass* DamageType );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_DamageReaction::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_GiveWeapon
// 0x0010 (0x00C0 - 0x00B0)
class USFXSeqAct_GiveWeapon : public USequenceAction
{
public:
	TArray< class UClass* >                            WeaponList;                                       		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bClearExisting : 1;                               		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceReplace : 1;                                		// 0x00BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53068 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* USFXSeqAct_GiveWeapon::pClassPointer = NULL;

// Class SFXGame.BioSeqEvt_OnCastAt
// 0x0000 (0x00D2 - 0x00D2)
class UBioSeqEvt_OnCastAt : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53200 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* UBioSeqEvt_OnCastAt::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_Ragdoll
// 0x0000 (0x00D2 - 0x00D2)
class USFXSeqEvt_Ragdoll : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53288 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USFXSeqEvt_Ragdoll::pClassPointer = NULL;

// Class SFXGame.SFXKillRagdollVolume
// 0x0000 (0x022C - 0x022C)
class ASFXKillRagdollVolume : public ATriggerVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53301 ];

		return pClassPointer;
	};

	void eventProcessActorSetVolume ( class AActor* Other );
	void eventCollisionChanged ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FString GetLocationStringFor ( class APlayerReplicationInfo* PRI );
	void eventPostBeginPlay ( );
	bool ScriptLineCheck ( struct FVector* End, struct FVector* Start, struct FVector* Extent );
	bool EncompassesPoint ( struct FVector Loc );
	bool Encompasses ( class AActor* Other );
};

UClass* ASFXKillRagdollVolume::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_DeathEffect
// 0x0016 (0x0078 - 0x0062)
class USFXGameEffect_DeathEffect : public USFXGameEffect
{
public:
	class UClass*                                      PlayExclusivelyForDamageType;                     		// 0x0064 (0x0004) [0x0000000000000000]              
	class URvrClientEffectInterface*                   CE_DeathEffectTemplate;                           		// 0x0068 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 DeathSoundEffect;                                 		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                Priority;                                         		// 0x0070 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCorpseDestroyed : 1;                             		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53445 ];

		return pClassPointer;
	};

};

UClass* USFXGameEffect_DeathEffect::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_SyncPawnPartner_Base
// 0x002B (0x00EC - 0x00C1)
class USFXCustomAction_SyncPawnPartner_Base : public UBioCustomAction
{
public:
	float                                              APSBuffer[ 0x4 ];                                 		// 0x00C4 (0x0010) [0x0000000000000000]              
	class ABioPawn*                                    Instigator;                                       		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                InstigatorCustomAction;                           		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              APSThreshold;                                     		// 0x00DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                APSIdx;                                           		// 0x00E0 (0x0004) [0x0000000000000000]              
	class USFXTimelineData*                            APSTimeline;                                      		// 0x00E4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSendReachedDestinationEvent : 1;                 		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53520 ];

		return pClassPointer;
	};

	bool CanBeInterrupted ( );
	void CloseInputWindow ( );
	void ButtonPressed ( );
	void ReplicateMashSuccess ( class ABioPawn* Pawn );
	void InteractionStarted ( );
	void eventReachedPrecisePosition ( );
	bool MessageEvent ( struct FName EventName, class UObject* Sender );
	bool CanInteractWithPawn ( class ABioPawn* OtherPawn );
	void StopCustomAction ( );
	void StartCustomAction ( );
};

UClass* USFXCustomAction_SyncPawnPartner_Base::pClassPointer = NULL;

// Class SFXGame.sfxmodule_damageplayer
// 0x007B (0x025C - 0x01E1)
class Usfxmodule_damageplayer : public USFXModule_DamageParty
{
public:
	struct FInterpCurveFloat                           BleedoutVFXCurve;                                 		// 0x01E4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           BleedoutSFXCurve;                                 		// 0x01F4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     BleedOutRTPC;                                     		// 0x0204 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FGuid                                       CE_Bleedout_GUID;                                 		// 0x0210 (0x0010) [0x0000000000000000]              
	float                                              HealthRegenPct;                                   		// 0x0220 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SoftMaxHealth;                                    		// 0x0224 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SavedHealth;                                      		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShieldPresentationTime;                           		// 0x022C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              BleedoutStartThreshold;                           		// 0x0230 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              InitialBleedoutPct;                               		// 0x0234 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              BleedoutVFXInterpSpeed;                           		// 0x0238 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CurrentBleedoutVFXParam;                          		// 0x023C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BleedoutSFXInterpSpeed;                           		// 0x0240 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CurrentBleedoutSFXParam;                          		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class URvrClientEffectInterface*                   CE_BleedOut;                                      		// 0x0248 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   MIC_Bleedout;                                     		// 0x024C (0x0004) [0x0000000000000000]              
	class UWwiseAudioComponent*                        WwiseComponent;                                   		// 0x0250 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UWwiseEventPairObject*                       BleedOutEventPair;                                		// 0x0254 (0x0004) [0x0000000000000000]              
	float                                              HealthRatio;                                      		// 0x0258 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53550 ];

		return pClassPointer;
	};

	void SFXTakeDamage ( float Damage, struct FVector Momentum, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation );
	void RecomputeHealthSegment ( );
	void SetCurrentHealth ( float NewHealth, unsigned long bRecomputeHealthSegment );
	void RecoverFromBleedout ( unsigned long bResetHealth );
	void DisableBleedoutSoundEffects ( );
	void DisableBleedOutVisualEffects ( );
	void UpdateBleedoutFX ( );
	void WaitForShieldPresentation ( );
	void StartBleedOut ( );
	float GetBleedoutPct ( );
	void ApplyDamageToHealth ( float Damage, class AController* instigatedBy, class UClass* DamageType, struct FVector HitLocation, float* AppliedDamage );
	void Tick ( float DeltaTime );
	void ApplySavedHealth ( );
	void SetPlayerHealthFromSave ( float Health );
	void RegenFullHealth ( );
};

UClass* Usfxmodule_damageplayer::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_ImpactedByPower
// 0x0000 (0x00D2 - 0x00D2)
class USFXSeqEvt_ImpactedByPower : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53557 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USFXSeqEvt_ImpactedByPower::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_Power_Fire
// 0x0000 (0x00E9 - 0x00E9)
class USFXDamageType_Power_Fire : public USFXDamageType_Power
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53573 ];

		return pClassPointer;
	};

};

UClass* USFXDamageType_Power_Fire::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_Power_Electrocute
// 0x0000 (0x00E9 - 0x00E9)
class USFXDamageType_Power_Electrocute : public USFXDamageType_Power
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53574 ];

		return pClassPointer;
	};

};

UClass* USFXDamageType_Power_Electrocute::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_Power_Freeze
// 0x0000 (0x00E9 - 0x00E9)
class USFXDamageType_Power_Freeze : public USFXDamageType_Power
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53575 ];

		return pClassPointer;
	};

};

UClass* USFXDamageType_Power_Freeze::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_Melee
// 0x0000 (0x00E2 - 0x00E2)
class USFXDamageType_Melee : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53606 ];

		return pClassPointer;
	};

	float CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc );
	void ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc );
	bool CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer );
};

UClass* USFXDamageType_Melee::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_SecondMelee
// 0x0000 (0x00E2 - 0x00E2)
class USFXDamageType_SecondMelee : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53607 ];

		return pClassPointer;
	};

	float CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc );
	void ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc );
	bool CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer );
};

UClass* USFXDamageType_SecondMelee::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_ThirdMelee
// 0x0000 (0x00E2 - 0x00E2)
class USFXDamageType_ThirdMelee : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53608 ];

		return pClassPointer;
	};

	float CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc );
	void ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc );
	bool CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer );
};

UClass* USFXDamageType_ThirdMelee::pClassPointer = NULL;

// Class SFXGame.BioSeqEvt_NotifyLimbDetached
// 0x0000 (0x00D2 - 0x00D2)
class UBioSeqEvt_NotifyLimbDetached : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53651 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* UBioSeqEvt_NotifyLimbDetached::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_OrbitalGame
// 0x00D0 (0x0190 - 0x00C0)
class UBioSeqAct_OrbitalGame : public USeqAct_Latent
{
public:
	TArray< class UWwiseBaseSoundObject* >             MineralStartEvents;                               		// 0x00C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UWwiseBaseSoundObject* >             MineralStopEvents;                                		// 0x00CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           MineralRTPCNames;                                 		// 0x00D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     LandingSiteIndicator_RTPCName;                    		// 0x00E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UWwiseBaseSoundObject* >             AnomalyDetectedVO;                                		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UWwiseBaseSoundObject* >             ProbeLaunchedVO;                                  		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FRotator                                    ReticleRotStart;                                  		// 0x0108 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ReticleRotMaxClamp;                               		// 0x0114 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ReticleRotMinClamp;                               		// 0x0120 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AInterpActor*                                Planet;                                           		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AInterpActor*                                Clouds;                                           		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AInterpActor*                                Probe;                                            		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AInterpActor*                                Ring;                                             		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AInterpActor*                                ScanSphere;                                       		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AEmitter*                                    ProbeTrail;                                       		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             LandingSiteMarker;                                		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             Reticle;                                          		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ScanReticle;                                      		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             LaunchReticle;                                    		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ScanWipe;                                         		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ScanDirection;                                    		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ScanBlip;                                         		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ProbeImpact;                                      		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ProbeLocationMarker;                              		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       ProbeImpactSound;                                 		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       MineralRecoverySound_None;                        		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       MineralRecoverySound_Small;                       		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       MineralRecoverySound_Medium;                      		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       MineralRecoverySound_Large;                       		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       ProbeLaunchSound_NoProbes;                        		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       LandingSiteIndicator;                             		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       AnomalyStaticStart;                               		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       AnomalyStaticStop;                                		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBioPlanet*                                  CurrentPlanet;                                    		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53658 ];

		return pClassPointer;
	};

	class UBioCameraBehaviorGalaxy* GetGalaxyCamera ( );
	void SignalProbeImpact ( );
	void SignalProbeLaunch ( );
	void EndAction ( );
	bool eventUpdate ( float DeltaTime );
	void eventActivated ( );
};

UClass* UBioSeqAct_OrbitalGame::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_MultiLand
// 0x0038 (0x00F8 - 0x00C0)
class UBioSeqAct_MultiLand : public USeqAct_Latent
{
public:
	struct FRotator                                    ReticleRotStart;                                  		// 0x00C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ReticleRotMaxClamp;                               		// 0x00CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ReticleRotMinClamp;                               		// 0x00D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AInterpActor*                                Planet;                                           		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             Reticle;                                          		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             LandingSiteMarker;                                		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LandingSiteScale;                                 		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBioPlanet*                                  CurrentPlanet;                                    		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53661 ];

		return pClassPointer;
	};

	class UBioCameraBehaviorGalaxy* GetGalaxyCamera ( );
	void EndAction ( );
	bool eventUpdate ( float DeltaTime );
	void eventActivated ( );
};

UClass* UBioSeqAct_MultiLand::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_MoveAlongCover
// 0x0023 (0x00E4 - 0x00C1)
class USFXCustomAction_MoveAlongCover : public UBioCustomAction
{
public:
	struct FCoverInfo                                  m_MoveCoverDestination;                           		// 0x00C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FCoverInfo                                  m_MoveCoverFinalDestination;                      		// 0x00CC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ASFXAI_Cover*                                m_oCoverAI;                                       		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_MoveCoverMarker;                                		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_MovementToSlotStart;                            		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bIsCoverIntermediate : 1;                       		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bIsInitialized : 1;                             		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bIsInterrupted : 1;                             		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53918 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void StartCustomAction ( );
	void ReachedDestination ( );
	void eventTickCustomAction ( float DeltaTime );
	bool UpdateMoveCoverDestinationSlot ( );
	bool IsTargetCoverValid ( class ACoverLink* targetLink, int TargetSlotIdx );
	void Init ( unsigned char TargetCoverDir, class ACoverLink* TargetCoverLink, int TargetCoverSlotIdx );
	bool DoReStart ( class ACoverSlotMarker* TargetCover );
	bool CanOverrideCustomAction ( int OldCustomAction, int NewCustomAction );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
};

UClass* USFXCustomAction_MoveAlongCover::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_PowerPhysics
// 0x0000 (0x00E2 - 0x00E2)
class USFXDamageType_PowerPhysics : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54238 ];

		return pClassPointer;
	};

	float CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc );
	void ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc );
	bool CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer );
};

UClass* USFXDamageType_PowerPhysics::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_SingleAnim
// 0x002D (0x00EE - 0x00C1)
class USFXCustomAction_SingleAnim : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_Anim;                                          		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fAnimPlayRate;                                    		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimBlendInTime;                                 		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimBlendOutTime;                                		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimStartTime;                                   		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimDuration;                                    		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAllowAnimInterrupt : 1;                          		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bResetPhysics : 1;                                		// 0x00E4 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned char                                      ERootMotionMode;                                  		// 0x00E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ERootMotionRotationMode;                          		// 0x00E9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootBoneX;                                        		// 0x00EA (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootBoneY;                                        		// 0x00EB (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootBoneZ;                                        		// 0x00EC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      StartBlendType;                                   		// 0x00ED (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54542 ];

		return pClassPointer;
	};

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void OnCustomActionTimeUp ( );
	void StartCustomAction ( );
	struct FBodyStance GetBodyStanceAnim ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_SingleAnim::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_MountedGunReload
// 0x0000 (0x00EE - 0x00EE)
class USFXCustomAction_MountedGunReload : public USFXCustomAction_SingleAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54541 ];

		return pClassPointer;
	};

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void OnCustomActionTimeUp ( );
	void StartCustomAction ( );
	struct FBodyStance GetBodyStanceAnim ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_MountedGunReload::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_EnterMountedGun
// 0x0000 (0x00EE - 0x00EE)
class USFXCustomAction_EnterMountedGun : public USFXCustomAction_SingleAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54543 ];

		return pClassPointer;
	};

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void OnCustomActionTimeUp ( );
	void StartCustomAction ( );
	struct FBodyStance GetBodyStanceAnim ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_EnterMountedGun::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_ExitMountedGun
// 0x0000 (0x00EE - 0x00EE)
class USFXCustomAction_ExitMountedGun : public USFXCustomAction_SingleAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54544 ];

		return pClassPointer;
	};

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void OnCustomActionTimeUp ( );
	void StartCustomAction ( );
	struct FBodyStance GetBodyStanceAnim ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_ExitMountedGun::pClassPointer = NULL;

// Class SFXGame.SFXPhysicalMaterialPhysics
// 0x0008 (0x0044 - 0x003C)
class USFXPhysicalMaterialPhysics : public USFXPhysicalMaterialBase
{
public:
	class UWwiseEvent*                                 Sound;                                            		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WwiseType;                                        		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54635 ];

		return pClassPointer;
	};

};

UClass* USFXPhysicalMaterialPhysics::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_MoveToLocation
// 0x0004 (0x0088 - 0x0084)
class USFXAICmd_MoveToLocation : public USFXAICommand
{
public:
	unsigned long                                      m_bAllowEarlyFinish : 1;                          		// 0x0084 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bAllowedToFire : 1;                             		// 0x0084 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bMoveCancelled : 1;                             		// 0x0084 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bUsePartialPaths : 1;                           		// 0x0084 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55430 ];

		return pClassPointer;
	};

	bool CancelCommand ( int nReason );
	bool HasReachedLocation ( );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void UpdateFiring ( );
	void StopFiringWeapon ( unsigned long bReleaseAttackTicket );
	bool StartFiringWeapon ( );
	bool CanStartFiring ( );
	void Paused ( class UGameAICommand* NewCommand );
	void eventPopped ( );
	void Pushed ( );
	bool MoveToLocation ( class Asfxai_core* AI, struct FVector NewMovePoint, float NewMoveOffset, unsigned long bInAllowedToFire, unsigned long bInAllowPartialPath, unsigned long bInAllowEarlyFinish );
};

UClass* USFXAICmd_MoveToLocation::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_PrecisionMove
// 0x001F (0x00E0 - 0x00C1)
class USFXCustomAction_PrecisionMove : public UBioCustomAction
{
public:
	struct FVector                                     m_vDestinationLoc;                                		// 0x00C4 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rDestinationRot;                                		// 0x00D0 (0x000C) [0x0000000000000000]              
	float                                              m_fRotationTime;                                  		// 0x00DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55486 ];

		return pClassPointer;
	};

	void eventReachedPrecisePosition ( );
	void SetDestination ( struct FVector vLocation, struct FRotator rRotation, float fRotationTime );
	void StartCustomAction ( );
};

UClass* USFXCustomAction_PrecisionMove::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_UsePower
// 0x001C (0x00A0 - 0x0084)
class USFXAICmd_UsePower : public USFXAICommand
{
public:
	struct FVector                                     m_vTargetLocation;                                		// 0x0084 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       nmPowerToUse;                                     		// 0x0090 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_oTargetActor;                                   		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bPlayerOrder : 1;                                 		// 0x009C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTargetSpecified : 1;                             		// 0x009C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55499 ];

		return pClassPointer;
	};

	struct FString eventGetDumpString ( );
	void Popped ( );
	void Pushed ( );
	bool ShouldCancelPower ( );
	bool StartPower ( );
	bool ChoosePowerTarget ( class AActor* oTargetActor, struct FVector vTargetLocation );
	bool UsePower ( class Asfxai_core* AI, struct FName nmPower, class AActor* oTarget, struct FVector vTargetLoc, unsigned long bUseSpecifiedTarget, unsigned long bOrdered );
};

UClass* USFXAICmd_UsePower::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_Fallen
// 0x0000 (0x0084 - 0x0084)
class USFXAICmd_Fallen : public USFXAICommand
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55565 ];

		return pClassPointer;
	};

	void NotifyFriendDied ( class ABioPawn* FriendPawn );
	void OnEnteredPlaypen ( );
	bool StartFollowingActor ( class AActor* ActorToFollow );
	bool MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, unsigned long bForceWalk, struct FScriptDelegate MoveDelegate );
	bool FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, unsigned long bForceShoot, float fAttackDuration, struct FScriptDelegate FireDelegate );
	bool UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression );
	void MoveToDelegate ( int nReason );
	void FireWeaponDelegate ( int nReason );
	void UsePowerDelegate ( int nReason );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	bool ShouldRun ( );
	bool CancelCommand ( int nReason );
	void NotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	bool NotifyMoodChange ( );
	void NotifyPendingPowerImpact ( struct FName Label, float TimeBeforeImpact, class Usfxpowercustomaction* Power, class ASFXProjectile_PowerCustomAction* Projectile );
	void NotifyNearMiss ( struct FVector HitLocation );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void NotifyArmourDestroyed ( struct FName ArmourPiece, class AController* instigatedBy );
	void NotifyArmourHit ( float Damage, struct FName ArmourPiece, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyNewEnemy ( class APawn* NewEnemy );
	void PeriodicMoveCheck ( );
	void UpdateMovementActions ( );
	bool CanInterruptCurrentCommand ( );
	void Resumed ( struct FName OldCommandName );
	void Paused ( class UGameAICommand* NewCommand );
};

UClass* USFXAICmd_Fallen::pClassPointer = NULL;

// Class SFXGame.SFXAICommand_Base_Combat
// 0x0014 (0x0098 - 0x0084)
class USFXAICommand_Base_Combat : public USFXAICommand
{
public:
	struct FVector2D                                   InitialTransitionCheckTime;                       		// 0x0084 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   TransitionCheckTime;                              		// 0x008C (0x0008) [0x0000000000000000]              
	unsigned long                                      bFiringWeapon : 1;                                		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55580 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICommand_Base_Combat::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_ReturnToPlaypen
// 0x0000 (0x0098 - 0x0098)
class USFXAICmd_ReturnToPlaypen : public USFXAICommand_Base_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55579 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICmd_ReturnToPlaypen::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_FireWeapon
// 0x000C (0x0090 - 0x0084)
class USFXAICmd_FireWeapon : public USFXAICommand
{
public:
	float                                              DamageTaken;                                      		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageThreshold;                                  		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bForceShoot : 1;                                  		// 0x008C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55648 ];

		return pClassPointer;
	};

	void UpdateFocus ( );
	bool LeanBackInAfterShooting ( );
	bool LeanBeforeShooting ( );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	bool StartFiringWeapon ( );
	bool CanStartFiring ( );
	bool CancelCommand ( int nReason );
	void Paused ( class UGameAICommand* NewCommand );
	void Popped ( );
	void Pushed ( );
	bool FireWeapon ( class Asfxai_core* AI, float DmgThreshold, unsigned long ForceShoot );
};

UClass* USFXAICmd_FireWeapon::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_Disabled
// 0x0000 (0x0098 - 0x0098)
class USFXAICmd_Disabled : public USFXAICommand_Base_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55701 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICmd_Disabled::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_KismetOrder
// 0x0000 (0x0098 - 0x0098)
class USFXAICmd_KismetOrder : public USFXAICommand_Base_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55709 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICmd_KismetOrder::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_FollowActor
// 0x0004 (0x0088 - 0x0084)
class USFXAICmd_FollowActor : public USFXAICommand
{
public:
	unsigned long                                      bActorReachable : 1;                              		// 0x0084 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55751 ];

		return pClassPointer;
	};

	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	void UpdateFollowing ( );
	bool PathfindToActor ( );
	bool IsDirectlyReachable ( );
	void eventGetActorToFollow ( class AActor** oActor, struct FVector* vLocation );
	void Resumed ( struct FName OldCommandName );
	bool ShouldCancelFollow ( );
	void eventPopped ( );
	void Pushed ( );
};

UClass* USFXAICmd_FollowActor::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_PossessTurret
// 0x0004 (0x00B4 - 0x00B0)
class USFXSeqAct_PossessTurret : public USequenceAction
{
public:
	class ASFXVehicle_MountedGun*                      MountedGun;                                       		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55853 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFXSeqAct_PossessTurret::pClassPointer = NULL;

// Class SFXGame.sfxaicmd_killingblow
// 0x000C (0x00A4 - 0x0098)
class Usfxaicmd_killingblow : public USFXAICommand_Base_Combat
{
public:
	struct FRotator                                    ToTarget;                                         		// 0x0098 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55869 ];

		return pClassPointer;
	};

	bool IsInStompRange ( class APawn* StompTarget );
	void Popped ( );
	void Pushed ( );
};

UClass* Usfxaicmd_killingblow::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_MoveToCover
// 0x0004 (0x0088 - 0x0084)
class USFXAICmd_MoveToCover : public USFXAICommand
{
public:
	unsigned long                                      m_bDoPeriodicCoverCheck : 1;                      		// 0x0084 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bAllowedToFire : 1;                             		// 0x0084 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55957 ];

		return pClassPointer;
	};

	void eventPopped ( );
	void Pushed ( );
	void NotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	void PeriodicCoverValidation ( );
	bool MoveToCover ( class ASFXAI_Cover* AI, unsigned long bInDoPeriodicCoverCheck, unsigned long bInAllowedToFire );
};

UClass* USFXAICmd_MoveToCover::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_CoverUserStuck
// 0x0000 (0x0098 - 0x0098)
class USFXAICmd_CoverUserStuck : public USFXAICommand_Base_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55995 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICmd_CoverUserStuck::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_Base_Melee
// 0x0000 (0x0098 - 0x0098)
class USFXAICmd_Base_Melee : public USFXAICommand_Base_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56014 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICmd_Base_Melee::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_Reaction_Flank
// 0x0000 (0x0098 - 0x0098)
class USFXAICmd_Reaction_Flank : public USFXAICommand_Base_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56018 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICmd_Reaction_Flank::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_CoverUserEvade
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_CoverUserEvade : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56021 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_CoverUserEvade::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_Berserk
// 0x0000 (0x0098 - 0x0098)
class USFXAICmd_Berserk : public USFXAICommand_Base_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56033 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICmd_Berserk::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_Resurrect
// 0x0000 (0x0098 - 0x0098)
class USFXAICmd_Resurrect : public USFXAICommand_Base_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56147 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICmd_Resurrect::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_AcquireCover
// 0x0014 (0x0098 - 0x0084)
class USFXAICmd_AcquireCover : public USFXAICommand
{
public:
	struct FCoverInfo                                  NewCoverGoal;                                     		// 0x0084 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UGoal_AtCover*                               CoverEvaluator;                                   		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      CoverGoalActor;                                   		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDoPeriodicCoverCheck : 1;                        		// 0x0094 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCanShoot : 1;                                    		// 0x0094 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56165 ];

		return pClassPointer;
	};

	void Pushed ( );
	bool AcquireNewCover ( class ASFXAI_Cover* AI, class UGoal_AtCover* GoalEvaluator, class AActor* GoalActor, unsigned long bUsePeriodicCheck, unsigned long bAllowedToFire );
};

UClass* USFXAICmd_AcquireCover::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_AcquireCoverNearHoldLoc
// 0x0008 (0x00A0 - 0x0098)
class USFXAICmd_AcquireCoverNearHoldLoc : public USFXAICmd_AcquireCover
{
public:
	class ACoverLink*                                  OriginalCoverLink;                                		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bInitialPlayerOrder : 1;                          		// 0x009C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56172 ];

		return pClassPointer;
	};

	bool AcquireCoverNearHoldLoc ( class ASFXAI_Henchman* AI, class UGoal_AtCover* GoalEvaluator, class AActor* GoalActor, unsigned long bPlayerOrder, unsigned long bUsePeriodicCheck, unsigned long bAllowedToFire );
};

UClass* USFXAICmd_AcquireCoverNearHoldLoc::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_MoveToGoal
// 0x0008 (0x008C - 0x0084)
class USFXAICmd_MoveToGoal : public USFXAICommand
{
public:
	class AActor*                                      m_oTempGoalActor;                                 		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bAllowedToFire : 1;                             		// 0x0088 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bUsePartialPaths : 1;                           		// 0x0088 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bRotateBeforeMoving : 1;                        		// 0x0088 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bMovingToFireTarget : 1;                        		// 0x0088 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56178 ];

		return pClassPointer;
	};

	void LogRoute ( );
	float GetMoveOffset ( );
	void eventUpdateMovementActions ( );
	bool CancelCommand ( int nReason );
	bool IsSpecialMoveAfterCurrentMoveTarget ( );
	bool GetFirstMoveTarget ( );
	void FinishPathGeneration ( );
	bool ApplyPathConstraints ( );
	bool HasReachedGoal ( );
	bool CanSkipNodeAfterTimeout ( class AActor* oMoveTarget );
	void CheckPawnInPlaypen ( );
	void OnEnteredPlaypen ( );
	float GetPeriodicMoveInterval ( );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void UpdateFiring ( );
	void StopFiringWeapon ( unsigned long bReleaseAttackTicket );
	bool StartFiringWeapon ( );
	bool CanStartFiring ( );
	void Paused ( class UGameAICommand* NewCommand );
	void eventPopped ( );
	void Pushed ( );
	bool MoveToGoal ( class Asfxai_core* AI, class AActor* NewMoveGoal, float NewMoveOffset, unsigned long bInAllowedToFire, unsigned long bInAllowPartialPath, unsigned long bInRotateBeforeMoving );
};

UClass* USFXAICmd_MoveToGoal::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_Combat_Henchman
// 0x0000 (0x0098 - 0x0098)
class USFXAICmd_Combat_Henchman : public USFXAICommand_Base_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56189 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICmd_Combat_Henchman::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_MoveAwayFromPlayer
// 0x0000 (0x0098 - 0x0098)
class USFXAICmd_MoveAwayFromPlayer : public USFXAICommand_Base_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56234 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICmd_MoveAwayFromPlayer::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_PassiveWeaponDamageBonus
// 0x0000 (0x0062 - 0x0062)
class USFXGameEffect_PassiveWeaponDamageBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56315 ];

		return pClassPointer;
	};

	class AController* CheckOwnerInstigator ( class AController* Attacker );
	void SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	class UClass* LoadGameEffectClass ( struct FString GEClassName );
	void OnUnpaused ( );
	void OnPaused ( );
	void OnCombatEnd ( );
	void eventOnRemoved ( );
	void eventOnUpdate ( float DeltaSeconds );
	void OnApplied ( );
	void ComputeCustomEffectValue ( float* Value );
};

UClass* USFXGameEffect_PassiveWeaponDamageBonus::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_ExecuteOrders
// 0x0000 (0x0084 - 0x0084)
class USFXAICmd_ExecuteOrders : public USFXAICommand
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56357 ];

		return pClassPointer;
	};

	void NotifyFriendDied ( class ABioPawn* FriendPawn );
	void OnEnteredPlaypen ( );
	bool StartFollowingActor ( class AActor* ActorToFollow );
	bool MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, unsigned long bForceWalk, struct FScriptDelegate MoveDelegate );
	bool FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, unsigned long bForceShoot, float fAttackDuration, struct FScriptDelegate FireDelegate );
	bool UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression );
	void MoveToDelegate ( int nReason );
	void FireWeaponDelegate ( int nReason );
	void UsePowerDelegate ( int nReason );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	bool ShouldRun ( );
	bool CancelCommand ( int nReason );
	void NotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	bool NotifyMoodChange ( );
	void NotifyPendingPowerImpact ( struct FName Label, float TimeBeforeImpact, class Usfxpowercustomaction* Power, class ASFXProjectile_PowerCustomAction* Projectile );
	void NotifyNearMiss ( struct FVector HitLocation );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void NotifyArmourDestroyed ( struct FName ArmourPiece, class AController* instigatedBy );
	void NotifyArmourHit ( float Damage, struct FName ArmourPiece, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyNewEnemy ( class APawn* NewEnemy );
	void PeriodicMoveCheck ( );
	void UpdateMovementActions ( );
	bool CanInterruptCurrentCommand ( );
	void Resumed ( struct FName OldCommandName );
	void Paused ( class UGameAICommand* NewCommand );
};

UClass* USFXAICmd_ExecuteOrders::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_ResetHenchman
// 0x0000 (0x0084 - 0x0084)
class USFXAICmd_ResetHenchman : public USFXAICommand
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56371 ];

		return pClassPointer;
	};

	void NotifyFriendDied ( class ABioPawn* FriendPawn );
	void OnEnteredPlaypen ( );
	bool StartFollowingActor ( class AActor* ActorToFollow );
	bool MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, unsigned long bForceWalk, struct FScriptDelegate MoveDelegate );
	bool FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, unsigned long bForceShoot, float fAttackDuration, struct FScriptDelegate FireDelegate );
	bool UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression );
	void MoveToDelegate ( int nReason );
	void FireWeaponDelegate ( int nReason );
	void UsePowerDelegate ( int nReason );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	bool ShouldRun ( );
	bool CancelCommand ( int nReason );
	void NotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	bool NotifyMoodChange ( );
	void NotifyPendingPowerImpact ( struct FName Label, float TimeBeforeImpact, class Usfxpowercustomaction* Power, class ASFXProjectile_PowerCustomAction* Projectile );
	void NotifyNearMiss ( struct FVector HitLocation );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void NotifyArmourDestroyed ( struct FName ArmourPiece, class AController* instigatedBy );
	void NotifyArmourHit ( float Damage, struct FName ArmourPiece, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyNewEnemy ( class APawn* NewEnemy );
	void PeriodicMoveCheck ( );
	void UpdateMovementActions ( );
	bool CanInterruptCurrentCommand ( );
	void Resumed ( struct FName OldCommandName );
	void Paused ( class UGameAICommand* NewCommand );
};

UClass* USFXAICmd_ResetHenchman::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_HenchFollowActor
// 0x0000 (0x0088 - 0x0088)
class USFXAICmd_HenchFollowActor : public USFXAICmd_FollowActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56372 ];

		return pClassPointer;
	};

	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	void UpdateFollowing ( );
	bool PathfindToActor ( );
	bool IsDirectlyReachable ( );
	void eventGetActorToFollow ( class AActor** oActor, struct FVector* vLocation );
	void Resumed ( struct FName OldCommandName );
	bool ShouldCancelFollow ( );
	void eventPopped ( );
	void Pushed ( );
};

UClass* USFXAICmd_HenchFollowActor::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_MoveToHoldLocation
// 0x0000 (0x0084 - 0x0084)
class USFXAICmd_MoveToHoldLocation : public USFXAICommand
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56373 ];

		return pClassPointer;
	};

	void NotifyFriendDied ( class ABioPawn* FriendPawn );
	void OnEnteredPlaypen ( );
	bool StartFollowingActor ( class AActor* ActorToFollow );
	bool MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, unsigned long bForceWalk, struct FScriptDelegate MoveDelegate );
	bool FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, unsigned long bForceShoot, float fAttackDuration, struct FScriptDelegate FireDelegate );
	bool UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression );
	void MoveToDelegate ( int nReason );
	void FireWeaponDelegate ( int nReason );
	void UsePowerDelegate ( int nReason );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	bool ShouldRun ( );
	bool CancelCommand ( int nReason );
	void NotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	bool NotifyMoodChange ( );
	void NotifyPendingPowerImpact ( struct FName Label, float TimeBeforeImpact, class Usfxpowercustomaction* Power, class ASFXProjectile_PowerCustomAction* Projectile );
	void NotifyNearMiss ( struct FVector HitLocation );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void NotifyArmourDestroyed ( struct FName ArmourPiece, class AController* instigatedBy );
	void NotifyArmourHit ( float Damage, struct FName ArmourPiece, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyNewEnemy ( class APawn* NewEnemy );
	void PeriodicMoveCheck ( );
	void UpdateMovementActions ( );
	bool CanInterruptCurrentCommand ( );
	void Resumed ( struct FName OldCommandName );
	void Paused ( class UGameAICommand* NewCommand );
};

UClass* USFXAICmd_MoveToHoldLocation::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_ClassMelee
// 0x0049 (0x013D - 0x00F4)
class USFXCustomAction_ClassMelee : public USFXCustomAction_SyncPawnInstigator_Base
{
public:
	struct FBodyStance                                 BS_Attacker;                                      		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBodyStance                                 BS_Victim;                                        		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      DamageType;                                       		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PowerClass;                                       		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXAnimSetCookSpec*                         AnimInfo;                                         		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SyncAttackTimer;                                  		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimPlayRate;                                     		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackerBlendInTime;                              		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackerBlendOut;                                 		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VictimPlayRate;                                   		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VictimBlendInTime;                                		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageAmount;                                     		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXPowerCustomAction_MeleePassivePower*     Power;                                            		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bApplyDamage : 1;                                 		// 0x0138 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      eVictimRootMotionMode;                            		// 0x013C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57983 ];

		return pClassPointer;
	};

	void InterruptThisCustomAction ( );
	void OnPartnerLeavingCustomAction ( );
	void StopCustomAction ( );
	void SyncAttack ( );
	void StartMeleeAttack ( );
	void NonSyncedAction ( );
	void OnPartnerReachedDestination ( );
	void StartInteraction ( );
	void GetVictimAnim ( struct FBodyStance* Stance );
	void GetAttackerAnim ( struct FBodyStance* Stance );
	void StartCustomAction ( );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
};

UClass* USFXCustomAction_ClassMelee::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_SwatTurn
// 0x0078 (0x01AC - 0x0134)
class USFXCustomAction_SwatTurn : public USFXCustomAction_ProceduralMoveBase
{
public:
	struct FBodyStance                                 BS_Start_Mid;                                     		// 0x0134 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_Loop_Mid;                                      		// 0x0140 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_End_Mid;                                       		// 0x014C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_ShortStart;                                    		// 0x0158 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FCoverReference                             SwatTurnTarget;                                   		// 0x0164 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LoopStartLocation;                                		// 0x0180 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USFXCameraMode*                              HighSwatTurnCamera;                               		// 0x018C (0x0004) [0x0000000000000000]              
	class USFXCameraMode*                              LowSwatTurnCamera;                                		// 0x0190 (0x0004) [0x0000000000000000]              
	float                                              fEndBlendInTimeHigh;                              		// 0x0194 (0x0004) [0x0000000000000000]              
	float                                              fEndBlendOutTimeHigh;                             		// 0x0198 (0x0004) [0x0000000000000000]              
	float                                              fShortSwatThreshold;                              		// 0x019C (0x0004) [0x0000000000000000]              
	float                                              fHighAnimDist;                                    		// 0x01A0 (0x0004) [0x0000000000000000]              
	float                                              fLowAnimDist;                                     		// 0x01A4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bStartStanding : 1;                               		// 0x01A8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bEndStanding : 1;                                 		// 0x01A8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bRightSwatTurn : 1;                               		// 0x01A8 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57989 ];

		return pClassPointer;
	};

	float GetBlendOutTime ( );
	float GetBlendInTime ( );
	bool GetCustomActionCamera ( class USFXCameraMode** oNewCameraMode, float* fTransitionIn, float* fTransitionOut );
	void SetMoveStage ( unsigned char NextStage );
	void GetEndAnim ( struct FBodyStance* Stance );
	void GetLoopAnim ( struct FBodyStance* Stance );
	void GetStartAnim ( struct FBodyStance* Stance );
	void StopCustomAction ( );
	void ClientDoCustomAction ( unsigned long bForced );
	void Replicate ( );
	void StartCustomAction ( );
	bool CanPerformSwatTurn ( class ABioPawn* oPawn, struct FCoverReference* Target );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_SwatTurn::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_SwatTurn_Left
// 0x0000 (0x01AC - 0x01AC)
class USFXCustomAction_SwatTurn_Left : public USFXCustomAction_SwatTurn
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57988 ];

		return pClassPointer;
	};

	float GetBlendOutTime ( );
	float GetBlendInTime ( );
	bool GetCustomActionCamera ( class USFXCameraMode** oNewCameraMode, float* fTransitionIn, float* fTransitionOut );
	void SetMoveStage ( unsigned char NextStage );
	void GetEndAnim ( struct FBodyStance* Stance );
	void GetLoopAnim ( struct FBodyStance* Stance );
	void GetStartAnim ( struct FBodyStance* Stance );
	void StopCustomAction ( );
	void ClientDoCustomAction ( unsigned long bForced );
	void Replicate ( );
	void StartCustomAction ( );
	bool CanPerformSwatTurn ( class ABioPawn* oPawn, struct FCoverReference* Target );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_SwatTurn_Left::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_SwatTurn_Right
// 0x0000 (0x01AC - 0x01AC)
class USFXCustomAction_SwatTurn_Right : public USFXCustomAction_SwatTurn
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57994 ];

		return pClassPointer;
	};

	float GetBlendOutTime ( );
	float GetBlendInTime ( );
	bool GetCustomActionCamera ( class USFXCameraMode** oNewCameraMode, float* fTransitionIn, float* fTransitionOut );
	void SetMoveStage ( unsigned char NextStage );
	void GetEndAnim ( struct FBodyStance* Stance );
	void GetLoopAnim ( struct FBodyStance* Stance );
	void GetStartAnim ( struct FBodyStance* Stance );
	void StopCustomAction ( );
	void ClientDoCustomAction ( unsigned long bForced );
	void Replicate ( );
	void StartCustomAction ( );
	bool CanPerformSwatTurn ( class ABioPawn* oPawn, struct FCoverReference* Target );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_SwatTurn_Right::pClassPointer = NULL;

// Class SFXGame.BioPlayerReplicationInfo
// 0x0000 (0x02AE - 0x02AE)
class ABioPlayerReplicationInfo : public APlayerReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58406 ];

		return pClassPointer;
	};

	void UnregisterPlayerFromSession ( );
	void RegisterPlayerWithSession ( );
	bool IsInvalidName ( );
	unsigned char GetTeamNum ( );
	void SetUniqueId ( struct FUniqueNetId PlayerUniqueId );
	void ServerSetSplitscreenIndex ( unsigned char PlayerIndex );
	void SetSplitscreenIndex ( unsigned char PlayerIndex );
	bool IsLocalPlayerPRI ( );
	void BindPlayerOwnerDataProvider ( );
	void NotifyLocalPlayerTeamReceived ( );
	void UpdateTeamDataProvider ( );
	void UpdatePlayerDataProvider ( struct FName PropertyName );
	class UCurrentGameDataStore* GetCurrentGameDS ( );
	void SeamlessTravelTo ( class APlayerReplicationInfo* NewPRI );
	void IncrementDeaths ( int Amt );
	void CopyProperties ( class APlayerReplicationInfo* PRI );
	void OverrideWith ( class APlayerReplicationInfo* PRI );
	class APlayerReplicationInfo* Duplicate ( );
	void SetWaitingPlayer ( unsigned long B );
	void eventSetPlayerName ( struct FString S );
	void eventTimer ( );
	void DisplayDebug ( class AHUD* HUD, float* YL, float* YPos );
	void UpdatePlayerLocation ( );
	struct FString GetLocationName ( );
	struct FString GetHumanReadableName ( );
	void Reset ( );
	void eventDestroyed ( );
	bool ShouldBroadCastWelcomeMessage ( unsigned long bExiting );
	void UpdatePing ( float TimeStamp );
	void eventReplicatedDataBinding ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	void SetPlayerTeam ( class ATeamInfo* NewTeam );
	void ClientInitialize ( class AController* C );
	void eventPostBeginPlay ( );
	struct FString GetPlayerAlias ( );
};

UClass* ABioPlayerReplicationInfo::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_AddPlaypenVolume
// 0x0010 (0x00C0 - 0x00B0)
class UBioSeqAct_AddPlaypenVolume : public USequenceAction
{
public:
	TArray< class AActor* >                            Volumes;                                          		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      Squad;                                            		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58901 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* UBioSeqAct_AddPlaypenVolume::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_AddToParty
// 0x000C (0x00BC - 0x00B0)
class UBioSeqAct_AddToParty : public USequenceAction
{
public:
	float                                              TeleportOffsetRear;                               		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TeleportOffsetSide;                               		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      TeleportToLeader : 1;                             		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58916 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* UBioSeqAct_AddToParty::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_AdjustCostForDiscount
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_AdjustCostForDiscount : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58939 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_AdjustCostForDiscount::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_AOECauseDamage
// 0x0018 (0x00C8 - 0x00B0)
class UBioSeqAct_AOECauseDamage : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageAmount;                                     		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageRadius;                                     		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MomentumScale;                                    		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      InstigatorController;                             		// 0x00C0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDamageFalloff : 1;                               		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceCinematicDamage : 1;                        		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58941 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* UBioSeqAct_AOECauseDamage::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_AreaTransition
// 0x001C (0x00CC - 0x00B0)
class UBioSeqAct_AreaTransition : public USequenceAction
{
public:
	struct FString                                     Arguments;                                        		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       AreaName;                                         		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       StartPoint;                                       		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58961 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UBioSeqAct_AreaTransition::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_AttachCrustEffect
// 0x000C (0x00BC - 0x00B0)
class UBioSeqAct_AttachCrustEffect : public USequenceAction
{
public:
	class UObject*                                     oEffect;                                          		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLifeTime;                                        		// 0x00B4 (0x0004) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x00B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58967 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* UBioSeqAct_AttachCrustEffect::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_AttachVisualEffect
// 0x0024 (0x00D4 - 0x00B0)
class UBioSeqAct_AttachVisualEffect : public USequenceAction
{
public:
	TArray< class AActor* >                            m_oAttachTo;                                      		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     m_vOffset;                                        		// 0x00BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmSocketOrBone;                                 		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     m_oEffect;                                        		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58976 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* UBioSeqAct_AttachVisualEffect::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_CauseDamage
// 0x0014 (0x00C4 - 0x00B0)
class UBioSeqAct_CauseDamage : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageAmount;                                     		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MomentumScale;                                    		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      InstigatorController;                             		// 0x00BC (0x0004) [0x0000000000000000]              
	unsigned long                                      bForceCinematicDamage : 1;                        		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59013 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* UBioSeqAct_CauseDamage::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_ClearBrowserWheelStateOverrides
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_ClearBrowserWheelStateOverrides : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59028 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_ClearBrowserWheelStateOverrides::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_Deprecated
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_Deprecated : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59034 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_Deprecated::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_DUIClear
// 0x0004 (0x00B4 - 0x00B0)
class UBioSeqAct_DUIClear : public USequenceAction
{
public:
	unsigned long                                      bModal : 1;                                       		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59038 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_DUIClear::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_DUISetBarFillDirection
// 0x0004 (0x00B4 - 0x00B0)
class UBioSeqAct_DUISetBarFillDirection : public USequenceAction
{
public:
	unsigned long                                      bModalBar : 1;                                    		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLeftToRight : 1;                                 		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59043 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_DUISetBarFillDirection::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_DUISetBarFillPercent
// 0x0008 (0x00B8 - 0x00B0)
class UBioSeqAct_DUISetBarFillPercent : public USequenceAction
{
public:
	int                                                nPercent;                                         		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bModalBar : 1;                                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59049 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_DUISetBarFillPercent::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_DUISetBarMarkers
// 0x000C (0x00BC - 0x00B0)
class UBioSeqAct_DUISetBarMarkers : public USequenceAction
{
public:
	int                                                nMarker1;                                         		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nMarker2;                                         		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bModalBar : 1;                                    		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59055 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_DUISetBarMarkers::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_DUISetCounterValue
// 0x0008 (0x00B8 - 0x00B0)
class UBioSeqAct_DUISetCounterValue : public USequenceAction
{
public:
	int                                                nValue;                                           		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bModalCounter : 1;                                		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59062 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_DUISetCounterValue::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_DUISetElementColor
// 0x0005 (0x00B5 - 0x00B0)
class UBioSeqAct_DUISetElementColor : public USequenceAction
{
public:
	struct FColor                                      oColor;                                           		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Element;                                          		// 0x00B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59068 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_DUISetElementColor::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_DUISetElementPulsing
// 0x000D (0x00BD - 0x00B0)
class UBioSeqAct_DUISetElementPulsing : public USequenceAction
{
public:
	float                                              fMinAlpha;                                        		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCycleTime;                                       		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPulsing : 1;                                     		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      Element;                                          		// 0x00BC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59078 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_DUISetElementPulsing::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_DUISetElementVisible
// 0x0009 (0x00B9 - 0x00B0)
class UBioSeqAct_DUISetElementVisible : public USequenceAction
{
public:
	float                                              fFadeTime;                                        		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVisible : 1;                                     		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      Element;                                          		// 0x00B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59088 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_DUISetElementVisible::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_DUISetTextStringRef
// 0x0005 (0x00B5 - 0x00B0)
class UBioSeqAct_DUISetTextStringRef : public USequenceAction
{
public:
	void*                                              srText;                                           		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Element;                                          		// 0x00B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59095 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_DUISetTextStringRef::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_EndGame
// 0x0008 (0x00B8 - 0x00B0)
class UBioSeqAct_EndGame : public USequenceAction
{
public:
	void*                                              srEndGameMessage;                                 		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bGameOverSignalled : 1;                         		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59108 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_EndGame::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_GetSquad
// 0x0008 (0x00B8 - 0x00B0)
class UBioSeqAct_GetSquad : public USequenceAction
{
public:
	class AActor*                                      oPawn;                                            		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oSquad;                                           		// 0x00B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59157 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_GetSquad::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_HideSniperHudOverlay
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_HideSniperHudOverlay : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59184 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_HideSniperHudOverlay::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_InitLoadingMovie
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_InitLoadingMovie : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59189 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_InitLoadingMovie::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_InterruptAmbientConversation
// 0x000C (0x00BC - 0x00B0)
class UBioSeqAct_InterruptAmbientConversation : public USequenceAction
{
public:
	class UBioConversation*                            IgnoreConversation;                               		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBioConversation*                            OnlyInterruptThisConv;                            		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bInterruptFovoToo : 1;                          		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59191 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_InterruptAmbientConversation::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_IsActiveConversation
// 0x0008 (0x00B8 - 0x00B0)
class UBioSeqAct_IsActiveConversation : public USequenceAction
{
public:
	class UBioConversation*                            Conversation;                                     		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bCheckForFovoToo : 1;                           		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bCheckForFull : 1;                              		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bCheckForAmbient : 1;                           		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59201 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_IsActiveConversation::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_KillPawn
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_KillPawn : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59212 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_KillPawn::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_NonCombatArea
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_NonCombatArea : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59249 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_NonCombatArea::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_Ragdoll
// 0x0004 (0x00B4 - 0x00B0)
class UBioSeqAct_Ragdoll : public USequenceAction
{
public:
	class AActor*                                      mActor;                                           		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59320 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_Ragdoll::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_RemoveFromParty
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_RemoveFromParty : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59327 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_RemoveFromParty::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_ResurrectHenchman
// 0x0004 (0x00B4 - 0x00B0)
class UBioSeqAct_ResurrectHenchman : public USequenceAction
{
public:
	float                                              PctHealthRegained;                                		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59336 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_ResurrectHenchman::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_SetActive
// 0x0004 (0x00B4 - 0x00B0)
class UBioSeqAct_SetActive : public USequenceAction
{
public:
	unsigned long                                      bSetActive : 1;                                   		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59358 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_SetActive::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_SetBrowserWheelAvailable
// 0x0004 (0x00B4 - 0x00B0)
class UBioSeqAct_SetBrowserWheelAvailable : public USequenceAction
{
public:
	unsigned long                                      m_bMakeAvailable : 1;                             		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59364 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UBioSeqAct_SetBrowserWheelAvailable::pClassPointer = NULL;

// Class SFXGame.BioTimerList
// 0x0018 (0x0054 - 0x003C)
class UBioTimerList : public UObject
{
public:
	TArray< struct FBioTimer >                         lstTimers;                                        		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __BioTimerDelegate__Delegate;                     		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59864 ];

		return pClassPointer;
	};

	void Tick ( float fDeltaT );
	bool KillTimer ( struct FString i_sTimerName );
	void AddTimer ( struct FScriptDelegate TimerDelegate, class UObject* Params, float fTime, struct FString i_sTimerName );
	void BioTimerDelegate ( class UObject* Params );
};

UClass* UBioTimerList::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_SetBrowserWheelStateOverrides
// 0x000C (0x00BC - 0x00B0)
class UBioSeqAct_SetBrowserWheelStateOverrides : public USequenceAction
{
public:
	TArray< struct FSubPageState >                     PageStates;                                       		// 0x00B0 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59976 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UBioSeqAct_SetBrowserWheelStateOverrides::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_SetEnvironmentEffectIntensity
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_SetEnvironmentEffectIntensity : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59984 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_SetEnvironmentEffectIntensity::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_SetExploreCameraRotation
// 0x0008 (0x00B8 - 0x00B0)
class UBioSeqAct_SetExploreCameraRotation : public USequenceAction
{
public:
	class AActor*                                      oTarget;                                          		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceInstant : 1;                                		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59986 ];

		return pClassPointer;
	};

	void Activated ( );
	bool eventIsCameraExploreMode ( class USFXCameraMode* pCameraMode );
};

UClass* UBioSeqAct_SetExploreCameraRotation::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_Explore
// 0x0000 (0x00EC - 0x00EC)
class USFXCameraMode_Explore : public USFXCameraMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59990 ];

		return pClassPointer;
	};

	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot );
	bool GetActorCameraHook ( struct FVector* OutLocation );
	bool CheckLoop ( class USFXCameraMode* M, int RecurseLevel );
	void DrawHUD ( class UBioCheatManager* M );
	struct FRotator GetCurrentShake ( );
	bool IsCollisionEnabled ( );
	void Initialize ( );
	void MakeInactive ( );
	void MakeActive ( );
	void eventAimAtPoint ( struct FVector V );
	struct FVector GetCameraHook ( );
	struct FVector CalculateOffsetHook ( float Distance );
	void DoSniperCameraCollision ( class AActor* A, struct FVector* V, struct FRotator* R );
	void Tick ( float TimeDelta );
	struct FVector GetCameraLocation ( );
	void ComputeClipPlaneRect ( float fFov, float fNearClipPlane, float* fWidth, float* fHeight );
	void DoCameraCollisionNative ( struct FVector CollisionHook, class AActor* A, struct FVector* V, struct FRotator* R );
	class AController* eventGetViewTargetAsController ( );
	class APawn* GetViewTargetAsPawn ( );
	void DoCameraCollision ( class AActor* Owner, struct FVector* CamPosition, struct FRotator* CamRotation );
	void eventModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
};

UClass* USFXCameraMode_Explore::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_SetLookAtTarget
// 0x0010 (0x00C0 - 0x00B0)
class UBioSeqAct_SetLookAtTarget : public USequenceAction
{
public:
	TArray< class AActor* >                            Actors;                                           		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      LookAtTarget;                                     		// 0x00BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60009 ];

		return pClassPointer;
	};

	void eventPreVersionUpdated ( int OldVersion, int NewVersion );
	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* UBioSeqAct_SetLookAtTarget::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_ShouldShowSplashSequence
// 0x0000 (0x00B0 - 0x00B0)
class UBioSeqAct_ShouldShowSplashSequence : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60034 ];

		return pClassPointer;
	};

};

UClass* UBioSeqAct_ShouldShowSplashSequence::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_ShowMessage
// 0x001F (0x00E3 - 0x00C4)
class UBioSeqAct_ShowMessage : public UBioSequenceLatentAction
{
public:
	void*                                              srText;                                           		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              srAButton;                                        		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              srBButton;                                        		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDisplayTime;                                     		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nIconIndex;                                       		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRemainingDisplayTime;                          		// 0x00D8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNoFade : 1;                                      		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bFinished : 1;                                  		// 0x00DC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bAPressed : 1;                                  		// 0x00DC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bWasPaused : 1;                                 		// 0x00DC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned char                                      nIconSet;                                         		// 0x00E0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_Skin;                                           		// 0x00E1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_TextAlign;                                      		// 0x00E2 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60075 ];

		return pClassPointer;
	};

	void MessageBoxUpdate ( float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox );
	void MessageInputPressed ( unsigned long bAPressed, int nContext );
	bool UpdateOp ( float fDeltaT );
	void Activated ( );
};

UClass* UBioSeqAct_ShowMessage::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_SwitchWeighted
// 0x0050 (0x0100 - 0x00B0)
class UBioSeqAct_SwitchWeighted : public USequenceAction
{
public:
	float                                              fWeight[ 0xA ];                                   		// 0x00B0 (0x0028) [0x0000000000000000]              
	float                                              fWeight0;                                         		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight1;                                         		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight2;                                         		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight3;                                         		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight4;                                         		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight5;                                         		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight6;                                         		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight7;                                         		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight8;                                         		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight9;                                         		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60139 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UBioSeqAct_SwitchWeighted::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_TalkObjSelect
// 0x003C (0x00EC - 0x00B0)
class UBioSeqAct_TalkObjSelect : public USequenceAction
{
public:
	float                                              f00_Vixen;                                        		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f01_Leading;                                      		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f02_Convict;                                      		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f03_Geth;                                         		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f04_Thief;                                        		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f05_Garrus;                                       		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f06_Assassin;                                     		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f07_Tali;                                         		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f08_Professor;                                    		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f09_Grunt;                                        		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f10_Mystic;                                       		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f11_Veteran;                                      		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oPlayer;                                          		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nHench1;                                          		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nHench2;                                          		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60159 ];

		return pClassPointer;
	};

	void eventActivated ( );
	int GetHenchID ( struct FName Tag );
};

UClass* UBioSeqAct_TalkObjSelect::pClassPointer = NULL;

// Class SFXGame.BioSeqAct_ToggleSave
// 0x0008 (0x00B8 - 0x00B0)
class UBioSeqAct_ToggleSave : public USequenceAction
{
public:
	void*                                              srReason;                                         		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnable : 1;                                      		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60194 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* UBioSeqAct_ToggleSave::pClassPointer = NULL;

// Class SFXGame.BioSeqCond_Deprecated
// 0x0000 (0x0095 - 0x0095)
class UBioSeqCond_Deprecated : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60201 ];

		return pClassPointer;
	};

	void ForceActivateInput ( int InputIdx );
	class AController* GetController ( class AActor* TheActor );
	class APawn* GetPawn ( class AActor* TheActor );
	void Reset ( );
	void PublishLinkedVariableValues ( );
	void PopulateLinkedVariableValues ( );
	void eventPreVersionUpdated ( int OldVersion, int NewVersion );
	void eventVersionUpdated ( int OldVersion, int NewVersion );
	void SetStringRefVars ( struct FString sLink, void* srValue );
	void SetNameVars ( struct FString sLink, struct FName sValue );
	void SetObjectVars ( struct FString sLink, class UObject* oValue );
	void SetStringVars ( struct FString sLink, struct FString sValue );
	void SetFloatVars ( struct FString sLink, float fValue );
	void SetIntVars ( struct FString sLink, int nValue );
	void SetBoolVars ( struct FString sLink, unsigned long bValue );
	void eventDeactivated ( );
	void eventActivated ( );
	bool ActivateNamedOutputLink ( struct FString LinkDesc );
	bool ActivateOutputLink ( int OutputIdx );
	void GetStringRefVars ( struct FString sDescription, TArray< void* >* aStringRef );
	void GetNameVars ( struct FString inDesc, TArray< struct FName >* nameVars );
	void GetStringVars ( struct FString inDesc, TArray< struct FString >* strVars );
	void GetFloatVars ( struct FString inDesc, TArray< float >* floatVars );
	void GetIntVars ( struct FString inDesc, TArray< int >* intVars );
	void LinkedVariables ( class UClass* VarClass, struct FString inDesc, class USequenceVariable** OutVariable );
	void GetBoolVars ( struct FString inDesc, TArray< unsigned char >* boolVars );
	void GetInterpDataVars ( struct FString inDesc, TArray< class UInterpData* >* outIData );
	void GetObjectVars ( struct FString inDesc, TArray< class UObject* >* objVars );
	void GetLinkedObjects ( class UClass* ObjectType, unsigned long bRecurse, TArray< class USequenceObject* >* out_Objects );
	bool HasLinkedOps ( unsigned long bConsiderInputLinks );
};

UClass* UBioSeqCond_Deprecated::pClassPointer = NULL;

// Class SFXGame.BioSeqCond_InCombat
// 0x0000 (0x0095 - 0x0095)
class UBioSeqCond_InCombat : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60205 ];

		return pClassPointer;
	};

	void ForceActivateInput ( int InputIdx );
	class AController* GetController ( class AActor* TheActor );
	class APawn* GetPawn ( class AActor* TheActor );
	void Reset ( );
	void PublishLinkedVariableValues ( );
	void PopulateLinkedVariableValues ( );
	void eventPreVersionUpdated ( int OldVersion, int NewVersion );
	void eventVersionUpdated ( int OldVersion, int NewVersion );
	void SetStringRefVars ( struct FString sLink, void* srValue );
	void SetNameVars ( struct FString sLink, struct FName sValue );
	void SetObjectVars ( struct FString sLink, class UObject* oValue );
	void SetStringVars ( struct FString sLink, struct FString sValue );
	void SetFloatVars ( struct FString sLink, float fValue );
	void SetIntVars ( struct FString sLink, int nValue );
	void SetBoolVars ( struct FString sLink, unsigned long bValue );
	void eventDeactivated ( );
	void eventActivated ( );
	bool ActivateNamedOutputLink ( struct FString LinkDesc );
	bool ActivateOutputLink ( int OutputIdx );
	void GetStringRefVars ( struct FString sDescription, TArray< void* >* aStringRef );
	void GetNameVars ( struct FString inDesc, TArray< struct FName >* nameVars );
	void GetStringVars ( struct FString inDesc, TArray< struct FString >* strVars );
	void GetFloatVars ( struct FString inDesc, TArray< float >* floatVars );
	void GetIntVars ( struct FString inDesc, TArray< int >* intVars );
	void LinkedVariables ( class UClass* VarClass, struct FString inDesc, class USequenceVariable** OutVariable );
	void GetBoolVars ( struct FString inDesc, TArray< unsigned char >* boolVars );
	void GetInterpDataVars ( struct FString inDesc, TArray< class UInterpData* >* outIData );
	void GetObjectVars ( struct FString inDesc, TArray< class UObject* >* objVars );
	void GetLinkedObjects ( class UClass* ObjectType, unsigned long bRecurse, TArray< class USequenceObject* >* out_Objects );
	bool HasLinkedOps ( unsigned long bConsiderInputLinks );
};

UClass* UBioSeqCond_InCombat::pClassPointer = NULL;

// Class SFXGame.BioSeqEvt_Deprecated
// 0x0000 (0x00D2 - 0x00D2)
class UBioSeqEvt_Deprecated : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60220 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* UBioSeqEvt_Deprecated::pClassPointer = NULL;

// Class SFXGame.BioSeqEvt_LoadingScreenClosed
// 0x0000 (0x00D2 - 0x00D2)
class UBioSeqEvt_LoadingScreenClosed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60228 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* UBioSeqEvt_LoadingScreenClosed::pClassPointer = NULL;

// Class SFXGame.biosfhandler_achievement
// 0x0013 (0x02A0 - 0x028D)
class Ubiosfhandler_achievement : public USFXGUIMovieLegacyAdapter
{
public:
	int                                                m_nSelectedItemIndex;                             		// 0x0290 (0x0004) [0x0000000000000000]              
	int                                                m_nShiftItemIndex;                                		// 0x0294 (0x0004) [0x0000000000000000]              
	void*                                              srEmpty;                                          		// 0x0298 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bFromMainMenu : 1;                              		// 0x029C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60315 ];

		return pClassPointer;
	};

	bool IsAccomplishmentValid ( struct FAccomplishment* Data );
	void PopulateAchivementItemListEntry ( int nDisplayIndex, struct FAccomplishment* CurrentAccomplishment );
	void PopulateAccomplishmentItemList ( );
	void Init ( );
	void HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments );
	void eventOnPanelAdded ( );
	void SetFromMainMenu ( );
};

UClass* Ubiosfhandler_achievement::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_SharedIGG
// 0x0000 (0x0040 - 0x0040)
class UBioSFHandler_SharedIGG : public USFXGUIMovieExtension
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60754 ];

		return pClassPointer;
	};

	void eventUpdate ( float fDeltaT );
	void eventHandleFSCommand ( unsigned char nCommandID, TArray< struct FString >* aArgs );
	bool eventHandleInputEvent ( unsigned char nEventID, float fValue );
	void eventOnClosed ( );
	void eventOnRemoved ( );
	void eventOnAdded ( );
};

UClass* UBioSFHandler_SharedIGG::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_GameOver
// 0x0013 (0x02A0 - 0x028D)
class UBioSFHandler_GameOver : public USFXGUIMovieLegacyAdapter
{
public:
	void*                                              GameOverString;                                   		// 0x0290 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              BadResumeGameText;                                		// 0x0294 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              AcceptBadResumeGameText;                          		// 0x0298 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      AbleToLoad : 1;                                   		// 0x029C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61269 ];

		return pClassPointer;
	};

	void SetGameOverString ( void* messageId );
	void AS_DisableLoadButton ( );
	void AS_SetGameOverString ( struct FString sText );
	void StopAnyMusic ( );
	bool GotoMainMenuOnCloseCallback ( class USFXGUIMovie* oMovie );
	void GoToMainMenu ( );
	void DisplayResumeFailure ( );
	void GameOverResume_Callback ( unsigned long bWasSuccessful );
	void OnPanelAdded ( );
	bool OpenLoadScreenOnCloseDelegate ( class USFXGUIMovie* oMovie );
	void ShowLoadScreen ( );
	void QuitToMainMenu ( );
	void LoadLastSave ( );
	void InitializeGameOver ( );
	void Callback_GotoMainMenu ( unsigned long bAPressed, int Context );
};

UClass* UBioSFHandler_GameOver::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_IntroText
// 0x0007 (0x0294 - 0x028D)
class UBioSFHandler_IntroText : public USFXGUIMovieLegacyAdapter
{
public:
	void*                                              srText;                                           		// 0x0290 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61311 ];

		return pClassPointer;
	};

	void HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments );
};

UClass* UBioSFHandler_IntroText::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_LoadScreen
// 0x0000 (0x028D - 0x028D)
class UBioSFHandler_LoadScreen : public USFXGUIMovieLegacyAdapter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61323 ];

		return pClassPointer;
	};

	void QueueCommand ( struct FBioSFQueuedCommand* stQueuedCommand );
	bool SetExternalTextureOnPanel ( struct FString Resource, class UTexture* Texture );
	void GameSessionEnded ( );
	void SendMouseToScaleForm ( unsigned char nEvent );
	void SetMouseShown ( unsigned long showIt );
	bool IsMouseShown ( );
	void eventOnPanelRemoved ( );
	void SetMenuAdvanceSwapped ( unsigned long bSwapped );
	void eventOnPanelAdded ( );
	void eventHandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments );
	class USFXGUIMovie* GetDefaultHandler ( );
	struct FVector2D GetStageViewportOffset ( );
	void SetMovieVisibility ( unsigned long bVisible );
	void SetEventsDisabled ( unsigned long bDisabled );
	void SetInputDisabled ( unsigned long bDisabled );
	float GetVariableFloat ( struct FString sPath );
	void SetVariableFloat ( struct FString sPath, float fVar );
	void SetTextFieldText ( struct FString sPath, struct FString sText, unsigned long bHTML );
	void SetClipLocation ( struct FString sPath, float fX, float fY );
	void SetClipHeight ( struct FString sPath, float fHeight );
	void SetClipWidth ( struct FString sPath, float fWidth );
	void SetClipVisibility ( struct FString sPath, unsigned long bVisible );
	void GotoLabelAndPlay ( struct FString sPath, struct FString sLabel );
	void GotoFrameAndPlay ( struct FString sPath, int nFrame );
	void GotoLabelAndStop ( struct FString sPath, struct FString sLabel );
	void GotoFrameAndStop ( struct FString sPath, int nFrame );
	void InvokeMethodArgs ( struct FString sMethodName, TArray< struct FASParams >* lstArguments );
	void InvokeMethod ( struct FString sMethodName );
	void eventUpdate ( float fDeltaT );
};

UClass* UBioSFHandler_LoadScreen::pClassPointer = NULL;

// Class SFXGame.SFXGUI_MainMenu_Message_Text
// 0x0000 (0x007A - 0x007A)
class USFXGUI_MainMenu_Message_Text : public USFXGUI_MainMenu_Message
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61376 ];

		return pClassPointer;
	};

	void AS_SetDataLoadStatus ( int nStatus );
	void OnDisplayed ( );
	void Cleanup ( );
	void eventOnLoadComplete ( );
	void LoadComplete ( );
	void eventOnLoad ( );
	void Load ( struct FScriptDelegate aFunction );
	unsigned char GetStatus ( );
	void OnMessageDataLoaded ( class USFXGUI_MainMenu_Message* aMessageThatFinishedLoading );
};

UClass* USFXGUI_MainMenu_Message_Text::pClassPointer = NULL;

// Class SFXGame.SFXGUI_MainMenu_Message_Image
// 0x0012 (0x008C - 0x007A)
class USFXGUI_MainMenu_Message_Image : public USFXGUI_MainMenu_Message_Text
{
public:
	struct FString                                     ImagePath;                                        		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTexture*                                    ImageReference;                                   		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61375 ];

		return pClassPointer;
	};

	void Cleanup ( );
	void FailLoad ( );
	class USFXGUI_MainMenu_Message* CreateMessage ( int nMessageId );
};

UClass* USFXGUI_MainMenu_Message_Image::pClassPointer = NULL;

// Class SFXGame.sfxgui_mainmenu_message_networkimage
// 0x0000 (0x008C - 0x008C)
class Usfxgui_mainmenu_message_networkimage : public USFXGUI_MainMenu_Message_Image
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61385 ];

		return pClassPointer;
	};

	void Cleanup ( );
	void FailLoad ( );
	class USFXGUI_MainMenu_Message* CreateMessage ( int nMessageId );
};

UClass* Usfxgui_mainmenu_message_networkimage::pClassPointer = NULL;

// Class SFXGame.SFXGUI_MainMenu_Message_GAW
// 0x004A (0x00C4 - 0x007A)
class USFXGUI_MainMenu_Message_GAW : public USFXGUI_MainMenu_Message
{
public:
	TArray< struct FGAWZoneGUIData >                   GAWRatings;                                       		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRatingThresholdMessage >           OverallRatingMessages;                            		// 0x0088 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     GAWGlobalReadinessColor;                          		// 0x0094 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __GAWZoneSort__Delegate;                          		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXGAWAssetsHandler*                        GAWAssetHandler;                                  		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                GAWOverallReadinessRating;                        		// 0x00B0 (0x0004) [0x0000000000000000]              
	void*                                              GAWMessageTitle;                                  		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              GAWOverallRating;                                 		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              GAWZoneStatusFormat;                              		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              GAWFormattedReadinessPercent;                     		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61437 ];

		return pClassPointer;
	};

	void AS_SetGAWSummary ( struct FString strGAWSummaryText );
	void AS_SetZoneDisplayNumber ( int nZoneId, int nZoneDisplayNumber );
	void AS_SetZoneReadiness ( int nZoneId, int nReadiness );
	int GAWZoneSort ( struct FGAWZoneGUIData A, struct FGAWZoneGUIData B );
	void eventOnLoadComplete ( );
	void Cleanup ( );
	void OnGAWRequestFinished ( TArray< struct FGAWZoneGUIData > ZoneData, int OverallReadinessRating, int errorCode );
	void eventOnLoad ( );
	class USFXGUI_MainMenu_Message* CreateMessage ( int nMessageId );
};

UClass* USFXGUI_MainMenu_Message_GAW::pClassPointer = NULL;

// Class SFXGame.SFXPawn_PlayerNonCombat
// 0x0000 (0x11EB - 0x11EB)
class ASFXPawn_PlayerNonCombat : public ASFXPawn_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61883 ];

		return pClassPointer;
	};

	void RemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void AddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void Destroyed ( );
	bool ShouldShowHUDGrenadeCounter ( );
	struct FName GetUIAppearanceTag ( );
	void EquipWeaponToPlayerAndSquad ( class UClass* NewWeaponClass );
	struct FString GetArmorEffectDescription ( TArray< struct FString > ArmorEffects );
	void PreClientTravel ( );
	class USFXCustomizationInstance* CreateTemporaryCustomizationInstance ( );
	void ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags );
	void ResetSkeletalMesh ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void ApplyPendingMorphHead ( );
	void ResetPendingMorphData ( );
	bool HasPendingMorphData ( );
	void EnqueueMorphHeadForLoad ( struct FMorphHeadSaveRecord InRecord );
	void EnqueueIconicHeadForLoad ( );
	void EnqueueExistingMorphHead ( class UBioMorphFace* InMorphHead );
	void UpdateMappedPowerDisplay ( );
	void eventCollectAnimListForCooking ( class ABioPawn* Pawn, TArray< struct FName >* OutResults );
	void UseReviveConsumablePower ( );
	bool IsTestFrameworkSetupComplete ( );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void KillAndFreeze ( class AController* Killer, class UClass* dmgType, struct FString Cause );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	bool IsUpdatingAppearanceAsync ( );
	void GetHelmetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequest ( int Id, unsigned char Part, TArray< struct FCustomizableElement >* ArrayToSearch, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequestByElement ( unsigned char Part, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetMeshAssetRequest ( int Id, TArray< struct FCustomizableElement >* Meshes );
	void GetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	void ClearAsyncAssetLoader ( );
	void AbortAsyncUpdateAppearance ( );
	void OnAsyncAppearanceTexturesPreloaded ( );
	void OnAsyncAssetsLoaded ( );
	void UpdateAppearanceAsync ( struct FScriptDelegate CompletedDelegate, unsigned long bBlockForAssetLoad );
	void UpdateAppearance ( );
	void UpdatePlayerLoadoutInfo ( );
	void GiveWeaponToPlayer ( class ASFXWeapon* NewWeapon, unsigned long DeleteTossedWeapons );
	bool ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	void UpdatePrimaryAndSecondaryWeapons ( struct FName NewWeaponName );
	bool SwitchToBackupWeapon ( );
	class ASFXWeapon* BackupWeapon ( class ASFXWeapon* PreferredWeapon );
	void PlayCoverPresentation ( );
	void NotifyFinishedCoverAlign ( );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	class UTexture2D* GetGUIIcon ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void AutoMapPC ( );
	void AutoMapXbox ( );
	struct FName ConstructedPermanentGECategoryName ( struct FName UniqueName );
	bool ApplyPermanentPlayerGameEffect ( struct FName UniqueName );
	void ApplyBonuses ( );
	void AutoMap ( );
	class USFXPowerCustomActionBase* FindPower ( struct FName nmPowerClass );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void InitializePlayerVoc ( );
	void SPCamperBuster ( );
	void PostBeginPlay ( );
	void AddPlayerInventory ( );
	int GetScaledLevel ( );
	void SyncPawnAppearance ( class ABioPawn* SourcePawn );
	void CopyPawnAppearance ( class ABioPawn* SourcePawn );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void RestoreDefaultHelmetState ( unsigned long bForceUpdate );
	void InitDefaultHelmetState ( );
	int FindOverrideHelmet ( );
	bool GetBaseHelmetElement ( struct FCustomizableElement* OutElement );
	int GetBaseHelmetID ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	bool GetKnockbackReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void UpdateWeaponVisibility_DEPRECATED ( );
	void TransferModsToNewWeapon ( TArray< struct FName > PreviousWeaponNames, struct FName NewWeaponClass );
	void ApplyAppropriateModsIfNoneExist ( TArray< struct FName > PreviousWeaponNames );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void UpdateMaterialParameters ( class USFXCustomizationInstance* InSettings, class AActor* InTargetActor, class USkeletalMeshComponent* InHeadMesh, unsigned long bHideScars );
	void GetCurrentScarStruct ( unsigned long bHideScars, struct FScarInfo* Scar );
	int CalculateScarIndex ( unsigned long bHideScars, int CharmSkill, int IntimidateSkill, int ReputationSkill );
	void UpdateParameters ( );
	void InternalGetParagonRenegadePercentage ( float Paragon, float ParagonOffset, float Renegade, float Reputation, float* ParagonPercent, float* RenegadePercent );
	void GetParagonRenegadePercentage ( float* ParagonPercent, float* RenegadePercent );
	int GetReputationSkill ( );
	int GetCharmSkill ( );
	int GetIntimidateSkill ( );
	class USkeletalMeshComponent* AddMeshForTexturePrestream ( class USkeletalMesh* PrestreamMesh );
	void PrestreamTexturesRequiredForAppearance ( );
	void UpdateBodyAppearance ( );
	void UpdateHeadAppearance ( );
	void SetFaceFXAsset ( struct FString dynamicLoadPath );
	void UpdateMeshComponent ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void UpdateHelmetComponent ( );
	void ApplyAppearance ( );
	void UpdateHairAppearance ( );
	void UpdateGameEffects ( );
	void GetHelmetGameEffects ( TArray< class UClass* >* Effects );
	void GetGameEffects ( int Id, TArray< struct FCustomizableElement >* Meshes, TArray< class UClass* >* Effects );
	void ValidateAppearanceIDs ( );
	class UMaterialInstanceConstant* EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx );
	bool RequiresFullHelmet ( );
	class USkeletalMesh* BuildHelmetMesh ( int Id, unsigned long bUseFullArmourHelmets, struct FHelmetMetaData* HelmetDetails );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	struct FString GetFullName ( );
	float GetWeaponEncumbranceCooldown ( float Encumbrance );
	void ApplyWeaponEncumbrance ( );
	void UpdateWeaponEncumbrance ( );
	void RemoveWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void AddWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void LoadCharacterClassData ( );
	void eventReplicatedEvent ( struct FName VarName );
	void* GetLastNameStringRef ( );
	void AsyncUpdating_OnCompleted ( TArray< class UObject* >* LoadedAssets );
};

UClass* ASFXPawn_PlayerNonCombat::pClassPointer = NULL;

// Class SFXGame.SFXPawn_PlayerSoldierNonCombat
// 0x0000 (0x11EB - 0x11EB)
class ASFXPawn_PlayerSoldierNonCombat : public ASFXPawn_PlayerNonCombat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61882 ];

		return pClassPointer;
	};

	void RemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void AddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void Destroyed ( );
	bool ShouldShowHUDGrenadeCounter ( );
	struct FName GetUIAppearanceTag ( );
	void EquipWeaponToPlayerAndSquad ( class UClass* NewWeaponClass );
	struct FString GetArmorEffectDescription ( TArray< struct FString > ArmorEffects );
	void PreClientTravel ( );
	class USFXCustomizationInstance* CreateTemporaryCustomizationInstance ( );
	void ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags );
	void ResetSkeletalMesh ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void ApplyPendingMorphHead ( );
	void ResetPendingMorphData ( );
	bool HasPendingMorphData ( );
	void EnqueueMorphHeadForLoad ( struct FMorphHeadSaveRecord InRecord );
	void EnqueueIconicHeadForLoad ( );
	void EnqueueExistingMorphHead ( class UBioMorphFace* InMorphHead );
	void UpdateMappedPowerDisplay ( );
	void eventCollectAnimListForCooking ( class ABioPawn* Pawn, TArray< struct FName >* OutResults );
	void UseReviveConsumablePower ( );
	bool IsTestFrameworkSetupComplete ( );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void KillAndFreeze ( class AController* Killer, class UClass* dmgType, struct FString Cause );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	bool IsUpdatingAppearanceAsync ( );
	void GetHelmetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequest ( int Id, unsigned char Part, TArray< struct FCustomizableElement >* ArrayToSearch, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequestByElement ( unsigned char Part, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetMeshAssetRequest ( int Id, TArray< struct FCustomizableElement >* Meshes );
	void GetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	void ClearAsyncAssetLoader ( );
	void AbortAsyncUpdateAppearance ( );
	void OnAsyncAppearanceTexturesPreloaded ( );
	void OnAsyncAssetsLoaded ( );
	void UpdateAppearanceAsync ( struct FScriptDelegate CompletedDelegate, unsigned long bBlockForAssetLoad );
	void UpdateAppearance ( );
	void UpdatePlayerLoadoutInfo ( );
	void GiveWeaponToPlayer ( class ASFXWeapon* NewWeapon, unsigned long DeleteTossedWeapons );
	bool ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	void UpdatePrimaryAndSecondaryWeapons ( struct FName NewWeaponName );
	bool SwitchToBackupWeapon ( );
	class ASFXWeapon* BackupWeapon ( class ASFXWeapon* PreferredWeapon );
	void PlayCoverPresentation ( );
	void NotifyFinishedCoverAlign ( );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	class UTexture2D* GetGUIIcon ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void AutoMapPC ( );
	void AutoMapXbox ( );
	struct FName ConstructedPermanentGECategoryName ( struct FName UniqueName );
	bool ApplyPermanentPlayerGameEffect ( struct FName UniqueName );
	void ApplyBonuses ( );
	void AutoMap ( );
	class USFXPowerCustomActionBase* FindPower ( struct FName nmPowerClass );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void InitializePlayerVoc ( );
	void SPCamperBuster ( );
	void PostBeginPlay ( );
	void AddPlayerInventory ( );
	int GetScaledLevel ( );
	void SyncPawnAppearance ( class ABioPawn* SourcePawn );
	void CopyPawnAppearance ( class ABioPawn* SourcePawn );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void RestoreDefaultHelmetState ( unsigned long bForceUpdate );
	void InitDefaultHelmetState ( );
	int FindOverrideHelmet ( );
	bool GetBaseHelmetElement ( struct FCustomizableElement* OutElement );
	int GetBaseHelmetID ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	bool GetKnockbackReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void UpdateWeaponVisibility_DEPRECATED ( );
	void TransferModsToNewWeapon ( TArray< struct FName > PreviousWeaponNames, struct FName NewWeaponClass );
	void ApplyAppropriateModsIfNoneExist ( TArray< struct FName > PreviousWeaponNames );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void UpdateMaterialParameters ( class USFXCustomizationInstance* InSettings, class AActor* InTargetActor, class USkeletalMeshComponent* InHeadMesh, unsigned long bHideScars );
	void GetCurrentScarStruct ( unsigned long bHideScars, struct FScarInfo* Scar );
	int CalculateScarIndex ( unsigned long bHideScars, int CharmSkill, int IntimidateSkill, int ReputationSkill );
	void UpdateParameters ( );
	void InternalGetParagonRenegadePercentage ( float Paragon, float ParagonOffset, float Renegade, float Reputation, float* ParagonPercent, float* RenegadePercent );
	void GetParagonRenegadePercentage ( float* ParagonPercent, float* RenegadePercent );
	int GetReputationSkill ( );
	int GetCharmSkill ( );
	int GetIntimidateSkill ( );
	class USkeletalMeshComponent* AddMeshForTexturePrestream ( class USkeletalMesh* PrestreamMesh );
	void PrestreamTexturesRequiredForAppearance ( );
	void UpdateBodyAppearance ( );
	void UpdateHeadAppearance ( );
	void SetFaceFXAsset ( struct FString dynamicLoadPath );
	void UpdateMeshComponent ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void UpdateHelmetComponent ( );
	void ApplyAppearance ( );
	void UpdateHairAppearance ( );
	void UpdateGameEffects ( );
	void GetHelmetGameEffects ( TArray< class UClass* >* Effects );
	void GetGameEffects ( int Id, TArray< struct FCustomizableElement >* Meshes, TArray< class UClass* >* Effects );
	void ValidateAppearanceIDs ( );
	class UMaterialInstanceConstant* EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx );
	bool RequiresFullHelmet ( );
	class USkeletalMesh* BuildHelmetMesh ( int Id, unsigned long bUseFullArmourHelmets, struct FHelmetMetaData* HelmetDetails );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	struct FString GetFullName ( );
	float GetWeaponEncumbranceCooldown ( float Encumbrance );
	void ApplyWeaponEncumbrance ( );
	void UpdateWeaponEncumbrance ( );
	void RemoveWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void AddWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void LoadCharacterClassData ( );
	void eventReplicatedEvent ( struct FName VarName );
	void* GetLastNameStringRef ( );
	void AsyncUpdating_OnCompleted ( TArray< class UObject* >* LoadedAssets );
};

UClass* ASFXPawn_PlayerSoldierNonCombat::pClassPointer = NULL;

// Class SFXGame.sfxtelemetryhooks
// 0x0000 (0x00B0 - 0x00B0)
class Usfxtelemetryhooks : public USFXTelemetry
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62107 ];

		return pClassPointer;
	};

	void SendCachedDisconnectEvent ( );
	void SendLanguageOverrideSettings ( );
	struct FGuid eventGetCharacterID ( class ABioPawn* Pawn );
	void SendProfileDependentTelemetry ( unsigned char LocalUserNum );
	void SendTelemetryOnProfileReadComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnAuthenticate ( );
	void eventInitConnectionDelegates ( );
	void OnDisconnect ( int Error, int PreviousState, int NewState, struct FString SessionId );
	bool IsCollectionEnabled ( );
	void AddAttributeToArray ( unsigned char Type, struct FString Key, int nData, float fData, unsigned long bData, struct FName nmData, TArray< struct FTelemetryAttribute >* Attributes, struct FString* sData );
	void SendAchievement ( int AchievementId );
	struct FString GenerateUniqueClassId ( class UObject* Object );
	struct FString GenerateUniqueClassIdFromString ( struct FString* FullFriendlyName );
	int FStringToFourCC ( struct FString* s4CharID );
	void SendArray ( struct FName HookName, TArray< struct FTelemetryAttribute > Attributes );
	void SendBool ( struct FName HookName, unsigned long B );
	void SendFloat ( struct FName HookName, float F );
	void SendInt ( struct FName HookName, int i );
	void SendString ( struct FName HookName, struct FString S );
	void SendName ( struct FName HookName, struct FName N );
	void SendVoid ( struct FName HookName );
	class USFXTelemetryGameSession* GetInstanceGameSession ( );
};

UClass* Usfxtelemetryhooks::pClassPointer = NULL;

// Class SFXGame.SFXPawn_PlayerSoldier
// 0x0000 (0x11EB - 0x11EB)
class ASFXPawn_PlayerSoldier : public ASFXPawn_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62269 ];

		return pClassPointer;
	};

	void RemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void AddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void Destroyed ( );
	bool ShouldShowHUDGrenadeCounter ( );
	struct FName GetUIAppearanceTag ( );
	void EquipWeaponToPlayerAndSquad ( class UClass* NewWeaponClass );
	struct FString GetArmorEffectDescription ( TArray< struct FString > ArmorEffects );
	void PreClientTravel ( );
	class USFXCustomizationInstance* CreateTemporaryCustomizationInstance ( );
	void ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags );
	void ResetSkeletalMesh ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void ApplyPendingMorphHead ( );
	void ResetPendingMorphData ( );
	bool HasPendingMorphData ( );
	void EnqueueMorphHeadForLoad ( struct FMorphHeadSaveRecord InRecord );
	void EnqueueIconicHeadForLoad ( );
	void EnqueueExistingMorphHead ( class UBioMorphFace* InMorphHead );
	void UpdateMappedPowerDisplay ( );
	void eventCollectAnimListForCooking ( class ABioPawn* Pawn, TArray< struct FName >* OutResults );
	void UseReviveConsumablePower ( );
	bool IsTestFrameworkSetupComplete ( );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void KillAndFreeze ( class AController* Killer, class UClass* dmgType, struct FString Cause );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	bool IsUpdatingAppearanceAsync ( );
	void GetHelmetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequest ( int Id, unsigned char Part, TArray< struct FCustomizableElement >* ArrayToSearch, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequestByElement ( unsigned char Part, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetMeshAssetRequest ( int Id, TArray< struct FCustomizableElement >* Meshes );
	void GetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	void ClearAsyncAssetLoader ( );
	void AbortAsyncUpdateAppearance ( );
	void OnAsyncAppearanceTexturesPreloaded ( );
	void OnAsyncAssetsLoaded ( );
	void UpdateAppearanceAsync ( struct FScriptDelegate CompletedDelegate, unsigned long bBlockForAssetLoad );
	void UpdateAppearance ( );
	void UpdatePlayerLoadoutInfo ( );
	void GiveWeaponToPlayer ( class ASFXWeapon* NewWeapon, unsigned long DeleteTossedWeapons );
	bool ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	void UpdatePrimaryAndSecondaryWeapons ( struct FName NewWeaponName );
	bool SwitchToBackupWeapon ( );
	class ASFXWeapon* BackupWeapon ( class ASFXWeapon* PreferredWeapon );
	void PlayCoverPresentation ( );
	void NotifyFinishedCoverAlign ( );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	class UTexture2D* GetGUIIcon ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void AutoMapPC ( );
	void AutoMapXbox ( );
	struct FName ConstructedPermanentGECategoryName ( struct FName UniqueName );
	bool ApplyPermanentPlayerGameEffect ( struct FName UniqueName );
	void ApplyBonuses ( );
	void AutoMap ( );
	class USFXPowerCustomActionBase* FindPower ( struct FName nmPowerClass );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void InitializePlayerVoc ( );
	void SPCamperBuster ( );
	void PostBeginPlay ( );
	void AddPlayerInventory ( );
	int GetScaledLevel ( );
	void SyncPawnAppearance ( class ABioPawn* SourcePawn );
	void CopyPawnAppearance ( class ABioPawn* SourcePawn );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void RestoreDefaultHelmetState ( unsigned long bForceUpdate );
	void InitDefaultHelmetState ( );
	int FindOverrideHelmet ( );
	bool GetBaseHelmetElement ( struct FCustomizableElement* OutElement );
	int GetBaseHelmetID ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	bool GetKnockbackReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void UpdateWeaponVisibility_DEPRECATED ( );
	void TransferModsToNewWeapon ( TArray< struct FName > PreviousWeaponNames, struct FName NewWeaponClass );
	void ApplyAppropriateModsIfNoneExist ( TArray< struct FName > PreviousWeaponNames );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void UpdateMaterialParameters ( class USFXCustomizationInstance* InSettings, class AActor* InTargetActor, class USkeletalMeshComponent* InHeadMesh, unsigned long bHideScars );
	void GetCurrentScarStruct ( unsigned long bHideScars, struct FScarInfo* Scar );
	int CalculateScarIndex ( unsigned long bHideScars, int CharmSkill, int IntimidateSkill, int ReputationSkill );
	void UpdateParameters ( );
	void InternalGetParagonRenegadePercentage ( float Paragon, float ParagonOffset, float Renegade, float Reputation, float* ParagonPercent, float* RenegadePercent );
	void GetParagonRenegadePercentage ( float* ParagonPercent, float* RenegadePercent );
	int GetReputationSkill ( );
	int GetCharmSkill ( );
	int GetIntimidateSkill ( );
	class USkeletalMeshComponent* AddMeshForTexturePrestream ( class USkeletalMesh* PrestreamMesh );
	void PrestreamTexturesRequiredForAppearance ( );
	void UpdateBodyAppearance ( );
	void UpdateHeadAppearance ( );
	void SetFaceFXAsset ( struct FString dynamicLoadPath );
	void UpdateMeshComponent ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void UpdateHelmetComponent ( );
	void ApplyAppearance ( );
	void UpdateHairAppearance ( );
	void UpdateGameEffects ( );
	void GetHelmetGameEffects ( TArray< class UClass* >* Effects );
	void GetGameEffects ( int Id, TArray< struct FCustomizableElement >* Meshes, TArray< class UClass* >* Effects );
	void ValidateAppearanceIDs ( );
	class UMaterialInstanceConstant* EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx );
	bool RequiresFullHelmet ( );
	class USkeletalMesh* BuildHelmetMesh ( int Id, unsigned long bUseFullArmourHelmets, struct FHelmetMetaData* HelmetDetails );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	struct FString GetFullName ( );
	float GetWeaponEncumbranceCooldown ( float Encumbrance );
	void ApplyWeaponEncumbrance ( );
	void UpdateWeaponEncumbrance ( );
	void RemoveWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void AddWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void LoadCharacterClassData ( );
	void eventReplicatedEvent ( struct FName VarName );
	void* GetLastNameStringRef ( );
	void AsyncUpdating_OnCompleted ( TArray< class UObject* >* LoadedAssets );
};

UClass* ASFXPawn_PlayerSoldier::pClassPointer = NULL;

// Class SFXGame.SFXPawn_PlayerInfiltrator
// 0x0000 (0x11EB - 0x11EB)
class ASFXPawn_PlayerInfiltrator : public ASFXPawn_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62270 ];

		return pClassPointer;
	};

	void RemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void AddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void Destroyed ( );
	bool ShouldShowHUDGrenadeCounter ( );
	struct FName GetUIAppearanceTag ( );
	void EquipWeaponToPlayerAndSquad ( class UClass* NewWeaponClass );
	struct FString GetArmorEffectDescription ( TArray< struct FString > ArmorEffects );
	void PreClientTravel ( );
	class USFXCustomizationInstance* CreateTemporaryCustomizationInstance ( );
	void ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags );
	void ResetSkeletalMesh ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void ApplyPendingMorphHead ( );
	void ResetPendingMorphData ( );
	bool HasPendingMorphData ( );
	void EnqueueMorphHeadForLoad ( struct FMorphHeadSaveRecord InRecord );
	void EnqueueIconicHeadForLoad ( );
	void EnqueueExistingMorphHead ( class UBioMorphFace* InMorphHead );
	void UpdateMappedPowerDisplay ( );
	void eventCollectAnimListForCooking ( class ABioPawn* Pawn, TArray< struct FName >* OutResults );
	void UseReviveConsumablePower ( );
	bool IsTestFrameworkSetupComplete ( );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void KillAndFreeze ( class AController* Killer, class UClass* dmgType, struct FString Cause );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	bool IsUpdatingAppearanceAsync ( );
	void GetHelmetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequest ( int Id, unsigned char Part, TArray< struct FCustomizableElement >* ArrayToSearch, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequestByElement ( unsigned char Part, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetMeshAssetRequest ( int Id, TArray< struct FCustomizableElement >* Meshes );
	void GetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	void ClearAsyncAssetLoader ( );
	void AbortAsyncUpdateAppearance ( );
	void OnAsyncAppearanceTexturesPreloaded ( );
	void OnAsyncAssetsLoaded ( );
	void UpdateAppearanceAsync ( struct FScriptDelegate CompletedDelegate, unsigned long bBlockForAssetLoad );
	void UpdateAppearance ( );
	void UpdatePlayerLoadoutInfo ( );
	void GiveWeaponToPlayer ( class ASFXWeapon* NewWeapon, unsigned long DeleteTossedWeapons );
	bool ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	void UpdatePrimaryAndSecondaryWeapons ( struct FName NewWeaponName );
	bool SwitchToBackupWeapon ( );
	class ASFXWeapon* BackupWeapon ( class ASFXWeapon* PreferredWeapon );
	void PlayCoverPresentation ( );
	void NotifyFinishedCoverAlign ( );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	class UTexture2D* GetGUIIcon ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void AutoMapPC ( );
	void AutoMapXbox ( );
	struct FName ConstructedPermanentGECategoryName ( struct FName UniqueName );
	bool ApplyPermanentPlayerGameEffect ( struct FName UniqueName );
	void ApplyBonuses ( );
	void AutoMap ( );
	class USFXPowerCustomActionBase* FindPower ( struct FName nmPowerClass );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void InitializePlayerVoc ( );
	void SPCamperBuster ( );
	void PostBeginPlay ( );
	void AddPlayerInventory ( );
	int GetScaledLevel ( );
	void SyncPawnAppearance ( class ABioPawn* SourcePawn );
	void CopyPawnAppearance ( class ABioPawn* SourcePawn );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void RestoreDefaultHelmetState ( unsigned long bForceUpdate );
	void InitDefaultHelmetState ( );
	int FindOverrideHelmet ( );
	bool GetBaseHelmetElement ( struct FCustomizableElement* OutElement );
	int GetBaseHelmetID ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	bool GetKnockbackReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void UpdateWeaponVisibility_DEPRECATED ( );
	void TransferModsToNewWeapon ( TArray< struct FName > PreviousWeaponNames, struct FName NewWeaponClass );
	void ApplyAppropriateModsIfNoneExist ( TArray< struct FName > PreviousWeaponNames );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void UpdateMaterialParameters ( class USFXCustomizationInstance* InSettings, class AActor* InTargetActor, class USkeletalMeshComponent* InHeadMesh, unsigned long bHideScars );
	void GetCurrentScarStruct ( unsigned long bHideScars, struct FScarInfo* Scar );
	int CalculateScarIndex ( unsigned long bHideScars, int CharmSkill, int IntimidateSkill, int ReputationSkill );
	void UpdateParameters ( );
	void InternalGetParagonRenegadePercentage ( float Paragon, float ParagonOffset, float Renegade, float Reputation, float* ParagonPercent, float* RenegadePercent );
	void GetParagonRenegadePercentage ( float* ParagonPercent, float* RenegadePercent );
	int GetReputationSkill ( );
	int GetCharmSkill ( );
	int GetIntimidateSkill ( );
	class USkeletalMeshComponent* AddMeshForTexturePrestream ( class USkeletalMesh* PrestreamMesh );
	void PrestreamTexturesRequiredForAppearance ( );
	void UpdateBodyAppearance ( );
	void UpdateHeadAppearance ( );
	void SetFaceFXAsset ( struct FString dynamicLoadPath );
	void UpdateMeshComponent ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void UpdateHelmetComponent ( );
	void ApplyAppearance ( );
	void UpdateHairAppearance ( );
	void UpdateGameEffects ( );
	void GetHelmetGameEffects ( TArray< class UClass* >* Effects );
	void GetGameEffects ( int Id, TArray< struct FCustomizableElement >* Meshes, TArray< class UClass* >* Effects );
	void ValidateAppearanceIDs ( );
	class UMaterialInstanceConstant* EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx );
	bool RequiresFullHelmet ( );
	class USkeletalMesh* BuildHelmetMesh ( int Id, unsigned long bUseFullArmourHelmets, struct FHelmetMetaData* HelmetDetails );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	struct FString GetFullName ( );
	float GetWeaponEncumbranceCooldown ( float Encumbrance );
	void ApplyWeaponEncumbrance ( );
	void UpdateWeaponEncumbrance ( );
	void RemoveWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void AddWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void LoadCharacterClassData ( );
	void eventReplicatedEvent ( struct FName VarName );
	void* GetLastNameStringRef ( );
	void AsyncUpdating_OnCompleted ( TArray< class UObject* >* LoadedAssets );
};

UClass* ASFXPawn_PlayerInfiltrator::pClassPointer = NULL;

// Class SFXGame.SFXPawn_PlayerSentinel
// 0x0000 (0x11EB - 0x11EB)
class ASFXPawn_PlayerSentinel : public ASFXPawn_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62271 ];

		return pClassPointer;
	};

	void RemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void AddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void Destroyed ( );
	bool ShouldShowHUDGrenadeCounter ( );
	struct FName GetUIAppearanceTag ( );
	void EquipWeaponToPlayerAndSquad ( class UClass* NewWeaponClass );
	struct FString GetArmorEffectDescription ( TArray< struct FString > ArmorEffects );
	void PreClientTravel ( );
	class USFXCustomizationInstance* CreateTemporaryCustomizationInstance ( );
	void ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags );
	void ResetSkeletalMesh ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void ApplyPendingMorphHead ( );
	void ResetPendingMorphData ( );
	bool HasPendingMorphData ( );
	void EnqueueMorphHeadForLoad ( struct FMorphHeadSaveRecord InRecord );
	void EnqueueIconicHeadForLoad ( );
	void EnqueueExistingMorphHead ( class UBioMorphFace* InMorphHead );
	void UpdateMappedPowerDisplay ( );
	void eventCollectAnimListForCooking ( class ABioPawn* Pawn, TArray< struct FName >* OutResults );
	void UseReviveConsumablePower ( );
	bool IsTestFrameworkSetupComplete ( );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void KillAndFreeze ( class AController* Killer, class UClass* dmgType, struct FString Cause );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	bool IsUpdatingAppearanceAsync ( );
	void GetHelmetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequest ( int Id, unsigned char Part, TArray< struct FCustomizableElement >* ArrayToSearch, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequestByElement ( unsigned char Part, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetMeshAssetRequest ( int Id, TArray< struct FCustomizableElement >* Meshes );
	void GetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	void ClearAsyncAssetLoader ( );
	void AbortAsyncUpdateAppearance ( );
	void OnAsyncAppearanceTexturesPreloaded ( );
	void OnAsyncAssetsLoaded ( );
	void UpdateAppearanceAsync ( struct FScriptDelegate CompletedDelegate, unsigned long bBlockForAssetLoad );
	void UpdateAppearance ( );
	void UpdatePlayerLoadoutInfo ( );
	void GiveWeaponToPlayer ( class ASFXWeapon* NewWeapon, unsigned long DeleteTossedWeapons );
	bool ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	void UpdatePrimaryAndSecondaryWeapons ( struct FName NewWeaponName );
	bool SwitchToBackupWeapon ( );
	class ASFXWeapon* BackupWeapon ( class ASFXWeapon* PreferredWeapon );
	void PlayCoverPresentation ( );
	void NotifyFinishedCoverAlign ( );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	class UTexture2D* GetGUIIcon ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void AutoMapPC ( );
	void AutoMapXbox ( );
	struct FName ConstructedPermanentGECategoryName ( struct FName UniqueName );
	bool ApplyPermanentPlayerGameEffect ( struct FName UniqueName );
	void ApplyBonuses ( );
	void AutoMap ( );
	class USFXPowerCustomActionBase* FindPower ( struct FName nmPowerClass );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void InitializePlayerVoc ( );
	void SPCamperBuster ( );
	void PostBeginPlay ( );
	void AddPlayerInventory ( );
	int GetScaledLevel ( );
	void SyncPawnAppearance ( class ABioPawn* SourcePawn );
	void CopyPawnAppearance ( class ABioPawn* SourcePawn );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void RestoreDefaultHelmetState ( unsigned long bForceUpdate );
	void InitDefaultHelmetState ( );
	int FindOverrideHelmet ( );
	bool GetBaseHelmetElement ( struct FCustomizableElement* OutElement );
	int GetBaseHelmetID ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	bool GetKnockbackReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void UpdateWeaponVisibility_DEPRECATED ( );
	void TransferModsToNewWeapon ( TArray< struct FName > PreviousWeaponNames, struct FName NewWeaponClass );
	void ApplyAppropriateModsIfNoneExist ( TArray< struct FName > PreviousWeaponNames );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void UpdateMaterialParameters ( class USFXCustomizationInstance* InSettings, class AActor* InTargetActor, class USkeletalMeshComponent* InHeadMesh, unsigned long bHideScars );
	void GetCurrentScarStruct ( unsigned long bHideScars, struct FScarInfo* Scar );
	int CalculateScarIndex ( unsigned long bHideScars, int CharmSkill, int IntimidateSkill, int ReputationSkill );
	void UpdateParameters ( );
	void InternalGetParagonRenegadePercentage ( float Paragon, float ParagonOffset, float Renegade, float Reputation, float* ParagonPercent, float* RenegadePercent );
	void GetParagonRenegadePercentage ( float* ParagonPercent, float* RenegadePercent );
	int GetReputationSkill ( );
	int GetCharmSkill ( );
	int GetIntimidateSkill ( );
	class USkeletalMeshComponent* AddMeshForTexturePrestream ( class USkeletalMesh* PrestreamMesh );
	void PrestreamTexturesRequiredForAppearance ( );
	void UpdateBodyAppearance ( );
	void UpdateHeadAppearance ( );
	void SetFaceFXAsset ( struct FString dynamicLoadPath );
	void UpdateMeshComponent ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void UpdateHelmetComponent ( );
	void ApplyAppearance ( );
	void UpdateHairAppearance ( );
	void UpdateGameEffects ( );
	void GetHelmetGameEffects ( TArray< class UClass* >* Effects );
	void GetGameEffects ( int Id, TArray< struct FCustomizableElement >* Meshes, TArray< class UClass* >* Effects );
	void ValidateAppearanceIDs ( );
	class UMaterialInstanceConstant* EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx );
	bool RequiresFullHelmet ( );
	class USkeletalMesh* BuildHelmetMesh ( int Id, unsigned long bUseFullArmourHelmets, struct FHelmetMetaData* HelmetDetails );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	struct FString GetFullName ( );
	float GetWeaponEncumbranceCooldown ( float Encumbrance );
	void ApplyWeaponEncumbrance ( );
	void UpdateWeaponEncumbrance ( );
	void RemoveWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void AddWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void LoadCharacterClassData ( );
	void eventReplicatedEvent ( struct FName VarName );
	void* GetLastNameStringRef ( );
	void AsyncUpdating_OnCompleted ( TArray< class UObject* >* LoadedAssets );
};

UClass* ASFXPawn_PlayerSentinel::pClassPointer = NULL;

// Class SFXGame.SFXPawn_PlayerAdept
// 0x0000 (0x11EB - 0x11EB)
class ASFXPawn_PlayerAdept : public ASFXPawn_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62272 ];

		return pClassPointer;
	};

	void RemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void AddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void Destroyed ( );
	bool ShouldShowHUDGrenadeCounter ( );
	struct FName GetUIAppearanceTag ( );
	void EquipWeaponToPlayerAndSquad ( class UClass* NewWeaponClass );
	struct FString GetArmorEffectDescription ( TArray< struct FString > ArmorEffects );
	void PreClientTravel ( );
	class USFXCustomizationInstance* CreateTemporaryCustomizationInstance ( );
	void ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags );
	void ResetSkeletalMesh ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void ApplyPendingMorphHead ( );
	void ResetPendingMorphData ( );
	bool HasPendingMorphData ( );
	void EnqueueMorphHeadForLoad ( struct FMorphHeadSaveRecord InRecord );
	void EnqueueIconicHeadForLoad ( );
	void EnqueueExistingMorphHead ( class UBioMorphFace* InMorphHead );
	void UpdateMappedPowerDisplay ( );
	void eventCollectAnimListForCooking ( class ABioPawn* Pawn, TArray< struct FName >* OutResults );
	void UseReviveConsumablePower ( );
	bool IsTestFrameworkSetupComplete ( );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void KillAndFreeze ( class AController* Killer, class UClass* dmgType, struct FString Cause );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	bool IsUpdatingAppearanceAsync ( );
	void GetHelmetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequest ( int Id, unsigned char Part, TArray< struct FCustomizableElement >* ArrayToSearch, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequestByElement ( unsigned char Part, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetMeshAssetRequest ( int Id, TArray< struct FCustomizableElement >* Meshes );
	void GetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	void ClearAsyncAssetLoader ( );
	void AbortAsyncUpdateAppearance ( );
	void OnAsyncAppearanceTexturesPreloaded ( );
	void OnAsyncAssetsLoaded ( );
	void UpdateAppearanceAsync ( struct FScriptDelegate CompletedDelegate, unsigned long bBlockForAssetLoad );
	void UpdateAppearance ( );
	void UpdatePlayerLoadoutInfo ( );
	void GiveWeaponToPlayer ( class ASFXWeapon* NewWeapon, unsigned long DeleteTossedWeapons );
	bool ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	void UpdatePrimaryAndSecondaryWeapons ( struct FName NewWeaponName );
	bool SwitchToBackupWeapon ( );
	class ASFXWeapon* BackupWeapon ( class ASFXWeapon* PreferredWeapon );
	void PlayCoverPresentation ( );
	void NotifyFinishedCoverAlign ( );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	class UTexture2D* GetGUIIcon ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void AutoMapPC ( );
	void AutoMapXbox ( );
	struct FName ConstructedPermanentGECategoryName ( struct FName UniqueName );
	bool ApplyPermanentPlayerGameEffect ( struct FName UniqueName );
	void ApplyBonuses ( );
	void AutoMap ( );
	class USFXPowerCustomActionBase* FindPower ( struct FName nmPowerClass );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void InitializePlayerVoc ( );
	void SPCamperBuster ( );
	void PostBeginPlay ( );
	void AddPlayerInventory ( );
	int GetScaledLevel ( );
	void SyncPawnAppearance ( class ABioPawn* SourcePawn );
	void CopyPawnAppearance ( class ABioPawn* SourcePawn );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void RestoreDefaultHelmetState ( unsigned long bForceUpdate );
	void InitDefaultHelmetState ( );
	int FindOverrideHelmet ( );
	bool GetBaseHelmetElement ( struct FCustomizableElement* OutElement );
	int GetBaseHelmetID ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	bool GetKnockbackReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void UpdateWeaponVisibility_DEPRECATED ( );
	void TransferModsToNewWeapon ( TArray< struct FName > PreviousWeaponNames, struct FName NewWeaponClass );
	void ApplyAppropriateModsIfNoneExist ( TArray< struct FName > PreviousWeaponNames );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void UpdateMaterialParameters ( class USFXCustomizationInstance* InSettings, class AActor* InTargetActor, class USkeletalMeshComponent* InHeadMesh, unsigned long bHideScars );
	void GetCurrentScarStruct ( unsigned long bHideScars, struct FScarInfo* Scar );
	int CalculateScarIndex ( unsigned long bHideScars, int CharmSkill, int IntimidateSkill, int ReputationSkill );
	void UpdateParameters ( );
	void InternalGetParagonRenegadePercentage ( float Paragon, float ParagonOffset, float Renegade, float Reputation, float* ParagonPercent, float* RenegadePercent );
	void GetParagonRenegadePercentage ( float* ParagonPercent, float* RenegadePercent );
	int GetReputationSkill ( );
	int GetCharmSkill ( );
	int GetIntimidateSkill ( );
	class USkeletalMeshComponent* AddMeshForTexturePrestream ( class USkeletalMesh* PrestreamMesh );
	void PrestreamTexturesRequiredForAppearance ( );
	void UpdateBodyAppearance ( );
	void UpdateHeadAppearance ( );
	void SetFaceFXAsset ( struct FString dynamicLoadPath );
	void UpdateMeshComponent ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void UpdateHelmetComponent ( );
	void ApplyAppearance ( );
	void UpdateHairAppearance ( );
	void UpdateGameEffects ( );
	void GetHelmetGameEffects ( TArray< class UClass* >* Effects );
	void GetGameEffects ( int Id, TArray< struct FCustomizableElement >* Meshes, TArray< class UClass* >* Effects );
	void ValidateAppearanceIDs ( );
	class UMaterialInstanceConstant* EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx );
	bool RequiresFullHelmet ( );
	class USkeletalMesh* BuildHelmetMesh ( int Id, unsigned long bUseFullArmourHelmets, struct FHelmetMetaData* HelmetDetails );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	struct FString GetFullName ( );
	float GetWeaponEncumbranceCooldown ( float Encumbrance );
	void ApplyWeaponEncumbrance ( );
	void UpdateWeaponEncumbrance ( );
	void RemoveWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void AddWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void LoadCharacterClassData ( );
	void eventReplicatedEvent ( struct FName VarName );
	void* GetLastNameStringRef ( );
	void AsyncUpdating_OnCompleted ( TArray< class UObject* >* LoadedAssets );
};

UClass* ASFXPawn_PlayerAdept::pClassPointer = NULL;

// Class SFXGame.SFXPawn_PlayerEngineer
// 0x0000 (0x11EB - 0x11EB)
class ASFXPawn_PlayerEngineer : public ASFXPawn_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62273 ];

		return pClassPointer;
	};

	void RemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void AddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void Destroyed ( );
	bool ShouldShowHUDGrenadeCounter ( );
	struct FName GetUIAppearanceTag ( );
	void EquipWeaponToPlayerAndSquad ( class UClass* NewWeaponClass );
	struct FString GetArmorEffectDescription ( TArray< struct FString > ArmorEffects );
	void PreClientTravel ( );
	class USFXCustomizationInstance* CreateTemporaryCustomizationInstance ( );
	void ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags );
	void ResetSkeletalMesh ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void ApplyPendingMorphHead ( );
	void ResetPendingMorphData ( );
	bool HasPendingMorphData ( );
	void EnqueueMorphHeadForLoad ( struct FMorphHeadSaveRecord InRecord );
	void EnqueueIconicHeadForLoad ( );
	void EnqueueExistingMorphHead ( class UBioMorphFace* InMorphHead );
	void UpdateMappedPowerDisplay ( );
	void eventCollectAnimListForCooking ( class ABioPawn* Pawn, TArray< struct FName >* OutResults );
	void UseReviveConsumablePower ( );
	bool IsTestFrameworkSetupComplete ( );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void KillAndFreeze ( class AController* Killer, class UClass* dmgType, struct FString Cause );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	bool IsUpdatingAppearanceAsync ( );
	void GetHelmetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequest ( int Id, unsigned char Part, TArray< struct FCustomizableElement >* ArrayToSearch, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequestByElement ( unsigned char Part, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetMeshAssetRequest ( int Id, TArray< struct FCustomizableElement >* Meshes );
	void GetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	void ClearAsyncAssetLoader ( );
	void AbortAsyncUpdateAppearance ( );
	void OnAsyncAppearanceTexturesPreloaded ( );
	void OnAsyncAssetsLoaded ( );
	void UpdateAppearanceAsync ( struct FScriptDelegate CompletedDelegate, unsigned long bBlockForAssetLoad );
	void UpdateAppearance ( );
	void UpdatePlayerLoadoutInfo ( );
	void GiveWeaponToPlayer ( class ASFXWeapon* NewWeapon, unsigned long DeleteTossedWeapons );
	bool ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	void UpdatePrimaryAndSecondaryWeapons ( struct FName NewWeaponName );
	bool SwitchToBackupWeapon ( );
	class ASFXWeapon* BackupWeapon ( class ASFXWeapon* PreferredWeapon );
	void PlayCoverPresentation ( );
	void NotifyFinishedCoverAlign ( );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	class UTexture2D* GetGUIIcon ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void AutoMapPC ( );
	void AutoMapXbox ( );
	struct FName ConstructedPermanentGECategoryName ( struct FName UniqueName );
	bool ApplyPermanentPlayerGameEffect ( struct FName UniqueName );
	void ApplyBonuses ( );
	void AutoMap ( );
	class USFXPowerCustomActionBase* FindPower ( struct FName nmPowerClass );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void InitializePlayerVoc ( );
	void SPCamperBuster ( );
	void PostBeginPlay ( );
	void AddPlayerInventory ( );
	int GetScaledLevel ( );
	void SyncPawnAppearance ( class ABioPawn* SourcePawn );
	void CopyPawnAppearance ( class ABioPawn* SourcePawn );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void RestoreDefaultHelmetState ( unsigned long bForceUpdate );
	void InitDefaultHelmetState ( );
	int FindOverrideHelmet ( );
	bool GetBaseHelmetElement ( struct FCustomizableElement* OutElement );
	int GetBaseHelmetID ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	bool GetKnockbackReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void UpdateWeaponVisibility_DEPRECATED ( );
	void TransferModsToNewWeapon ( TArray< struct FName > PreviousWeaponNames, struct FName NewWeaponClass );
	void ApplyAppropriateModsIfNoneExist ( TArray< struct FName > PreviousWeaponNames );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void UpdateMaterialParameters ( class USFXCustomizationInstance* InSettings, class AActor* InTargetActor, class USkeletalMeshComponent* InHeadMesh, unsigned long bHideScars );
	void GetCurrentScarStruct ( unsigned long bHideScars, struct FScarInfo* Scar );
	int CalculateScarIndex ( unsigned long bHideScars, int CharmSkill, int IntimidateSkill, int ReputationSkill );
	void UpdateParameters ( );
	void InternalGetParagonRenegadePercentage ( float Paragon, float ParagonOffset, float Renegade, float Reputation, float* ParagonPercent, float* RenegadePercent );
	void GetParagonRenegadePercentage ( float* ParagonPercent, float* RenegadePercent );
	int GetReputationSkill ( );
	int GetCharmSkill ( );
	int GetIntimidateSkill ( );
	class USkeletalMeshComponent* AddMeshForTexturePrestream ( class USkeletalMesh* PrestreamMesh );
	void PrestreamTexturesRequiredForAppearance ( );
	void UpdateBodyAppearance ( );
	void UpdateHeadAppearance ( );
	void SetFaceFXAsset ( struct FString dynamicLoadPath );
	void UpdateMeshComponent ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void UpdateHelmetComponent ( );
	void ApplyAppearance ( );
	void UpdateHairAppearance ( );
	void UpdateGameEffects ( );
	void GetHelmetGameEffects ( TArray< class UClass* >* Effects );
	void GetGameEffects ( int Id, TArray< struct FCustomizableElement >* Meshes, TArray< class UClass* >* Effects );
	void ValidateAppearanceIDs ( );
	class UMaterialInstanceConstant* EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx );
	bool RequiresFullHelmet ( );
	class USkeletalMesh* BuildHelmetMesh ( int Id, unsigned long bUseFullArmourHelmets, struct FHelmetMetaData* HelmetDetails );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	struct FString GetFullName ( );
	float GetWeaponEncumbranceCooldown ( float Encumbrance );
	void ApplyWeaponEncumbrance ( );
	void UpdateWeaponEncumbrance ( );
	void RemoveWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void AddWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void LoadCharacterClassData ( );
	void eventReplicatedEvent ( struct FName VarName );
	void* GetLastNameStringRef ( );
	void AsyncUpdating_OnCompleted ( TArray< class UObject* >* LoadedAssets );
};

UClass* ASFXPawn_PlayerEngineer::pClassPointer = NULL;

// Class SFXGame.biosfhandler_pcachievement
// 0x0000 (0x02A0 - 0x02A0)
class Ubiosfhandler_pcachievement : public Ubiosfhandler_achievement
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62502 ];

		return pClassPointer;
	};

	bool IsAccomplishmentValid ( struct FAccomplishment* Data );
	void PopulateAchivementItemListEntry ( int nDisplayIndex, struct FAccomplishment* CurrentAccomplishment );
	void PopulateAccomplishmentItemList ( );
	void Init ( );
	void HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments );
	void eventOnPanelAdded ( );
	void SetFromMainMenu ( );
};

UClass* Ubiosfhandler_pcachievement::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_PCChoiceGUI
// 0x0000 (0x02FC - 0x02FC)
class UBioSFHandler_PCChoiceGUI : public UBioSFHandler_ChoiceGUI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62508 ];

		return pClassPointer;
	};

	void CleanUpDelegateReferences ( );
	void GameSessionEnded ( );
	int eventGetResourceCount ( int nResource );
	void eventonExIntUpdateOptionValues ( int nResource );
	void eventOnPanelRemoved ( );
	void eventOnPanelAdded ( );
	void ScrollText ( float fValue );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	struct FString GetResourceText ( unsigned char eResource );
	void Initialize ( class USFXGameChoiceGUIData* ChoiceData );
	void HideChoiceGUI ( unsigned long bRemove );
	void RefreshChoiceGUI ( );
	void ShowChoiceGUI ( );
	void SetUpdateDelegate ( struct FScriptDelegate pDelegate );
	void SetInputDelegate ( struct FScriptDelegate pDelegate, int nContext );
	void UpdateCallbackEx ( float fDeltaT, class UObject* oChoiceGUI );
	void UpdateCallback ( float fDeltaT, class UBioSFHandler_ChoiceGUI* oChoiceGUI );
	void InputCallback ( unsigned long bAPressed, int nContext );
};

UClass* UBioSFHandler_PCChoiceGUI::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_PCDesignerUI
// 0x0000 (0x0328 - 0x0328)
class UBioSFHandler_PCDesignerUI : public UBioSFHandler_DesignerUI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62521 ];

		return pClassPointer;
	};

	void OnPanelAdded ( );
	void ExIntInitialize ( );
	float GetTimerValue ( unsigned long bModalTimer );
	void SetTimerDetails ( unsigned long bModalTimer, unsigned long bVisible, float fStartTime, float fEndTime, float fInterval );
	bool IsQuasarLayout ( );
	void SetQuasarLayout ( unsigned long bShow );
	void SetBarFillDirection ( unsigned long bModalBar, unsigned long bLeftToRight );
	void SetBarFillPercent ( unsigned long bModalBar, int nPercent );
	void SetBarMarkerPoints ( unsigned long bModalBar, int nMarker1, int nMarker2 );
	void SetCounterValue ( unsigned long bModalCounter, int nValue );
	void SetElementText ( unsigned char nElement, struct FString* sText );
	void SetTextStringRef ( unsigned char nElement, void* srText );
	void ClearElementPulse ( unsigned char nElement );
	int SetupElementPulse ( unsigned char nElement, float fMinAlpha, float fCycleTime );
	void SetElementAlpha ( unsigned char nElement, float fAlpha );
	void SetElementColor ( unsigned char nElement, struct FColor* stColor );
	void SetElementVisible ( unsigned char nElement, unsigned long bVisible, float fFadeTime );
	bool IsActive ( unsigned long bModal );
	void ClearAll ( unsigned long bModal );
};

UClass* UBioSFHandler_PCDesignerUI::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_PCGameOver
// 0x0000 (0x02A0 - 0x02A0)
class UBioSFHandler_PCGameOver : public UBioSFHandler_GameOver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62571 ];

		return pClassPointer;
	};

	void SetGameOverString ( void* messageId );
	void AS_DisableLoadButton ( );
	void AS_SetGameOverString ( struct FString sText );
	void StopAnyMusic ( );
	bool GotoMainMenuOnCloseCallback ( class USFXGUIMovie* oMovie );
	void GoToMainMenu ( );
	void DisplayResumeFailure ( );
	void GameOverResume_Callback ( unsigned long bWasSuccessful );
	void OnPanelAdded ( );
	bool OpenLoadScreenOnCloseDelegate ( class USFXGUIMovie* oMovie );
	void ShowLoadScreen ( );
	void QuitToMainMenu ( );
	void LoadLastSave ( );
	void InitializeGameOver ( );
	void Callback_GotoMainMenu ( unsigned long bAPressed, int Context );
};

UClass* UBioSFHandler_PCGameOver::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_PCPauseMenu
// 0x0000 (0x02C0 - 0x02C0)
class UBioSFHandler_PCPauseMenu : public UBioSFHandler_BrowserWheel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62703 ];

		return pClassPointer;
	};

	void AS_SetButtonAdvanceSwap ( unsigned long bMenuAdvanceSwapped );
	void AS_SetResourceCounts ( int nCredits, int nMedigel, int nGrenades );
	void AS_SetArrowPosition ( int nDegrees );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void ExitGame ( );
	void MainMenuConfirm ( unsigned long bAPressed, int nContext );
	void SetResourceValues ( );
	void InitializeBrowser ( );
	void DetermineJournalCodexUpdateStatus ( );
	void DetermineSquadUpdateStatus ( );
	void Update ( float fDeltaT );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void CloseBrowser ( );
	void SelectSegment ( int nSegment );
	void eventShowSelectedPanel ( int nPanel, class USFXGUIInteraction* oManager );
	struct FName RedirectTag ( struct FName fnTag );
};

UClass* UBioSFHandler_PCPauseMenu::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_SelectCharacter
// 0x0000 (0x028D - 0x028D)
class UBioSFHandler_SelectCharacter : public USFXGUIMovieLegacyAdapter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62721 ];

		return pClassPointer;
	};

	void QueueCommand ( struct FBioSFQueuedCommand* stQueuedCommand );
	bool SetExternalTextureOnPanel ( struct FString Resource, class UTexture* Texture );
	void GameSessionEnded ( );
	void SendMouseToScaleForm ( unsigned char nEvent );
	void SetMouseShown ( unsigned long showIt );
	bool IsMouseShown ( );
	void eventOnPanelRemoved ( );
	void SetMenuAdvanceSwapped ( unsigned long bSwapped );
	void eventOnPanelAdded ( );
	void eventHandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments );
	class USFXGUIMovie* GetDefaultHandler ( );
	struct FVector2D GetStageViewportOffset ( );
	void SetMovieVisibility ( unsigned long bVisible );
	void SetEventsDisabled ( unsigned long bDisabled );
	void SetInputDisabled ( unsigned long bDisabled );
	float GetVariableFloat ( struct FString sPath );
	void SetVariableFloat ( struct FString sPath, float fVar );
	void SetTextFieldText ( struct FString sPath, struct FString sText, unsigned long bHTML );
	void SetClipLocation ( struct FString sPath, float fX, float fY );
	void SetClipHeight ( struct FString sPath, float fHeight );
	void SetClipWidth ( struct FString sPath, float fWidth );
	void SetClipVisibility ( struct FString sPath, unsigned long bVisible );
	void GotoLabelAndPlay ( struct FString sPath, struct FString sLabel );
	void GotoFrameAndPlay ( struct FString sPath, int nFrame );
	void GotoLabelAndStop ( struct FString sPath, struct FString sLabel );
	void GotoFrameAndStop ( struct FString sPath, int nFrame );
	void InvokeMethodArgs ( struct FString sMethodName, TArray< struct FASParams >* lstArguments );
	void InvokeMethod ( struct FString sMethodName );
	void eventUpdate ( float fDeltaT );
};

UClass* UBioSFHandler_SelectCharacter::pClassPointer = NULL;

// Class SFXGame.BioSFHandler_SniperOverlay
// 0x0000 (0x028D - 0x028D)
class UBioSFHandler_SniperOverlay : public USFXGUIMovieLegacyAdapter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62769 ];

		return pClassPointer;
	};

	void QueueCommand ( struct FBioSFQueuedCommand* stQueuedCommand );
	bool SetExternalTextureOnPanel ( struct FString Resource, class UTexture* Texture );
	void GameSessionEnded ( );
	void SendMouseToScaleForm ( unsigned char nEvent );
	void SetMouseShown ( unsigned long showIt );
	bool IsMouseShown ( );
	void eventOnPanelRemoved ( );
	void SetMenuAdvanceSwapped ( unsigned long bSwapped );
	void eventOnPanelAdded ( );
	void eventHandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments );
	class USFXGUIMovie* GetDefaultHandler ( );
	struct FVector2D GetStageViewportOffset ( );
	void SetMovieVisibility ( unsigned long bVisible );
	void SetEventsDisabled ( unsigned long bDisabled );
	void SetInputDisabled ( unsigned long bDisabled );
	float GetVariableFloat ( struct FString sPath );
	void SetVariableFloat ( struct FString sPath, float fVar );
	void SetTextFieldText ( struct FString sPath, struct FString sText, unsigned long bHTML );
	void SetClipLocation ( struct FString sPath, float fX, float fY );
	void SetClipHeight ( struct FString sPath, float fHeight );
	void SetClipWidth ( struct FString sPath, float fWidth );
	void SetClipVisibility ( struct FString sPath, unsigned long bVisible );
	void GotoLabelAndPlay ( struct FString sPath, struct FString sLabel );
	void GotoFrameAndPlay ( struct FString sPath, int nFrame );
	void GotoLabelAndStop ( struct FString sPath, struct FString sLabel );
	void GotoFrameAndStop ( struct FString sPath, int nFrame );
	void InvokeMethodArgs ( struct FString sMethodName, TArray< struct FASParams >* lstArguments );
	void InvokeMethod ( struct FString sMethodName );
	void eventUpdate ( float fDeltaT );
};

UClass* UBioSFHandler_SniperOverlay::pClassPointer = NULL;

// Class SFXGame.BioSimpleDialogContainer
// 0x0004 (0x0040 - 0x003C)
class UBioSimpleDialogContainer : public UObject
{
public:
	class UBioSimpleDialog*                            Dialog;                                           		// 0x003C (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62840 ];

		return pClassPointer;
	};

};

UClass* UBioSimpleDialogContainer::pClassPointer = NULL;

// Class SFXGame.BioSkillGame_Bypass_PCHandler
// 0x0000 (0x0308 - 0x0308)
class UBioSkillGame_Bypass_PCHandler : public UBioSkillGame_Bypass_Handler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62905 ];

		return pClassPointer;
	};

	void OnPanelAdded ( );
	void Update ( float fDeltaT );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
};

UClass* UBioSkillGame_Bypass_PCHandler::pClassPointer = NULL;

// Class SFXGame.BioSkillGame_Decryption_PCHandler
// 0x0000 (0x02F0 - 0x02F0)
class UBioSkillGame_Decryption_PCHandler : public UBioSkillGame_Decryption_Handler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62933 ];

		return pClassPointer;
	};

	void OnPanelAdded ( );
	void Update ( float fDeltaT );
	void onSelectPressed ( );
	void onRightPressed ( );
	void onLeftPressed ( );
	void onUpPressed ( );
	void onDownPressed ( );
};

UClass* UBioSkillGame_Decryption_PCHandler::pClassPointer = NULL;

// Class SFXGame.BioSkillMap
// 0x0010 (0x004C - 0x003C)
class UBioSkillMap : public UObject
{
public:
	TArray< struct FName >                             SkillToStateMap;                                  		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bClosedIsSkillState : 1;                        		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62936 ];

		return pClassPointer;
	};

	bool IsSkillInMap ( struct FName Skill );
	struct FName GetSkill ( int Num );
};

UClass* UBioSkillMap::pClassPointer = NULL;

// Class SFXGame.BioSkillMap_Door
// 0x0000 (0x004C - 0x004C)
class UBioSkillMap_Door : public UBioSkillMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62948 ];

		return pClassPointer;
	};

	bool IsSkillInMap ( struct FName Skill );
	struct FName GetSkill ( int Num );
};

UClass* UBioSkillMap_Door::pClassPointer = NULL;

// Class SFXGame.BioSkillMap_Test
// 0x0000 (0x004C - 0x004C)
class UBioSkillMap_Test : public UBioSkillMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62950 ];

		return pClassPointer;
	};

	bool IsSkillInMap ( struct FName Skill );
	struct FName GetSkill ( int Num );
};

UClass* UBioSkillMap_Test::pClassPointer = NULL;

// Class SFXGame.BioSquadCombat
// 0x0000 (0x0228 - 0x0228)
class ABioSquadCombat : public ABioBaseSquadDesignCombat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62954 ];

		return pClassPointer;
	};

	void NotifyCombatZoneRemoved ( );
	void NotifyCombatZoneAdded ( );
	void eventDisableSquad ( );
	void eventEnableSquad ( );
	class ABioBaseSquad* MakeHackable ( );
	void eventMemberRemoved ( class APawn* oPawn );
	void RemoveDyingMember ( class APawn* oPawn );
	int eventAddMember ( class APawn* Pawn, unsigned long bCheckPlaypens );
	bool Died ( class APawn* member, class AController* Killer );
	void NotifyPlaypenChanged ( );
	void eventNotifyNoEnemiesPerceived ( );
	void eventNotifyEnemyPerceived ( );
	bool GetClosestCombatZoneOrigin ( struct FVector Position, struct FVector* Origin );
	bool IsPositionInCombatZone ( struct FVector Position );
	bool IsCoverInCombatZone ( class ACoverSlotMarker* SlotMarker );
	bool HasCombatZone ( class ASFXCombatZone* CombatZone );
	void RemoveCombatZone ( class ASFXCombatZone* CombatZone );
	void AddCombatZone ( class ASFXCombatZone* CombatZone );
	class AActor* GetPlaypenReturnPoint ( class APawn* oPawn );
	class AActor* GetPlaypenNavOrigin ( class APawn* oPawn );
	void UpdatePlaypen ( );
	bool IsVolumeInPlaypen ( class ABioPlaypenVolume* Volume );
	void RemoveVolumeFromPlaypen ( class ABioPlaypenVolume* Volume );
	void AddVolumeToPlaypen ( class ABioPlaypenVolume* Volume );
	bool HasPlaypen ( );
	bool IsActorInSubtractivePlaypen ( class AActor* oActor );
	bool IsActorInPlaypen ( class AActor* oActor );
	bool IsPositionInSubtractivePlaypen ( struct FVector* vLocation );
	bool IsPositionInPlaypen ( struct FVector* vLocation );
	void SquadMembers ( class ABioAiController** oController );
	void SetMemberMoveIndicator ( int nIndex, class ABioTacticalMoveToIndicator* oIndicator );
	class ABioTacticalMoveToIndicator* GetMemberMoveIndicator ( int nIndex );
	bool RemoveMember ( class APawn* pPawn );
};

UClass* ABioSquadCombat::pClassPointer = NULL;

// Class SFXGame.BioStartLocation
// 0x0000 (0x01F6 - 0x01F6)
class ABioStartLocation : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62994 ];

		return pClassPointer;
	};

	struct FVector LocalToWorld ( struct FVector vLocal );
	void eventBioBaseRemovedFromWorld ( );
	void BioRestoreFromStasis ( );
	void BioApplyStasis ( struct FString Cause );
	void eventPlayFootStepSound ( int FootDown );
	void eventSFXSetAudioComponentRTPCs ( class UActorComponent* pWwiseAudioComponent );
	class USkeletalMeshComponent* GetHeadSkelMeshComponent ( );
	class USkeletalMeshComponent* GetPrimarySkelMeshComponent ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	unsigned char GetPowerResistance ( class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, class UClass* DamageType, float* Damage, struct FVector* Force, class AActor** TargetOverride );
	void RemoveSFXModuleIndex ( int nIndex );
	void RemoveSFXModule ( class USFXModule* oModule );
	void AddSFXModule ( class USFXModule* oModule, unsigned long bUserModule );
	void StopAllSounds ( );
	bool WillOverlap ( struct FVector PosA, struct FVector VelA, struct FVector PosB, struct FVector VelB, float StepSize, float Radius, float* Time );
	struct FVector GetAvoidanceVector ( struct FVector GoalLocation, float CollisionRadius, float MaxSpeed, int NumSamples, float VelocityStepRate, float MaxTimeTilOverlap, TArray< class AActor* >* Obstacles );
	bool IsClient ( );
	bool IsServer ( );
	bool IsOwningClient ( );
	void eventReplicationEnded ( );
	void eventPostDemoRewind ( );
	void eventAnimTreeUpdated ( class USkeletalMeshComponent* SkelMesh );
	bool SupportsKismetModification ( class USequenceOp* AskingOp, struct FString* Reason );
	void eventTrailsNotifyEnd ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotifyTick ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotify ( class UAnimNotify_Trails* AnimNotifyData );
	void eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	void GetAimAdhesionExtent ( float* Width, float* Height, struct FVector* Center );
	void GetAimFrictionExtent ( float* Width, float* Height, struct FVector* Center );
	bool IsInPersistentLevel ( );
	void SetActive ( unsigned long bActive );
	class USFXModule* GetModule ( class UClass* ModuleClass );
	void eventExceededPhysicsThreshold ( class AActor* instigatedBy );
	void eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance );
	struct FGuid GetPackageGuid ( struct FName PackageName );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void SetHUDLocation ( struct FVector NewHUDLocation );
	void eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void PickedUpBy ( class APawn* P );
	void eventSpawnedByKismet ( );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	void FindGoodEndView ( class APlayerController* PC, struct FRotator* GoodRotation );
	void NotifyLocalPlayerTeamReceived ( );
	struct FString GetLocationStringFor ( class APlayerReplicationInfo* PRI );
	unsigned char eventScriptGetTeamNum ( );
	unsigned char GetTeamNum ( );
	void PawnBaseDied ( );
	bool IsPlayerOwned ( );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_rotation );
	bool IsStationary ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	bool CanActorPlayFaceFXAnim ( );
	bool IsActorPlayingFaceFXAnim ( );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay );
	void eventFinishMovementControl ( class UInterpGroup* InInterpGroup );
	void eventBeginMovementControl ( class UInterpGroup* InInterpGroup );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnAttachToActor ( class USeqAct_AttachToActor* Action );
	void BioEnqueueDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation );
	void eventBioDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void OnChangeCollision ( class USeqAct_ChangeCollision* Action );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	void OnSetBlockRigidBody ( class USeqAct_SetBlockRigidBody* Action );
	void OnSetVelocity ( class USeqAct_SetVelocity* Action );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnModifyHealth ( class USeqAct_ModifyHealth* Action );
	void BlockForTextureStreaming ( );
	bool TexturePrestreamIsRequired ( );
	void PrestreamTextures ( float Seconds, unsigned long bEnableStreaming, int CinematicTextureGroups );
	void eventShutDown ( );
	void SetNetUpdateTime ( float NewUpdateTime );
	void eventForceNetRelevant ( );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void ClearLatentAction ( class UClass* actionClass, unsigned long bAborted, class USeqAct_Latent* exceptionAction, unsigned long bCancelled );
	bool FindEventsOfClass ( class UClass* EventClass, unsigned long bIncludeDisabled, TArray< class USequenceEvent* >* out_EventList );
	bool ActivateEventClass ( class UClass* InClass, class AActor* inInstigator, unsigned long bTest, TArray< class USequenceEvent* >* EventList, TArray< int >* ActivateIndices, TArray< class USequenceEvent* >* ActivatedEvents );
	bool TriggerGlobalEventClass ( class UClass* InEventClass, class AActor* inInstigator, int ActivateIndex );
	void eventReceivedNewEvent ( class USequenceEvent* Evt );
	bool TriggerEventClass ( class UClass* InEventClass, class AActor* inInstigator, int ActivateIndex, unsigned long bTest, TArray< class USequenceEvent* >* ActivatedEvents );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	bool CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance );
	void ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation );
	bool CanSplash ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	bool IsInPain ( );
	bool IsInVolume ( class AVolume* aVolume );
	void eventReset ( );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventModifyHearSoundComponent ( class UAudioComponent* AC );
	struct FString GetPhysicsName ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FString GetDebugName ( );
	void MatchStarting ( );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void ReplaceText ( struct FString Replace, struct FString With, struct FString* Text );
	struct FString GetHumanReadableName ( );
	struct FString GetItemName ( struct FString FullName );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void eventEndViewTarget ( class APlayerController* PC );
	void eventBecomeViewTarget ( class APlayerController* PC );
	bool CheckForErrors ( );
	void eventDebugFreezeGame ( class AActor* ActorToLookAt );
	float GetGravityZ ( );
	void CheckHitInfo ( class UPrimitiveComponent* FallBackComponent, struct FVector Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation );
	void eventTakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void KilledBy ( class APawn* EventInstigator );
	bool HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool StopsProjectile ( class AProjectile* P );
	void eventNotifySkelControlBeyondLimit ( class USkelControlLookAt* LookAt );
	void eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance );
	void eventSetInitialState ( );
	void eventPostBeginPlay ( );
	void eventBroadcastLocalizedTeamMessage ( int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalizedMessage ( class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventPreBeginPlay ( );
	bool FindActorsOfClass ( class UClass* ActorClass, TArray< class AActor* >* out_Actors );
	bool MoveActorToFloor ( );
	class APlayerController* GetALocalPlayerController ( );
	void LocalPlayerControllers ( class UClass* BaseClass, class APlayerController** PC );
	void AllOwnedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	void ComponentList ( class UClass* BaseClass, class UActorComponent** out_Component );
	void OverlappingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** out_Actor );
	void CollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bUseOverlapCheck, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleCollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, struct FVector Extent, unsigned long bTraceActors, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor );
	void TraceActors ( class UClass* BaseClass, struct FVector End, struct FVector Start, struct FVector Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo );
	void TouchingActors ( class UClass* BaseClass, unsigned long bReverse, class AActor** Actor );
	void BasedActors ( class UClass* BaseClass, class AActor** Actor );
	void ChildActors ( class UClass* BaseClass, class AActor** Actor );
	void DynamicActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	void AllActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	struct FString GetURLMap ( );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	bool PreTeleport ( class ATeleporter* InTeleporter );
	struct FVector GetDestination ( class AController* C );
	bool SuggestTossVelocity ( struct FVector Destination, struct FVector Start, float TossSpeed, float BaseTossZ, float DesiredZPct, struct FVector CollisionSize, float TerminalVelocity, float OverrideGravityZ, unsigned long bOnlyTraceUp, struct FVector* TossVelocity );
	bool PlayerCanSeeMe ( );
	void MakeNoise ( float Loudness, struct FName NoiseType );
	void StopSound ( class UWwiseBaseSoundObject* InSoundEvent );
	void PlaySound ( class UWwiseBaseSoundObject* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	class UAudioComponent* CreateAudioComponent ( class USoundCue* InSoundCue, unsigned long bPlay, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation, unsigned long bAttachToSelf );
	void ResetTimerTimeDilation ( struct FName TimerName, class UObject* inObj );
	void ModifyTimerTimeDilation ( struct FName TimerName, float InTimerTimeDilation, class UObject* inObj );
	float GetRemainingTimeForTimer ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerRate ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerCount ( struct FName inTimerFunc, class UObject* inObj );
	bool IsTimerActive ( struct FName inTimerFunc, class UObject* inObj );
	void PauseTimer ( unsigned long bPause, struct FName inTimerFunc, class UObject* inObj );
	void ClearAllTimers ( class UObject* inObj );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	void eventTornOff ( );
	bool Destroy ( );
	class AActor* Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail, unsigned long bFindSafeLocation );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void GetComponentsBoundingBox ( struct FBox* ActorBox );
	bool IsOverlapping ( class AActor* A );
	bool ContainsPoint ( struct FVector Spot );
	bool FindSpot ( struct FVector BoxExtent, struct FVector* SpotLocation );
	bool TraceAllPhysicsAssetInteractions ( class USkeletalMeshComponent* SkelMeshComp, struct FVector EndTrace, struct FVector StartTrace, struct FVector Extent, TArray< struct FImpactInfo >* out_Hits );
	bool FastTrace ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceBullet );
	bool PointCheckComponent ( class UPrimitiveComponent* InComponent, struct FVector PointLocation, struct FVector PointExtent );
	bool TraceComponent ( class UPrimitiveComponent* InComponent, struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, unsigned long bComplexCollision, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	class AActor* Trace ( struct FVector TraceEnd, struct FVector TraceStart, unsigned long bTraceActors, struct FVector Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	void VolumeBasedDestroy ( class APhysicsVolume* PV );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool UsedBy ( class APawn* User );
	bool eventOverRotated ( struct FRotator* out_Desired, struct FRotator* out_Actual );
	bool ClampRotation ( struct FRotator rBase, struct FRotator rUpperLimits, struct FRotator rLowerLimits, struct FRotator* out_Rot );
	void eventOnSleepRBPhysics ( );
	void eventOnWakeRBPhysics ( );
	void eventRanInto ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void eventCollisionChanged ( );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventBaseChange ( );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void eventUnTouch ( class AActor* Other );
	void eventPostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventFalling ( );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventTimer ( );
	void eventTick ( float DeltaTime );
	void eventLostChild ( class AActor* Other );
	void eventGainedChild ( class AActor* Other );
	void eventDestroyed ( );
	void SetTickIsDisabled ( unsigned long bInDisabled );
	void SetTickGroup ( unsigned char NewTickGroup );
	void ReattachComponent ( class UActorComponent* ComponentToReattach );
	void DetachComponent ( class UActorComponent* ExComponent );
	void AttachComponent ( class UActorComponent* NewComponent );
	void UnClock ( float* Time );
	void Clock ( float* Time );
	void SetPhysics ( unsigned char newPhysics );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetHidden ( unsigned long bNewHidden );
	void ChartData ( struct FString DataName, float DataValue );
	void FlushDebugStrings ( );
	void DrawDebugFrustrum ( unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, struct FMatrix* FrustumToWorld );
	void DrawDebugString ( struct FVector TextLocation, struct FString Text, class AActor* TestBaseActor, struct FColor TextColor, float Duration );
	void DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines );
	void DrawDebugCylinder ( struct FVector Start, struct FVector End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines );
	void DrawDebugStar ( struct FVector Position, float Size, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugBox ( struct FVector Center, struct FVector Extent, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugPoint ( struct FVector Position, float Size, struct FLinearColor PointColor, unsigned long bPersistentLines );
	void DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void FlushPersistentDebugLines ( );
	struct FVector GetBasedPosition ( struct FBasedPosition BP );
	void SetBasedPosition ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	struct FVector BP2Vect ( struct FBasedPosition BP );
	void Vect2BP ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	void SetForcedInitialReplicatedProperty ( class UProperty* PropToReplicate, unsigned long bAdd );
	void eventReplicatedDataBinding ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsOwnedBy ( class AActor* TestActor );
	class AActor* GetBaseMost ( );
	bool IsBasedOn ( class AActor* TestActor );
	void FindBase ( );
	void SetOwner ( class AActor* NewOwner );
	void SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName );
	float GetTerminalVelocity ( );
	void AutonomousPhysics ( float DeltaSeconds );
	bool MoveSmooth ( struct FVector Delta );
	int fixedTurn ( int Current, int Desired, int DeltaRate );
	void SetHardAttach ( unsigned long bNewHardAttach );
	bool SetRelativeLocation ( struct FVector NewLocation );
	bool SetRelativeRotation ( struct FRotator NewRotation );
	void SetZone ( unsigned long bForceRefresh );
	unsigned char MovingWhichWay ( float* Amount );
	bool SetRotation ( struct FRotator NewRotation );
	bool SetLocation ( struct FVector NewLocation, unsigned long bDebugFailure );
	bool Move ( struct FVector Delta );
	void SetDrawScale3D ( struct FVector NewScale3D );
	void SetDrawScale ( float NewScale );
	void SetCollisionType ( unsigned char NewCollisionType );
	void SetCollisionSize ( float NewRadius, float NewHeight );
	void SetCollision ( unsigned long bNewColActors, unsigned long bNewBlockActors, unsigned long bNewIgnoreEncroachers );
	void FinishAnim ( class UAnimNodeSequence* SeqNode );
	void Sleep ( float Seconds );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	void ForceUpdateComponents ( unsigned long bCollisionUpdate, unsigned long bTransformOnly );
};

UClass* ABioStartLocation::pClassPointer = NULL;

// Class SFXGame.BioStartPoint
// 0x0000 (0x02C4 - 0x02C4)
class ABioStartPoint : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62997 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
	void ApplyCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void eventShutDown ( );
	void OnToggle ( class USeqAct_Toggle* inAction );
	bool IsOnDifferentNetwork ( class ANavigationPoint* Nav );
	bool GetAllNavInRadius ( class AActor* ChkActor, struct FVector ChkPoint, float Radius, unsigned long bSkipBlocked, int inNetworkID, struct FCylinder MinSize, TArray< class ANavigationPoint* >* out_NavList );
	class ANavigationPoint* GetNearestNavToPoint ( class AActor* ChkActor, struct FVector ChkPoint, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList );
	class ANavigationPoint* GetNearestNavToActor ( class AActor* ChkActor, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList, float MinDist );
	bool ProceedWithMove ( class APawn* Other );
	bool eventSuggestMovePreparation ( class APawn* Other );
	float eventDetourWeight ( class APawn* Other, float PathWeight );
	bool eventAccept ( class AActor* Incoming, class AActor* Source );
	int eventSpecialCost ( class APawn* Seeker, class UReachSpec* Path );
	bool CanTeleport ( class AActor* A );
	bool IsUsableAnchorFor ( class APawn* P );
	class UReachSpec* GetReachSpecTo ( class ANavigationPoint* Nav, class UClass* SpecClass );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
};

UClass* ABioStartPoint::pClassPointer = NULL;

// Class SFXGame.BioTempNavPoint
// 0x0000 (0x02C4 - 0x02C4)
class ABioTempNavPoint : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63004 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
	void ApplyCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void eventShutDown ( );
	void OnToggle ( class USeqAct_Toggle* inAction );
	bool IsOnDifferentNetwork ( class ANavigationPoint* Nav );
	bool GetAllNavInRadius ( class AActor* ChkActor, struct FVector ChkPoint, float Radius, unsigned long bSkipBlocked, int inNetworkID, struct FCylinder MinSize, TArray< class ANavigationPoint* >* out_NavList );
	class ANavigationPoint* GetNearestNavToPoint ( class AActor* ChkActor, struct FVector ChkPoint, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList );
	class ANavigationPoint* GetNearestNavToActor ( class AActor* ChkActor, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList, float MinDist );
	bool ProceedWithMove ( class APawn* Other );
	bool eventSuggestMovePreparation ( class APawn* Other );
	float eventDetourWeight ( class APawn* Other, float PathWeight );
	bool eventAccept ( class AActor* Incoming, class AActor* Source );
	int eventSpecialCost ( class APawn* Seeker, class UReachSpec* Path );
	bool CanTeleport ( class AActor* A );
	bool IsUsableAnchorFor ( class APawn* P );
	class UReachSpec* GetReachSpecTo ( class ANavigationPoint* Nav, class UClass* SpecClass );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
};

UClass* ABioTempNavPoint::pClassPointer = NULL;

// Class SFXGame.BioTrigger
// 0x0004 (0x0208 - 0x0204)
class ABioTrigger : public ATrigger
{
public:
	unsigned long                                      Enabled : 1;                                      		// 0x0204 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      OneShot : 1;                                      		// 0x0204 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      Touched : 1;                                      		// 0x0204 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63089 ];

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ABioTrigger::pClassPointer = NULL;

// Class SFXGame.BioTriggerActorFactory
// 0x0000 (0x005C - 0x005C)
class UBioTriggerActorFactory : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63103 ];

		return pClassPointer;
	};

	void eventPostCreateActor ( class AActor* NewActor );
};

UClass* UBioTriggerActorFactory::pClassPointer = NULL;

// Class SFXGame.BioTriggerVolume
// 0x0004 (0x0230 - 0x022C)
class ABioTriggerVolume : public ATriggerVolume
{
public:
	unsigned long                                      Enabled : 1;                                      		// 0x022C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      OneShot : 1;                                      		// 0x022C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      Touched : 1;                                      		// 0x022C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63145 ];

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ABioTriggerVolume::pClassPointer = NULL;

// Class SFXGame.BioVectorParameterInstTrack
// 0x0000 (0x003C - 0x003C)
class UBioVectorParameterInstTrack : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63158 ];

		return pClassPointer;
	};

};

UClass* UBioVectorParameterInstTrack::pClassPointer = NULL;

// Class SFXGame.BioVectorParameterTrack
// 0x0000 (0x0070 - 0x0070)
class UBioVectorParameterTrack : public UInterpTrackVectorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63160 ];

		return pClassPointer;
	};

};

UClass* UBioVectorParameterTrack::pClassPointer = NULL;

// Class SFXGame.BioVFXTemplate
// 0x0000 (0x003C - 0x003C)
class UBioVFXTemplate : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63162 ];

		return pClassPointer;
	};

};

UClass* UBioVFXTemplate::pClassPointer = NULL;

// Class SFXGame.BioVisualEffectPool
// 0x0000 (0x003C - 0x003C)
class UBioVisualEffectPool : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63164 ];

		return pClassPointer;
	};

};

UClass* UBioVisualEffectPool::pClassPointer = NULL;

// Class SFXGame.BioVisualEffectTrack
// 0x0000 (0x005C - 0x005C)
class UBioVisualEffectTrack : public UInterpTrack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63166 ];

		return pClassPointer;
	};

};

UClass* UBioVisualEffectTrack::pClassPointer = NULL;

// Class SFXGame.BioVisualEffectTrackInst
// 0x0000 (0x003C - 0x003C)
class UBioVisualEffectTrackInst : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63168 ];

		return pClassPointer;
	};

};

UClass* UBioVisualEffectTrackInst::pClassPointer = NULL;

// Class SFXGame.BioWaypointSetFactory
// 0x0000 (0x005C - 0x005C)
class UBioWaypointSetFactory : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63181 ];

		return pClassPointer;
	};

	void eventPostCreateActor ( class AActor* NewActor );
};

UClass* UBioWaypointSetFactory::pClassPointer = NULL;

// Class SFXGame.BioWorldInfoTick
// 0x0000 (0x01F6 - 0x01F6)
class ABioWorldInfoTick : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63183 ];

		return pClassPointer;
	};

	struct FVector LocalToWorld ( struct FVector vLocal );
	void eventBioBaseRemovedFromWorld ( );
	void BioRestoreFromStasis ( );
	void BioApplyStasis ( struct FString Cause );
	void eventPlayFootStepSound ( int FootDown );
	void eventSFXSetAudioComponentRTPCs ( class UActorComponent* pWwiseAudioComponent );
	class USkeletalMeshComponent* GetHeadSkelMeshComponent ( );
	class USkeletalMeshComponent* GetPrimarySkelMeshComponent ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	unsigned char GetPowerResistance ( class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, class UClass* DamageType, float* Damage, struct FVector* Force, class AActor** TargetOverride );
	void RemoveSFXModuleIndex ( int nIndex );
	void RemoveSFXModule ( class USFXModule* oModule );
	void AddSFXModule ( class USFXModule* oModule, unsigned long bUserModule );
	void StopAllSounds ( );
	bool WillOverlap ( struct FVector PosA, struct FVector VelA, struct FVector PosB, struct FVector VelB, float StepSize, float Radius, float* Time );
	struct FVector GetAvoidanceVector ( struct FVector GoalLocation, float CollisionRadius, float MaxSpeed, int NumSamples, float VelocityStepRate, float MaxTimeTilOverlap, TArray< class AActor* >* Obstacles );
	bool IsClient ( );
	bool IsServer ( );
	bool IsOwningClient ( );
	void eventReplicationEnded ( );
	void eventPostDemoRewind ( );
	void eventAnimTreeUpdated ( class USkeletalMeshComponent* SkelMesh );
	bool SupportsKismetModification ( class USequenceOp* AskingOp, struct FString* Reason );
	void eventTrailsNotifyEnd ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotifyTick ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotify ( class UAnimNotify_Trails* AnimNotifyData );
	void eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	void GetAimAdhesionExtent ( float* Width, float* Height, struct FVector* Center );
	void GetAimFrictionExtent ( float* Width, float* Height, struct FVector* Center );
	bool IsInPersistentLevel ( );
	void SetActive ( unsigned long bActive );
	class USFXModule* GetModule ( class UClass* ModuleClass );
	void eventExceededPhysicsThreshold ( class AActor* instigatedBy );
	void eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance );
	struct FGuid GetPackageGuid ( struct FName PackageName );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void SetHUDLocation ( struct FVector NewHUDLocation );
	void eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void PickedUpBy ( class APawn* P );
	void eventSpawnedByKismet ( );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	void FindGoodEndView ( class APlayerController* PC, struct FRotator* GoodRotation );
	void NotifyLocalPlayerTeamReceived ( );
	struct FString GetLocationStringFor ( class APlayerReplicationInfo* PRI );
	unsigned char eventScriptGetTeamNum ( );
	unsigned char GetTeamNum ( );
	void PawnBaseDied ( );
	bool IsPlayerOwned ( );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_rotation );
	bool IsStationary ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	bool CanActorPlayFaceFXAnim ( );
	bool IsActorPlayingFaceFXAnim ( );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay );
	void eventFinishMovementControl ( class UInterpGroup* InInterpGroup );
	void eventBeginMovementControl ( class UInterpGroup* InInterpGroup );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnAttachToActor ( class USeqAct_AttachToActor* Action );
	void BioEnqueueDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation );
	void eventBioDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void OnChangeCollision ( class USeqAct_ChangeCollision* Action );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	void OnSetBlockRigidBody ( class USeqAct_SetBlockRigidBody* Action );
	void OnSetVelocity ( class USeqAct_SetVelocity* Action );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnModifyHealth ( class USeqAct_ModifyHealth* Action );
	void BlockForTextureStreaming ( );
	bool TexturePrestreamIsRequired ( );
	void PrestreamTextures ( float Seconds, unsigned long bEnableStreaming, int CinematicTextureGroups );
	void eventShutDown ( );
	void SetNetUpdateTime ( float NewUpdateTime );
	void eventForceNetRelevant ( );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void ClearLatentAction ( class UClass* actionClass, unsigned long bAborted, class USeqAct_Latent* exceptionAction, unsigned long bCancelled );
	bool FindEventsOfClass ( class UClass* EventClass, unsigned long bIncludeDisabled, TArray< class USequenceEvent* >* out_EventList );
	bool ActivateEventClass ( class UClass* InClass, class AActor* inInstigator, unsigned long bTest, TArray< class USequenceEvent* >* EventList, TArray< int >* ActivateIndices, TArray< class USequenceEvent* >* ActivatedEvents );
	bool TriggerGlobalEventClass ( class UClass* InEventClass, class AActor* inInstigator, int ActivateIndex );
	void eventReceivedNewEvent ( class USequenceEvent* Evt );
	bool TriggerEventClass ( class UClass* InEventClass, class AActor* inInstigator, int ActivateIndex, unsigned long bTest, TArray< class USequenceEvent* >* ActivatedEvents );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	bool CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance );
	void ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation );
	bool CanSplash ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	bool IsInPain ( );
	bool IsInVolume ( class AVolume* aVolume );
	void eventReset ( );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventModifyHearSoundComponent ( class UAudioComponent* AC );
	struct FString GetPhysicsName ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FString GetDebugName ( );
	void MatchStarting ( );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void ReplaceText ( struct FString Replace, struct FString With, struct FString* Text );
	struct FString GetHumanReadableName ( );
	struct FString GetItemName ( struct FString FullName );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void eventEndViewTarget ( class APlayerController* PC );
	void eventBecomeViewTarget ( class APlayerController* PC );
	bool CheckForErrors ( );
	void eventDebugFreezeGame ( class AActor* ActorToLookAt );
	float GetGravityZ ( );
	void CheckHitInfo ( class UPrimitiveComponent* FallBackComponent, struct FVector Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation );
	void eventTakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void KilledBy ( class APawn* EventInstigator );
	bool HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool StopsProjectile ( class AProjectile* P );
	void eventNotifySkelControlBeyondLimit ( class USkelControlLookAt* LookAt );
	void eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance );
	void eventSetInitialState ( );
	void eventPostBeginPlay ( );
	void eventBroadcastLocalizedTeamMessage ( int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalizedMessage ( class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventPreBeginPlay ( );
	bool FindActorsOfClass ( class UClass* ActorClass, TArray< class AActor* >* out_Actors );
	bool MoveActorToFloor ( );
	class APlayerController* GetALocalPlayerController ( );
	void LocalPlayerControllers ( class UClass* BaseClass, class APlayerController** PC );
	void AllOwnedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	void ComponentList ( class UClass* BaseClass, class UActorComponent** out_Component );
	void OverlappingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** out_Actor );
	void CollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bUseOverlapCheck, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleCollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, struct FVector Extent, unsigned long bTraceActors, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor );
	void TraceActors ( class UClass* BaseClass, struct FVector End, struct FVector Start, struct FVector Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo );
	void TouchingActors ( class UClass* BaseClass, unsigned long bReverse, class AActor** Actor );
	void BasedActors ( class UClass* BaseClass, class AActor** Actor );
	void ChildActors ( class UClass* BaseClass, class AActor** Actor );
	void DynamicActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	void AllActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	struct FString GetURLMap ( );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	bool PreTeleport ( class ATeleporter* InTeleporter );
	struct FVector GetDestination ( class AController* C );
	bool SuggestTossVelocity ( struct FVector Destination, struct FVector Start, float TossSpeed, float BaseTossZ, float DesiredZPct, struct FVector CollisionSize, float TerminalVelocity, float OverrideGravityZ, unsigned long bOnlyTraceUp, struct FVector* TossVelocity );
	bool PlayerCanSeeMe ( );
	void MakeNoise ( float Loudness, struct FName NoiseType );
	void StopSound ( class UWwiseBaseSoundObject* InSoundEvent );
	void PlaySound ( class UWwiseBaseSoundObject* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	class UAudioComponent* CreateAudioComponent ( class USoundCue* InSoundCue, unsigned long bPlay, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation, unsigned long bAttachToSelf );
	void ResetTimerTimeDilation ( struct FName TimerName, class UObject* inObj );
	void ModifyTimerTimeDilation ( struct FName TimerName, float InTimerTimeDilation, class UObject* inObj );
	float GetRemainingTimeForTimer ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerRate ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerCount ( struct FName inTimerFunc, class UObject* inObj );
	bool IsTimerActive ( struct FName inTimerFunc, class UObject* inObj );
	void PauseTimer ( unsigned long bPause, struct FName inTimerFunc, class UObject* inObj );
	void ClearAllTimers ( class UObject* inObj );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	void eventTornOff ( );
	bool Destroy ( );
	class AActor* Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail, unsigned long bFindSafeLocation );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void GetComponentsBoundingBox ( struct FBox* ActorBox );
	bool IsOverlapping ( class AActor* A );
	bool ContainsPoint ( struct FVector Spot );
	bool FindSpot ( struct FVector BoxExtent, struct FVector* SpotLocation );
	bool TraceAllPhysicsAssetInteractions ( class USkeletalMeshComponent* SkelMeshComp, struct FVector EndTrace, struct FVector StartTrace, struct FVector Extent, TArray< struct FImpactInfo >* out_Hits );
	bool FastTrace ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceBullet );
	bool PointCheckComponent ( class UPrimitiveComponent* InComponent, struct FVector PointLocation, struct FVector PointExtent );
	bool TraceComponent ( class UPrimitiveComponent* InComponent, struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, unsigned long bComplexCollision, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	class AActor* Trace ( struct FVector TraceEnd, struct FVector TraceStart, unsigned long bTraceActors, struct FVector Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	void VolumeBasedDestroy ( class APhysicsVolume* PV );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool UsedBy ( class APawn* User );
	bool eventOverRotated ( struct FRotator* out_Desired, struct FRotator* out_Actual );
	bool ClampRotation ( struct FRotator rBase, struct FRotator rUpperLimits, struct FRotator rLowerLimits, struct FRotator* out_Rot );
	void eventOnSleepRBPhysics ( );
	void eventOnWakeRBPhysics ( );
	void eventRanInto ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void eventCollisionChanged ( );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventBaseChange ( );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void eventUnTouch ( class AActor* Other );
	void eventPostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventFalling ( );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventTimer ( );
	void eventTick ( float DeltaTime );
	void eventLostChild ( class AActor* Other );
	void eventGainedChild ( class AActor* Other );
	void eventDestroyed ( );
	void SetTickIsDisabled ( unsigned long bInDisabled );
	void SetTickGroup ( unsigned char NewTickGroup );
	void ReattachComponent ( class UActorComponent* ComponentToReattach );
	void DetachComponent ( class UActorComponent* ExComponent );
	void AttachComponent ( class UActorComponent* NewComponent );
	void UnClock ( float* Time );
	void Clock ( float* Time );
	void SetPhysics ( unsigned char newPhysics );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetHidden ( unsigned long bNewHidden );
	void ChartData ( struct FString DataName, float DataValue );
	void FlushDebugStrings ( );
	void DrawDebugFrustrum ( unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, struct FMatrix* FrustumToWorld );
	void DrawDebugString ( struct FVector TextLocation, struct FString Text, class AActor* TestBaseActor, struct FColor TextColor, float Duration );
	void DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines );
	void DrawDebugCylinder ( struct FVector Start, struct FVector End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines );
	void DrawDebugStar ( struct FVector Position, float Size, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugBox ( struct FVector Center, struct FVector Extent, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugPoint ( struct FVector Position, float Size, struct FLinearColor PointColor, unsigned long bPersistentLines );
	void DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void FlushPersistentDebugLines ( );
	struct FVector GetBasedPosition ( struct FBasedPosition BP );
	void SetBasedPosition ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	struct FVector BP2Vect ( struct FBasedPosition BP );
	void Vect2BP ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	void SetForcedInitialReplicatedProperty ( class UProperty* PropToReplicate, unsigned long bAdd );
	void eventReplicatedDataBinding ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsOwnedBy ( class AActor* TestActor );
	class AActor* GetBaseMost ( );
	bool IsBasedOn ( class AActor* TestActor );
	void FindBase ( );
	void SetOwner ( class AActor* NewOwner );
	void SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName );
	float GetTerminalVelocity ( );
	void AutonomousPhysics ( float DeltaSeconds );
	bool MoveSmooth ( struct FVector Delta );
	int fixedTurn ( int Current, int Desired, int DeltaRate );
	void SetHardAttach ( unsigned long bNewHardAttach );
	bool SetRelativeLocation ( struct FVector NewLocation );
	bool SetRelativeRotation ( struct FRotator NewRotation );
	void SetZone ( unsigned long bForceRefresh );
	unsigned char MovingWhichWay ( float* Amount );
	bool SetRotation ( struct FRotator NewRotation );
	bool SetLocation ( struct FVector NewLocation, unsigned long bDebugFailure );
	bool Move ( struct FVector Delta );
	void SetDrawScale3D ( struct FVector NewScale3D );
	void SetDrawScale ( float NewScale );
	void SetCollisionType ( unsigned char NewCollisionType );
	void SetCollisionSize ( float NewRadius, float NewHeight );
	void SetCollision ( unsigned long bNewColActors, unsigned long bNewBlockActors, unsigned long bNewIgnoreEncroachers );
	void FinishAnim ( class UAnimNodeSequence* SeqNode );
	void Sleep ( float Seconds );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	void ForceUpdateComponents ( unsigned long bCollisionUpdate, unsigned long bTransformOnly );
};

UClass* ABioWorldInfoTick::pClassPointer = NULL;

// Class SFXGame.BioWp_Kismet
// 0x0000 (0x02C8 - 0x02C8)
class ABioWp_Kismet : public ABioPathPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63185 ];

		return pClassPointer;
	};

	bool OnCreatureReachedWayPoint ( class APawn* PathFindingCreature );
};

UClass* ABioWp_Kismet::pClassPointer = NULL;

// Class SFXGame.DynamicCylindricalForceActor
// 0x0000 (0x0228 - 0x0228)
class ADynamicCylindricalForceActor : public ARB_CylindricalForceActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63196 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};

UClass* ADynamicCylindricalForceActor::pClassPointer = NULL;

// Class SFXGame.SFXMatchResultsData
// 0x005C (0x0098 - 0x003C)
class USFXMatchResultsData : public UObject
{
public:
	TArray< struct FPlayerScoreData >                  PlayerData;                                       		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      SquadMedalIDs;                                    		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ExtractedPlayerIDs;                               		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMatchData                                  CurrentMatchData;                                 		// 0x0060 (0x0024) [0x0000000000000000]              
	struct FPlayerRewardData                           PlayerRewards;                                    		// 0x0084 (0x0008) [0x0000000000000000]              
	int                                                TotalSquadCredits;                                		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                TotalSquadXP;                                     		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                BonusSquadXP;                                     		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63931 ];

		return pClassPointer;
	};

	void ResetData ( );
	void SetPlayerRewardNewExperience ( float fXP );
	void SetPlayerRewardOriginalExperience ( float fXP );
	void CleanupInactiveData ( TArray< int >* ActiveIDs );
	void SetMatchResult ( unsigned long bResult );
	void SetMatchTime ( int nTotalMatchTime );
	void SetMatchWaves ( int nWaves );
	void ClearGAWValues ( );
	void SetMatchSettings ( int MapId, unsigned char ZoneID, int GAWZoneIncrease, int GAWOverallIncrease, int EnemyID, int DifficultyID );
	void SetBonusSquadXP ( int nBonusXP );
	void SetTotalSquadXP ( int nTotalXP );
	void SetTotalSquadCredits ( int nCredits );
	void AddSquadMedal ( int MedalID );
	void SetPlayerUniqueID ( int PlayerID, struct FUniqueNetId UniqueId );
	void SetPlayerLevel ( int PlayerID, int nLevel );
	void SetPlayerKit ( int PlayerID, struct FName KitName );
	void AddPlayerMedal ( int PlayerID, int MedalID );
	int FindPlayer ( int PlayerID );
	void UpdatePlayerScoreData ( int PlayerID, struct FString PlayerName, float fScore );
};

UClass* USFXMatchResultsData::pClassPointer = NULL;

// Class SFXGame.SFXActorFactoryEnemySpawnPoint
// 0x0000 (0x005C - 0x005C)
class USFXActorFactoryEnemySpawnPoint : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64135 ];

		return pClassPointer;
	};

	void eventPostCreateActor ( class AActor* NewActor );
};

UClass* USFXActorFactoryEnemySpawnPoint::pClassPointer = NULL;

// Class SFXGame.SFXEnemySpawnPoint
// 0x001C (0x02E0 - 0x02C4)
class ASFXEnemySpawnPoint : public ANavigationPoint
{
public:
	TArray< unsigned char >                            SupportedCustomActions;                           		// 0x02C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            SupportedReachSpecs;                              		// 0x02D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              Weight;                                           		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64137 ];

		return pClassPointer;
	};

};

UClass* ASFXEnemySpawnPoint::pClassPointer = NULL;

// Class SFXGame.SFXActorFactoryPhysicsAsset
// 0x0000 (0x0080 - 0x0080)
class USFXActorFactoryPhysicsAsset : public UActorFactoryPhysicsAsset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64138 ];

		return pClassPointer;
	};

};

UClass* USFXActorFactoryPhysicsAsset::pClassPointer = NULL;

// Class SFXGame.SFXKAssetSpawnable
// 0x0000 (0x0210 - 0x0210)
class ASFXKAssetSpawnable : public ASFXKAsset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64140 ];

		return pClassPointer;
	};

};

UClass* ASFXKAssetSpawnable::pClassPointer = NULL;

// Class SFXGame.SFXAI_Critter
// 0x0020 (0x06B0 - 0x0690)
class ASFXAI_Critter : public Asfxai_core
{
public:
	class UClass*                                      CritterCommand;                                   		// 0x0690 (0x0004) [0x0000000000000000]              
	struct FVector                                     m_vRepulsor;                                      		// 0x0694 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vCurrentSteeringDirection;                      		// 0x06A0 (0x000C) [0x0000000000000000]              
	unsigned long                                      m_bUnderAttack : 1;                               		// 0x06AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64141 ];

		return pClassPointer;
	};

	bool ShouldCancelMove ( int nReason );
	void NotifyNearMiss ( struct FVector HitLocation );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void Initialize ( );
};

UClass* ASFXAI_Critter::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_Critter
// 0x0000 (0x0084 - 0x0084)
class USFXAICmd_Critter : public USFXAICommand
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64160 ];

		return pClassPointer;
	};

	void NotifyFriendDied ( class ABioPawn* FriendPawn );
	void OnEnteredPlaypen ( );
	bool StartFollowingActor ( class AActor* ActorToFollow );
	bool MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, unsigned long bForceWalk, struct FScriptDelegate MoveDelegate );
	bool FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, unsigned long bForceShoot, float fAttackDuration, struct FScriptDelegate FireDelegate );
	bool UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression );
	void MoveToDelegate ( int nReason );
	void FireWeaponDelegate ( int nReason );
	void UsePowerDelegate ( int nReason );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	bool ShouldRun ( );
	bool CancelCommand ( int nReason );
	void NotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	bool NotifyMoodChange ( );
	void NotifyPendingPowerImpact ( struct FName Label, float TimeBeforeImpact, class Usfxpowercustomaction* Power, class ASFXProjectile_PowerCustomAction* Projectile );
	void NotifyNearMiss ( struct FVector HitLocation );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void NotifyArmourDestroyed ( struct FName ArmourPiece, class AController* instigatedBy );
	void NotifyArmourHit ( float Damage, struct FName ArmourPiece, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyNewEnemy ( class APawn* NewEnemy );
	void PeriodicMoveCheck ( );
	void UpdateMovementActions ( );
	bool CanInterruptCurrentCommand ( );
	void Resumed ( struct FName OldCommandName );
	void Paused ( class UGameAICommand* NewCommand );
};

UClass* USFXAICmd_Critter::pClassPointer = NULL;

// Class SFXGame.SFXAI_None
// 0x0000 (0x0690 - 0x0690)
class ASFXAI_None : public Asfxai_core
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64161 ];

		return pClassPointer;
	};

	void CheckDownedPlayers ( );
	void DrawDifficulty ( class UBioCheatManager* CM );
	bool CanTurretFireAt ( class AActor* TestActor );
	void OnPossessTurret ( class USFXSeqAct_PossessTurret* Action );
	void FindDrivablePawn ( );
	float GetMinDistanceToAnyPlayer ( );
	void CleanUpStaleAI ( );
	void NotifyStuck ( );
	void NotifyCombatZoneRemoved ( );
	void NotifyCombatZoneAdded ( );
	bool eventIsAtCover ( );
	void NotifyKnockedOutOfCover ( );
	float GetMoveFireDelayTime ( );
	void DoMeleeAttack ( );
	bool ShouldKillPlayer ( class APawn* PartyPawn );
	bool ShouldPowerEvade ( );
	bool ShouldSyncMelee ( class AActor* MeleeTarget );
	bool ShouldMelee ( class AActor* MeleeTarget );
	unsigned char GetBestEvadeDir ( struct FVector DangerPoint, class AProjectile* Prj, class APawn* Shooter );
	bool ShouldPartialLean ( );
	bool ShouldCancelMove ( int nReason );
	bool ShouldStayLeanedOut ( );
	bool HasNearbyEnemy ( class APawn** NearbyPawn );
	void eventGetActorToFollow ( class AActor** oActor, struct FVector* vLocation );
	void BeginCombatCommand ( class UClass* CmdClass, struct FString Reason, unsigned long bForced );
	void BeginDefaultCommand ( struct FString Reason, unsigned long bForced );
	void CheckTimedCombatTransition ( );
	void InitialCheckTimedCombatTransition ( );
	bool ReactToFlank ( class APawn* FlankingPawn );
	bool ReactToNearbyEnemy ( class APawn* NearbyPawn );
	bool IsTargetStealthed ( );
	bool IsCombatStale ( );
	void CheckInterruptCombatTransitions ( );
	bool IgnoreTimeTransitions ( );
	bool eventEnableAI ( unsigned long bEnable, int nRequestedBy );
	void NotifyArmourHit ( float Damage, struct FName ArmourPiece, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	void NotifyArmourDestroyed ( struct FName ArmourPiece, class AController* instigatedBy );
	class ANavigationPoint* FindSuppressionPoint ( class AActor* Target, unsigned char Range, float MinDistance, float MaxDistance );
	float FindClosestApproachDistance ( class AActor* oActor );
	bool TeleportToActor ( class AActor* oActor, unsigned long bForceTeleport, unsigned long bOffsetTeleport );
	bool IsInWeaponRange ( class AActor* oTarget );
	float TargetRange ( );
	bool ShootWeaponAtFireTarget ( float DmgThreshold, unsigned long bForceShoot );
	bool CanShootWeapon ( class AActor* oTarget );
	bool ChooseDefensivePower ( struct FName* nmPower );
	bool ChooseAttackPower ( class AActor* oTarget, unsigned long bPlayerRequest, struct FName* nmPower, int* nRequiresAttackTicket, struct FVector* AttackOrigin );
	bool CanChoosePower ( class Usfxpowercustomaction* oPower, class AActor* oTarget, unsigned long bPlayerRequest );
	void UpdateMovementFocus ( );
	void eventUpdateMovementActions ( );
	void eventOnEnteredPlaypen ( );
	float GetPeriodicMoveInterval ( );
	bool RespondToBump ( class AActor* Other, struct FVector HitNormal );
	void DrawLocationMarker ( struct FVector vLocation, float fSize, int nRed, int nGreen, int nBlue );
	void eventBioClearCrossLevelReferences ( class ULevel* oLevel );
	bool IsActorInPlaypen ( class AActor* oActor );
	void eventOnLeftPlaypen ( );
	bool IsReturningToPlaypen ( );
	bool IsFlankedByTarget ( class AActor* oTarget, unsigned long bUseExactLocation );
	void OnEnteringStasis ( );
	void NotifyFriendDied ( class ABioPawn* FriendPawn );
	void NotifyDeathBlow ( class UClass* DamageType );
	void CheckPendingWeaponSwitch ( );
	void PlayAmbientVoc ( );
	void Taunt ( );
	bool IsInFightingState ( );
	void SwitchWeapon ( class ASFXWeapon* oWeapon );
	void SetSquadIntoCombat ( );
	float GetPowerUsePercent ( );
	void ReleaseTicket ( class AActor* oTarget, unsigned char eTicket, unsigned long bKillAttackTicket );
	bool AcquireTicket ( class AActor* oTarget, unsigned char eTicket, int nAttackTicketCost );
	void ClearPowerReservation ( struct FName nmPower, unsigned long bSkipProjectilePowers );
	bool RequestPowerReservation ( struct FName nmPower, unsigned long bForceSuccess );
	bool RELOAD ( );
	bool ShouldReload ( );
	bool ChooseAttack ( class AActor* oTarget, struct FName* nmPowerName );
	unsigned char Attack ( );
	void ClearCancelAction ( );
	void CancelAction ( int nReason );
	void PrecisionMove ( struct FVector vLocation, struct FRotator rRotation );
	bool WantsToRun ( float fDistance );
	void SetMovementSpeed ( );
	void PeriodicMoveCheck ( );
	bool SetMoveGoal ( class AActor* NewMoveGoal, float NewMoveOffset );
	void ApplyBasePathConstraints ( );
	void NotifyWeaponDelayFinished ( );
	void CalculateGrenadeArc ( float MinSpeed, float MaxSpeed, float MaxRange, float* InitialSpeed, struct FVector* InitialDirection );
	struct FVector GetAimLocation ( class AActor* oAimTarget );
	unsigned char GetBestTargetCoverAction ( class ABioPawn* TargetPawn, struct FCoverInfo TargetCover );
	bool RespondToPush ( );
	void PushPawn ( class ABioPawn* oPawn, struct FVector HitNormal );
	void NotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	void NotifyUnderAttack ( unsigned long bHit );
	void NotifyPendingPowerImpact ( struct FName Label, float TimeBeforeImpact, class Usfxpowercustomaction* Power, class ASFXProjectile_PowerCustomAction* Projectile );
	void NotifyNearMiss ( struct FVector HitLocation );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	bool GetBestCoverAction ( struct FCoverInfo ChkCover, class AActor* ChkTarget, unsigned char* AttackerCoverAction, unsigned char* TargetCoverAction );
	bool CanAttack ( class AActor* oTarget );
	bool GetAttackOrigin ( class AActor* oTarget, struct FVector* AttackOrigin );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void UpdateAccuracy ( );
	void ResetAimInstability ( );
	void NotifyChangedWeapon ( class AWeapon* PrevWeapon, class AWeapon* NewWeapon );
	void NotifyAiming ( class AActor* AimTarget, unsigned long bAiming );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyWeaponFired ( class AWeapon* W, unsigned char FireMode );
	void StartFiring ( int InBurstsToFire );
	bool IsFriendlyBlockingFireLine ( );
	bool IsFireLineObstructed ( );
	bool CanFireWeaponNoLOS ( class AWeapon* Wpn, unsigned char FireModeNum );
	bool CanFireWeapon ( class AWeapon* Wpn, unsigned char FireModeNum );
	bool IsFiringWeapon ( );
	void TriggerAttackVocalization ( );
	void OnTargetChanged ( );
	void AdjustEnemyRating ( class APawn* EnemyPawn, float* fRating );
	void AdjustRatingByTickets ( int EnemyIdx, float* out_Rating );
	bool SelectTarget ( );
	bool NotifyMoodChange ( );
	void ResetCombatMood ( );
	bool CanSwitchMood ( unsigned char NewMood );
	bool SetCombatMood ( unsigned char NewMood, float fDuration );
	void Initialize ( );
	void ResetEvadeDamage ( );
	void PostBeginPlay ( );
	void Reset ( );
	void ClearGoHereDelegates ( );
	void AssignGoHereDelegates ( struct FScriptDelegate RangeDel, struct FScriptDelegate FlankDel );
	void StopFollowingActor ( );
	bool StartFollowingActor ( class AActor* ActorToFollow );
	unsigned char GetCurrentKismetOrder ( );
	void MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, unsigned long bImmediateMove, unsigned long bForceWalk, struct FScriptDelegate MoveDelegate );
	void FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, unsigned long bForceShoot, float fAttackDuration, struct FScriptDelegate FireDelegate );
	void UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression );
	void NotifyPlaypenChanged ( );
	bool TryInvalidateTargetFlank ( );
	bool TryInvalidateTargetRange ( float fRangeToTarget );
	void MoveToDelegate ( int nReason );
	void FireWeaponDelegate ( int nReason );
	void UsePowerDelegate ( int nReason );
};

UClass* ASFXAI_None::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_None
// 0x0000 (0x0098 - 0x0098)
class USFXAICmd_None : public USFXAICommand_Base_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64164 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICmd_None::pClassPointer = NULL;

// Class SFXGame.SFXAI_TechDrone
// 0x0000 (0x0690 - 0x0690)
class ASFXAI_TechDrone : public Asfxai_core
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64165 ];

		return pClassPointer;
	};

	void CheckDownedPlayers ( );
	void DrawDifficulty ( class UBioCheatManager* CM );
	bool CanTurretFireAt ( class AActor* TestActor );
	void OnPossessTurret ( class USFXSeqAct_PossessTurret* Action );
	void FindDrivablePawn ( );
	float GetMinDistanceToAnyPlayer ( );
	void CleanUpStaleAI ( );
	void NotifyStuck ( );
	void NotifyCombatZoneRemoved ( );
	void NotifyCombatZoneAdded ( );
	bool eventIsAtCover ( );
	void NotifyKnockedOutOfCover ( );
	float GetMoveFireDelayTime ( );
	void DoMeleeAttack ( );
	bool ShouldKillPlayer ( class APawn* PartyPawn );
	bool ShouldPowerEvade ( );
	bool ShouldSyncMelee ( class AActor* MeleeTarget );
	bool ShouldMelee ( class AActor* MeleeTarget );
	unsigned char GetBestEvadeDir ( struct FVector DangerPoint, class AProjectile* Prj, class APawn* Shooter );
	bool ShouldPartialLean ( );
	bool ShouldCancelMove ( int nReason );
	bool ShouldStayLeanedOut ( );
	bool HasNearbyEnemy ( class APawn** NearbyPawn );
	void eventGetActorToFollow ( class AActor** oActor, struct FVector* vLocation );
	void BeginCombatCommand ( class UClass* CmdClass, struct FString Reason, unsigned long bForced );
	void BeginDefaultCommand ( struct FString Reason, unsigned long bForced );
	void CheckTimedCombatTransition ( );
	void InitialCheckTimedCombatTransition ( );
	bool ReactToFlank ( class APawn* FlankingPawn );
	bool ReactToNearbyEnemy ( class APawn* NearbyPawn );
	bool IsTargetStealthed ( );
	bool IsCombatStale ( );
	void CheckInterruptCombatTransitions ( );
	bool IgnoreTimeTransitions ( );
	bool eventEnableAI ( unsigned long bEnable, int nRequestedBy );
	void NotifyArmourHit ( float Damage, struct FName ArmourPiece, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	void NotifyArmourDestroyed ( struct FName ArmourPiece, class AController* instigatedBy );
	class ANavigationPoint* FindSuppressionPoint ( class AActor* Target, unsigned char Range, float MinDistance, float MaxDistance );
	float FindClosestApproachDistance ( class AActor* oActor );
	bool TeleportToActor ( class AActor* oActor, unsigned long bForceTeleport, unsigned long bOffsetTeleport );
	bool IsInWeaponRange ( class AActor* oTarget );
	float TargetRange ( );
	bool ShootWeaponAtFireTarget ( float DmgThreshold, unsigned long bForceShoot );
	bool CanShootWeapon ( class AActor* oTarget );
	bool ChooseDefensivePower ( struct FName* nmPower );
	bool ChooseAttackPower ( class AActor* oTarget, unsigned long bPlayerRequest, struct FName* nmPower, int* nRequiresAttackTicket, struct FVector* AttackOrigin );
	bool CanChoosePower ( class Usfxpowercustomaction* oPower, class AActor* oTarget, unsigned long bPlayerRequest );
	void UpdateMovementFocus ( );
	void eventUpdateMovementActions ( );
	void eventOnEnteredPlaypen ( );
	float GetPeriodicMoveInterval ( );
	bool RespondToBump ( class AActor* Other, struct FVector HitNormal );
	void DrawLocationMarker ( struct FVector vLocation, float fSize, int nRed, int nGreen, int nBlue );
	void eventBioClearCrossLevelReferences ( class ULevel* oLevel );
	bool IsActorInPlaypen ( class AActor* oActor );
	void eventOnLeftPlaypen ( );
	bool IsReturningToPlaypen ( );
	bool IsFlankedByTarget ( class AActor* oTarget, unsigned long bUseExactLocation );
	void OnEnteringStasis ( );
	void NotifyFriendDied ( class ABioPawn* FriendPawn );
	void NotifyDeathBlow ( class UClass* DamageType );
	void CheckPendingWeaponSwitch ( );
	void PlayAmbientVoc ( );
	void Taunt ( );
	bool IsInFightingState ( );
	void SwitchWeapon ( class ASFXWeapon* oWeapon );
	void SetSquadIntoCombat ( );
	float GetPowerUsePercent ( );
	void ReleaseTicket ( class AActor* oTarget, unsigned char eTicket, unsigned long bKillAttackTicket );
	bool AcquireTicket ( class AActor* oTarget, unsigned char eTicket, int nAttackTicketCost );
	void ClearPowerReservation ( struct FName nmPower, unsigned long bSkipProjectilePowers );
	bool RequestPowerReservation ( struct FName nmPower, unsigned long bForceSuccess );
	bool RELOAD ( );
	bool ShouldReload ( );
	bool ChooseAttack ( class AActor* oTarget, struct FName* nmPowerName );
	unsigned char Attack ( );
	void ClearCancelAction ( );
	void CancelAction ( int nReason );
	void PrecisionMove ( struct FVector vLocation, struct FRotator rRotation );
	bool WantsToRun ( float fDistance );
	void SetMovementSpeed ( );
	void PeriodicMoveCheck ( );
	bool SetMoveGoal ( class AActor* NewMoveGoal, float NewMoveOffset );
	void ApplyBasePathConstraints ( );
	void NotifyWeaponDelayFinished ( );
	void CalculateGrenadeArc ( float MinSpeed, float MaxSpeed, float MaxRange, float* InitialSpeed, struct FVector* InitialDirection );
	struct FVector GetAimLocation ( class AActor* oAimTarget );
	unsigned char GetBestTargetCoverAction ( class ABioPawn* TargetPawn, struct FCoverInfo TargetCover );
	bool RespondToPush ( );
	void PushPawn ( class ABioPawn* oPawn, struct FVector HitNormal );
	void NotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	void NotifyUnderAttack ( unsigned long bHit );
	void NotifyPendingPowerImpact ( struct FName Label, float TimeBeforeImpact, class Usfxpowercustomaction* Power, class ASFXProjectile_PowerCustomAction* Projectile );
	void NotifyNearMiss ( struct FVector HitLocation );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	bool GetBestCoverAction ( struct FCoverInfo ChkCover, class AActor* ChkTarget, unsigned char* AttackerCoverAction, unsigned char* TargetCoverAction );
	bool CanAttack ( class AActor* oTarget );
	bool GetAttackOrigin ( class AActor* oTarget, struct FVector* AttackOrigin );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void UpdateAccuracy ( );
	void ResetAimInstability ( );
	void NotifyChangedWeapon ( class AWeapon* PrevWeapon, class AWeapon* NewWeapon );
	void NotifyAiming ( class AActor* AimTarget, unsigned long bAiming );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyWeaponFired ( class AWeapon* W, unsigned char FireMode );
	void StartFiring ( int InBurstsToFire );
	bool IsFriendlyBlockingFireLine ( );
	bool IsFireLineObstructed ( );
	bool CanFireWeaponNoLOS ( class AWeapon* Wpn, unsigned char FireModeNum );
	bool CanFireWeapon ( class AWeapon* Wpn, unsigned char FireModeNum );
	bool IsFiringWeapon ( );
	void TriggerAttackVocalization ( );
	void OnTargetChanged ( );
	void AdjustEnemyRating ( class APawn* EnemyPawn, float* fRating );
	void AdjustRatingByTickets ( int EnemyIdx, float* out_Rating );
	bool SelectTarget ( );
	bool NotifyMoodChange ( );
	void ResetCombatMood ( );
	bool CanSwitchMood ( unsigned char NewMood );
	bool SetCombatMood ( unsigned char NewMood, float fDuration );
	void Initialize ( );
	void ResetEvadeDamage ( );
	void PostBeginPlay ( );
	void Reset ( );
	void ClearGoHereDelegates ( );
	void AssignGoHereDelegates ( struct FScriptDelegate RangeDel, struct FScriptDelegate FlankDel );
	void StopFollowingActor ( );
	bool StartFollowingActor ( class AActor* ActorToFollow );
	unsigned char GetCurrentKismetOrder ( );
	void MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, unsigned long bImmediateMove, unsigned long bForceWalk, struct FScriptDelegate MoveDelegate );
	void FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, unsigned long bForceShoot, float fAttackDuration, struct FScriptDelegate FireDelegate );
	void UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression );
	void NotifyPlaypenChanged ( );
	bool TryInvalidateTargetFlank ( );
	bool TryInvalidateTargetRange ( float fRangeToTarget );
	void MoveToDelegate ( int nReason );
	void FireWeaponDelegate ( int nReason );
	void UsePowerDelegate ( int nReason );
};

UClass* ASFXAI_TechDrone::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_Combat_TechDrone
// 0x0000 (0x0098 - 0x0098)
class USFXAICmd_Combat_TechDrone : public USFXAICommand_Base_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64175 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICmd_Combat_TechDrone::pClassPointer = NULL;

// Class SFXGame.SFXAI_TechDrone_NPC
// 0x0004 (0x0694 - 0x0690)
class ASFXAI_TechDrone_NPC : public Asfxai_core
{
public:
	unsigned long                                      bHasHowled : 1;                                   		// 0x0690 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHasFlanked : 1;                                  		// 0x0690 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bHasTaunted : 1;                                  		// 0x0690 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bHasWarned : 1;                                   		// 0x0690 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64176 ];

		return pClassPointer;
	};

	void PeriodicMoveCheck ( );
	void SetMovementSpeed ( );
};

UClass* ASFXAI_TechDrone_NPC::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_Combat_TechDroneNPC
// 0x0000 (0x0098 - 0x0098)
class USFXAICmd_Combat_TechDroneNPC : public USFXAICommand_Base_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64190 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICmd_Combat_TechDroneNPC::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_Base_HordeApproach
// 0x0004 (0x009C - 0x0098)
class USFXAICmd_Base_HordeApproach : public USFXAICommand_Base_Combat
{
public:
	unsigned long                                      bCombatStarted : 1;                               		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64306 ];

		return pClassPointer;
	};

	void NotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	void NotifyPendingPowerImpact ( struct FName Label, float TimeBeforeImpact, class Usfxpowercustomaction* Power, class ASFXProjectile_PowerCustomAction* Projectile );
	void NotifyNearMiss ( struct FVector HitLocation );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void Pushed ( );
};

UClass* USFXAICmd_Base_HordeApproach::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_Base_MountedGunner
// 0x0000 (0x0098 - 0x0098)
class USFXAICmd_Base_MountedGunner : public USFXAICommand_Base_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64338 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICmd_Base_MountedGunner::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_CA_DamageReaction
// 0x0000 (0x0088 - 0x0088)
class USFXAICmd_CA_DamageReaction : public USFXAICmd_CustomAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64399 ];

		return pClassPointer;
	};

	bool IsCustomActionComplete ( );
	bool ExecuteCustomAction ( );
	float GetPostCustomActionSleepTime ( );
	void FinishedCustomAction ( );
	bool ShouldFinishPostRotation ( );
	bool ShouldFinishRotation ( );
	void eventPopped ( );
	void eventPushed ( );
	bool AllowTransitionTo ( class UClass* AttemptCommand );
	bool CanInterruptCurrentCommand ( );
	bool StartCustomAction ( class Asfxai_core* AI, class UClass* AICommandClass );
};

UClass* USFXAICmd_CA_DamageReaction::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_MoveAway
// 0x0004 (0x0090 - 0x008C)
class USFXAICmd_MoveAway : public USFXAICmd_MoveToGoal
{
public:
	float                                              MaxBackAwayDistance;                              		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64455 ];

		return pClassPointer;
	};

	bool GetFirstMoveTarget ( );
	void FinishPathGeneration ( );
	bool ApplyPathConstraints ( );
	bool MoveAway ( class Asfxai_core* AI, class AActor* AvoidTarget, float NewMoveOffset, float fMaxBackAwayDistance, unsigned long bInAllowedToFire, unsigned long bInAllowPartialPath );
};

UClass* USFXAICmd_MoveAway::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_Combat_Turret
// 0x0000 (0x0098 - 0x0098)
class USFXAICmd_Combat_Turret : public USFXAICommand_Base_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64465 ];

		return pClassPointer;
	};

	void StopSustainedFire ( );
	void Resumed ( struct FName OldCommandName );
	float GetTransitionCheckTime ( );
	float GetInitialTransitionCheckTime ( );
	void Popped ( );
	void Pushed ( );
};

UClass* USFXAICmd_Combat_Turret::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_HenchmanInteraction
// 0x0011 (0x0095 - 0x0084)
class USFXAICmd_HenchmanInteraction : public USFXAICommand
{
public:
	class AActor*                                      InteractionPoint;                                 		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              fidelityTimeout;                                  		// 0x0088 (0x0004) [0x0000000000000000]              
	class APawn*                                       PlayerPawn;                                       		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bReachedInteractionPoint : 1;                     		// 0x0090 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bStopInteraction : 1;                             		// 0x0090 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bCalledStopDelegate : 1;                          		// 0x0090 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bTriedMoveToPlayer : 1;                           		// 0x0090 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bTriedTeleportToNearbyNode : 1;                   		// 0x0090 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bTriedDirectTeleport : 1;                         		// 0x0090 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned char                                      CurrentFallback;                                  		// 0x0094 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64528 ];

		return pClassPointer;
	};

	bool FindClosestCover ( struct FCoverInfo* NearbyCover );
	bool ResurrectHenchman ( );
	bool TeleportToNearbyNode ( );
	bool CanPlayerSeeActor ( class AActor* oActor );
	void FallbackTimeout ( );
	void FidelityTimer ( );
	void Popped ( );
	void Pushed ( );
	bool StartWorldInteraction ( class Asfxai_core* AI, class AActor* oInteractionPoint, float fFidelityTimeout );
};

UClass* USFXAICmd_HenchmanInteraction::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_EnterCover
// 0x0000 (0x0084 - 0x0084)
class USFXAICmd_EnterCover : public USFXAICommand
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64533 ];

		return pClassPointer;
	};

	void NotifyFriendDied ( class ABioPawn* FriendPawn );
	void OnEnteredPlaypen ( );
	bool StartFollowingActor ( class AActor* ActorToFollow );
	bool MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, unsigned long bForceWalk, struct FScriptDelegate MoveDelegate );
	bool FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, unsigned long bForceShoot, float fAttackDuration, struct FScriptDelegate FireDelegate );
	bool UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression );
	void MoveToDelegate ( int nReason );
	void FireWeaponDelegate ( int nReason );
	void UsePowerDelegate ( int nReason );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	bool ShouldRun ( );
	bool CancelCommand ( int nReason );
	void NotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	bool NotifyMoodChange ( );
	void NotifyPendingPowerImpact ( struct FName Label, float TimeBeforeImpact, class Usfxpowercustomaction* Power, class ASFXProjectile_PowerCustomAction* Projectile );
	void NotifyNearMiss ( struct FVector HitLocation );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void NotifyArmourDestroyed ( struct FName ArmourPiece, class AController* instigatedBy );
	void NotifyArmourHit ( float Damage, struct FName ArmourPiece, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyNewEnemy ( class APawn* NewEnemy );
	void PeriodicMoveCheck ( );
	void UpdateMovementActions ( );
	bool CanInterruptCurrentCommand ( );
	void Resumed ( struct FName OldCommandName );
	void Paused ( class UGameAICommand* NewCommand );
};

UClass* USFXAICmd_EnterCover::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_EnterMountedGun
// 0x0004 (0x009C - 0x0098)
class USFXAICmd_EnterMountedGun : public USFXAICommand_Base_Combat
{
public:
	unsigned long                                      bEnteredMountedGun : 1;                           		// 0x0098 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64549 ];

		return pClassPointer;
	};

	void UnclaimTurret ( );
	void Popped ( );
};

UClass* USFXAICmd_EnterMountedGun::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_SwitchWeapon
// 0x0004 (0x0088 - 0x0084)
class USFXAICmd_SwitchWeapon : public USFXAICommand
{
public:
	class ASFXWeapon*                                  NextWeapon;                                       		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64566 ];

		return pClassPointer;
	};

	bool IsWeaponSwitching ( );
	void ChangeWeapons ( );
	void Popped ( );
	void Pushed ( );
	bool SwitchWeapon ( class Asfxai_core* AI, class ASFXWeapon* oWeapon );
};

UClass* USFXAICmd_SwitchWeapon::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_WaitForAnimatedTransition
// 0x0000 (0x0084 - 0x0084)
class USFXAICmd_WaitForAnimatedTransition : public USFXAICommand
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64619 ];

		return pClassPointer;
	};

	void NotifyFriendDied ( class ABioPawn* FriendPawn );
	void OnEnteredPlaypen ( );
	bool StartFollowingActor ( class AActor* ActorToFollow );
	bool MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, unsigned long bForceWalk, struct FScriptDelegate MoveDelegate );
	bool FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, unsigned long bForceShoot, float fAttackDuration, struct FScriptDelegate FireDelegate );
	bool UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression );
	void MoveToDelegate ( int nReason );
	void FireWeaponDelegate ( int nReason );
	void UsePowerDelegate ( int nReason );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	bool ShouldRun ( );
	bool CancelCommand ( int nReason );
	void NotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	bool NotifyMoodChange ( );
	void NotifyPendingPowerImpact ( struct FName Label, float TimeBeforeImpact, class Usfxpowercustomaction* Power, class ASFXProjectile_PowerCustomAction* Projectile );
	void NotifyNearMiss ( struct FVector HitLocation );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void NotifyArmourDestroyed ( struct FName ArmourPiece, class AController* instigatedBy );
	void NotifyArmourHit ( float Damage, struct FName ArmourPiece, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AActor* DamageCauser );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyNewEnemy ( class APawn* NewEnemy );
	void PeriodicMoveCheck ( );
	void UpdateMovementActions ( );
	bool CanInterruptCurrentCommand ( );
	void Resumed ( struct FName OldCommandName );
	void Paused ( class UGameAICommand* NewCommand );
};

UClass* USFXAICmd_WaitForAnimatedTransition::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_InteractionPointAnim
// 0x0017 (0x00D8 - 0x00C1)
class USFXCustomAction_InteractionPointAnim : public UBioCustomAction
{
public:
	class ASFXNav_InteractionPoint*                    InteractionPoint;                                 		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimSet*                                    TemporaryAnim;                                    		// 0x00C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              UnawareVisionCone;                                		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              UnawareAlertness;                                 		// 0x00D0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUnawareAI : 1;                                   		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64709 ];

		return pClassPointer;
	};

	bool CanOverrideMoveWith ( int OldCustomAction, int NewCustomAction );
	void TriggerEnd ( );
	void TriggerStart ( );
	void StopCustomAction ( );
	void StartInteractionAnim ( );
	void eventReachedPrecisePosition ( );
	void StartCustomAction ( );
};

UClass* USFXCustomAction_InteractionPointAnim::pClassPointer = NULL;

// Class SFXGame.SFXNav_InteractionHenchManual
// 0x0000 (0x02D4 - 0x02D4)
class ASFXNav_InteractionHenchManual : public ASFXNav_InteractionPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64713 ];

		return pClassPointer;
	};

	bool StartInteraction ( class ABioPawn* oPawn );
};

UClass* ASFXNav_InteractionHenchManual::pClassPointer = NULL;

// Class SFXGame.SFXNav_InteractionHenchCover
// 0x0000 (0x02D4 - 0x02D4)
class ASFXNav_InteractionHenchCover : public ASFXNav_InteractionPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64716 ];

		return pClassPointer;
	};

	bool StartInteraction ( class ABioPawn* oPawn );
};

UClass* ASFXNav_InteractionHenchCover::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_InteractionAnim
// 0x0004 (0x008C - 0x0088)
class USFXAICmd_InteractionAnim : public USFXAICmd_CustomAction
{
public:
	class USFXCustomAction_InteractionPointAnim*       InteractionCustomAction;                          		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64718 ];

		return pClassPointer;
	};

	void NotifyNewEnemy ( class APawn* NewEnemy );
	void WakeOnNotify ( );
	bool NotifyMoodChange ( );
};

UClass* USFXAICmd_InteractionAnim::pClassPointer = NULL;

// Class SFXGame.SFXAICmd_MoveToMeleeRange
// 0x0018 (0x009C - 0x0084)
class USFXAICmd_MoveToMeleeRange : public USFXAICommand
{
public:
	struct FVector                                     MoveLocation;                                     		// 0x0084 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      MeleeTarget;                                      		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMoveOffset;                                    		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bMovingToLocation : 1;                            		// 0x0098 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bAllowedToFire : 1;                             		// 0x0098 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bShooting : 1;                                  		// 0x0098 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bUsePartialPaths : 1;                           		// 0x0098 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64916 ];

		return pClassPointer;
	};

	void ApproachTarget ( );
	class AActor* GetDestinationActor ( );
	void NotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	bool MoveToMeleeRange ( class Asfxai_core* AI, class AActor* Target, float NewMoveOffset, unsigned long bInAllowedToFire, unsigned long bInAllowPartialPath );
};

UClass* USFXAICmd_MoveToMeleeRange::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_AreaMap
// 0x00E3 (0x0370 - 0x028D)
class USFXSFHandler_AreaMap : public USFXGUIMovieLegacyAdapter
{
public:
	struct FPostProcessSettings                        m_PostProcessEffect;                              		// 0x0290 (0x00D0) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FString >                           LocationIcons;                                    		// 0x0360 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      m_bFromBrowserWheel : 1;                          		// 0x036C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65139 ];

		return pClassPointer;
	};

	void ASSetTriggerDisplay ( unsigned long bShowingBumpers );
	void ASOnStartScrollLeft ( );
	void ASOnStartScrollRight ( );
	void ASScrollDrawer ( float nScroll );
	void ASSetMapData ( TArray< struct FString > NewMapAssetList, TArray< struct FString > NewMapLayoutList, TArray< struct FString > NewDrawerTextList, int NewMapIndex );
	void ASSetPlayerLocRot ( float nPxX, float nPxY, float nRotation );
	void ASOnBeginClose ( );
	void ScrollLeft ( );
	void ScrollRight ( );
	void RemoveDOFEffect ( );
	void AddDOFEffect ( );
	void CloseMap ( );
	void OnBeginClose ( );
	struct FString GetDrawerText ( class USFXAreaMapData* oMapData, unsigned char Floor );
	void ProcessPlayer ( class USFXAreaMapData* oMapData );
	void SetMap ( class USFXAreaMapData* oMapData );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void ShowAreaMapCharactersHint ( );
	void ShowAreaMapHint ( );
	bool ShowHint ( struct FName HintName );
	bool Initialize ( unsigned long bFromBrowserWheel );
	void PauseMenuAdditionalProcessing ( );
	void OnPanelAdded ( );
};

UClass* USFXSFHandler_AreaMap::pClassPointer = NULL;

// Class SFXGame.SFXAreaMapData
// 0x0075 (0x00B1 - 0x003C)
class USFXAreaMapData : public UObject
{
public:
	TArray< struct FSFXMapAssetData >                  MapAssetData;                                     		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFXCharacterMapData >              CharacterMapData;                                 		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFXMapLocationData >               MapLocationData;                                  		// 0x0054 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __SortLocationMapData__Delegate;                  		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     RefPoint1_Image_Px;                               		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RefPoint1_Unreal_UU;                              		// 0x0078 (0x000C) [0x0000000000000000]              
	struct FVector                                     RefPoint2_Image_Px;                               		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RefPoint2_Unreal_UU;                              		// 0x0090 (0x000C) [0x0000000000000000]              
	struct FVector                                     UUCoorAtPxOrigin;                                 		// 0x009C (0x000C) [0x0000000000000000]              
	int                                                OverrideGroupID;                                  		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              PxPerUU;                                          		// 0x00AC (0x0004) [0x0000000000000000]              
	unsigned char                                      Floor;                                            		// 0x00B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65163 ];

		return pClassPointer;
	};

	TArray< struct FSFXCharacterMapData > GetCharacterData ( unsigned char TargetFloor );
	int SortLocationMapData ( struct FSFXMapLocationData A, struct FSFXMapLocationData B );
	TArray< struct FSFXMapLocationData > GetLocationData ( unsigned char TargetFloor );
	TArray< struct FSFXMapAssetData > GetAssetPaths ( unsigned char TargetFloor );
	void GetPixelCoordinates ( float UU_X, float UU_Y, float* Px, float* Py );
	void ReCalculate ( );
	void GetUUCordAtPxOrigin ( float* UU_X, float* UU_Y );
	float GetPxPerUU ( );
};

UClass* USFXAreaMapData::pClassPointer = NULL;

// Class SFXGame.SFXArmorUseModule
// 0x000D (0x00BD - 0x00B0)
class USFXArmorUseModule : public USFXModule_SavedUse
{
public:
	float                                              LastUpdateTime;                                   		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              UpdateFrequency;                                  		// 0x00B4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bStopCustomTicking : 1;                           		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      ArmorPiece;                                       		// 0x00BC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65316 ];

		return pClassPointer;
	};

	void DisableArmorUseModule ( );
	void OnUsed ( class AActor* User );
	void Tick ( float DeltaTime );
	bool DisabilityCheck ( void** GameName );
	void eventHandlePostBeginPlay ( );
};

UClass* USFXArmorUseModule::pClassPointer = NULL;

// Class SFXGame.SFXArmorNode
// 0x000A (0x0200 - 0x01F6)
class ASFXArmorNode : public ASFXPointOfInterest
{
public:
	class UStaticMeshComponent*                        SMC;                                              		// 0x01F8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x01FC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65343 ];

		return pClassPointer;
	};

	void DisableArmorNode ( );
};

UClass* ASFXArmorNode::pClassPointer = NULL;

// Class SFXGame.SFXBlockingVolume_Ledge
// 0x0000 (0x023C - 0x023C)
class ASFXBlockingVolume_Ledge : public ABlockingVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65426 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* ASFXBlockingVolume_Ledge::pClassPointer = NULL;

// Class SFXGame.SFXCameraAction_FollowTarget
// 0x0014 (0x0100 - 0x00EC)
class USFXCameraAction_FollowTarget : public USFXCameraMode
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x00EC (0x000C) [0x0000000000000000]              
	class USFXCameraMode*                              UnderneathMode;                                   		// 0x00F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      ReenableMovement : 1;                             		// 0x00FC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65429 ];

		return pClassPointer;
	};

	void Tick ( float TimeDelta );
	void SetUnderneathMode ( class USFXCameraMode* NewUnderneathMode );
	bool HasLoop ( class USFXCameraMode* CurMode, class USFXCameraMode* CheckingMode );
	bool GetActorCameraHook ( struct FVector* OutLocation );
	struct FVector GetCameraLocation ( );
};

UClass* USFXCameraAction_FollowTarget::pClassPointer = NULL;

// Class SFXGame.SFXCameraAction_QuickTurn
// 0x0007 (0x0148 - 0x0141)
class USFXCameraAction_QuickTurn : public USFXCameraMode_Interpolate
{
public:
	int                                                CurrentOffsetApplied;                             		// 0x0144 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65510 ];

		return pClassPointer;
	};

	void Tick ( float TimeDelta );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
};

UClass* USFXCameraAction_QuickTurn::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_Combat
// 0x0004 (0x00F0 - 0x00EC)
class USFXCameraMode_Combat : public USFXCameraMode
{
public:
	class UMotionBlurEffect*                           Blur;                                             		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65522 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_Combat::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_AdeptPunch
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_AdeptPunch : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65531 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_AdeptPunch::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_AIDebug
// 0x001C (0x0108 - 0x00EC)
class USFXCameraMode_AIDebug : public USFXCameraMode
{
public:
	TArray< struct FVector >                           HookOffsetList;                                   		// 0x00EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                CurrentOffsetIdx;                                 		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NewOffsetIdx;                                     		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTimeRemaining;                               		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TotalBlendTime;                                   		// 0x0104 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65535 ];

		return pClassPointer;
	};

	void ChangeOffset ( int idx );
	void DecOffset ( );
	void IncOffset ( );
	void Tick ( float TimeSeconds );
};

UClass* USFXCameraMode_AIDebug::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_Atlas
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_Atlas : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65553 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_Atlas::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_CombatStorm
// 0x0008 (0x00F8 - 0x00F0)
class USFXCameraMode_CombatStorm : public USFXCameraMode_Combat
{
public:
	float                                              StickFactor;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              FullTurnRecenter;                                 		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65557 ];

		return pClassPointer;
	};

	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot );
	void Tick ( float DeltaTime );
	void SetTarget ( );
	void Initialize ( );
};

UClass* USFXCameraMode_CombatStorm::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_Cover
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_Cover : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65576 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_Cover::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_CoverMeleeLeft
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_CoverMeleeLeft : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65582 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_CoverMeleeLeft::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_CoverMeleeRight
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_CoverMeleeRight : public USFXCameraMode_CoverMeleeLeft
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65588 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_CoverMeleeRight::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_CoverStorm
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_CoverStorm : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65592 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_CoverStorm::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_CoverStormHigh
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_CoverStormHigh : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65598 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_CoverStormHigh::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_CoverSwatTurnHigh
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_CoverSwatTurnHigh : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65604 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_CoverSwatTurnHigh::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_CoverSwatTurnLow
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_CoverSwatTurnLow : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65610 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_CoverSwatTurnLow::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_CoverSyncMelee
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_CoverSyncMelee : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65616 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_CoverSyncMelee::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_CoverSyncMeleeLeft
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_CoverSyncMeleeLeft : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65620 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_CoverSyncMeleeLeft::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_CustomAction
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_CustomAction : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65624 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_CustomAction::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_EnterCover
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_EnterCover : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65628 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_EnterCover::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_ExploreStorm
// 0x0008 (0x00F4 - 0x00EC)
class USFXCameraMode_ExploreStorm : public USFXCameraMode_Explore
{
public:
	float                                              StickFactor;                                      		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              FullTurnRecenter;                                 		// 0x00F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65636 ];

		return pClassPointer;
	};

	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot );
	void Tick ( float DeltaTime );
	void SetTarget ( );
	void Initialize ( );
};

UClass* USFXCameraMode_ExploreStorm::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_ForwardRoll
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_ForwardRoll : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65654 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_ForwardRoll::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_HipAimCover
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_HipAimCover : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65658 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_HipAimCover::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_HitReaction
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_HitReaction : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65662 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_HitReaction::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_IllusiveManConflict
// 0x00A4 (0x0190 - 0x00EC)
class USFXCameraMode_IllusiveManConflict : public USFXCameraMode
{
public:
	struct FScreenShakeStruct                          Shake;                                            		// 0x00EC (0x0078) [0x0000000000000000]              
	int                                                YawRange;                                         		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                YawCenter;                                        		// 0x0168 (0x0004) [0x0000000000000000]              
	float                                              Debug_Speed;                                      		// 0x016C (0x0004) [0x0000000000000000]              
	float                                              AngleMin;                                         		// 0x0170 (0x0004) [0x0000000000000000]              
	float                                              AngleMax;                                         		// 0x0174 (0x0004) [0x0000000000000000]              
	float                                              MaxSpeed;                                         		// 0x0178 (0x0004) [0x0000000000000000]              
	float                                              AccumulatedYaw;                                   		// 0x017C (0x0004) [0x0000000000000000]              
	float                                              AccumulatedPitch;                                 		// 0x0180 (0x0004) [0x0000000000000000]              
	float                                              Force;                                            		// 0x0184 (0x0004) [0x0000000000000000]              
	float                                              SmoothedSpeed;                                    		// 0x0188 (0x0004) [0x0000000000000000]              
	float                                              Smoothing;                                        		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65666 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	void UpdateCameraSprings ( float DeltaTime );
	void UpdateInput ( float DeltaTime );
	struct FRotator SmartRLerp ( struct FRotator A, struct FRotator B, float Alpha );
	void InitializeFromGameMode ( );
};

UClass* USFXCameraMode_IllusiveManConflict::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_BeginIllusiveManConflict
// 0x00E0 (0x01A0 - 0x00C0)
class USFXSeqAct_BeginIllusiveManConflict : public USeqAct_Latent
{
public:
	TArray< float >                                    Difficulty;                                       		// 0x00C0 (0x000C) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FScreenShakeStruct                          Shake;                                            		// 0x00CC (0x0078) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AndersonOffset;                                   		// 0x0144 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     IllusiveManOffset;                                		// 0x0150 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AndersonBoneName;                                 		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       IllusiveManBoneName;                              		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Anderson;                                         		// 0x016C (0x0004) [0x0000000000000000]              
	class AActor*                                      IllusiveMan;                                      		// 0x0170 (0x0004) [0x0000000000000000]              
	float                                              PushSpeed;                                        		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PushInputLockoutTime;                             		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PushMiniGameStartingPercent;                      		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PushMiniGameVictoryPercent;                       		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinStrength;                                      		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxStrength;                                      		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Threshold;                                        		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseDamageAmount;                                 		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraShakeMinDot;                                		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                StartingDifficulty;                               		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLastSideWasAnderson : 1;                         		// 0x019C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRunning : 1;                                     		// 0x019C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65697 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
	struct FVector IllusiveManTargetLocation ( );
	struct FVector AndersonTargetLocation ( );
};

UClass* USFXSeqAct_BeginIllusiveManConflict::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_JumpStart
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_JumpStart : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65737 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_JumpStart::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_KroganMelee
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_KroganMelee : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65741 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_KroganMelee::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_LadderDown
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_LadderDown : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65745 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_LadderDown::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_LadderUp
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_LadderUp : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65765 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_LadderUp::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_LockOnPawn
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_LockOnPawn : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65769 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_LockOnPawn::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_Melee
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_Melee : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65786 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_Melee::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_ProceduralSync
// 0x001A (0x0108 - 0x00EE)
class USFXCustomAction_ProceduralSync : public USFXCustomAction_SingleAnim
{
public:
	class ABioPawn*                                    SyncPartner;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              MaxPartnerDistance;                               		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              SyncCone;                                         		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              RotationTime;                                     		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DestinationOffset;                                		// 0x0100 (0x0004) [0x0000000000000000]              
	unsigned long                                      bStopOnImpact : 1;                                		// 0x0104 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHideTargetWeapon : 1;                            		// 0x0104 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAffectsFriendlies : 1;                           		// 0x0104 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTryForceLocalSimulation : 1;                     		// 0x0104 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65790 ];

		return pClassPointer;
	};

	void DebugSocketRelativeLocation ( struct FName InSocketName );
	void Replicate ( );
	float GetPawnScore ( class ABioPawn* BP );
	class ABioPawn* GetVictimPawn ( );
	void OnPartnerReachedDestination ( );
	void OnPartnerLeavingCustomAction ( );
	bool MessageEvent ( struct FName EventName, class UObject* Sender );
	void NonSyncedAction ( );
	void StartInteraction ( );
	bool CanInteractWithPawn ( class ABioPawn* OtherPawn );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	void TickCustomAction ( float DeltaTime );
	void StopCustomAction ( );
	void StartCustomAction ( );
};

UClass* USFXCustomAction_ProceduralSync::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_TightAim
// 0x0004 (0x00F4 - 0x00F0)
class USFXCameraMode_TightAim : public USFXCameraMode_Combat
{
public:
	class UBioCameraZoom*                              ZoomData;                                         		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65802 ];

		return pClassPointer;
	};

	void Tick ( float TimeDelta );
	void eventModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
};

UClass* USFXCameraMode_TightAim::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_MountedGunTightAim
// 0x0000 (0x00F4 - 0x00F4)
class USFXCameraMode_MountedGunTightAim : public USFXCameraMode_TightAim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65820 ];

		return pClassPointer;
	};

	void Tick ( float TimeDelta );
	void eventModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
};

UClass* USFXCameraMode_MountedGunTightAim::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_PistolTightAim
// 0x0000 (0x00F4 - 0x00F4)
class USFXCameraMode_PistolTightAim : public USFXCameraMode_TightAim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65825 ];

		return pClassPointer;
	};

	void Tick ( float TimeDelta );
	void eventModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
};

UClass* USFXCameraMode_PistolTightAim::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_ReplicationDebug
// 0x0000 (0x00EC - 0x00EC)
class USFXCameraMode_ReplicationDebug : public USFXCameraMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65830 ];

		return pClassPointer;
	};

	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot );
	bool GetActorCameraHook ( struct FVector* OutLocation );
	bool CheckLoop ( class USFXCameraMode* M, int RecurseLevel );
	void DrawHUD ( class UBioCheatManager* M );
	struct FRotator GetCurrentShake ( );
	bool IsCollisionEnabled ( );
	void Initialize ( );
	void MakeInactive ( );
	void MakeActive ( );
	void eventAimAtPoint ( struct FVector V );
	struct FVector GetCameraHook ( );
	struct FVector CalculateOffsetHook ( float Distance );
	void DoSniperCameraCollision ( class AActor* A, struct FVector* V, struct FRotator* R );
	void Tick ( float TimeDelta );
	struct FVector GetCameraLocation ( );
	void ComputeClipPlaneRect ( float fFov, float fNearClipPlane, float* fWidth, float* fHeight );
	void DoCameraCollisionNative ( struct FVector CollisionHook, class AActor* A, struct FVector* V, struct FRotator* R );
	class AController* eventGetViewTargetAsController ( );
	class APawn* GetViewTargetAsPawn ( );
	void DoCameraCollision ( class AActor* Owner, struct FVector* CamPosition, struct FRotator* CamRotation );
	void eventModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
};

UClass* USFXCameraMode_ReplicationDebug::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_Roll
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_Roll : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65841 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_Roll::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_SniperAim
// 0x0000 (0x00F4 - 0x00F4)
class USFXCameraMode_SniperAim : public USFXCameraMode_TightAim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65845 ];

		return pClassPointer;
	};

	void Tick ( float TimeDelta );
	void eventModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
};

UClass* USFXCameraMode_SniperAim::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_Spectator
// 0x0000 (0x00EC - 0x00EC)
class USFXCameraMode_Spectator : public USFXCameraMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65850 ];

		return pClassPointer;
	};

	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot );
	bool GetActorCameraHook ( struct FVector* OutLocation );
	bool CheckLoop ( class USFXCameraMode* M, int RecurseLevel );
	void DrawHUD ( class UBioCheatManager* M );
	struct FRotator GetCurrentShake ( );
	bool IsCollisionEnabled ( );
	void Initialize ( );
	void MakeInactive ( );
	void MakeActive ( );
	void eventAimAtPoint ( struct FVector V );
	struct FVector GetCameraHook ( );
	struct FVector CalculateOffsetHook ( float Distance );
	void DoSniperCameraCollision ( class AActor* A, struct FVector* V, struct FRotator* R );
	void Tick ( float TimeDelta );
	struct FVector GetCameraLocation ( );
	void ComputeClipPlaneRect ( float fFov, float fNearClipPlane, float* fWidth, float* fHeight );
	void DoCameraCollisionNative ( struct FVector CollisionHook, class AActor* A, struct FVector* V, struct FRotator* R );
	class AController* eventGetViewTargetAsController ( );
	class APawn* GetViewTargetAsPawn ( );
	void DoCameraCollision ( class AActor* Owner, struct FVector* CamPosition, struct FRotator* CamRotation );
	void eventModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
};

UClass* USFXCameraMode_Spectator::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_SplitScreenCombat
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_SplitScreenCombat : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65858 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_SplitScreenCombat::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_TightAimCover
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_TightAimCover : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65862 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_TightAimCover::pClassPointer = NULL;

// Class SFXGame.SFXCameraMode_Vehicle
// 0x0000 (0x00F0 - 0x00F0)
class USFXCameraMode_Vehicle : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65869 ];

		return pClassPointer;
	};

	void MakeInactive ( );
	void MakeActive ( );
};

UClass* USFXCameraMode_Vehicle::pClassPointer = NULL;

// Class SFXGame.SFXCameraTransition_ZoomSnap
// 0x0027 (0x0168 - 0x0141)
class USFXCameraTransition_ZoomSnap : public USFXCameraMode_Interpolate
{
public:
	struct FVector                                     ZoomSnapTargetLocation;                           		// 0x0144 (0x000C) [0x0000000000000000]              
	struct FRotator                                    StartRotation;                                    		// 0x0150 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartLocation;                                    		// 0x015C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65979 ];

		return pClassPointer;
	};

	void Tick ( float TimeDelta );
	void MakeInactive ( );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
};

UClass* USFXCameraTransition_ZoomSnap::pClassPointer = NULL;

// Class SFXGame.SFXCameraSetup
// 0x00E8 (0x0124 - 0x003C)
class USFXCameraSetup : public UObject
{
public:
	struct FInterpCurveFloat                           ZoomSnapCurve;                                    		// 0x003C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              SprintTransitionTime;                             		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SprintFastTransitionTime;                         		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultAimTransitionTime;                         		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultAimTransitionExit;                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultCombatTransitionTime;                      		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverEnter;                                       		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeanCoverTransitionTime;                          		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverTransitionTime;                              		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverSlowTransitionTime;                          		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SniperZoomTransitionTime;                         		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZoomSnapTransitionTime;                           		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PeekTransitionTime;                               		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StormEntranceTime;                                		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VehicleTransitionTime;                            		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCustomCameraTransitionIn;                        		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCustomCameraTransitionOut;                       		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXCameraMode_Combat*                       CombatCam;                                        		// 0x008C (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_Roll*                         RollCam;                                          		// 0x0090 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              CombatTightAim;                                   		// 0x0094 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_Explore*                      ExploreCam;                                       		// 0x0098 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_CombatStorm*                  CombatStormCam;                                   		// 0x009C (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_ExploreStorm*                 ExploreStormCam;                                  		// 0x00A0 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_SplitScreenCombat*            SSCombatCam;                                      		// 0x00A4 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_JumpStart*                    JumpCam;                                          		// 0x00A8 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_EnterCover*                   EnterCoverCam;                                    		// 0x00AC (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_Melee*                        MeleeCam;                                         		// 0x00B0 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_LadderUp*                     LadderUp;                                         		// 0x00B4 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_LadderDown*                   LadderDown;                                       		// 0x00B8 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_HitReaction*                  HitReact;                                         		// 0x00BC (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_ZoomSnap*               ZoomSnapTransition;                               		// 0x00C0 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              DefaultCrouch;                                    		// 0x00C4 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              DefaultStand;                                     		// 0x00C8 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PeekLeftCrouch;                                   		// 0x00CC (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PeekLeftStand;                                    		// 0x00D0 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PeekRightCrouch;                                  		// 0x00D4 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PeekRightStand;                                   		// 0x00D8 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              DefaultAimback;                                   		// 0x00DC (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              AimbackTightAim;                                  		// 0x00E0 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              BlindLeftCrouch;                                  		// 0x00E4 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              BlindLeftStand;                                   		// 0x00E8 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              BlindRightCrouch;                                 		// 0x00EC (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              BlindRightStand;                                  		// 0x00F0 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              BlindUp;                                          		// 0x00F4 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PopUp;                                            		// 0x00F8 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              LeanLeftCrouch;                                   		// 0x00FC (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              LeanLeftStand;                                    		// 0x0100 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              LeanRightCrouch;                                  		// 0x0104 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              LeanRightStand;                                   		// 0x0108 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PowerCoverPopup;                                  		// 0x010C (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PowerCoverMidLeanLeft;                            		// 0x0110 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PowerCoverMidLeanRight;                           		// 0x0114 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PowerCoverStdLeanLeft;                            		// 0x0118 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PowerCoverStdLeanRight;                           		// 0x011C (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bCustomCameraMode : 1;                            		// 0x0120 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65998 ];

		return pClassPointer;
	};

	void GetAimbackCameraMode ( class ABioPlayerController* PC, class USFXCameraMode** NewCameraMode, float* TransitionTime );
	class USFXCameraMode* GetCoverCameraMode ( class ABioPlayerController* PC, class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	void GetStandingCombatCamera ( class ABioPlayerController* PC, class USFXCameraMode* OldCameraMode, class USFXCameraMode** NewCameraMode, float* TransitionTime );
	bool ShouldUseScope ( class APawn* inPawn );
	bool GetCustomCameraMode ( class ABioPlayerController* PC, class USFXCameraMode** NewCameraMode, float* fCustomTransitionTime );
	void GetExploreCameraMode ( class ABioPlayerController* PC, class USFXCameraMode** NewCameraMode, float* TransitionTime );
	void GetTransitionTime ( class USFXCameraMode** OldCameraMode, class USFXCameraMode** NewCameraMode, float* TransitionTime );
	class USFXCameraMode* GetCameraMode ( class ABioPlayerController* PC, class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	class USFXCameraMode* GetCombatCamera ( );
};

UClass* USFXCameraSetup::pClassPointer = NULL;

// Class SFXGame.SFXCameraShakeBase
// 0x0078 (0x00B4 - 0x003C)
class USFXCameraShakeBase : public UObject
{
public:
	struct FScreenShakeStruct                          TheShake;                                         		// 0x003C (0x0078) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66148 ];

		return pClassPointer;
	};

};

UClass* USFXCameraShakeBase::pClassPointer = NULL;

// Class SFXGame.SFXCameraTransition_Animated
// 0x0013 (0x0154 - 0x0141)
class USFXCameraTransition_Animated : public USFXCameraMode_Interpolate
{
public:
	class UCameraAnim*                                 Anim;                                             		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultBlendInTime;                               		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultBlendOutTime;                              		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAnimationBegun : 1;                              		// 0x0150 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bScalePlayRate : 1;                               		// 0x0150 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66151 ];

		return pClassPointer;
	};

	void Tick ( float TimeDelta );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
};

UClass* USFXCameraTransition_Animated::pClassPointer = NULL;

// Class SFXGame.SFXCameraTransition_GalaxyMap
// 0x0000 (0x0141 - 0x0141)
class USFXCameraTransition_GalaxyMap : public USFXCameraMode_Interpolate
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66181 ];

		return pClassPointer;
	};

	void DrawHUD ( class UBioCheatManager* M );
	struct FRotator GetCurrentShake ( );
	void Tick ( float TimeDelta );
	bool GetActorCameraHook ( struct FVector* OutLocation );
	void Trace ( class AActor** HitActor, struct FVector* HitLocation );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
	bool CheckLoop ( class USFXCameraMode* mode, int RecurseLevel );
	float Interpolate ( float T );
};

UClass* USFXCameraTransition_GalaxyMap::pClassPointer = NULL;

// Class SFXGame.SFXCameraTransition_VanguardSlam
// 0x0048 (0x019C - 0x0154)
class USFXCameraTransition_VanguardSlam : public USFXCameraTransition_Animated
{
public:
	struct FInterpCurveFloat                           FOVCurve;                                         		// 0x0154 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveFloat                           MovementCurve;                                    		// 0x0164 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     StartLocation;                                    		// 0x0174 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    StartRotation;                                    		// 0x0180 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartFOV;                                         		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      TargetActor;                                      		// 0x0190 (0x0004) [0x0000000000000000]              
	float                                              FOVChange;                                        		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FirstPhaseLength;                                 		// 0x0198 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66191 ];

		return pClassPointer;
	};

	void Tick ( float TimeDelta );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
};

UClass* USFXCameraTransition_VanguardSlam::pClassPointer = NULL;

// Class SFXGame.SFXPowerCustomAction_MeleePassivePower
// 0x01BB (0x0850 - 0x0695)
class USFXPowerCustomAction_MeleePassivePower : public USFXPowerCustomAction_PassivePower
{
public:
	struct FPowerData                                  MeleeDamage;                                      		// 0x0698 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  MeleeForce;                                       		// 0x06C8 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  MeleeImpactRadius;                                		// 0x06F8 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  MeleeConeAngle;                                   		// 0x0728 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  HeavyMeleeDamage;                                 		// 0x0758 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  HeavyMeleeForce;                                  		// 0x0788 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  HeavyMeleeImpactRadius;                           		// 0x07B8 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  HeavyMeleeConeAngle;                              		// 0x07E8 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPowerData                                  CoverMeleeImpactRadius;                           		// 0x0818 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FName                                       MeleeKillCategory;                                		// 0x0848 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66686 ];

		return pClassPointer;
	};

	void RecalculateAllPowerData ( unsigned long bReset );
	void OnHeavyMeleeKill ( class AActor* oImpacted );
	void OnRegularMeleeKill ( class AActor* oImpacted );
};

UClass* USFXPowerCustomAction_MeleePassivePower::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_BackTakeDown
// 0x0000 (0x013D - 0x013D)
class USFXCustomAction_BackTakeDown : public USFXCustomAction_ClassMelee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66808 ];

		return pClassPointer;
	};

	void InterruptThisCustomAction ( );
	void OnPartnerLeavingCustomAction ( );
	void StopCustomAction ( );
	void SyncAttack ( );
	void StartMeleeAttack ( );
	void NonSyncedAction ( );
	void OnPartnerReachedDestination ( );
	void StartInteraction ( );
	void GetVictimAnim ( struct FBodyStance* Stance );
	void GetAttackerAnim ( struct FBodyStance* Stance );
	void StartCustomAction ( );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
};

UClass* USFXCustomAction_BackTakeDown::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_BovineFortitude
// 0x000B (0x010C - 0x0101)
class USFXCustomAction_BovineFortitude : public USFXCustomAction_DamageReaction
{
public:
	float                                              HealDuration;                                     		// 0x0104 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 Moo;                                              		// 0x0108 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66873 ];

		return pClassPointer;
	};

	void DelayedSoundEffect ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
};

UClass* USFXCustomAction_BovineFortitude::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_Cover90TurnBase
// 0x002D (0x00EE - 0x00C1)
class USFXCustomAction_Cover90TurnBase : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_Anim;                                          		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fAnimPlayRate;                                    		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimBlendInTime;                                 		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimBlendOutTime;                                		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimStartTime;                                   		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraTransitionTime;                             		// 0x00E0 (0x0004) [0x0000000000000000]              
	class ACoverSlotMarker*                            TurnTarget;                                       		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ERootMotionMode;                                  		// 0x00E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ERootMotionRotationMode;                          		// 0x00E9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootBoneX;                                        		// 0x00EA (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootBoneY;                                        		// 0x00EB (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootBoneZ;                                        		// 0x00EC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      StartBlendType;                                   		// 0x00ED (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66903 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void PlayCoverTurnAnim ( );
	void AlignmentTimeout ( );
	void eventReachedPrecisePosition ( );
	void StartCustomAction ( );
	void CacheCoverTurnTarget ( );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_Cover90TurnBase::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_Cover90TurnLeft
// 0x0000 (0x00EE - 0x00EE)
class USFXCustomAction_Cover90TurnLeft : public USFXCustomAction_Cover90TurnBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66955 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void PlayCoverTurnAnim ( );
	void AlignmentTimeout ( );
	void eventReachedPrecisePosition ( );
	void StartCustomAction ( );
	void CacheCoverTurnTarget ( );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_Cover90TurnLeft::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_Cover90TurnLeftStanding
// 0x0000 (0x00EE - 0x00EE)
class USFXCustomAction_Cover90TurnLeftStanding : public USFXCustomAction_Cover90TurnLeft
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66957 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void PlayCoverTurnAnim ( );
	void AlignmentTimeout ( );
	void eventReachedPrecisePosition ( );
	void StartCustomAction ( );
	void CacheCoverTurnTarget ( );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_Cover90TurnLeftStanding::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_Cover90TurnRight
// 0x0000 (0x00EE - 0x00EE)
class USFXCustomAction_Cover90TurnRight : public USFXCustomAction_Cover90TurnBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66959 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void PlayCoverTurnAnim ( );
	void AlignmentTimeout ( );
	void eventReachedPrecisePosition ( );
	void StartCustomAction ( );
	void CacheCoverTurnTarget ( );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_Cover90TurnRight::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_Cover90TurnRightStanding
// 0x0000 (0x00EE - 0x00EE)
class USFXCustomAction_Cover90TurnRightStanding : public USFXCustomAction_Cover90TurnRight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66961 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void PlayCoverTurnAnim ( );
	void AlignmentTimeout ( );
	void eventReachedPrecisePosition ( );
	void StartCustomAction ( );
	void CacheCoverTurnTarget ( );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_Cover90TurnRightStanding::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_CoverSlipBase
// 0x0000 (0x00EE - 0x00EE)
class USFXCustomAction_CoverSlipBase : public USFXCustomAction_SingleAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66994 ];

		return pClassPointer;
	};

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void OnCustomActionTimeUp ( );
	void StartCustomAction ( );
	struct FBodyStance GetBodyStanceAnim ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_CoverSlipBase::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_DrawWeapon
// 0x001C (0x00DD - 0x00C1)
class USFXCustomAction_DrawWeapon : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_Draw;                                          		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fAnimBlendInTime;                                 		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimBlendOutTime;                                		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimPlaybackRate;                                		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BlendType;                                        		// 0x00DC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67002 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void StartCustomAction ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_DrawWeapon::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_ExplosionBack
// 0x0000 (0x00EE - 0x00EE)
class USFXCustomAction_ExplosionBack : public USFXCustomAction_SingleAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67028 ];

		return pClassPointer;
	};

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void OnCustomActionTimeUp ( );
	void StartCustomAction ( );
	struct FBodyStance GetBodyStanceAnim ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_ExplosionBack::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_ExplosionForward
// 0x0000 (0x00EE - 0x00EE)
class USFXCustomAction_ExplosionForward : public USFXCustomAction_SingleAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67032 ];

		return pClassPointer;
	};

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void OnCustomActionTimeUp ( );
	void StartCustomAction ( );
	struct FBodyStance GetBodyStanceAnim ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_ExplosionForward::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_ExplosionLeft
// 0x0000 (0x00EE - 0x00EE)
class USFXCustomAction_ExplosionLeft : public USFXCustomAction_SingleAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67036 ];

		return pClassPointer;
	};

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void OnCustomActionTimeUp ( );
	void StartCustomAction ( );
	struct FBodyStance GetBodyStanceAnim ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_ExplosionLeft::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_ExplosionRight
// 0x0000 (0x00EE - 0x00EE)
class USFXCustomAction_ExplosionRight : public USFXCustomAction_SingleAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67040 ];

		return pClassPointer;
	};

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void OnCustomActionTimeUp ( );
	void StartCustomAction ( );
	struct FBodyStance GetBodyStanceAnim ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_ExplosionRight::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_HackDoor
// 0x0006 (0x00F4 - 0x00EE)
class USFXCustomAction_HackDoor : public USFXCustomAction_SingleAnim
{
public:
	class UWwiseEvent*                                 CancelSound;                                      		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67059 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void EndThisCustomAction ( );
	void CheckFiring ( );
	void StartCustomAction ( );
};

UClass* USFXCustomAction_HackDoor::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_HeavyStdCoverMeleeRight
// 0x0000 (0x013D - 0x013D)
class USFXCustomAction_HeavyStdCoverMeleeRight : public USFXCustomAction_ClassMelee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67068 ];

		return pClassPointer;
	};

	void InterruptThisCustomAction ( );
	void OnPartnerLeavingCustomAction ( );
	void StopCustomAction ( );
	void SyncAttack ( );
	void StartMeleeAttack ( );
	void NonSyncedAction ( );
	void OnPartnerReachedDestination ( );
	void StartInteraction ( );
	void GetVictimAnim ( struct FBodyStance* Stance );
	void GetAttackerAnim ( struct FBodyStance* Stance );
	void StartCustomAction ( );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
};

UClass* USFXCustomAction_HeavyStdCoverMeleeRight::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_HolsterWeapon
// 0x001C (0x00DD - 0x00C1)
class USFXCustomAction_HolsterWeapon : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_Holster;                                       		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fAnimBlendInTime;                                 		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimBlendOutTime;                                		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimPlaybackRate;                                		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BlendType;                                        		// 0x00DC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67087 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void StartCustomAction ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_HolsterWeapon::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_LookAtLoop
// 0x0061 (0x0122 - 0x00C1)
class USFXCustomAction_LookAtLoop : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_StartAnim;                                     		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_LoopAnim;                                      		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_EndAnim;                                       		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_ToPlay;                                        		// 0x00E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_LoopToPlay;                                    		// 0x00F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_EndToPlay;                                     		// 0x0100 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              PlayRate;                                         		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendInTime;                                      		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartTime;                                        		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LoopDuration;                                     		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LoopState;                                        		// 0x0120 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      RootMotionMode;                                   		// 0x0121 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67138 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StartCustomAction ( );
	struct FBodyStance GetEndBodyStanceAnim ( );
	struct FBodyStance GetLoopBodyStanceAnim ( );
	struct FBodyStance GetStartBodyStanceAnim ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_LookAtLoop::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_Loop
// 0x003D (0x00FE - 0x00C1)
class USFXCustomAction_Loop : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_Start;                                         		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_Loop;                                          		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_End;                                           		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              PlayRate;                                         		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendInTime;                                      		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartTime;                                        		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LoopDuration;                                     		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LoopState;                                        		// 0x00FC (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      RootMotionMode;                                   		// 0x00FD (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67169 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void SetLoopState ( unsigned char NewLoopState );
	void StartCustomAction ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_Loop::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_LoopingInteraction
// 0x0041 (0x0119 - 0x00D8)
class USFXCustomAction_LoopingInteraction : public USFXCustomAction_InteractionPointAnim
{
public:
	struct FBodyStance                                 BS_InteractionStart;                              		// 0x00D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_InteractionLoop;                               		// 0x00E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_InteractionEnd;                                		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fStartBlendInTime;                                		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              fStartBlendOutTime;                               		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              fLoopBlendInTime;                                 		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              fLoopBlendOutTime;                                		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              fEndBlendInTime;                                  		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              fEndBlendOutTime;                                 		// 0x0110 (0x0004) [0x0000000000000000]              
	unsigned long                                      bTriggeredEnd : 1;                                		// 0x0114 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      InteractionStage;                                 		// 0x0118 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67193 ];

		return pClassPointer;
	};

	void TriggerEnd ( );
	void StopCustomAction ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StartInteractionAnim ( );
	void StartCustomAction ( );
};

UClass* USFXCustomAction_LoopingInteraction::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_OmniWave
// 0x0016 (0x0104 - 0x00EE)
class USFXCustomAction_OmniWave : public USFXCustomAction_SingleAnim
{
public:
	struct FGuid                                       OmniToolGuid;                                     		// 0x00F0 (0x0010) [0x0000000000000000]              
	class URvrClientEffectInterface*                   CE_OmniTool;                                      		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67298 ];

		return pClassPointer;
	};

	void CheckFiring ( );
	void StopCustomAction ( );
	void StartCustomAction ( );
};

UClass* USFXCustomAction_OmniWave::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_PlayerEvadeBase
// 0x0000 (0x00EE - 0x00EE)
class USFXCustomAction_PlayerEvadeBase : public USFXCustomAction_SingleAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67308 ];

		return pClassPointer;
	};

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void OnCustomActionTimeUp ( );
	void StartCustomAction ( );
	struct FBodyStance GetBodyStanceAnim ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_PlayerEvadeBase::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_PlayerHeavyMeleeBase
// 0x003C (0x0144 - 0x0108)
class USFXCustomAction_PlayerHeavyMeleeBase : public USFXCustomAction_ProceduralSync
{
public:
	TArray< class AActor* >                            AffectedActors;                                   		// 0x0108 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      DamageType;                                       		// 0x0114 (0x0004) [0x0000000000000000]              
	struct FAreaEffectParameters                       MeleeImpactParameters;                            		// 0x0118 (0x0020) [0x0000000000000000]              
	class USFXAnimSetCookSpec*                         AnimInfo;                                         		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXPowerCustomAction_MeleePassivePower*     Power;                                            		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                OmniWeaponPlotID;                                 		// 0x0140 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67369 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	bool OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal );
	void OnTimelineImpact ( class AActor* Target );
	void ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType );
	void ReplicateImpact ( class ABioPawn* Target, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType );
	void MeleeImpact ( );
	void StartCustomAction ( );
};

UClass* USFXCustomAction_PlayerHeavyMeleeBase::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_MovementSpeedBonus
// 0x0006 (0x0068 - 0x0062)
class USFXGameEffect_MovementSpeedBonus : public USFXGameEffect
{
public:
	float                                              OriginalDesiredSpeed;                             		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67382 ];

		return pClassPointer;
	};

	void OnRemoved ( );
	void OnApplied ( );
};

UClass* USFXGameEffect_MovementSpeedBonus::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_HeavyMelee
// 0x0000 (0x00E9 - 0x00E9)
class USFXDamageType_HeavyMelee : public USFXDamageType_Power
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67424 ];

		return pClassPointer;
	};

};

UClass* USFXDamageType_HeavyMelee::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_PlayerMeleeBase
// 0x00D4 (0x01DC - 0x0108)
class USFXCustomAction_PlayerMeleeBase : public USFXCustomAction_ProceduralSync
{
public:
	class UClass*                                      DamageType;                                       		// 0x0108 (0x0004) [0x0000000000000000]              
	struct FScreenShakeStruct                          ScreenShake;                                      		// 0x010C (0x0078) [0x0000000000000000]              
	struct FAreaEffectParameters                       MeleeImpactParameters;                            		// 0x0184 (0x0020) [0x0000000000000000]              
	class USFXPowerCustomAction_MeleePassivePower*     Power;                                            		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      ForceFeedback;                                    		// 0x01A8 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             ImpactActorEffect1;                               		// 0x01AC (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             ImpactActorEffect2;                               		// 0x01B0 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 ImpactSound;                                      		// 0x01B4 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 ImpactSoundPlayer;                                		// 0x01B8 (0x0004) [0x0000000000000000]              
	class URadialBlurComponent*                        RBC_BlurInstance;                                 		// 0x01BC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              BlurScale;                                        		// 0x01C0 (0x0004) [0x0000000000000000]              
	float                                              BlurFalloffExponent;                              		// 0x01C4 (0x0004) [0x0000000000000000]              
	float                                              BlurOpacity;                                      		// 0x01C8 (0x0004) [0x0000000000000000]              
	float                                              BlurDuration;                                     		// 0x01CC (0x0004) [0x0000000000000000]              
	float                                              SyncMoveSpeed;                                    		// 0x01D0 (0x0004) [0x0000000000000000]              
	float                                              NonSyncMoveSpeed;                                 		// 0x01D4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPlayMeleedVoc : 1;                               		// 0x01D8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      ApplyBlurEffect : 1;                              		// 0x01D8 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67425 ];

		return pClassPointer;
	};

	void Breakout ( );
	void StopBlur ( );
	bool OnActorImpacted ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	void OnTimelineImpact ( class AActor* Target );
	void ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType );
	void MeleeImpact ( );
	void GetMeleeImpactParameters ( struct FAreaEffectParameters* ImpactParams );
	void NonSyncedAction ( );
	void StartInteraction ( );
	void StartCustomAction ( );
};

UClass* USFXCustomAction_PlayerMeleeBase::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_ReloadBase
// 0x0000 (0x00C1 - 0x00C1)
class USFXCustomAction_ReloadBase : public UBioCustomAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67426 ];

		return pClassPointer;
	};

	void CheckMoving ( );
	void ServerStartCustomAction ( int NewAction, class ABioPawn* Sync, int NewPowerAction );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	void GetAnimsUsedByBodyStance ( struct FBodyStance Stance, TArray< struct FName >* UsedAnims );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
	class ABioPawn* GetVictimPawn ( );
	bool CanBeInterrupted ( );
	void TickInput ( class UBioPlayerInput* Input, float DeltaTime );
	void OnTimelineImpact ( class AActor* Target );
	void ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType );
	void ClientDoCustomAction ( unsigned long bForced );
	void ReplicateImpact ( class ABioPawn* Target, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType );
	void ReplicateInterrupt ( );
	void Replicate ( );
	bool ShouldReplicate ( );
	void RemoveTimeline ( );
	void ApplyTimeline ( class USFXTimelineData* Timeline, class AActor* Source, class AActor* Target );
	bool GetCustomActionCamera ( class USFXCameraMode** oNewCameraMode, float* fTransitionIn, float* fTransitionOut );
	void eventTickCustomAction ( float DeltaTime );
	void RotatePlayerCamToFutureDirection ( struct FVector DestPawnLoc, struct FVector DesiredRotation, float TimeToRotate );
	void RotatePlayerCamToFace ( struct FVector AimPoint, float fTimeToRotate );
	void RootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void RootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void TogglePawnCollision ( class ABioPawn* aPawn, unsigned long bToggleOn );
	void eventReachedPrecisePosition ( );
	void ForcePawnRotation ( class APawn* P, struct FRotator NewRotation );
	void ResetFacePreciseRotation ( );
	void SetFacePreciseRotation ( struct FRotator RotationToFace, float InterpolationTime );
	void ResetReachPreciseDestination ( );
	void SetReachPreciseDestination ( struct FVector DestinationToReach );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void AnimNotify ( class UAnimNodeSequence* SeqNode, class UBioAnimNotify_CustomAction* NotifyObject );
	void InterruptThisCustomAction ( );
	void EndThisCustomAction ( );
	void MoveToOffset ( struct FVector* MoveOffset );
	struct FVector GetBasedPosition ( struct FBasedPosition* BP );
	void SetBasedPosition ( struct FVector inLoc, struct FBasedPosition* BP );
	struct FVector RelativeToWorldOffset ( struct FRotator InRotation, struct FVector RelativeSpaceOffset );
	struct FVector WorldToRelativeOffset ( struct FRotator InRotation, struct FVector WorldSpaceOffset );
	bool GetFloorLocation ( struct FVector vStartLocation, struct FVector* vFloorLocation );
	bool MessageEvent ( struct FName EventName, class UObject* Sender );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	void PawnLeftCover ( );
	void ContinueCustomAction ( );
	void PauseCustomAction ( );
	void StopCustomAction ( );
	void StartCustomAction ( );
	bool CanInteractWithPawn ( class ABioPawn* OtherPawn );
	bool CanOverrideCustomAction ( int OldCustomAction, int InCustomAction );
	bool CanOverrideMoveWith ( int OldCustomAction, int NewCustomAction );
	class UClass* GetCustomActionClass ( int CustomAction );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	bool CanDoCustomAction ( class APawn* SyncPawn, unsigned long bForced );
};

UClass* USFXCustomAction_ReloadBase::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_PlayerShieldStandardImpact
// 0x0012 (0x0100 - 0x00EE)
class USFXCustomAction_PlayerShieldStandardImpact : public USFXCustomAction_SingleAnim
{
public:
	struct FBodyStance                                 BS_Anim1;                                         		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                RandPercent;                                      		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67486 ];

		return pClassPointer;
	};

	void EndAction ( );
	void StartCustomAction ( );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_PlayerShieldStandardImpact::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_ShieldFace
// 0x0000 (0x00EE - 0x00EE)
class USFXCustomAction_ShieldFace : public USFXCustomAction_SingleAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67538 ];

		return pClassPointer;
	};

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void OnCustomActionTimeUp ( );
	void StartCustomAction ( );
	struct FBodyStance GetBodyStanceAnim ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_ShieldFace::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_SingleAnimInteraction
// 0x0018 (0x00F0 - 0x00D8)
class USFXCustomAction_SingleAnimInteraction : public USFXCustomAction_InteractionPointAnim
{
public:
	struct FBodyStance                                 BS_InteractionAnim;                               		// 0x00D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              fBlendInTime;                                     		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              fBlendOutTime;                                    		// 0x00E8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPauseAnimOnStart : 1;                            		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67542 ];

		return pClassPointer;
	};

	void TriggerEnd ( );
	void StopCustomAction ( );
	void StartInteractionAnim ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_SingleAnimInteraction::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_SyncBase
// 0x0038 (0x012C - 0x00F4)
class USFXCustomAction_SyncBase : public USFXCustomAction_SyncPawnInstigator_Base
{
public:
	struct FBodyStance                                 BS_Instigator;                                    		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_Target;                                        		// 0x0100 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              InstigatorPlayRate;                               		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstigatorBlendInTime;                            		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstigatorBlendOutTime;                           		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetAnimDelay;                                  		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetPlayRate;                                   		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetBlendInTime;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetBlendOutTime;                               		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXAnimSetCookSpec*                         TargetAnimInfo;                                   		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67626 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void StartAnimation ( );
	void OnPartnerReachedDestination ( );
	void ReachedPrecisePosition ( );
	void StartTargetAnim ( );
	void StartInteraction ( );
	struct FBodyStance GetTargetBodyStance ( );
	void StartCustomAction ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_SyncBase::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_SyncBase_Loop
// 0x006D (0x0161 - 0x00F4)
class USFXCustomAction_SyncBase_Loop : public USFXCustomAction_SyncPawnInstigator_Base
{
public:
	struct FBodyStance                                 BS_InstigatorStart;                               		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_InstigatorLoop;                                		// 0x0100 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_InstigatorEnd;                                 		// 0x010C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_VictimStart;                                   		// 0x0118 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_VictimLoop;                                    		// 0x0124 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_VictimEnd;                                     		// 0x0130 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LoopDuration;                                     		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstigatorPlayRate;                               		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstigatorBlendInTime;                            		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstigatorBlendOutTime;                           		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VictimAnimDelay;                                  		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VictimPlayRate;                                   		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VictimBlendInTime;                                		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VictimBlendOutTime;                               		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    VictimAnimSet;                                    		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LoopState;                                        		// 0x0160 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67652 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StartVictimAnim ( );
	void StartInteraction ( );
	void StartCustomAction ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_SyncBase_Loop::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_SyncMultiPawnInstigator_Base
// 0x0033 (0x00F4 - 0x00C1)
class USFXCustomAction_SyncMultiPawnInstigator_Base : public UBioCustomAction
{
public:
	TArray< class ABioPawn* >                          SyncPartners;                                     		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     MarkerOffset;                                     		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              InteractionStartTimeOut;                          		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                PartnerCustomAction;                              		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              MaxPartnerDistance;                               		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              SyncCone;                                         		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              RotationTime;                                     		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMoveSyncPawn : 1;                                		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHideTargetWeapon : 1;                            		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAffectsFriendlies : 1;                           		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67681 ];

		return pClassPointer;
	};

	void OnPartnerReachedDestination ( );
	void OnPartnerLeavingCustomAction ( );
	bool MessageEvent ( struct FName EventName, class UObject* Sender );
	void StartInteraction ( );
	bool IsReadyToStartInteraction ( );
	void CheckReadyToStartInteraction ( );
	void StartPartnerAnimation ( class ABioPawn* SyncPartner );
	void InteractionStartTimedOut ( );
	bool CanInteractWithPawn ( class ABioPawn* OtherPawn );
	void StopCustomAction ( );
	void StartCustomAction ( );
	void RemoveSyncPartner ( class ABioPawn* SyncPartner );
	void AddSyncPartner ( class ABioPawn* SyncPartner );
};

UClass* USFXCustomAction_SyncMultiPawnInstigator_Base::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_SyncMultiBase
// 0x0018 (0x010C - 0x00F4)
class USFXCustomAction_SyncMultiBase : public USFXCustomAction_SyncMultiPawnInstigator_Base
{
public:
	struct FBodyStance                                 BS_Instigator;                                    		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              InstigatorPlayRate;                               		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstigatorBlendInTime;                            		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstigatorBlendOutTime;                           		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67722 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void StartAllTargetAnims ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StartInteraction ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_SyncMultiBase::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_Utilize
// 0x002B (0x012C - 0x0101)
class USFXCustomAction_Utilize : public USFXCustomAction_DamageReaction
{
public:
	struct FBodyStance                                 BS_ReactionAlternative1;                          		// 0x0104 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_ReactionAlternative2;                          		// 0x0110 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_ReactionExploreAlternative;                    		// 0x011C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UWwiseEvent*                                 CancelSound;                                      		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67771 ];

		return pClassPointer;
	};

	void StopCustomAction ( );
	void EndThisCustomAction ( );
	void CheckFiring ( );
	void StartCustomAction ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_Utilize::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_VariableExit
// 0x0027 (0x0188 - 0x0161)
class USFXCustomAction_VariableExit : public USFXCustomAction_SyncBase_Loop
{
public:
	struct FBodyStance                                 BS_InstigatorEnd2;                                		// 0x0164 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_VictimEnd2;                                    		// 0x0170 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              InstigatorBlendOutTime2;                          		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VictimBlendOutTime2;                              		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXTimelineData*                            SuccessTimeline;                                  		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67786 ];

		return pClassPointer;
	};

	bool MessageEvent ( struct FName EventName, class UObject* Sender );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_VariableExit::pClassPointer = NULL;

// Class SFXGame.SFXCustomAction_WeaponPickUp
// 0x000E (0x00FC - 0x00EE)
class USFXCustomAction_WeaponPickUp : public USFXCustomAction_SingleAnim
{
public:
	struct FBodyStance                                 BS_AnimExplore;                                   		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67805 ];

		return pClassPointer;
	};

	void StartCustomAction ( );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXCustomAction_WeaponPickUp::pClassPointer = NULL;

// Class SFXGame.SFXCustomizationInstance
// 0x0000 (0x003C - 0x003C)
class USFXCustomizationInstance : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67813 ];

		return pClassPointer;
	};

};

UClass* USFXCustomizationInstance::pClassPointer = NULL;

// Class SFXGame.SFXCustomizationInstance_Player
// 0x0039 (0x0075 - 0x003C)
class USFXCustomizationInstance_Player : public USFXCustomizationInstance
{
public:
	int                                                CasualID;                                         		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FullBodyID;                                       		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TorsoID;                                          		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShoulderID;                                       		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ArmID;                                            		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LegID;                                            		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpecID;                                           		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Tint1ID;                                          		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Tint2ID;                                          		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PatternID;                                        		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PatternColorID;                                   		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HelmetID;                                         		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EmissiveID;                                       		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseCasualAppearance : 1;                         		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      CombatAppearance;                                 		// 0x0074 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67823 ];

		return pClassPointer;
	};

	void CustomizeMaterialInstance ( class UMaterialInstanceConstant* MIC );
};

UClass* USFXCustomizationInstance_Player::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_CoverMelee
// 0x0000 (0x00E2 - 0x00E2)
class USFXDamageType_CoverMelee : public USFXDamageType_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67851 ];

		return pClassPointer;
	};

	float CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc );
	void ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc );
	bool CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer );
};

UClass* USFXDamageType_CoverMelee::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_CriticalMelee
// 0x0000 (0x00E2 - 0x00E2)
class USFXDamageType_CriticalMelee : public USFXDamageType_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67854 ];

		return pClassPointer;
	};

	float CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc );
	void ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc );
	bool CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer );
};

UClass* USFXDamageType_CriticalMelee::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_IllusiveManConflict
// 0x0000 (0x00E2 - 0x00E2)
class USFXDamageType_IllusiveManConflict : public USFXDamageType_PowerPhysics
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67864 ];

		return pClassPointer;
	};

	float CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc );
	void ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc );
	bool CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer );
};

UClass* USFXDamageType_IllusiveManConflict::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_KroganCharge
// 0x0000 (0x00E2 - 0x00E2)
class USFXDamageType_KroganCharge : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67867 ];

		return pClassPointer;
	};

	float CalculateDamageMultiplier ( struct FDamageCalculationAlgorithm* DamageCalc );
	void ResetDamageCalc ( struct FDamageCalculationAlgorithm* DamageCalc );
	bool CanPlayDeathEffect ( class ABioPawn* Target, class AController* Killer );
};

UClass* USFXDamageType_KroganCharge::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_Power_Control
// 0x0000 (0x00E9 - 0x00E9)
class USFXDamageType_Power_Control : public USFXDamageType_Power
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67870 ];

		return pClassPointer;
	};

};

UClass* USFXDamageType_Power_Control::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_Power_Ragdoll
// 0x0001 (0x00EA - 0x00E9)
class USFXDamageType_Power_Ragdoll : public USFXDamageType_Power
{
public:
	unsigned char                                      AnimatedPowerRagdollType;                         		// 0x00E9 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67888 ];

		return pClassPointer;
	};

};

UClass* USFXDamageType_Power_Ragdoll::pClassPointer = NULL;

// Class SFXGame.SFXDamageType_Stasis
// 0x0000 (0x00E9 - 0x00E9)
class USFXDamageType_Stasis : public USFXDamageType_Power_Control
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67894 ];

		return pClassPointer;
	};

};

UClass* USFXDamageType_Stasis::pClassPointer = NULL;

// Class SFXGame.SFXDecalActorSpawnable
// 0x0000 (0x01FC - 0x01FC)
class ASFXDecalActorSpawnable : public ADecalActorMovable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67902 ];

		return pClassPointer;
	};

};

UClass* ASFXDecalActorSpawnable::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_SFXDoorInteraction
// 0x0000 (0x00D2 - 0x00D2)
class USFXSeqEvt_SFXDoorInteraction : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68021 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USFXSeqEvt_SFXDoorInteraction::pClassPointer = NULL;

// Class SFXGame.sfxdroppedammo
// 0x0014 (0x021C - 0x0208)
class Asfxdroppedammo : public ADroppedPickup
{
public:
	class UStaticMeshComponent*                        AmmoMesh;                                         		// 0x0208 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UWwiseEvent*                                 AmmoPickupSound;                                  		// 0x020C (0x0004) [0x0000000000000000]              
	float                                              DecayTime;                                        		// 0x0210 (0x0004) [0x0000000000000000]              
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0214 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bPooled : 1;                                      		// 0x0218 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68132 ];

		return pClassPointer;
	};

	void Reuse ( );
	void Recycle ( );
	void PickedUpBy ( class APawn* P );
	void eventEncroachedBy ( class AActor* Other );
	void Reset ( );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void SetCollisionCylinderSize ( float CollisionRadius, float CollisionHeight );
	void ShowAmmoFullMessage ( class APawn* Other );
	void GiveTo ( class APawn* P );
	void GiveAmmo ( class APawn* P );
	bool CanPickUpAmmo ( class APawn* ChkPawn );
};

UClass* Asfxdroppedammo::pClassPointer = NULL;

// Class SFXGame.SFXDroppedPickup
// 0x001D (0x0225 - 0x0208)
class ASFXDroppedPickup : public ADroppedPickup
{
public:
	class UClass*                                      WeaponClass;                                      		// 0x0208 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      PickupMesh;                                       		// 0x020C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0210 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              PickupTimer;                                      		// 0x0214 (0x0004) [0x0000000000000000]              
	float                                              PlayerPickupTimer;                                		// 0x0218 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 PickupSound;                                      		// 0x021C (0x0004) [0x0000000000000000]              
	unsigned long                                      bTargetable : 1;                                  		// 0x0220 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned char                                      EquipWeaponToolTip;                               		// 0x0224 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68193 ];

		return pClassPointer;
	};

	void PickedUpBy ( class APawn* P );
	void GiveTo ( class APawn* P );
	void Used ( class AActor* User );
	void Landed ( struct FVector HitNormal, class AActor* FloorActor );
	void SetPickupMesh ( class UPrimitiveComponent* NewPickupMesh );
	void EnableUseModule ( );
	void InitPickup ( );
	void eventReplicatedEvent ( struct FName VarName );
	void PostBeginPlay ( );
};

UClass* ASFXDroppedPickup::pClassPointer = NULL;

// Class SFXGame.SFXEmitter
// 0x0004 (0x0208 - 0x0204)
class ASFXEmitter : public AEmitter
{
public:
	unsigned long                                      bPooled : 1;                                      		// 0x0204 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68361 ];

		return pClassPointer;
	};

	void Reset ( );
	void SetLifetime ( float Seconds );
	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
	void Reuse ( );
	void Initialize ( class UParticleSystem* Template );
	void Recycle ( );
};

UClass* ASFXEmitter::pClassPointer = NULL;

// Class SFXGame.SFXDynamicPrefabInstance
// 0x0000 (0x02B4 - 0x02B4)
class ASFXDynamicPrefabInstance : public APrefabInstance
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68377 ];

		return pClassPointer;
	};

	void DestroyPrefab ( );
	void InstancePrefab ( class UPrefab* InPrefab );
};

UClass* ASFXDynamicPrefabInstance::pClassPointer = NULL;

// Class SFXGame.SFXTeamInfo
// 0x0000 (0x0214 - 0x0214)
class ASFXTeamInfo : public ATeamInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68433 ];

		return pClassPointer;
	};

	unsigned char GetTeamNum ( );
	struct FColor GetTextColor ( );
	struct FColor GetHUDColor ( );
	struct FString GetHumanReadableName ( );
	void RemoveFromTeam ( class AController* Other );
	bool AddToTeam ( class AController* Other );
	void eventDestroyed ( );
	void UnbindTeamDataProvider ( );
	class UCurrentGameDataStore* GetCurrentGameDS ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFXTeamInfo::pClassPointer = NULL;

// Class SFXGame.SFXMutator
// 0x0000 (0x020C - 0x020C)
class ASFXMutator : public AMutator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68468 ];

		return pClassPointer;
	};

	void NetDamage ( int OriginalDamage, class APawn* injured, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum );
	void ScoreKill ( class AController* Killer, class AController* Killed );
	void ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score );
	bool PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	bool OverridePickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup, unsigned char* bAllowPickup );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool HandleRestartGame ( );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	void GetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	void InitMutator ( struct FString Options, struct FString* ErrorMessage );
	void DriverLeftVehicle ( class AVehicle* V, class APawn* P );
	bool CanLeaveVehicle ( class AVehicle* V, class APawn* P );
	void DriverEnteredVehicle ( class AVehicle* V, class APawn* P );
	void NotifyLogin ( class AController* NewPlayer );
	void NotifyLogout ( class AController* Exiting );
	struct FString ParseChatPercVar ( class AController* Who, struct FString Cmd );
	void GetServerPlayers ( struct FServerResponseLine* ServerState );
	void GetServerDetails ( struct FServerResponseLine* ServerState );
	bool CheckReplacement ( class AActor* Other );
	bool CheckRelevance ( class AActor* Other );
	bool IsRelevant ( class AActor* Other );
	bool AlwaysKeep ( class AActor* Other );
	void AddMutator ( class AMutator* M );
	void ModifyPlayer ( class APawn* Other );
	void ModifyLogin ( struct FString* Portal, struct FString* Options );
	void Mutate ( struct FString MutateString, class APlayerController* Sender );
	void eventDestroyed ( );
	bool MutatorIsAllowed ( );
	void eventPreBeginPlay ( );
};

UClass* ASFXMutator::pClassPointer = NULL;

// Class SFXGame.SFXPawn_PlayerAdeptNonCombat
// 0x0000 (0x11EB - 0x11EB)
class ASFXPawn_PlayerAdeptNonCombat : public ASFXPawn_PlayerNonCombat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68484 ];

		return pClassPointer;
	};

	void RemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void AddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void Destroyed ( );
	bool ShouldShowHUDGrenadeCounter ( );
	struct FName GetUIAppearanceTag ( );
	void EquipWeaponToPlayerAndSquad ( class UClass* NewWeaponClass );
	struct FString GetArmorEffectDescription ( TArray< struct FString > ArmorEffects );
	void PreClientTravel ( );
	class USFXCustomizationInstance* CreateTemporaryCustomizationInstance ( );
	void ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags );
	void ResetSkeletalMesh ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void ApplyPendingMorphHead ( );
	void ResetPendingMorphData ( );
	bool HasPendingMorphData ( );
	void EnqueueMorphHeadForLoad ( struct FMorphHeadSaveRecord InRecord );
	void EnqueueIconicHeadForLoad ( );
	void EnqueueExistingMorphHead ( class UBioMorphFace* InMorphHead );
	void UpdateMappedPowerDisplay ( );
	void eventCollectAnimListForCooking ( class ABioPawn* Pawn, TArray< struct FName >* OutResults );
	void UseReviveConsumablePower ( );
	bool IsTestFrameworkSetupComplete ( );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void KillAndFreeze ( class AController* Killer, class UClass* dmgType, struct FString Cause );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	bool IsUpdatingAppearanceAsync ( );
	void GetHelmetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequest ( int Id, unsigned char Part, TArray< struct FCustomizableElement >* ArrayToSearch, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequestByElement ( unsigned char Part, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetMeshAssetRequest ( int Id, TArray< struct FCustomizableElement >* Meshes );
	void GetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	void ClearAsyncAssetLoader ( );
	void AbortAsyncUpdateAppearance ( );
	void OnAsyncAppearanceTexturesPreloaded ( );
	void OnAsyncAssetsLoaded ( );
	void UpdateAppearanceAsync ( struct FScriptDelegate CompletedDelegate, unsigned long bBlockForAssetLoad );
	void UpdateAppearance ( );
	void UpdatePlayerLoadoutInfo ( );
	void GiveWeaponToPlayer ( class ASFXWeapon* NewWeapon, unsigned long DeleteTossedWeapons );
	bool ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	void UpdatePrimaryAndSecondaryWeapons ( struct FName NewWeaponName );
	bool SwitchToBackupWeapon ( );
	class ASFXWeapon* BackupWeapon ( class ASFXWeapon* PreferredWeapon );
	void PlayCoverPresentation ( );
	void NotifyFinishedCoverAlign ( );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	class UTexture2D* GetGUIIcon ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void AutoMapPC ( );
	void AutoMapXbox ( );
	struct FName ConstructedPermanentGECategoryName ( struct FName UniqueName );
	bool ApplyPermanentPlayerGameEffect ( struct FName UniqueName );
	void ApplyBonuses ( );
	void AutoMap ( );
	class USFXPowerCustomActionBase* FindPower ( struct FName nmPowerClass );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void InitializePlayerVoc ( );
	void SPCamperBuster ( );
	void PostBeginPlay ( );
	void AddPlayerInventory ( );
	int GetScaledLevel ( );
	void SyncPawnAppearance ( class ABioPawn* SourcePawn );
	void CopyPawnAppearance ( class ABioPawn* SourcePawn );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void RestoreDefaultHelmetState ( unsigned long bForceUpdate );
	void InitDefaultHelmetState ( );
	int FindOverrideHelmet ( );
	bool GetBaseHelmetElement ( struct FCustomizableElement* OutElement );
	int GetBaseHelmetID ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	bool GetKnockbackReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void UpdateWeaponVisibility_DEPRECATED ( );
	void TransferModsToNewWeapon ( TArray< struct FName > PreviousWeaponNames, struct FName NewWeaponClass );
	void ApplyAppropriateModsIfNoneExist ( TArray< struct FName > PreviousWeaponNames );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void UpdateMaterialParameters ( class USFXCustomizationInstance* InSettings, class AActor* InTargetActor, class USkeletalMeshComponent* InHeadMesh, unsigned long bHideScars );
	void GetCurrentScarStruct ( unsigned long bHideScars, struct FScarInfo* Scar );
	int CalculateScarIndex ( unsigned long bHideScars, int CharmSkill, int IntimidateSkill, int ReputationSkill );
	void UpdateParameters ( );
	void InternalGetParagonRenegadePercentage ( float Paragon, float ParagonOffset, float Renegade, float Reputation, float* ParagonPercent, float* RenegadePercent );
	void GetParagonRenegadePercentage ( float* ParagonPercent, float* RenegadePercent );
	int GetReputationSkill ( );
	int GetCharmSkill ( );
	int GetIntimidateSkill ( );
	class USkeletalMeshComponent* AddMeshForTexturePrestream ( class USkeletalMesh* PrestreamMesh );
	void PrestreamTexturesRequiredForAppearance ( );
	void UpdateBodyAppearance ( );
	void UpdateHeadAppearance ( );
	void SetFaceFXAsset ( struct FString dynamicLoadPath );
	void UpdateMeshComponent ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void UpdateHelmetComponent ( );
	void ApplyAppearance ( );
	void UpdateHairAppearance ( );
	void UpdateGameEffects ( );
	void GetHelmetGameEffects ( TArray< class UClass* >* Effects );
	void GetGameEffects ( int Id, TArray< struct FCustomizableElement >* Meshes, TArray< class UClass* >* Effects );
	void ValidateAppearanceIDs ( );
	class UMaterialInstanceConstant* EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx );
	bool RequiresFullHelmet ( );
	class USkeletalMesh* BuildHelmetMesh ( int Id, unsigned long bUseFullArmourHelmets, struct FHelmetMetaData* HelmetDetails );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	struct FString GetFullName ( );
	float GetWeaponEncumbranceCooldown ( float Encumbrance );
	void ApplyWeaponEncumbrance ( );
	void UpdateWeaponEncumbrance ( );
	void RemoveWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void AddWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void LoadCharacterClassData ( );
	void eventReplicatedEvent ( struct FName VarName );
	void* GetLastNameStringRef ( );
	void AsyncUpdating_OnCompleted ( TArray< class UObject* >* LoadedAssets );
};

UClass* ASFXPawn_PlayerAdeptNonCombat::pClassPointer = NULL;

// Class SFXGame.SFXPawn_PlayerInfiltratorNonCombat
// 0x0000 (0x11EB - 0x11EB)
class ASFXPawn_PlayerInfiltratorNonCombat : public ASFXPawn_PlayerNonCombat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68485 ];

		return pClassPointer;
	};

	void RemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void AddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void Destroyed ( );
	bool ShouldShowHUDGrenadeCounter ( );
	struct FName GetUIAppearanceTag ( );
	void EquipWeaponToPlayerAndSquad ( class UClass* NewWeaponClass );
	struct FString GetArmorEffectDescription ( TArray< struct FString > ArmorEffects );
	void PreClientTravel ( );
	class USFXCustomizationInstance* CreateTemporaryCustomizationInstance ( );
	void ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags );
	void ResetSkeletalMesh ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void ApplyPendingMorphHead ( );
	void ResetPendingMorphData ( );
	bool HasPendingMorphData ( );
	void EnqueueMorphHeadForLoad ( struct FMorphHeadSaveRecord InRecord );
	void EnqueueIconicHeadForLoad ( );
	void EnqueueExistingMorphHead ( class UBioMorphFace* InMorphHead );
	void UpdateMappedPowerDisplay ( );
	void eventCollectAnimListForCooking ( class ABioPawn* Pawn, TArray< struct FName >* OutResults );
	void UseReviveConsumablePower ( );
	bool IsTestFrameworkSetupComplete ( );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void KillAndFreeze ( class AController* Killer, class UClass* dmgType, struct FString Cause );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	bool IsUpdatingAppearanceAsync ( );
	void GetHelmetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequest ( int Id, unsigned char Part, TArray< struct FCustomizableElement >* ArrayToSearch, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequestByElement ( unsigned char Part, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetMeshAssetRequest ( int Id, TArray< struct FCustomizableElement >* Meshes );
	void GetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	void ClearAsyncAssetLoader ( );
	void AbortAsyncUpdateAppearance ( );
	void OnAsyncAppearanceTexturesPreloaded ( );
	void OnAsyncAssetsLoaded ( );
	void UpdateAppearanceAsync ( struct FScriptDelegate CompletedDelegate, unsigned long bBlockForAssetLoad );
	void UpdateAppearance ( );
	void UpdatePlayerLoadoutInfo ( );
	void GiveWeaponToPlayer ( class ASFXWeapon* NewWeapon, unsigned long DeleteTossedWeapons );
	bool ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	void UpdatePrimaryAndSecondaryWeapons ( struct FName NewWeaponName );
	bool SwitchToBackupWeapon ( );
	class ASFXWeapon* BackupWeapon ( class ASFXWeapon* PreferredWeapon );
	void PlayCoverPresentation ( );
	void NotifyFinishedCoverAlign ( );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	class UTexture2D* GetGUIIcon ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void AutoMapPC ( );
	void AutoMapXbox ( );
	struct FName ConstructedPermanentGECategoryName ( struct FName UniqueName );
	bool ApplyPermanentPlayerGameEffect ( struct FName UniqueName );
	void ApplyBonuses ( );
	void AutoMap ( );
	class USFXPowerCustomActionBase* FindPower ( struct FName nmPowerClass );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void InitializePlayerVoc ( );
	void SPCamperBuster ( );
	void PostBeginPlay ( );
	void AddPlayerInventory ( );
	int GetScaledLevel ( );
	void SyncPawnAppearance ( class ABioPawn* SourcePawn );
	void CopyPawnAppearance ( class ABioPawn* SourcePawn );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void RestoreDefaultHelmetState ( unsigned long bForceUpdate );
	void InitDefaultHelmetState ( );
	int FindOverrideHelmet ( );
	bool GetBaseHelmetElement ( struct FCustomizableElement* OutElement );
	int GetBaseHelmetID ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	bool GetKnockbackReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void UpdateWeaponVisibility_DEPRECATED ( );
	void TransferModsToNewWeapon ( TArray< struct FName > PreviousWeaponNames, struct FName NewWeaponClass );
	void ApplyAppropriateModsIfNoneExist ( TArray< struct FName > PreviousWeaponNames );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void UpdateMaterialParameters ( class USFXCustomizationInstance* InSettings, class AActor* InTargetActor, class USkeletalMeshComponent* InHeadMesh, unsigned long bHideScars );
	void GetCurrentScarStruct ( unsigned long bHideScars, struct FScarInfo* Scar );
	int CalculateScarIndex ( unsigned long bHideScars, int CharmSkill, int IntimidateSkill, int ReputationSkill );
	void UpdateParameters ( );
	void InternalGetParagonRenegadePercentage ( float Paragon, float ParagonOffset, float Renegade, float Reputation, float* ParagonPercent, float* RenegadePercent );
	void GetParagonRenegadePercentage ( float* ParagonPercent, float* RenegadePercent );
	int GetReputationSkill ( );
	int GetCharmSkill ( );
	int GetIntimidateSkill ( );
	class USkeletalMeshComponent* AddMeshForTexturePrestream ( class USkeletalMesh* PrestreamMesh );
	void PrestreamTexturesRequiredForAppearance ( );
	void UpdateBodyAppearance ( );
	void UpdateHeadAppearance ( );
	void SetFaceFXAsset ( struct FString dynamicLoadPath );
	void UpdateMeshComponent ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void UpdateHelmetComponent ( );
	void ApplyAppearance ( );
	void UpdateHairAppearance ( );
	void UpdateGameEffects ( );
	void GetHelmetGameEffects ( TArray< class UClass* >* Effects );
	void GetGameEffects ( int Id, TArray< struct FCustomizableElement >* Meshes, TArray< class UClass* >* Effects );
	void ValidateAppearanceIDs ( );
	class UMaterialInstanceConstant* EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx );
	bool RequiresFullHelmet ( );
	class USkeletalMesh* BuildHelmetMesh ( int Id, unsigned long bUseFullArmourHelmets, struct FHelmetMetaData* HelmetDetails );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	struct FString GetFullName ( );
	float GetWeaponEncumbranceCooldown ( float Encumbrance );
	void ApplyWeaponEncumbrance ( );
	void UpdateWeaponEncumbrance ( );
	void RemoveWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void AddWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void LoadCharacterClassData ( );
	void eventReplicatedEvent ( struct FName VarName );
	void* GetLastNameStringRef ( );
	void AsyncUpdating_OnCompleted ( TArray< class UObject* >* LoadedAssets );
};

UClass* ASFXPawn_PlayerInfiltratorNonCombat::pClassPointer = NULL;

// Class SFXGame.SFXPawn_PlayerEngineerNonCombat
// 0x0000 (0x11EB - 0x11EB)
class ASFXPawn_PlayerEngineerNonCombat : public ASFXPawn_PlayerNonCombat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68486 ];

		return pClassPointer;
	};

	void RemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void AddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void Destroyed ( );
	bool ShouldShowHUDGrenadeCounter ( );
	struct FName GetUIAppearanceTag ( );
	void EquipWeaponToPlayerAndSquad ( class UClass* NewWeaponClass );
	struct FString GetArmorEffectDescription ( TArray< struct FString > ArmorEffects );
	void PreClientTravel ( );
	class USFXCustomizationInstance* CreateTemporaryCustomizationInstance ( );
	void ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags );
	void ResetSkeletalMesh ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void ApplyPendingMorphHead ( );
	void ResetPendingMorphData ( );
	bool HasPendingMorphData ( );
	void EnqueueMorphHeadForLoad ( struct FMorphHeadSaveRecord InRecord );
	void EnqueueIconicHeadForLoad ( );
	void EnqueueExistingMorphHead ( class UBioMorphFace* InMorphHead );
	void UpdateMappedPowerDisplay ( );
	void eventCollectAnimListForCooking ( class ABioPawn* Pawn, TArray< struct FName >* OutResults );
	void UseReviveConsumablePower ( );
	bool IsTestFrameworkSetupComplete ( );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void KillAndFreeze ( class AController* Killer, class UClass* dmgType, struct FString Cause );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	bool IsUpdatingAppearanceAsync ( );
	void GetHelmetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequest ( int Id, unsigned char Part, TArray< struct FCustomizableElement >* ArrayToSearch, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequestByElement ( unsigned char Part, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetMeshAssetRequest ( int Id, TArray< struct FCustomizableElement >* Meshes );
	void GetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	void ClearAsyncAssetLoader ( );
	void AbortAsyncUpdateAppearance ( );
	void OnAsyncAppearanceTexturesPreloaded ( );
	void OnAsyncAssetsLoaded ( );
	void UpdateAppearanceAsync ( struct FScriptDelegate CompletedDelegate, unsigned long bBlockForAssetLoad );
	void UpdateAppearance ( );
	void UpdatePlayerLoadoutInfo ( );
	void GiveWeaponToPlayer ( class ASFXWeapon* NewWeapon, unsigned long DeleteTossedWeapons );
	bool ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	void UpdatePrimaryAndSecondaryWeapons ( struct FName NewWeaponName );
	bool SwitchToBackupWeapon ( );
	class ASFXWeapon* BackupWeapon ( class ASFXWeapon* PreferredWeapon );
	void PlayCoverPresentation ( );
	void NotifyFinishedCoverAlign ( );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	class UTexture2D* GetGUIIcon ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void AutoMapPC ( );
	void AutoMapXbox ( );
	struct FName ConstructedPermanentGECategoryName ( struct FName UniqueName );
	bool ApplyPermanentPlayerGameEffect ( struct FName UniqueName );
	void ApplyBonuses ( );
	void AutoMap ( );
	class USFXPowerCustomActionBase* FindPower ( struct FName nmPowerClass );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void InitializePlayerVoc ( );
	void SPCamperBuster ( );
	void PostBeginPlay ( );
	void AddPlayerInventory ( );
	int GetScaledLevel ( );
	void SyncPawnAppearance ( class ABioPawn* SourcePawn );
	void CopyPawnAppearance ( class ABioPawn* SourcePawn );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void RestoreDefaultHelmetState ( unsigned long bForceUpdate );
	void InitDefaultHelmetState ( );
	int FindOverrideHelmet ( );
	bool GetBaseHelmetElement ( struct FCustomizableElement* OutElement );
	int GetBaseHelmetID ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	bool GetKnockbackReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void UpdateWeaponVisibility_DEPRECATED ( );
	void TransferModsToNewWeapon ( TArray< struct FName > PreviousWeaponNames, struct FName NewWeaponClass );
	void ApplyAppropriateModsIfNoneExist ( TArray< struct FName > PreviousWeaponNames );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void UpdateMaterialParameters ( class USFXCustomizationInstance* InSettings, class AActor* InTargetActor, class USkeletalMeshComponent* InHeadMesh, unsigned long bHideScars );
	void GetCurrentScarStruct ( unsigned long bHideScars, struct FScarInfo* Scar );
	int CalculateScarIndex ( unsigned long bHideScars, int CharmSkill, int IntimidateSkill, int ReputationSkill );
	void UpdateParameters ( );
	void InternalGetParagonRenegadePercentage ( float Paragon, float ParagonOffset, float Renegade, float Reputation, float* ParagonPercent, float* RenegadePercent );
	void GetParagonRenegadePercentage ( float* ParagonPercent, float* RenegadePercent );
	int GetReputationSkill ( );
	int GetCharmSkill ( );
	int GetIntimidateSkill ( );
	class USkeletalMeshComponent* AddMeshForTexturePrestream ( class USkeletalMesh* PrestreamMesh );
	void PrestreamTexturesRequiredForAppearance ( );
	void UpdateBodyAppearance ( );
	void UpdateHeadAppearance ( );
	void SetFaceFXAsset ( struct FString dynamicLoadPath );
	void UpdateMeshComponent ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void UpdateHelmetComponent ( );
	void ApplyAppearance ( );
	void UpdateHairAppearance ( );
	void UpdateGameEffects ( );
	void GetHelmetGameEffects ( TArray< class UClass* >* Effects );
	void GetGameEffects ( int Id, TArray< struct FCustomizableElement >* Meshes, TArray< class UClass* >* Effects );
	void ValidateAppearanceIDs ( );
	class UMaterialInstanceConstant* EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx );
	bool RequiresFullHelmet ( );
	class USkeletalMesh* BuildHelmetMesh ( int Id, unsigned long bUseFullArmourHelmets, struct FHelmetMetaData* HelmetDetails );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	struct FString GetFullName ( );
	float GetWeaponEncumbranceCooldown ( float Encumbrance );
	void ApplyWeaponEncumbrance ( );
	void UpdateWeaponEncumbrance ( );
	void RemoveWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void AddWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void LoadCharacterClassData ( );
	void eventReplicatedEvent ( struct FName VarName );
	void* GetLastNameStringRef ( );
	void AsyncUpdating_OnCompleted ( TArray< class UObject* >* LoadedAssets );
};

UClass* ASFXPawn_PlayerEngineerNonCombat::pClassPointer = NULL;

// Class SFXGame.SFXPawn_PlayerVanguardNonCombat
// 0x0000 (0x11EB - 0x11EB)
class ASFXPawn_PlayerVanguardNonCombat : public ASFXPawn_PlayerNonCombat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68487 ];

		return pClassPointer;
	};

	void RemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void AddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void Destroyed ( );
	bool ShouldShowHUDGrenadeCounter ( );
	struct FName GetUIAppearanceTag ( );
	void EquipWeaponToPlayerAndSquad ( class UClass* NewWeaponClass );
	struct FString GetArmorEffectDescription ( TArray< struct FString > ArmorEffects );
	void PreClientTravel ( );
	class USFXCustomizationInstance* CreateTemporaryCustomizationInstance ( );
	void ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags );
	void ResetSkeletalMesh ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void ApplyPendingMorphHead ( );
	void ResetPendingMorphData ( );
	bool HasPendingMorphData ( );
	void EnqueueMorphHeadForLoad ( struct FMorphHeadSaveRecord InRecord );
	void EnqueueIconicHeadForLoad ( );
	void EnqueueExistingMorphHead ( class UBioMorphFace* InMorphHead );
	void UpdateMappedPowerDisplay ( );
	void eventCollectAnimListForCooking ( class ABioPawn* Pawn, TArray< struct FName >* OutResults );
	void UseReviveConsumablePower ( );
	bool IsTestFrameworkSetupComplete ( );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void KillAndFreeze ( class AController* Killer, class UClass* dmgType, struct FString Cause );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	bool IsUpdatingAppearanceAsync ( );
	void GetHelmetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequest ( int Id, unsigned char Part, TArray< struct FCustomizableElement >* ArrayToSearch, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequestByElement ( unsigned char Part, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetMeshAssetRequest ( int Id, TArray< struct FCustomizableElement >* Meshes );
	void GetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	void ClearAsyncAssetLoader ( );
	void AbortAsyncUpdateAppearance ( );
	void OnAsyncAppearanceTexturesPreloaded ( );
	void OnAsyncAssetsLoaded ( );
	void UpdateAppearanceAsync ( struct FScriptDelegate CompletedDelegate, unsigned long bBlockForAssetLoad );
	void UpdateAppearance ( );
	void UpdatePlayerLoadoutInfo ( );
	void GiveWeaponToPlayer ( class ASFXWeapon* NewWeapon, unsigned long DeleteTossedWeapons );
	bool ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	void UpdatePrimaryAndSecondaryWeapons ( struct FName NewWeaponName );
	bool SwitchToBackupWeapon ( );
	class ASFXWeapon* BackupWeapon ( class ASFXWeapon* PreferredWeapon );
	void PlayCoverPresentation ( );
	void NotifyFinishedCoverAlign ( );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	class UTexture2D* GetGUIIcon ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void AutoMapPC ( );
	void AutoMapXbox ( );
	struct FName ConstructedPermanentGECategoryName ( struct FName UniqueName );
	bool ApplyPermanentPlayerGameEffect ( struct FName UniqueName );
	void ApplyBonuses ( );
	void AutoMap ( );
	class USFXPowerCustomActionBase* FindPower ( struct FName nmPowerClass );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void InitializePlayerVoc ( );
	void SPCamperBuster ( );
	void PostBeginPlay ( );
	void AddPlayerInventory ( );
	int GetScaledLevel ( );
	void SyncPawnAppearance ( class ABioPawn* SourcePawn );
	void CopyPawnAppearance ( class ABioPawn* SourcePawn );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void RestoreDefaultHelmetState ( unsigned long bForceUpdate );
	void InitDefaultHelmetState ( );
	int FindOverrideHelmet ( );
	bool GetBaseHelmetElement ( struct FCustomizableElement* OutElement );
	int GetBaseHelmetID ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	bool GetKnockbackReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void UpdateWeaponVisibility_DEPRECATED ( );
	void TransferModsToNewWeapon ( TArray< struct FName > PreviousWeaponNames, struct FName NewWeaponClass );
	void ApplyAppropriateModsIfNoneExist ( TArray< struct FName > PreviousWeaponNames );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void UpdateMaterialParameters ( class USFXCustomizationInstance* InSettings, class AActor* InTargetActor, class USkeletalMeshComponent* InHeadMesh, unsigned long bHideScars );
	void GetCurrentScarStruct ( unsigned long bHideScars, struct FScarInfo* Scar );
	int CalculateScarIndex ( unsigned long bHideScars, int CharmSkill, int IntimidateSkill, int ReputationSkill );
	void UpdateParameters ( );
	void InternalGetParagonRenegadePercentage ( float Paragon, float ParagonOffset, float Renegade, float Reputation, float* ParagonPercent, float* RenegadePercent );
	void GetParagonRenegadePercentage ( float* ParagonPercent, float* RenegadePercent );
	int GetReputationSkill ( );
	int GetCharmSkill ( );
	int GetIntimidateSkill ( );
	class USkeletalMeshComponent* AddMeshForTexturePrestream ( class USkeletalMesh* PrestreamMesh );
	void PrestreamTexturesRequiredForAppearance ( );
	void UpdateBodyAppearance ( );
	void UpdateHeadAppearance ( );
	void SetFaceFXAsset ( struct FString dynamicLoadPath );
	void UpdateMeshComponent ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void UpdateHelmetComponent ( );
	void ApplyAppearance ( );
	void UpdateHairAppearance ( );
	void UpdateGameEffects ( );
	void GetHelmetGameEffects ( TArray< class UClass* >* Effects );
	void GetGameEffects ( int Id, TArray< struct FCustomizableElement >* Meshes, TArray< class UClass* >* Effects );
	void ValidateAppearanceIDs ( );
	class UMaterialInstanceConstant* EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx );
	bool RequiresFullHelmet ( );
	class USkeletalMesh* BuildHelmetMesh ( int Id, unsigned long bUseFullArmourHelmets, struct FHelmetMetaData* HelmetDetails );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	struct FString GetFullName ( );
	float GetWeaponEncumbranceCooldown ( float Encumbrance );
	void ApplyWeaponEncumbrance ( );
	void UpdateWeaponEncumbrance ( );
	void RemoveWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void AddWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void LoadCharacterClassData ( );
	void eventReplicatedEvent ( struct FName VarName );
	void* GetLastNameStringRef ( );
	void AsyncUpdating_OnCompleted ( TArray< class UObject* >* LoadedAssets );
};

UClass* ASFXPawn_PlayerVanguardNonCombat::pClassPointer = NULL;

// Class SFXGame.SFXPawn_PlayerSentinelNonCombat
// 0x0000 (0x11EB - 0x11EB)
class ASFXPawn_PlayerSentinelNonCombat : public ASFXPawn_PlayerNonCombat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68488 ];

		return pClassPointer;
	};

	void RemoveDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToRemove );
	void AddDetachOnDestroyObject ( class USkeletalMeshComponent* MeshToAdd );
	void Destroyed ( );
	bool ShouldShowHUDGrenadeCounter ( );
	struct FName GetUIAppearanceTag ( );
	void EquipWeaponToPlayerAndSquad ( class UClass* NewWeaponClass );
	struct FString GetArmorEffectDescription ( TArray< struct FString > ArmorEffects );
	void PreClientTravel ( );
	class USFXCustomizationInstance* CreateTemporaryCustomizationInstance ( );
	void ApplyCustomizationToActor ( class AActor* InTarget, class USFXCustomizationInstance* InSettings, int UIWorldConfigFlags );
	void ResetSkeletalMesh ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void ApplyPendingMorphHead ( );
	void ResetPendingMorphData ( );
	bool HasPendingMorphData ( );
	void EnqueueMorphHeadForLoad ( struct FMorphHeadSaveRecord InRecord );
	void EnqueueIconicHeadForLoad ( );
	void EnqueueExistingMorphHead ( class UBioMorphFace* InMorphHead );
	void UpdateMappedPowerDisplay ( );
	void eventCollectAnimListForCooking ( class ABioPawn* Pawn, TArray< struct FName >* OutResults );
	void UseReviveConsumablePower ( );
	bool IsTestFrameworkSetupComplete ( );
	void BioBaseRemovedFromWorld ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void KillAndFreeze ( class AController* Killer, class UClass* dmgType, struct FString Cause );
	bool ModifyDamage ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, float* Damage, struct FDamageCalculationAlgorithm* DamageCalc, struct FTraceHitInfo* HitInfo );
	bool IsUpdatingAppearanceAsync ( );
	void GetHelmetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequest ( int Id, unsigned char Part, TArray< struct FCustomizableElement >* ArrayToSearch, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetHelmetMeshAssetRequestByElement ( unsigned char Part, struct FCustomizableElement* Element );
	struct FSFXAsyncAssetRequest GetMeshAssetRequest ( int Id, TArray< struct FCustomizableElement >* Meshes );
	void GetApperanceAssetsForAsyncLoad ( TArray< struct FSFXAsyncAssetRequest >* Assets );
	void ClearAsyncAssetLoader ( );
	void AbortAsyncUpdateAppearance ( );
	void OnAsyncAppearanceTexturesPreloaded ( );
	void OnAsyncAssetsLoaded ( );
	void UpdateAppearanceAsync ( struct FScriptDelegate CompletedDelegate, unsigned long bBlockForAssetLoad );
	void UpdateAppearance ( );
	void UpdatePlayerLoadoutInfo ( );
	void GiveWeaponToPlayer ( class ASFXWeapon* NewWeapon, unsigned long DeleteTossedWeapons );
	bool ShouldTossWeapon ( class ASFXWeapon* ChkWeapon, class ASFXWeapon* NewWeapon );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout, unsigned long bForceFromEngineLoadout );
	void UpdatePrimaryAndSecondaryWeapons ( struct FName NewWeaponName );
	bool SwitchToBackupWeapon ( );
	class ASFXWeapon* BackupWeapon ( class ASFXWeapon* PreferredWeapon );
	void PlayCoverPresentation ( );
	void NotifyFinishedCoverAlign ( );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo, unsigned char SlotIdx );
	class UTexture2D* GetGUIIcon ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void AutoMapPC ( );
	void AutoMapXbox ( );
	struct FName ConstructedPermanentGECategoryName ( struct FName UniqueName );
	bool ApplyPermanentPlayerGameEffect ( struct FName UniqueName );
	void ApplyBonuses ( );
	void AutoMap ( );
	class USFXPowerCustomActionBase* FindPower ( struct FName nmPowerClass );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void InitializePlayerVoc ( );
	void SPCamperBuster ( );
	void PostBeginPlay ( );
	void AddPlayerInventory ( );
	int GetScaledLevel ( );
	void SyncPawnAppearance ( class ABioPawn* SourcePawn );
	void CopyPawnAppearance ( class ABioPawn* SourcePawn );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void RestoreDefaultHelmetState ( unsigned long bForceUpdate );
	void InitDefaultHelmetState ( );
	int FindOverrideHelmet ( );
	bool GetBaseHelmetElement ( struct FCustomizableElement* OutElement );
	int GetBaseHelmetID ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	bool GetKnockbackReactions ( float Angle, float SideAngle, TArray< unsigned char >* OutActions );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void UpdateWeaponVisibility_DEPRECATED ( );
	void TransferModsToNewWeapon ( TArray< struct FName > PreviousWeaponNames, struct FName NewWeaponClass );
	void ApplyAppropriateModsIfNoneExist ( TArray< struct FName > PreviousWeaponNames );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void UpdateMaterialParameters ( class USFXCustomizationInstance* InSettings, class AActor* InTargetActor, class USkeletalMeshComponent* InHeadMesh, unsigned long bHideScars );
	void GetCurrentScarStruct ( unsigned long bHideScars, struct FScarInfo* Scar );
	int CalculateScarIndex ( unsigned long bHideScars, int CharmSkill, int IntimidateSkill, int ReputationSkill );
	void UpdateParameters ( );
	void InternalGetParagonRenegadePercentage ( float Paragon, float ParagonOffset, float Renegade, float Reputation, float* ParagonPercent, float* RenegadePercent );
	void GetParagonRenegadePercentage ( float* ParagonPercent, float* RenegadePercent );
	int GetReputationSkill ( );
	int GetCharmSkill ( );
	int GetIntimidateSkill ( );
	class USkeletalMeshComponent* AddMeshForTexturePrestream ( class USkeletalMesh* PrestreamMesh );
	void PrestreamTexturesRequiredForAppearance ( );
	void UpdateBodyAppearance ( );
	void UpdateHeadAppearance ( );
	void SetFaceFXAsset ( struct FString dynamicLoadPath );
	void UpdateMeshComponent ( class USkeletalMeshComponent* InComponent, class USkeletalMesh* InMesh );
	void UpdateHelmetComponent ( );
	void ApplyAppearance ( );
	void UpdateHairAppearance ( );
	void UpdateGameEffects ( );
	void GetHelmetGameEffects ( TArray< class UClass* >* Effects );
	void GetGameEffects ( int Id, TArray< struct FCustomizableElement >* Meshes, TArray< class UClass* >* Effects );
	void ValidateAppearanceIDs ( );
	class UMaterialInstanceConstant* EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx );
	bool RequiresFullHelmet ( );
	class USkeletalMesh* BuildHelmetMesh ( int Id, unsigned long bUseFullArmourHelmets, struct FHelmetMetaData* HelmetDetails );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	struct FString GetFullName ( );
	float GetWeaponEncumbranceCooldown ( float Encumbrance );
	void ApplyWeaponEncumbrance ( );
	void UpdateWeaponEncumbrance ( );
	void RemoveWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void AddWeaponEncumbranceBonus ( class USFXGameEffect* Bonus );
	void LoadCharacterClassData ( );
	void eventReplicatedEvent ( struct FName VarName );
	void* GetLastNameStringRef ( );
	void AsyncUpdating_OnCompleted ( TArray< class UObject* >* LoadedAssets );
};

UClass* ASFXPawn_PlayerSentinelNonCombat::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_CombatStarted
// 0x0000 (0x00D2 - 0x00D2)
class USFXSeqEvt_CombatStarted : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68700 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USFXSeqEvt_CombatStarted::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_CombatEnded
// 0x0000 (0x00D2 - 0x00D2)
class USFXSeqEvt_CombatEnded : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68710 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USFXSeqEvt_CombatEnded::pClassPointer = NULL;

// Class SFXGame.SFXGameChoiceGUIData_HeavyWeapons
// 0x0000 (0x0071 - 0x0071)
class USFXGameChoiceGUIData_HeavyWeapons : public USFXGameChoiceGUIData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68841 ];

		return pClassPointer;
	};

	void RemoveTokenMapping ( int nTokenID, struct FSFXChoiceEntry* Data );
	void SetTokenMapping ( int nTokenID, struct FString sValue, struct FSFXChoiceEntry* Data );
	void ClearChoiceList ( );
	bool AddChoice ( struct FSFXChoiceEntry Params );
	void SetupOptionalPane ( unsigned long bShowOptionalPane, void* srOptionalPaneTitleText, void* srOptionalPaneItemValuePrefixText, void* srOptionalPaneValuePrefixText );
	void SetDisplayText ( void* srTitle, void* srSubTitle, void* srAText, void* srBText );
};

UClass* USFXGameChoiceGUIData_HeavyWeapons::pClassPointer = NULL;

// Class SFXGame.SFXGameChoiceGUIData_Research
// 0x0043 (0x00B4 - 0x0071)
class USFXGameChoiceGUIData_Research : public USFXGameChoiceGUIData
{
public:
	TArray< struct FTechData >                         Tech;                                             		// 0x0074 (0x000C) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FTechData >                         Research;                                         		// 0x0080 (0x000C) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	void*                                              m_srTechTitle;                                    		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srTechSubTitle;                                 		// 0x0090 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srTechAText;                                    		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srTechBText;                                    		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResearchTitle;                                		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResearchSubTitle;                             		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResearchAText;                                		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResearchBText;                                		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResearchErrorTooExpensive;                    		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srResearchErrorCanNotLearn;                     		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68863 ];

		return pClassPointer;
	};

};

UClass* USFXGameChoiceGUIData_Research::pClassPointer = NULL;

// Class SFXGame.SFXGameChoiceGUIData_Weapons
// 0x0000 (0x0071 - 0x0071)
class USFXGameChoiceGUIData_Weapons : public USFXGameChoiceGUIData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68891 ];

		return pClassPointer;
	};

	void RemoveTokenMapping ( int nTokenID, struct FSFXChoiceEntry* Data );
	void SetTokenMapping ( int nTokenID, struct FString sValue, struct FSFXChoiceEntry* Data );
	void ClearChoiceList ( );
	bool AddChoice ( struct FSFXChoiceEntry Params );
	void SetupOptionalPane ( unsigned long bShowOptionalPane, void* srOptionalPaneTitleText, void* srOptionalPaneItemValuePrefixText, void* srOptionalPaneValuePrefixText );
	void SetDisplayText ( void* srTitle, void* srSubTitle, void* srAText, void* srBText );
};

UClass* USFXGameChoiceGUIData_Weapons::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_DamageOverTime
// 0x000A (0x006C - 0x0062)
class USFXGameEffect_DamageOverTime : public USFXGameEffect
{
public:
	class UClass*                                      DamageType;                                       		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              DamageInterval;                                   		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68960 ];

		return pClassPointer;
	};

	void OnRemoved ( );
	void DoDamage ( );
	void OnApplied ( );
};

UClass* USFXGameEffect_DamageOverTime::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_GlobalCooldownBonus
// 0x0006 (0x0068 - 0x0062)
class USFXGameEffect_GlobalCooldownBonus : public USFXGameEffect
{
public:
	unsigned long                                      bRemoved : 1;                                     		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68974 ];

		return pClassPointer;
	};

	void OnRemoved ( );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

UClass* USFXGameEffect_GlobalCooldownBonus::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_HealOverTime
// 0x0006 (0x0068 - 0x0062)
class USFXGameEffect_HealOverTime : public USFXGameEffect
{
public:
	unsigned long                                      bPercentOfMaxHealth : 1;                          		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68988 ];

		return pClassPointer;
	};

	void OnUpdate ( float DeltaSeconds );
};

UClass* USFXGameEffect_HealOverTime::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_HealthRegenPenalty
// 0x0000 (0x0062 - 0x0062)
class USFXGameEffect_HealthRegenPenalty : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68995 ];

		return pClassPointer;
	};

	class AController* CheckOwnerInstigator ( class AController* Attacker );
	void SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	class UClass* LoadGameEffectClass ( struct FString GEClassName );
	void OnUnpaused ( );
	void OnPaused ( );
	void OnCombatEnd ( );
	void eventOnRemoved ( );
	void eventOnUpdate ( float DeltaSeconds );
	void OnApplied ( );
	void ComputeCustomEffectValue ( float* Value );
};

UClass* USFXGameEffect_HealthRegenPenalty::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_HealthBonus
// 0x000A (0x006C - 0x0062)
class USFXGameEffect_HealthBonus : public USFXGameEffect
{
public:
	float                                              PercentHealthBonus;                               		// 0x0064 (0x0004) [0x0000000000000000]              
	unsigned long                                      bEffectValueIsPercent : 1;                        		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68998 ];

		return pClassPointer;
	};

	void OnRemoved ( );
	void OnApplied ( );
	void ComputeCustomEffectValue ( float* Value );
};

UClass* USFXGameEffect_HealthBonus::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_IgnorePlayerSquad
// 0x0000 (0x0062 - 0x0062)
class USFXGameEffect_IgnorePlayerSquad : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69012 ];

		return pClassPointer;
	};

	class AController* CheckOwnerInstigator ( class AController* Attacker );
	void SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	class UClass* LoadGameEffectClass ( struct FString GEClassName );
	void OnUnpaused ( );
	void OnPaused ( );
	void OnCombatEnd ( );
	void eventOnRemoved ( );
	void eventOnUpdate ( float DeltaSeconds );
	void OnApplied ( );
	void ComputeCustomEffectValue ( float* Value );
};

UClass* USFXGameEffect_IgnorePlayerSquad::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_PhysicsDamageMultiplier
// 0x0000 (0x0062 - 0x0062)
class USFXGameEffect_PhysicsDamageMultiplier : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69048 ];

		return pClassPointer;
	};

	class AController* CheckOwnerInstigator ( class AController* Attacker );
	void SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	class UClass* LoadGameEffectClass ( struct FString GEClassName );
	void OnUnpaused ( );
	void OnPaused ( );
	void OnCombatEnd ( );
	void eventOnRemoved ( );
	void eventOnUpdate ( float DeltaSeconds );
	void OnApplied ( );
	void ComputeCustomEffectValue ( float* Value );
};

UClass* USFXGameEffect_PhysicsDamageMultiplier::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_PhysicsPower
// 0x0000 (0x0062 - 0x0062)
class USFXGameEffect_PhysicsPower : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69054 ];

		return pClassPointer;
	};

	class AController* CheckOwnerInstigator ( class AController* Attacker );
	void SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	class UClass* LoadGameEffectClass ( struct FString GEClassName );
	void OnUnpaused ( );
	void OnPaused ( );
	void OnCombatEnd ( );
	void eventOnRemoved ( );
	void eventOnUpdate ( float DeltaSeconds );
	void OnApplied ( );
	void ComputeCustomEffectValue ( float* Value );
};

UClass* USFXGameEffect_PhysicsPower::pClassPointer = NULL;

// Class SFXGame.SFXRumble_Power
// 0x0008 (0x0048 - 0x0040)
class USFXRumble_Power : public UWaveFormBase
{
public:
	float                                              MinDetonationRumbleDistance;                      		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              MaxDetonationRumbleDistance;                      		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69125 ];

		return pClassPointer;
	};

};

UClass* USFXRumble_Power::pClassPointer = NULL;

// Class SFXGame.SFXShake_Power
// 0x0008 (0x00BC - 0x00B4)
class USFXShake_Power : public USFXCameraShakeBase
{
public:
	float                                              MinDetonationShakeDistance;                       		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              MaxDetonationShakeDistance;                       		// 0x00B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69126 ];

		return pClassPointer;
	};

};

UClass* USFXShake_Power::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_ShieldBonus
// 0x000A (0x006C - 0x0062)
class USFXGameEffect_ShieldBonus : public USFXGameEffect
{
public:
	float                                              PercentShieldBonus;                               		// 0x0064 (0x0004) [0x0000000000000000]              
	unsigned long                                      bEffectValueIsPercent : 1;                        		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRemoveEffectWhenShieldsDown : 1;                 		// 0x0068 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69128 ];

		return pClassPointer;
	};

	void OnRemoved ( );
	void OnUpdate ( float DeltaSeconds );
	void OnApplied ( );
	void ComputeCustomEffectValue ( float* Value );
};

UClass* USFXGameEffect_ShieldBonus::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_ShieldRegenBonus
// 0x0000 (0x0062 - 0x0062)
class USFXGameEffect_ShieldRegenBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69146 ];

		return pClassPointer;
	};

	class AController* CheckOwnerInstigator ( class AController* Attacker );
	void SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	class UClass* LoadGameEffectClass ( struct FString GEClassName );
	void OnUnpaused ( );
	void OnPaused ( );
	void OnCombatEnd ( );
	void eventOnRemoved ( );
	void eventOnUpdate ( float DeltaSeconds );
	void OnApplied ( );
	void ComputeCustomEffectValue ( float* Value );
};

UClass* USFXGameEffect_ShieldRegenBonus::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_TimeDilation
// 0x001A (0x007C - 0x0062)
class USFXGameEffect_TimeDilation : public USFXGameEffect
{
public:
	struct FInterpCurveFloat                           SlowDown;                                         		// 0x0064 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              TimeRemainingBeforePause;                         		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              OwnerCounterScale;                                		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69155 ];

		return pClassPointer;
	};

	void OnUnpaused ( );
	void OnPaused ( );
	void OnRemoved ( );
	void OnUpdate ( float TimeDelta );
	void OnApplied ( );
};

UClass* USFXGameEffect_TimeDilation::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_UniqueArmor_Base
// 0x000E (0x0070 - 0x0062)
class USFXGameEffect_UniqueArmor_Base : public USFXGameEffect
{
public:
	TArray< struct FUniqueArmorEffects >               Children;                                         		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69168 ];

		return pClassPointer;
	};

	void OnApplied ( );
};

UClass* USFXGameEffect_UniqueArmor_Base::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_WeaponDamageBonus
// 0x0000 (0x0062 - 0x0062)
class USFXGameEffect_WeaponDamageBonus : public USFXGameEffect_PassiveWeaponDamageBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69178 ];

		return pClassPointer;
	};

	class AController* CheckOwnerInstigator ( class AController* Attacker );
	void SpawnWeaponImpactVFX ( class AActor* inInstigator, struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	class UClass* LoadGameEffectClass ( struct FString GEClassName );
	void OnUnpaused ( );
	void OnPaused ( );
	void OnCombatEnd ( );
	void eventOnRemoved ( );
	void eventOnUpdate ( float DeltaSeconds );
	void OnApplied ( );
	void ComputeCustomEffectValue ( float* Value );
};

UClass* USFXGameEffect_WeaponDamageBonus::pClassPointer = NULL;

// Class SFXGame.SFXGameEffect_WeldPhysics
// 0x0009 (0x0081 - 0x0078)
class USFXGameEffect_WeldPhysics : public USFXGameEffect_DeathEffect
{
public:
	class ABioPawn*                                    Caster;                                           		// 0x0078 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFreezeSucceeded : 1;                             		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      CustomActionType;                                 		// 0x0080 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69180 ];

		return pClassPointer;
	};

	void OnRemoved ( );
	void RemoveExistingWeldEffects ( );
	void OnApplied ( );
};

UClass* USFXGameEffect_WeldPhysics::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_LeaveWorld
// 0x0000 (0x00D2 - 0x00D2)
class USFXSeqEvt_LeaveWorld : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69302 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USFXSeqEvt_LeaveWorld::pClassPointer = NULL;

// Class SFXGame.SFXGameViewportClient
// 0x0000 (0x0128 - 0x0128)
class USFXGameViewportClient : public UGFxGameViewportClient
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70365 ];

		return pClassPointer;
	};

	bool eventInit ( struct FString* OutError );
};

UClass* USFXGameViewportClient::pClassPointer = NULL;

// Class SFXGame.SFXLocalPlayer
// 0x0008 (0x0434 - 0x042C)
class USFXLocalPlayer : public ULocalPlayer
{
public:
	class USFXGAWReinforcementManagerBase*             GAWReinforcementManager;                          		// 0x042C (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXGAWAssetsHandler*                        GAWHandler;                                       		// 0x0430 (0x0004) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70455 ];

		return pClassPointer;
	};

};

UClass* USFXLocalPlayer::pClassPointer = NULL;

// Class SFXGame.SFXGAWReinforcementManagerBase
// 0x0000 (0x003C - 0x003C)
class USFXGAWReinforcementManagerBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70769 ];

		return pClassPointer;
	};

};

UClass* USFXGAWReinforcementManagerBase::pClassPointer = NULL;

// Class SFXGame.SFXMarkerModuleManager
// 0x0060 (0x009C - 0x003C)
class USFXMarkerModuleManager : public UObject
{
public:
	TArray< class AActor* >                            AllMarkerActors;                                  		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AActor* >                            ActiveMarkerActors;                               		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   MarkerActivatedDelegates;                         		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   MarkerDeactivatedDelegates;                       		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   ManagerDestroyedDelegates;                        		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnActivated__Delegate;                          		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDeactivated__Delegate;                        		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDestroyed__Delegate;                          		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70818 ];

		return pClassPointer;
	};

	void ClearManagerDestroyedDelegate ( struct FScriptDelegate ManagerDestroyedDelegate );
	void AddManagerDestroyedDelegate ( struct FScriptDelegate ManagerDestroyedDelegate );
	void ClearMarkerDeactivatedDelegate ( struct FScriptDelegate MarkerDeactivatedDelegate );
	void AddMarkerDeactivatedDelegate ( struct FScriptDelegate MarkerDeactivatedDelegate );
	void ClearMarkerActivatedDelegate ( struct FScriptDelegate MarkerActivatedDelegate );
	void AddMarkerActivatedDelegate ( struct FScriptDelegate MarkerActivatedDelegate );
	void ClearAllMarkerActors ( );
	void Destroyed ( );
	TArray< class AActor* > GetActiveMarkerActors ( struct FString MarkerType );
	TArray< class AActor* > GetAllMarkerActors ( struct FString MarkerType );
	class AActor* FindActorInActiveMarkerActors ( class AActor* ActorToSearchFor );
	class AActor* FindActorInAllMarkerActors ( class AActor* ActorToSearchFor );
	void SetMarkerActorAsInactive ( class AActor* NewInactiveMarkerActor );
	void SetMarkerActorAsActive ( class AActor* NewActiveMarkerActor );
	void RemoveMarkerActor ( class AActor* MarkerActorToRemove );
	void AddMarkerActor ( class AActor* NewMarkerActor );
	void OnDestroyed ( );
	void OnDeactivated ( class AActor* DeactivatedTarget );
	void OnActivated ( class AActor* ActivatedTarget );
};

UClass* USFXMarkerModuleManager::pClassPointer = NULL;

// Class SFXGame.sfxwavecoordinator
// 0x0016 (0x020C - 0x01F6)
class Asfxwavecoordinator : public AActor
{
public:
	TArray< class Usfxwave* >                          ActiveWaves;                                      		// 0x01F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              PostLoadDelay;                                    		// 0x0204 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      WavesAreLoading : 1;                              		// 0x0208 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70869 ];

		return pClassPointer;
	};

	float GetObjectiveScoreBudget ( );
	float GetObjectiveCreditBudget ( );
	float GetEnemyScoreBudget ( );
	void SyncClientMatchTimer ( float OperationTime );
	int GetFriendlyCurrentWaveNumber ( );
	void BeginWaveLoading ( );
	void StartNewWave ( );
	void OnAllWavesFinishedLoading ( );
	void OnAllWavesFinished ( );
	void OnWaveFinished ( class Usfxwave* Wave );
	void FinishActiveWaves ( );
	void PawnDestroyed ( class ABioPawn* Pawn );
	void PawnRevived ( class ABioPawn* Pawn );
	void PawnDowned ( class ABioPawn* Pawn );
	void PawnDied ( class ABioPawn* Pawn, class ABioPawn* Killer );
	void PawnSpawned ( class ABioPawn* Pawn );
	void UpdateWaveLoading ( );
	float GetPercentOfWavesCompleted ( );
	class Usfxwave* GetWaveOfType ( struct FName WaveClassName );
	void HandleHostMigration ( );
	void EndWaves ( );
	void StartWaves ( );
};

UClass* Asfxwavecoordinator::pClassPointer = NULL;

// Class SFXGame.sfxgui_accomplishments
// 0x0017 (0x0278 - 0x0261)
class Usfxgui_accomplishments : public USFXGUIMovie
{
public:
	void*                                              srTitle;                                          		// 0x0264 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srReturn;                                         		// 0x0268 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srBrowse;                                         		// 0x026C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srTree;                                           		// 0x0270 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bFromMainMenu : 1;                                		// 0x0274 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowChildDetails : 1;                            		// 0x0274 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70913 ];

		return pClassPointer;
	};

	void Exit ( );
	TArray< struct FAccomplishmentUIData > GetAccomplishmentData ( );
	bool CanShowChildDetails ( );
	void SetFromMainMenu ( unsigned long FromMainMenu );
	void eventOnClose ( );
	void eventOnStart ( );
};

UClass* Usfxgui_accomplishments::pClassPointer = NULL;

// Class SFXGame.SFXPlayerInventoryManager
// 0x0048 (0x0354 - 0x030C)
class ASFXPlayerInventoryManager : public ASFXInventoryManager
{
public:
	struct FRotator                                    AccuracyLastViewRot;                              		// 0x030C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   InterpRange;                                      		// 0x0318 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Base_Acc_Standing;                                		// 0x0320 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Base_Acc_Zoom;                                    		// 0x0324 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccMod_Move;                                      		// 0x0328 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccMod_ViewTurn;                                  		// 0x032C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccMod_Crouched;                                  		// 0x0330 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccMod_MouseMultiplier;                           		// 0x0334 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccMod_MaxCameraLoss;                             		// 0x0338 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Base_Interp_Speed;                                		// 0x033C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              InterpMod_Move;                                   		// 0x0340 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              InterpMul_ViewTurn;                               		// 0x0344 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Accuracy;                                         		// 0x0348 (0x0004) [0x0000000000000000]              
	float                                              AccMod_WeaponFired;                               		// 0x034C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeSinceLastFire;                                		// 0x0350 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71135 ];

		return pClassPointer;
	};

	float GetPlayerCrosshairValue ( );
	void UpdatePlayerAccuracy ( float DeltaTime );
	void DebugDrawWeaponAccuracy ( );
	void Tick ( float DeltaTime );
};

UClass* ASFXPlayerInventoryManager::pClassPointer = NULL;

// Class SFXGame.SFXGUI_GalaxyAtWar
// 0x003F (0x02A0 - 0x0261)
class USFXGUI_GalaxyAtWar : public USFXGUIMovie
{
public:
	TArray< struct FGAWZoneGUIData >                   GAWRatings;                                       		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFinished__Delegate;                           		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSwitchScreens__Delegate;                      		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXGAWAssetsHandler*                        GAWAssetHandler;                                  		// 0x0288 (0x0004) [0x0000000000000000]              
	void*                                              srReadinessPercent;                               		// 0x028C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srRatingsError;                                   		// 0x0290 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srOK;                                             		// 0x0294 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srGaWTutorialMessage;                             		// 0x0298 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bGAWRatingsError : 1;                           		// 0x029C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71210 ];

		return pClassPointer;
	};

	void AS_SetPercentagesVisible ( unsigned long bVisbile );
	void AS_ScrollDetails ( float fValue );
	void AS_SetLoadingClipVisbile ( unsigned long bVisible );
	void AS_InitializeScreen ( );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void GoBack ( );
	void GoToWarAssets ( );
	struct FString GetFormattedReadinessPercent ( int nReadiness );
	int GetOverallReadiness ( );
	TArray< struct FGAWZoneGUIData > GetGAWRatings ( );
	void OnRatingsErrorFinished ( unsigned long bAPressed, int nContext );
	void ShowGAWRatingsRequestError ( );
	bool HasGAWRatingsError ( );
	void OnGAWRequestFinished ( TArray< struct FGAWZoneGUIData > ZoneData, int Level, int errorCode );
	void eventOnClose ( );
	void ShowTutorial ( );
	void eventOnStart ( );
	void OnSwitchScreens ( );
	void OnFinished ( );
};

UClass* USFXGUI_GalaxyAtWar::pClassPointer = NULL;

// Class SFXGame.SFXGUI_MainMenu_RTT_RC_B
// 0x0000 (0x0274 - 0x0274)
class USFXGUI_MainMenu_RTT_RC_B : public USFXGUIMovieKismet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71886 ];

		return pClassPointer;
	};

	void eventOnClose ( );
	void eventKismetClose ( );
	void Close ( unsigned long bUnload );
	void eventOnStart ( );
};

UClass* USFXGUI_MainMenu_RTT_RC_B::pClassPointer = NULL;

// Class SFXGame.SFXGUI_Option_VOLanguage
// 0x0000 (0x0055 - 0x0055)
class USFXGUI_Option_VOLanguage : public USFXGUI_Option_LanguageBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72161 ];

		return pClassPointer;
	};

	void GetAvailableSKULanguages ( TArray< struct FLanguageOptionInfo >* aReturnLangs );
	struct FString GetLanguage ( unsigned long bGetDefault );
	void eventResetToDefault ( );
	void eventApplyOptionValue ( int nValue );
	int eventGetOptionValue ( );
	void eventConstructTextSliderOption ( struct FTextSliderOption* Option );
	void RebuildSliderOptions ( struct FString SelectedLanguageCode, struct FTextSliderOption* Option );
	bool eventOptionIsAvailable ( );
};

UClass* USFXGUI_Option_VOLanguage::pClassPointer = NULL;

// Class SFXGame.SFXGUI_SquadRecord
// 0x0107 (0x0394 - 0x028D)
class USFXGUI_SquadRecord : public USFXGUIMovieLegacyAdapter
{
public:
	TArray< float >                                    m_ParagonRenegadeBarValues;                       		// 0x0290 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class USFXPowerCustomActionBase* >         PowerCache;                                       		// 0x029C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< void* >                                    m_SquadNames;                                     		// 0x02A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UTexture* >                          m_SquadIcons;                                     		// 0x02B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      m_bPowerLockedStatus;                             		// 0x02C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class Asfxpawn* >                          m_SpawnedSquadMembersSource;                      		// 0x02CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   Tutorials;                                        		// 0x02D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnNewTutorialCallback__Delegate;                		// 0x02E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDoneTutorialsCallback__Delegate;              		// 0x02F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCloseCallback__Delegate;                      		// 0x02FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ABioWorldInfo*                               m_WorldInfo;                                      		// 0x0308 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_CurrentPawnIndex;                               		// 0x030C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fScrollValue;                                   		// 0x0310 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXPowerLevelUpHelper*                      m_Helper;                                         		// 0x0314 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_RespecMemberIndex;                              		// 0x0318 (0x0004) [0x0000000000000000]              
	int                                                m_nUIWorldProcessingFrames;                       		// 0x031C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_InitialHiddenTimer;                             		// 0x0320 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              m_srXPFormat;                                     		// 0x0324 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srSpendTalentPointsMessageXBox;                 		// 0x0328 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srParagonRenegadeMessageXBox;                   		// 0x032C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srSpendTalentPointsMessagePC;                   		// 0x0330 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srParagonRenegadeMessagePC;                     		// 0x0334 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srSpendTalentPointsMessagePS3;                  		// 0x0338 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srParagonRenegadeMessagePS3;                    		// 0x033C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srOk;                                           		// 0x0340 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srRespecMessage;                                		// 0x0344 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srRespecCancel;                                 		// 0x0348 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srShepardLevelClassFormat;                      		// 0x034C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srTalentDescriptionFormat;                      		// 0x0350 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srRequiredLevelFormat;                          		// 0x0354 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srRankDescriptionFormat;                        		// 0x0358 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srFaceCodeFormat;                               		// 0x035C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCostTokenFormat;                              		// 0x0360 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCantBuyLocked;                                		// 0x0364 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCantBuyCost;                                  		// 0x0368 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCantBuyBought;                                		// 0x036C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCantBuyRank;                                  		// 0x0370 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srExitText;                                     		// 0x0374 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srCostText;                                     		// 0x0378 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_srScarHint;                                     		// 0x037C (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_AText;                                          		// 0x0380 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_BText;                                          		// 0x0384 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_XText;                                          		// 0x0388 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              m_YText;                                          		// 0x038C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bCloseGUIButtonPressed : 1;                     		// 0x0390 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bFinished : 1;                                  		// 0x0390 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bCheckingNotifications : 1;                     		// 0x0390 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72244 ];

		return pClassPointer;
	};

	void ASRefreshDataAfterRespec ( int nCharIndex );
	void eventASOnUIWorldProcessed ( );
	void eventASOnCloseNotifications ( );
	void eventASPostRefresh ( );
	void eventASRefreshStatData ( int StatIdx, struct FString Title, int Pct, struct FString TotalTitle, int BonusPct );
	void eventASAddEvoStat ( struct FString Title, int Pct, struct FString TotalTitle, int BonusPct );
	void eventASRefreshEvoData ( int EvoIdx, struct FString EvoName, struct FString Desc, int RankIdx, int FileIdx, int State, int Cost );
	void eventASAddPowerEvo ( struct FString EvoName, struct FString Desc, int EvoRank, int EvoFile, int State, int Cost );
	void eventASRefreshPowerData ( int PowerIdx, struct FString PowerName, struct FString Desc, int State, int IconFrame, struct FString Resource );
	void eventASAddCharacterPower ( struct FString PowerName, struct FString Desc, int State, int IconFrame, struct FString Resource );
	void eventASRefreshCharData ( int CharIdx, int MemberIdx, struct FString CharName, struct FString CharClass, struct FString Face, struct FString Abbrev, struct FString Thumb, int allocated, int Spendable, struct FString XP, int Level, struct FString PrettyLevel, int PctToLevel, int Health, int Shield, struct FString ShieldTitle, int Pgn, int Rng, unsigned long bUseNewAllocatedPoints );
	void eventASAddCharacter ( unsigned long KeepAlive, int MemberIdx, struct FString CharName, struct FString CharClass, struct FString Face, struct FString Abbrev, struct FString Thumb, int allocated, int Spendable, struct FString XP, int Level, struct FString PrettyLevel, int PctToLevel, int Health, int Shield, struct FString ShieldTitle, int Pgn, int Rng );
	void eventASSetTitles ( struct FString sTitle, struct FString sAText, struct FString sBText, struct FString sXText, struct FString sYText, struct FString sExitText );
	void eventASNativeReady ( );
	void OnRespecMessageBoxConfirm ( unsigned long bAPressed, int nContext );
	void ExRespecTalents ( int MemberIdx );
	int GetNumMPRespecCards ( );
	void ExCancelHint ( );
	void ExCantBuyRank ( );
	void ExCantBuyBought ( );
	void ExCantBuyCost ( );
	void ExCantBuyLocked ( );
	void CantBuy ( void* Explanation );
	bool ShouldShowMultiplayerCharacter ( );
	int EvoChoiceIndex ( int nRankIndex, int nFileIndex );
	void PrepEvoDetails ( class Asfxpawn* MemberPawn, class USFXPowerCustomActionBase* Power, int RankIdx, int FileIdx, struct FEvoDetails* Details );
	void PrepPowerDetails ( class Asfxpawn* MemberPawn, class USFXPowerCustomActionBase* Power, struct FPowerDetails* Details );
	bool GetExperienceProgress ( int* BaseXP, int* CurrentXP, int* TargetXP );
	void PrepMemberDetails ( class Asfxpawn* MemberPawn, struct FCharDetails* MemberDetails );
	void CleanupCharacter ( );
	void PurchasePowerRank ( int nPowerIndex, int nRankIndex, int nEvoIndex );
	void AutoLevelUp ( );
	bool ChangeToCharacter ( class ABioPawn* NextCharacter );
	void InitializeSquadRecord ( );
	void ApplyCustomization ( class UObject* InData );
	void TutorialConfirm ( unsigned long bAPressed, int nContext );
	void Tutorial_ParagonRenegade ( );
	void Tutorial_BuildPoints ( );
	void NextTutorial ( );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void Update ( float fDeltaT );
	void ProcessRStickAxisInput ( float fValue );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void ExShutdownRecord ( );
	void ExCommit ( );
	void ExOpenNotifications ( );
	void ExUndo ( );
	void ExAutoLevelUp ( );
	void ExBuyRank ( int nPowerIndex, int nRankIndex, int nEvoIndex );
	void ExToggleHelmet ( int MemberIdx );
	void ExSnapCharacterFocus ( int MemberIdx );
	void ExRefreshStatData ( int BackRef, int CharRef, int PowerRef, int RankRef, int FileRef, int BarRef );
	void ExPullEvoStats ( int MemberIdx, int PowerIdx, int RankIdx, int FileIdx );
	void ExRefreshEvoData ( int BackRef, int CharRef, int PowerRef, int RankRef, int FileRef, int BarRef );
	void ExPullPowerEvos ( int MemberIdx, int PowerIdx );
	void ExRefreshPowerData ( int BackRef, int CharRef, int PowerRef, int RankRef, int FileRef, int BarRef );
	void ExPullPowers ( int MemberIdx );
	void ExRefreshCharData ( int BackRef, int CharRef, int PowerRef, int RankRef, int FileRef, int BarRef, unsigned long bUseNewAllocatedPoints );
	void ExPullCharacters ( );
	void ExPullTitles ( );
	void HandleEvent ( unsigned char nCommand, TArray< struct FString >* Parameters );
	void SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate );
	void OnCloseCallback ( );
	void OnDoneTutorialsCallback ( );
	void OnNewTutorialCallback ( );
};

UClass* USFXGUI_SquadRecord::pClassPointer = NULL;

// Class SFXGame.SFXGUI_PCSquadRecord
// 0x0000 (0x0394 - 0x0394)
class USFXGUI_PCSquadRecord : public USFXGUI_SquadRecord
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72659 ];

		return pClassPointer;
	};

	void ASRefreshDataAfterRespec ( int nCharIndex );
	void eventASOnUIWorldProcessed ( );
	void eventASOnCloseNotifications ( );
	void eventASPostRefresh ( );
	void eventASRefreshStatData ( int StatIdx, struct FString Title, int Pct, struct FString TotalTitle, int BonusPct );
	void eventASAddEvoStat ( struct FString Title, int Pct, struct FString TotalTitle, int BonusPct );
	void eventASRefreshEvoData ( int EvoIdx, struct FString EvoName, struct FString Desc, int RankIdx, int FileIdx, int State, int Cost );
	void eventASAddPowerEvo ( struct FString EvoName, struct FString Desc, int EvoRank, int EvoFile, int State, int Cost );
	void eventASRefreshPowerData ( int PowerIdx, struct FString PowerName, struct FString Desc, int State, int IconFrame, struct FString Resource );
	void eventASAddCharacterPower ( struct FString PowerName, struct FString Desc, int State, int IconFrame, struct FString Resource );
	void eventASRefreshCharData ( int CharIdx, int MemberIdx, struct FString CharName, struct FString CharClass, struct FString Face, struct FString Abbrev, struct FString Thumb, int allocated, int Spendable, struct FString XP, int Level, struct FString PrettyLevel, int PctToLevel, int Health, int Shield, struct FString ShieldTitle, int Pgn, int Rng, unsigned long bUseNewAllocatedPoints );
	void eventASAddCharacter ( unsigned long KeepAlive, int MemberIdx, struct FString CharName, struct FString CharClass, struct FString Face, struct FString Abbrev, struct FString Thumb, int allocated, int Spendable, struct FString XP, int Level, struct FString PrettyLevel, int PctToLevel, int Health, int Shield, struct FString ShieldTitle, int Pgn, int Rng );
	void eventASSetTitles ( struct FString sTitle, struct FString sAText, struct FString sBText, struct FString sXText, struct FString sYText, struct FString sExitText );
	void eventASNativeReady ( );
	void OnRespecMessageBoxConfirm ( unsigned long bAPressed, int nContext );
	void ExRespecTalents ( int MemberIdx );
	int GetNumMPRespecCards ( );
	void ExCancelHint ( );
	void ExCantBuyRank ( );
	void ExCantBuyBought ( );
	void ExCantBuyCost ( );
	void ExCantBuyLocked ( );
	void CantBuy ( void* Explanation );
	bool ShouldShowMultiplayerCharacter ( );
	int EvoChoiceIndex ( int nRankIndex, int nFileIndex );
	void PrepEvoDetails ( class Asfxpawn* MemberPawn, class USFXPowerCustomActionBase* Power, int RankIdx, int FileIdx, struct FEvoDetails* Details );
	void PrepPowerDetails ( class Asfxpawn* MemberPawn, class USFXPowerCustomActionBase* Power, struct FPowerDetails* Details );
	bool GetExperienceProgress ( int* BaseXP, int* CurrentXP, int* TargetXP );
	void PrepMemberDetails ( class Asfxpawn* MemberPawn, struct FCharDetails* MemberDetails );
	void CleanupCharacter ( );
	void PurchasePowerRank ( int nPowerIndex, int nRankIndex, int nEvoIndex );
	void AutoLevelUp ( );
	bool ChangeToCharacter ( class ABioPawn* NextCharacter );
	void InitializeSquadRecord ( );
	void ApplyCustomization ( class UObject* InData );
	void TutorialConfirm ( unsigned long bAPressed, int nContext );
	void Tutorial_ParagonRenegade ( );
	void Tutorial_BuildPoints ( );
	void NextTutorial ( );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void Update ( float fDeltaT );
	void ProcessRStickAxisInput ( float fValue );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void ExShutdownRecord ( );
	void ExCommit ( );
	void ExOpenNotifications ( );
	void ExUndo ( );
	void ExAutoLevelUp ( );
	void ExBuyRank ( int nPowerIndex, int nRankIndex, int nEvoIndex );
	void ExToggleHelmet ( int MemberIdx );
	void ExSnapCharacterFocus ( int MemberIdx );
	void ExRefreshStatData ( int BackRef, int CharRef, int PowerRef, int RankRef, int FileRef, int BarRef );
	void ExPullEvoStats ( int MemberIdx, int PowerIdx, int RankIdx, int FileIdx );
	void ExRefreshEvoData ( int BackRef, int CharRef, int PowerRef, int RankRef, int FileRef, int BarRef );
	void ExPullPowerEvos ( int MemberIdx, int PowerIdx );
	void ExRefreshPowerData ( int BackRef, int CharRef, int PowerRef, int RankRef, int FileRef, int BarRef );
	void ExPullPowers ( int MemberIdx );
	void ExRefreshCharData ( int BackRef, int CharRef, int PowerRef, int RankRef, int FileRef, int BarRef, unsigned long bUseNewAllocatedPoints );
	void ExPullCharacters ( );
	void ExPullTitles ( );
	void HandleEvent ( unsigned char nCommand, TArray< struct FString >* Parameters );
	void SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate );
	void OnCloseCallback ( );
	void OnDoneTutorialsCallback ( );
	void OnNewTutorialCallback ( );
};

UClass* USFXGUI_PCSquadRecord::pClassPointer = NULL;

// Class SFXGame.SFXGUI_PCStore
// 0x0000 (0x0460 - 0x0460)
class USFXGUI_PCStore : public USFXGUI_Store
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73423 ];

		return pClassPointer;
	};

	struct FString GetStoreHeaderImageRef ( );
	void GrantIntelReward ( );
	int eventGetResourceCount ( int nResource );
	struct FString GetResourceText ( unsigned char eResource );
	void ASInitializationFinished ( );
	void eventASRefreshChoiceEntry ( int p_index, struct FString p_ChoiceName, struct FString p_ChoiceTitle, struct FString p_ChoiceImageTitle, struct FString p_ChoiceDescription, struct FString p_ChoiceOptionalPanelItemValue, int p_ChoiceColor, int p_ChoiceResource, struct FString p_ActionText, struct FString p_ImagePath, unsigned long p_DefaultSelection, unsigned long p_Disabled, unsigned char p_DisplayType, struct FString p_Stat1Name, int p_Stat1Base, int p_Stat1Bonus, int p_Stat1Comp, struct FString p_Stat2Name, int p_Stat2Base, int p_Stat2Bonus, int p_Stat2Comp, struct FString p_Stat3Name, int p_Stat3Base, int p_Stat3Bonus, int p_Stat3Comp, struct FString p_Stat4Name, int p_Stat4Base, int p_Stat4Bonus, int p_Stat4Comp, struct FString p_Stat5Name, int p_Stat5Base, int p_Stat5Bonus, int p_Stat5Comp );
	void eventASAddChoiceEntry ( int p_index, struct FString p_ChoiceName, struct FString p_ChoiceTitle, struct FString p_ChoiceImageTitle, struct FString p_ChoiceDescription, struct FString p_ChoiceOptionalPanelItemValue, int p_ChoiceColor, int p_ChoiceResource, struct FString p_ActionText, struct FString p_ImagePath, unsigned long p_DefaultSelection, unsigned long p_Disabled, unsigned char p_DisplayType, struct FString p_Stat1Name, int p_Stat1Base, int p_Stat1Bonus, int p_Stat1Comp, struct FString p_Stat2Name, int p_Stat2Base, int p_Stat2Bonus, int p_Stat2Comp, struct FString p_Stat3Name, int p_Stat3Base, int p_Stat3Bonus, int p_Stat3Comp, struct FString p_Stat4Name, int p_Stat4Base, int p_Stat4Bonus, int p_Stat4Comp, struct FString p_Stat5Name, int p_Stat5Base, int p_Stat5Bonus, int p_Stat5Comp );
	void eventASSetInitialListSize ( int p_numItems );
	void eventASSetTitles ( struct FString sTitle, struct FString sSubtitle, struct FString sAText, struct FString sBText, struct FString sYText, int nCreditsAvailable );
	void eventASSetPlatformLayout ( int iPlatformId );
	void ASScrollInfoText ( float fValue );
	void ASStopInfoScroll ( );
	void eventOnClose ( );
	void eventOnStart ( );
	void ScrollText ( float fValue );
	void* eventGetBButtonText ( );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void DiscoverStore ( );
	void RefreshStoreGUI ( );
	void AddBonusPower ( class UClass* PowerClass );
	void ConfirmationMessageBoxInputPressed ( unsigned long bAPressed, int nContext );
	void ShowConfirmationMessageBox ( );
	void ExBuy ( int nListIndexSelected );
	bool ShouldItemBeDisabled ( struct FStoreItemData ItemData );
	int GetCalculatedItemCost ( int BaseCost );
	class UTexture2D* GetStoreItemImage ( struct FString Path );
	void OutOfStock ( );
	bool eventGetWeaponDataStats ( struct FName WeaponClassPath, TArray< struct FComparisonStat >* lstDisplayStats );
	class UClass* FindPowerClass ( struct FString PowerClassString );
	void FlagNewItems ( );
	bool ItemIsNew ( struct FStoreItemData ItemData );
	struct FName GetItemDisplayVariable ( struct FStoreItemData ItemData );
	void TalentResetHelper ( struct FString PawnName );
	struct FString FloatToString ( float Number );
	void NestedStockStore ( );
	void StockStore ( );
	void onScreenClosed ( );
	void ShutDown ( );
	void ExExitStore ( );
	void SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate );
	void PrepareStorefront ( unsigned long bInitFromScratch );
	void FinishStorePreparation ( );
	void OnWeaponUIDataLoaded ( );
	void ExPostLoad ( );
	void eventUpdate ( float fDeltaT );
	void Initialize ( class USFXGUIData_Store* InitialStoreChoiceGUIData, struct FName StoreName, class ABioPawn* PlayerPawn );
	void OnCloseCallback ( );
};

UClass* USFXGUI_PCStore::pClassPointer = NULL;

// Class SFXGame.sfxgui_playercountdown
// 0x0017 (0x0278 - 0x0261)
class Usfxgui_playercountdown : public USFXGUIMovie
{
public:
	class USFXGUIValue_ManualAnimController*           Animations[ 0x3 ];                                		// 0x0264 (0x000C) [0x0000000000000000]              
	float                                              LastBleedOutTimer;                                		// 0x0270 (0x0004) [0x0000000000000000]              
	unsigned long                                      bTappingPromptVisible : 1;                        		// 0x0274 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73427 ];

		return pClassPointer;
	};

	void ASFinishOtherPlayerRevive ( );
	void ASAbortOtherPlayerRevive ( );
	void ASPlayOtherPlayerRevive ( );
	void ASFinishThisPlayerRevive ( );
	void ASAbortThisPlayerRevive ( );
	void ASPlayThisPlayerRevive ( );
	void ASFinishDeath ( );
	void ASAbortDeath ( );
	void ASPlayDeath ( struct FString PCText );
	void OnOtherPlayerReviveFinished ( );
	void OnThisPlayerReviveFinished ( );
	void OnDeathFinished ( );
	void OnOtherPlayerReviveAborted ( );
	void OnThisPlayerReviveAborted ( );
	void OnDeathAborted ( );
	void OnDeathStarted ( );
	void ResumeAnimation ( unsigned char AnimType );
	void PauseAnimation ( unsigned char AnimType );
	void AbortAnimation ( unsigned char AnimType );
	void PlayAnimation ( unsigned char AnimType, float AnimationLength );
	void UpdateEnabledState ( );
	void eventUpdate ( float DeltaTime );
	void ShowTappingPrompt ( unsigned long bVisible, unsigned long bForce );
	void eventOnStart ( );
};

UClass* Usfxgui_playercountdown::pClassPointer = NULL;

// Class SFXGame.SFXGUI_TeamSelect
// 0x004F (0x02B0 - 0x0261)
class USFXGUI_TeamSelect : public USFXGUIMovie
{
public:
	TArray< struct FName >                             ForceInParty;                                     		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             ForceOutParty;                                    		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             DeadToParty;                                      		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      Party;                                            		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRequestExitDelegate__Delegate;                		// 0x0294 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXGUIData_TeamSelect*                      HenchmenPool;                                     		// 0x02A0 (0x0004) [0x0000000000000000]              
	class USFXGUIData_TeamSelect*                      BaseHenchPool;                                    		// 0x02A4 (0x0004) [0x0000000000000000]              
	class USFXWeaponUIDataManager*                     DataManager;                                      		// 0x02A8 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bIsFinished : 1;                                  		// 0x02AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsAborted : 1;                                   		// 0x02AC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bWasPaused : 1;                                   		// 0x02AC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bNoSelect : 1;                                    		// 0x02AC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73857 ];

		return pClassPointer;
	};

	void ASSetTotalPartySize ( int nPartySize );
	void eventASCancelConfirmation ( );
	void eventASAddPartyMemberInfo ( int HenchmanName, int Ability1, int Ability2, int Ability3, int Ability4, int Ability5, int Rank1, int Rank2, int Rank3, int Rank4, int Rank5, struct FString Weapon1, struct FString Weapon2, struct FString Weapon3, int Dossier );
	void eventASAddPartyMemberAppearance ( int Id, struct FString Selected, struct FString Unselected, unsigned long bCurrentlySelected );
	void eventASAddPartyMember ( unsigned long KeepAlive, int MemberId, struct FString MemberName, int State, int Req, unsigned long AvailableAsDLC, int Mission );
	void eventASSetSquadSize ( int Size );
	void eventASSetTitles ( struct FString Title, struct FString AText, struct FString BText, struct FString XText, struct FString YText );
	void eventASRequestNoSelect ( );
	void eventASNativeReady ( );
	struct FString GetInfoPanelCloseButtonText ( );
	void ExitScreen ( );
	void FinalizeParty ( unsigned long bAPressed, int nContext );
	void ConfirmParty ( );
	int GetPowerRank ( int PowerID, TArray< struct FPowerSaveRecord >* PowerData );
	void* GetPowerDisplayName ( int PowerID );
	struct FString GetAppearanceBonus ( int AppearanceId );
	void ExPullInfos ( int HenchId );
	void ExSelectAppearance ( int HenchId, int AppearanceId );
	void ExSelectParty ( int HenchId1, int HenchId2 );
	void OnClose ( );
	void OnStart ( );
	void ClearDelegates ( );
	void SetOnRequestExitCallback ( struct FScriptDelegate fn_OnRequestExitDelegate );
	void ExPullAppearances ( int HenchId, int IsForcedOut );
	int GetPartySize ( );
	void ExPullParty ( );
	void ExPullTitles ( );
	void ExPullSquadSize ( );
	void ForceOut ( struct FName HenchTag );
	void ForceIn ( struct FName HenchTag );
	void OnWeaponUIDataLoaded ( );
	void Initialize ( class USFXGUIData_TeamSelect* InitialHenchPool );
	void OnRequestExitDelegate ( );
};

UClass* USFXGUI_TeamSelect::pClassPointer = NULL;

// Class SFXGame.SFXGUIData_TeamSelect
// 0x006B (0x00DC - 0x0071)
class USFXGUIData_TeamSelect : public USFXGameChoiceGUIData
{
public:
	TArray< struct FSelectIdentity >                   HenchIdentities;                                  		// 0x0074 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAppearanceSet >                    SelectAppearances;                                		// 0x0080 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FPowerInfo >                        PowerInfos;                                       		// 0x008C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSelectInfo >                       SelectInfos;                                      		// 0x0098 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultImage;                                     		// 0x00A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FName                                       SelectName;                                       		// 0x00B0 (0x0008) [0x0000000000004000]              ( CPF_Config )
	void*                                              srSelectTitle;                                    		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srDefaultAButtonText;                             		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srDefaultBButtonText;                             		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srDefaultXButtonText;                             		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srDefaultYButtonText;                             		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srPartyConfirm;                                   		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srPartyCancel;                                    		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srPartyQuestion;                                  		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	void*                                              srInfoExit;                                       		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74062 ];

		return pClassPointer;
	};

};

UClass* USFXGUIData_TeamSelect::pClassPointer = NULL;

// Class SFXGame.SFXGUI_WarAssets
// 0x0027 (0x0288 - 0x0261)
class USFXGUI_WarAssets : public USFXGUIMovie
{
public:
	struct FScriptDelegate                             __OnFinished__Delegate;                           		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSwitchScreens__Delegate;                      		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	void*                                              srReadinessPercent;                               		// 0x027C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USFXGAWAssetsHandler*                        GAWAssetsHandler;                                 		// 0x0280 (0x0004) [0x0000000000000000]              
	void*                                              srWarAssetsTutorialMessage;                       		// 0x0284 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74330 ];

		return pClassPointer;
	};

	void AS_ScrollDetails ( float fValue );
	void AS_InitializeScreen ( );
	void ExSetItemRead ( int nPrimaryID, int nSecondaryID );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	struct FString GetFormattedReadinessPercent ( int nReadiness );
	struct FString GetAssetSummaryText ( );
	int GetReadinessRating ( );
	int GetEffectiveMilitaryStrength ( );
	int GetTotalMilitaryStrength ( );
	int GetMinMilitaryStrength ( );
	int GetMaxMilitaryStrength ( );
	struct FString GetAssetImageReference ( int AssetID );
	struct FString GetAssetDetailsText ( int AssetID );
	struct FString GetCategoryImageReference ( int categoryId );
	struct FString GetCategoryDetailsText ( int categoryId );
	TArray< struct FWarAssetGUIData > GetWarAssetData ( int categoryId );
	int GetCategoryStrength ( int categoryId );
	bool CategoryHasUnlockedAssets ( int categoryId );
	TArray< struct FWarAssetCategoryGUIData > GetAssetCategories ( );
	void GoToGalaxyAtWar ( );
	void Exit ( );
	void eventOnClose ( );
	void ShowTutorial ( );
	void eventOnStart ( );
	void OnSwitchScreens ( );
	void OnFinished ( );
};

UClass* USFXGUI_WarAssets::pClassPointer = NULL;

// Class SFXGame.SFXGUI_WeaponReticleSimple
// 0x000C (0x0098 - 0x008C)
class USFXGUI_WeaponReticleSimple : public USFXGUI_WeaponReticleBase
{
public:
	class UGFxValue*                                   m_oActualReticle;                                 		// 0x008C (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   m_oPipRight;                                      		// 0x0090 (0x0004) [0x0000000000000000]              
	class UGFxValue*                                   m_oPipLeft;                                       		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74424 ];

		return pClassPointer;
	};

	void eventTargetCanHitChanged ( unsigned long bInSights );
	void eventResetReticle ( unsigned long bUnsubscribe );
	void OnReticleLoaded ( );
	void eventPerformReticleHide ( unsigned long bInstant );
	void eventPerformReticleShow ( unsigned long bInstant );
};

UClass* USFXGUI_WeaponReticleSimple::pClassPointer = NULL;

// Class SFXGame.SFXGUI_WeaponReticleSimpleAlpha
// 0x0004 (0x009C - 0x0098)
class USFXGUI_WeaponReticleSimpleAlpha : public USFXGUI_WeaponReticleSimple
{
public:
	float                                              ReticleOpacity;                                   		// 0x0098 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74440 ];

		return pClassPointer;
	};

	void eventResetReticle ( unsigned long bUnsubscribe );
};

UClass* USFXGUI_WeaponReticleSimpleAlpha::pClassPointer = NULL;

// Class SFXGame.SFXPowerCustomAction_AmmoPowerBase
// 0x0000 (0x0695 - 0x0695)
class USFXPowerCustomAction_AmmoPowerBase : public Usfxpowercustomaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74619 ];

		return pClassPointer;
	};

	int GetSaveGamePowerState ( );
	void SetSaveGamePowerState ( int nState );
	struct FName GetUniquePowerPlayerVariable ( );
	void RestoreSaveState ( );
	void ReplicationDecodeDelayAndResistance ( int EncodedData, float* fDelay, unsigned char* Resistance );
	int ReplicationEncodeDelayAndResistance ( float fDelay, unsigned char Resistance );
	void OnSourcePowerBioticDetonation ( );
	struct FString GetPowerComboClassFromUniqueID ( int PowerComboTypeUniqueID );
	int GetPowerComboTypeUniqueIDFromClass ( struct FString className );
	void ClientDoPowerComboImpactFromEffect ( class AActor* oTarget, int CustomActionReactionType, struct FString EffectClassName, float DetonatorPowerRank, int MiscFlags );
	void ClientDoPowerCombo ( class UClass* EffectClass, int SourcePowerID, class ABioPawn* SourcePowerInstigator, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal );
	void ReplicatePowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal );
	void DelayedDoPowerCombo ( );
	void DoPowerCombo ( class Usfxgameeffect_powercombo* ComboEffect, class ABioPawn* TargetPawn, struct FVector HitLocation, struct FVector HitNormal, unsigned long bDelayed );
	void CheckForPowerCombo ( class AActor* Target, unsigned char Resistance, struct FVector HitLocation, struct FVector HitNormal );
	class Usfxgameeffect_powercombo* AddComboEffect ( class AActor* Target, class UClass* ComboClass, float Duration );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
	void CombatEnded ( );
	void ReplaceAnimSetWithDynamic ( class UAnimSet* DynAnimSet );
	void GetPowerAnimInfo ( class UAnimSet** AnimSet, TArray< struct FName >* AnimNames );
	void CleanUpProjectile ( class ASFXProjectile_PowerCustomAction* oProjectile );
	void ReplicatePowerComboImpact ( class ABioPawn* Target, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags );
	void ReplicatePowerSubsequentImpact ( class ABioPawn* Target, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback );
	void ReplicateImpact ( class ABioPawn* Target, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType );
	void ClientDoCustomAction ( unsigned long bForced );
	void Replicate ( );
	void PlayPowerScreenShake ( class UClass* ScreenShakeClass, struct FVector HitLocation );
	void PlayPowerControllerRumble ( class UClass* RumbleClass, struct FVector HitLocation );
	struct FVector GetDefaultClientEffectParams ( );
	void AddEvolvedRankBonus ( float Bonus, struct FPowerData* Data );
	void ApplyForceToActor ( class AActor* oActor, struct FVector vForce );
	void ApplyShieldBonus ( class ABioPawn* oPawn, float fShieldValue, unsigned long bShieldValueIsPercent, float fDuration, struct FName Category, unsigned long bRemoveEffectWhenShieldsDown );
	void ApplyHealthBonus ( class ABioPawn* oPawn, float fHealthValue, unsigned long bHealthValueIsPercent, float fDuration, struct FName Category );
	void PlayParticleSystemOnSocket ( class UParticleSystem* PS_Template, class ABioPawn* TargetPawn, struct FName SocketName, struct FRotator Rotation );
	bool HasRemainingShieldOfType ( class ABioPawn* oPawn, class UClass* ShieldClass );
	bool IsPlaceable ( class AActor* oImpacted );
	bool ApplyPermanentGameEffect ( class AActor* oTarget, class UClass* className, float fEffectValue, struct FName nmCategory, class AController* Instigator );
	bool ApplyTemporaryGameEffect ( class AActor* oTarget, class UClass* className, float fDuration, float fEffectValue, struct FName nmCategory, class AController* Instigator );
	bool IsOfRace ( class AActor* oImpacted, unsigned char eRace );
	bool CanBeRagdolledByPowers ( class ABioPawn* oPawn );
	bool ImpactPlaceable ( class AActor* oCaster, class AActor* oImpacted, struct FVector Momentum, float PlotPlaceableDamage, unsigned long bForceDamage );
	float GetPhysicsLevelResistance ( class AActor* oTarget );
	int GetPhysicsLevel ( class AActor* oImpacted, unsigned long bIgnoreResistance );
	bool IsMachineRace ( class AActor* oImpacted );
	bool ShouldUsePowerOnShields ( class ABioPawn* Target, class UClass* DamageType, struct FString* sOptionalInfo );
	void RagdollPhysicsImpact ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir );
	bool CanImpactActor ( class AActor* oActor );
	bool AddActorToImpactedList ( class AActor* oActor, struct FVector vImpactLocation, TArray< class AActor* >* ImpactedActors );
	bool DetonationHitsTarget ( struct FVector HitLocation, float MaxRange, class AActor* HitActor, struct FAreaEffectParameters DetonationParams );
	bool GetNearbyActors ( struct FVector HitLocation, float Radius, float MaxRange, struct FAreaEffectParameters Param, TArray< class AActor* >* ImpactedActors );
	void ApplyBonusToParameter ( class USFXGameEffect* Bonus, unsigned long bRemove, struct FPowerData* Parameter );
	void ApplyBonus ( struct FName Parameter, class USFXGameEffect* Bonus, unsigned long bRemove );
	void PlayImpactEffects ( class AActor* oImpacted, struct FVector ImpactLocation, struct FVector ImpactNormal );
	void PlayImpactSounds ( struct FVector ImpactLocation, class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds );
	void PlayCasterSounds ( class UWwiseEvent* BaseSound, TArray< struct FEvolvedSoundStruct >* EvolvedSounds );
	void PlayDetonationEffects ( struct FVector ImpactLocation, struct FVector ImpactNormal, class ASFXProjectile_PowerCustomAction* oProjectile );
	void PlayReleaseEffects ( );
	bool OnImpact ( unsigned char Resistance, class AActor* oImpacted, int nPreviouslyImpacted, struct FVector HitLocation, struct FVector HitNormal );
	float GetImpactForce ( class AActor* oImpacted );
	class UClass* GetNonRagdollDamageType ( );
	float GetImpactDamage ( class AActor* oImpacted, class UClass** DamageType );
	bool DoAreaExplosionForActor ( class AActor* oActor, struct FVector location, int ImpactCount, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxRagdollOverride, struct FScriptDelegate ImpactCallback, class UClass* MaxRagdollDmgTypeOverride );
	void AreaExplosion ( struct FVector location, float fRadius, float fDamage, class UClass* DamageType, float fForce, struct FAreaEffectParameters Param, int MaxImpactCount, struct FScriptDelegate ImpactCallback, int MaxRagdollOverride, class UClass* MaxRagdollDmgTypeOverride );
	void ClientDoPowerSubsequentImpact ( class AActor* oActor, int CustomActionReactionType, float Duration, int ImpactCount, float Delay, unsigned long DoCallback );
	void ClientDoPowerComboImpact ( class AActor* oActor, int CustomActionReactionType, float PowerRank, int PowerComboTypeUniqueID, int MiscFlags );
	void ClientDoCustomActionImpact ( class AActor* oActor, int ImpactCount, unsigned long bFirstTarget, struct FVector HitLocation, struct FVector HitNormal, int CustomActionReactionType );
	bool DoPowerDetonatedForActor ( class AActor* oActor, struct FVector HitLocation, struct FVector HitNormal, int nImpactCount, unsigned long bFirstTarget, class ASFXProjectile_PowerCustomAction* oProjectile );
	void OnPowerDetonated ( struct FVector HitLocation, struct FVector HitNormal, class ASFXProjectile_PowerCustomAction* oProjectile, class AActor* HitActor );
	void ReleaseBuffPower ( );
	void ReleaseMeleePower ( );
	void ReleaseInstantPower ( );
	void OnClientPowerProjectileSpawned ( class ASFXProjectile_PowerCustomAction* NewProjectile );
	class ASFXProjectile_PowerCustomAction* ReleaseProjectilePower ( );
	bool GetProjectileAttachPoint ( struct FVector* AttachPoint );
	void ReleasePower ( );
	void ResetPowerCooldown ( );
	void StartPowerCooldown ( );
	float GetPowerCooldown ( );
	void eventTickCustomAction ( float fDeltaTime );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void EndThisCustomAction ( );
	bool PlayBodyStance ( struct FBodyStance BodyStance, float fStanceBlendInTime, float fStanceBlendOutTime );
	void StartCastAnimations ( );
	void StartPower ( );
	void StartCustomAction ( );
	bool ChangeCoverAction ( );
	struct FBodyStance GetCurrentBodyStance ( );
	bool LoadAnimSet ( );
	bool CanUsePower ( class AActor* oTarget );
	bool InternalCanDoCustomAction ( class ABioPawn* SyncPawn, unsigned long bForced );
	void eventGetUsedAnimNames ( TArray< struct FName >* UsedAnims );
};

UClass* USFXPowerCustomAction_AmmoPowerBase::pClassPointer = NULL;

// Class SFXGame.SFXGUIData_TerminalNoSquadSel
// 0x0000 (0x00A4 - 0x00A4)
class USFXGUIData_TerminalNoSquadSel : public USFXGUIData_Terminal
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74815 ];

		return pClassPointer;
	};

};

UClass* USFXGUIData_TerminalNoSquadSel::pClassPointer = NULL;

// Class SFXGame.sfxguiext_weaponmods
// 0x00B8 (0x00F8 - 0x0040)
class Usfxguiext_weaponmods : public USFXGUIMovieExtension
{
public:
	TArray< int >                                      CurrentAllowedMods;                               		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FModAttachSoundInfo >               ModAttachSounds;                                  		// 0x004C (0x000C) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	struct FLinearColor                                WeaponModBaseGripColor;                           		// 0x0058 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                WeaponModBaseBodyColor;                           		// 0x0068 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                WeaponModBaseEmissiveColor;                       		// 0x0078 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentChosenMods[ 0x2 ];                         		// 0x0088 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ADynamicSMActor_Spawnable*                   ModMeshActors[ 0x2 ];                             		// 0x0090 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentMods[ 0x2 ];                               		// 0x0098 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       ModifyColorSound;                                 		// 0x00A0 (0x0008) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	struct FName                                       DefaultAttachSound;                               		// 0x00A8 (0x0008) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	class UGFxMovieInfo*                               m_oModControlMovieInfo;                           		// 0x00B0 (0x0004) [0x0000000000000000]              
	class UGFxMovieInfo*                               m_oModStatsMovieInfo;                             		// 0x00B4 (0x0004) [0x0000000000000000]              
	class Usfxgui_weaponselection*                     WeaponSelect;                                     		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXWeaponUIDataManager*                     DataManager;                                      		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXSeqAct_LaunchWeaponSelection*            Kismet;                                           		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASkeletalMeshActorSpawnable*                 WeaponMeshActor;                                  		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentModifyWeaponID;                            		// 0x00C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXGUIMovie*                                ModStatsDisplay;                                  		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXGUIMovie*                                ModModsDisplay;                                   		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPreviousMipLevelFadingValue;                   		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              ModLeftButtonText;                                		// 0x00D8 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              ModRightButtonText;                               		// 0x00DC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              ModifyWeaponText;                                 		// 0x00E0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	void*                                              srUnavailable;                                    		// 0x00E4 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              MinDisplayBonus;                                  		// 0x00E8 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                MipFadingRestoreFrameDelay;                       		// 0x00EC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                NumRemainingFramesToMipFadingRestore;             		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      ShowAllMods : 1;                                  		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      CurrentModSelectionIsValid : 1;                   		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bMonitorWeaponLoadIn : 1;                       		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74817 ];

		return pClassPointer;
	};

	void AS_ModInitModDisplay ( );
	void AS_ModSetModText ( struct FString sName, struct FString sDesc );
	void AS_ModSetModDisplay ( int nDisplay, struct FString sName, struct FString sImgPath, int nModIndex, int nLeftOption, int nRightOption, int nNumOptions, unsigned long bIsAvailable );
	void AS_Mod_SetWeaponName ( struct FString sName );
	void AS_ModAddWeaponStat ( struct FString sName, float fValue, float fBonus, float fCompare );
	void AS_ModClearWeaponStatsDisplay ( );
	void AS_SetScreensVisible ( unsigned long bVisible );
	bool IsCurrentModSelectionValid ( );
	void ChangeView ( );
	void SetWeaponMaterialColorParameter ( struct FName nmParam, struct FLinearColor Clr );
	void SetWeaponModBodyColor ( int nLevel );
	void SetWeaponModGripColor ( int nLevel );
	void SetWeaponModEmissiveColor ( int nLevel );
	void OnWeaponMeshLoaded ( );
	void UpdateWeaponMeshDisplay ( int nWeapIndex );
	void AttachModToWeapon ( unsigned char eModSlot );
	void ModMeshLoaded ( unsigned char eModSlot );
	void OnWeaponModSlot2MeshLoaded ( );
	void OnWeaponModSlot1MeshLoaded ( );
	void UpdateModMeshDisplay ( unsigned char eModSlot, int nLevel );
	struct FName GetModAttachSound ( int nModIndex );
	void UpdateModVisualization ( unsigned char eSlot );
	void ClearModVisualization ( unsigned char eSlot );
	void ExitWeaponModUI ( unsigned long bForce, unsigned long bFullShutdown );
	void SaveWeaponMods ( struct FName nmWeaponClass, struct FName nmModClass1, struct FName nmModClass2 );
	void ApplyCurrentWeaponMod ( );
	void ModUISelectMod ( int nDisplay, int nDesiredModIndex );
	void ModUIDisplayModInfoFromModIndex ( int nModIndex );
	void ModUIDisplayModInfo ( int nCurrentModIndex );
	bool UpdateModUIModsDisplay ( int nDisplay, int nOtherIndex );
	bool UpdateModUIModsDisplays ( );
	void InitializeModModsDisplay ( );
	void UpdateWeaponModStatsDisplay ( int nWeapIndex );
	void InitializeModStatsDisplay ( );
	void OpenModifyUIForWeapon ( );
	void Setup ( class UTextureRenderTarget2D* modStatsRT, class UTextureRenderTarget2D* modControlRT );
	void MonitorWeaponLoadIn ( );
	void eventUpdate ( float fDeltaT );
	void eventOnRemoved ( );
	void eventOnAdded ( );
};

UClass* Usfxguiext_weaponmods::pClassPointer = NULL;

// Class SFXGame.SFXModule_MarkerGrenade
// 0x0004 (0x0080 - 0x007C)
class USFXModule_MarkerGrenade : public USFXModule_Marker
{
public:
	float                                              VisibleDistance;                                  		// 0x007C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75235 ];

		return pClassPointer;
	};

};

UClass* USFXModule_MarkerGrenade::pClassPointer = NULL;

// Class SFXGame.SFXGUIValue_MarkerObjectiveSP
// 0x0000 (0x01A8 - 0x01A8)
class USFXGUIValue_MarkerObjectiveSP : public USFXGUIValue_MarkerObjective
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75262 ];

		return pClassPointer;
	};

	void FadeOutMarker ( );
	void PulseMarker ( );
	void PlayOnSpawnSoundEffect ( );
	void Update ( struct FSFXGUISceneView* SceneView );
	void DeferredInitialize ( );
	void Initialize ( );
};

UClass* USFXGUIValue_MarkerObjectiveSP::pClassPointer = NULL;

// Class SFXGame.SFXModule_MarkerObjectiveSP
// 0x0007 (0x0084 - 0x007D)
class USFXModule_MarkerObjectiveSP : public USFXModule_MarkerObjective
{
public:
	unsigned long                                      DisplayMarkerOnSpawn : 1;                         		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75265 ];

		return pClassPointer;
	};

};

UClass* USFXModule_MarkerObjectiveSP::pClassPointer = NULL;

// Class SFXGame.SFXPhysicalMaterialImpactEffects
// 0x0038 (0x0074 - 0x003C)
class USFXPhysicalMaterialImpactEffects : public USFXPhysicalMaterialBase
{
public:
	class UParticleSystem*                             HeavyPistol;                                      		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             AutoPistol;                                       		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             HandCannon;                                       		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SMG;                                              		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             Shotgun;                                          		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             HeavyShotgun;                                     		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FlakGun;                                          		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             AssaultRifle;                                     		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             Needler;                                          		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             Machinegun;                                       		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SniperRifle;                                      		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             AntiMatRifle;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             MassCannon;                                       		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ParticleBeam;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75646 ];

		return pClassPointer;
	};

};

UClass* USFXPhysicalMaterialImpactEffects::pClassPointer = NULL;

// Class SFXGame.SFXPhysicalMaterialImpactSounds
// 0x0078 (0x00B4 - 0x003C)
class USFXPhysicalMaterialImpactSounds : public USFXPhysicalMaterialBase
{
public:
	class UWwiseEvent*                                 HeavyPistol;                                      		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HeavyPistol_Player;                               		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 AutoPistol;                                       		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 AutoPistol_Player;                                		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HandCannon;                                       		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HandCannon_Player;                                		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 SMG;                                              		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 SMG_Player;                                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Shotgun;                                          		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Shotgun_Player;                                   		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HeavyShotgun;                                     		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HeavyShotgun_Player;                              		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 FlakGun;                                          		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 FlakGun_Player;                                   		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 AssaultRifle;                                     		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 AssaultRifle_Player;                              		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Needler;                                          		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Needler_Player;                                   		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Machinegun;                                       		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Machinegun_Player;                                		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 SniperRifle;                                      		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 SniperRifle_Player;                               		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 AntiMatRifle;                                     		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 AntiMatRifle_Player;                              		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 MassCannon;                                       		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 MassCannon_Player;                                		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 ParticleBeam;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 ParticleBeam_Player;                              		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 GraalShotgun;                                     		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 GraalShotgun_Player;                              		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75660 ];

		return pClassPointer;
	};

};

UClass* USFXPhysicalMaterialImpactSounds::pClassPointer = NULL;

// Class SFXGame.SFXPhysicalMaterialDecals
// 0x00E0 (0x011C - 0x003C)
class USFXPhysicalMaterialDecals : public USFXPhysicalMaterialBase
{
public:
	TArray< class UDecalComponent* >                   HeavyPistol;                                      		// 0x003C (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UDecalComponent* >                   AutoPistol;                                       		// 0x0048 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UDecalComponent* >                   HandCannon;                                       		// 0x0054 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UDecalComponent* >                   SMG;                                              		// 0x0060 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UDecalComponent* >                   Shotgun;                                          		// 0x006C (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UDecalComponent* >                   HeavyShotgun;                                     		// 0x0078 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UDecalComponent* >                   FlakGun;                                          		// 0x0084 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UDecalComponent* >                   AssaultRifle;                                     		// 0x0090 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UDecalComponent* >                   Needler;                                          		// 0x009C (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UDecalComponent* >                   Machinegun;                                       		// 0x00A8 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UDecalComponent* >                   SniperRifle;                                      		// 0x00B4 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UDecalComponent* >                   AntiMatRifle;                                     		// 0x00C0 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UDecalComponent* >                   MassCannon;                                       		// 0x00CC (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UDecalComponent* >                   ParticleBeam;                                     		// 0x00D8 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	float                                              HeavyPistolFadeTime;                              		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoPistolFadeTime;                               		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandCannonFadeTime;                               		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SMGFadeTime;                                      		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShotgunFadeTime;                                  		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeavyShotgunFadeTime;                             		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlakGunFadeTime;                                  		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AssaultRifleFadeTime;                             		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NeedlerFadeTime;                                  		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MachinegunFadeTime;                               		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SniperRifleFadeTime;                              		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AntiMatRifleFadeTime;                             		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MassCannonFadeTime;                               		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParticleBeamFadeTime;                             		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75677 ];

		return pClassPointer;
	};

};

UClass* USFXPhysicalMaterialDecals::pClassPointer = NULL;

// Class SFXGame.sfxwave
// 0x0020 (0x005C - 0x003C)
class Usfxwave : public UObject
{
public:
	TArray< struct FSFXWaveAssetLoadData >             AssetLoadData;                                    		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ABioWorldInfo*                               BioWorldInfo;                                     		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class Asfxplayercontroller*                        LocalPlayerController;                            		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFXWaveManager*                             WaveManager;                                      		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class Asfxwavecoordinator*                         WaveCoordinator;                                  		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      IsLoading : 1;                                    		// 0x0058 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      IsActive : 1;                                     		// 0x0058 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76410 ];

		return pClassPointer;
	};

	unsigned char AggregateAssetLoadStatus ( );
	void UpdateLoading ( );
	bool IsFinishedLoading ( );
	void BeginLoading ( );
	void PawnDestroyed ( class ABioPawn* Pawn );
	void PawnRevived ( class ABioPawn* Pawn );
	void PawnDowned ( class ABioPawn* Pawn );
	void PawnDied ( class ABioPawn* Pawn, class ABioPawn* Killer );
	void PawnSpawned ( class ABioPawn* Pawn );
	void FinishWave ( );
	bool BeginWave ( );
	void SetWaveCoordinator ( class Asfxwavecoordinator* OwnerCoordinator );
	void InitializeWave ( class ASFXWaveManager* NewWaveManager );
};

UClass* Usfxwave::pClassPointer = NULL;

// Class SFXGame.SFXInterpTrackSetEnvEffectIntensity
// 0x0000 (0x0070 - 0x0070)
class USFXInterpTrackSetEnvEffectIntensity : public USFXGameInterpTrackCustom
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76670 ];

		return pClassPointer;
	};

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

UClass* USFXInterpTrackSetEnvEffectIntensity::pClassPointer = NULL;

// Class SFXGame.SFXTreasureUseModule
// 0x0009 (0x00B9 - 0x00B0)
class USFXTreasureUseModule : public USFXModule_SavedUse
{
public:
	int                                                ResourcePercent;                                  		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseAbsuluteAmount : 1;                           		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      TreasureType;                                     		// 0x00B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76752 ];

		return pClassPointer;
	};

	bool eventIsDefaultActionPossible ( );
	void SetTargetable ( unsigned long bTargetable, unsigned long bSetTargetSave );
	void eventHandlePostBeginPlay ( );
	void OnUsed ( class AActor* User );
};

UClass* USFXTreasureUseModule::pClassPointer = NULL;

// Class SFXGame.SFXMiningNode
// 0x0022 (0x0218 - 0x01F6)
class ASFXMiningNode : public ASFXPointOfInterest
{
public:
	float                                              ImpulseMinStrength;                               		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseMaxStrength;                               		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseMinFrequency;                              		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseMaxFrequency;                              		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    PSC_GroundReticle;                                		// 0x0210 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bAlreadyMined : 1;                                		// 0x0214 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77265 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
};

UClass* ASFXMiningNode::pClassPointer = NULL;

// Class SFXGame.SFXMutator_DifficultySpeed
// 0x0000 (0x020C - 0x020C)
class ASFXMutator_DifficultySpeed : public ASFXMutator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77832 ];

		return pClassPointer;
	};

	void NetDamage ( int OriginalDamage, class APawn* injured, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum );
	void ScoreKill ( class AController* Killer, class AController* Killed );
	void ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score );
	bool PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	bool OverridePickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup, unsigned char* bAllowPickup );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool HandleRestartGame ( );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	void GetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	void InitMutator ( struct FString Options, struct FString* ErrorMessage );
	void DriverLeftVehicle ( class AVehicle* V, class APawn* P );
	bool CanLeaveVehicle ( class AVehicle* V, class APawn* P );
	void DriverEnteredVehicle ( class AVehicle* V, class APawn* P );
	void NotifyLogin ( class AController* NewPlayer );
	void NotifyLogout ( class AController* Exiting );
	struct FString ParseChatPercVar ( class AController* Who, struct FString Cmd );
	void GetServerPlayers ( struct FServerResponseLine* ServerState );
	void GetServerDetails ( struct FServerResponseLine* ServerState );
	bool CheckReplacement ( class AActor* Other );
	bool CheckRelevance ( class AActor* Other );
	bool IsRelevant ( class AActor* Other );
	bool AlwaysKeep ( class AActor* Other );
	void AddMutator ( class AMutator* M );
	void ModifyPlayer ( class APawn* Other );
	void ModifyLogin ( struct FString* Portal, struct FString* Options );
	void Mutate ( struct FString MutateString, class APlayerController* Sender );
	void eventDestroyed ( );
	bool MutatorIsAllowed ( );
	void eventPreBeginPlay ( );
};

UClass* ASFXMutator_DifficultySpeed::pClassPointer = NULL;

// Class SFXGame.SFXNav_WayPoint
// 0x000C (0x02D0 - 0x02C4)
class ASFXNav_WayPoint : public ANavigationPoint
{
public:
	float                                              m_fDelay;                                         		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMoveOffset;                                    		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bPrecisionMovement : 1;                         		// 0x02CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bMaintainVelocity : 1;                          		// 0x02CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77841 ];

		return pClassPointer;
	};

};

UClass* ASFXNav_WayPoint::pClassPointer = NULL;

// Class SFXGame.SFXNav_ActionStationWP
// 0x0000 (0x02D0 - 0x02D0)
class ASFXNav_ActionStationWP : public ASFXNav_WayPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77848 ];

		return pClassPointer;
	};

};

UClass* ASFXNav_ActionStationWP::pClassPointer = NULL;

// Class SFXGame.SFXNav_KaiLengShield
// 0x0000 (0x02C4 - 0x02C4)
class ASFXNav_KaiLengShield : public APathNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77902 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
	void ApplyCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void eventShutDown ( );
	void OnToggle ( class USeqAct_Toggle* inAction );
	bool IsOnDifferentNetwork ( class ANavigationPoint* Nav );
	bool GetAllNavInRadius ( class AActor* ChkActor, struct FVector ChkPoint, float Radius, unsigned long bSkipBlocked, int inNetworkID, struct FCylinder MinSize, TArray< class ANavigationPoint* >* out_NavList );
	class ANavigationPoint* GetNearestNavToPoint ( class AActor* ChkActor, struct FVector ChkPoint, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList );
	class ANavigationPoint* GetNearestNavToActor ( class AActor* ChkActor, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList, float MinDist );
	bool ProceedWithMove ( class APawn* Other );
	bool eventSuggestMovePreparation ( class APawn* Other );
	float eventDetourWeight ( class APawn* Other, float PathWeight );
	bool eventAccept ( class AActor* Incoming, class AActor* Source );
	int eventSpecialCost ( class APawn* Seeker, class UReachSpec* Path );
	bool CanTeleport ( class AActor* A );
	bool IsUsableAnchorFor ( class APawn* P );
	class UReachSpec* GetReachSpecTo ( class ANavigationPoint* Nav, class UClass* SpecClass );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
};

UClass* ASFXNav_KaiLengShield::pClassPointer = NULL;

// Class SFXGame.SFXNav_PlayAnimWP
// 0x0009 (0x02D9 - 0x02D0)
class ASFXNav_PlayAnimWP : public ASFXNav_WayPoint
{
public:
	struct FName                                       AnimName;                                         		// 0x02D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eStance;                                          		// 0x02D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77941 ];

		return pClassPointer;
	};

	bool OnPawnReachedWayPoint ( class APawn* oPawn );
};

UClass* ASFXNav_PlayAnimWP::pClassPointer = NULL;

// Class SFXGame.SFXNav_TurretPoint
// 0x0004 (0x02C8 - 0x02C4)
class ASFXNav_TurretPoint : public APathNode
{
public:
	unsigned long                                      bClaimed : 1;                                     		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77950 ];

		return pClassPointer;
	};

};

UClass* ASFXNav_TurretPoint::pClassPointer = NULL;

// Class SFXGame.SFXOperation_ObjectiveSpawnPoint
// 0x001F (0x0215 - 0x01F6)
class ASFXOperation_ObjectiveSpawnPoint : public ABioStartLocation
{
public:
	TArray< struct FString >                           SupportedSpawnTags;                               		// 0x01F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              Weight;                                           		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DynamicWeight;                                    		// 0x0208 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFXCombatZone*                              CombatZone;                                       		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      AnnexZoneLocation;                                		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SpawnLocation;                                    		// 0x0214 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77989 ];

		return pClassPointer;
	};

	bool IsObjectiveValidForSpawn ( class USFXOperation_ObjectiveData* ObjectiveData );
};

UClass* ASFXOperation_ObjectiveSpawnPoint::pClassPointer = NULL;

// Class SFXGame.SFXOperation_ObjectiveData
// 0x0044 (0x0080 - 0x003C)
class USFXOperation_ObjectiveData : public UObject
{
public:
	struct FString                                     ObjectiveType;                                    		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     AssetPath;                                        		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           RequiredSpawnTags;                                		// 0x0054 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFXOperation_ObjectiveMeshInfo >   MeshAssets;                                       		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ChosenMeshUniqueString;                           		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MinDistanceFromPlayerForSpawn;                    		// 0x0078 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      PerformVisibilityCheckForSpawn : 1;               		// 0x007C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78000 ];

		return pClassPointer;
	};

	bool CanSelectedMeshSpawnAtLocation ( class ASFXOperation_ObjectiveSpawnPoint* SpawnPoint );
};

UClass* USFXOperation_ObjectiveData::pClassPointer = NULL;

// Class SFXGame.SFXPowerCustomAction_ParagonRenegade
// 0x0033 (0x06C8 - 0x0695)
class USFXPowerCustomAction_ParagonRenegade : public USFXPowerCustomAction_PassivePower
{
public:
	struct FPowerData                                  ParagonRenegadeModifier;                          		// 0x0698 (0x0030) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80387 ];

		return pClassPointer;
	};

	void RecalculateAllPowerData ( unsigned long bReset );
	float GetNegotiationBonus ( );
	void ModifyReputationSkill ( int nRankToUse, float* fRepSkill );
	void ModifyIntimidateSkill ( int nRankToUse, float* fIntimidateSkill );
	void ModifyCharmSkill ( int nRankToUse, float* fCharmSkill );
	void ApplyGlobalBonus ( );
};

UClass* USFXPowerCustomAction_ParagonRenegade::pClassPointer = NULL;

// Class SFXGame.SFXProjectile_PowerCustomAction_Grenade
// 0x0020 (0x0444 - 0x0424)
class ASFXProjectile_PowerCustomAction_Grenade : public ASFXProjectile_PowerCustomAction
{
public:
	float                                              ProjectileSpeedMin;                               		// 0x0424 (0x0004) [0x0000000000000000]              
	float                                              ProjectileSpeedMax;                               		// 0x0428 (0x0004) [0x0000000000000000]              
	float                                              RotationsPerSecond;                               		// 0x042C (0x0004) [0x0000000000000000]              
	float                                              SpeedThresholdFuseLength;                         		// 0x0430 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseEventPairObject*                       FuseSound;                                        		// 0x0434 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 GrenadeWarningStartSound;                         		// 0x0438 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 GrenadeWarningStopSound;                          		// 0x043C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bExploded : 1;                                    		// 0x0440 (0x0004) [0x0000000004000008] [0x00000001] ( CPF_ExportObject | CPF_EditInline )
	unsigned long                                      bSpeedThresholdFuseSet : 1;                       		// 0x0440 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82019 ];

		return pClassPointer;
	};

	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void Recycle ( );
	void Bounce ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal );
	void Tick ( float DeltaTime );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	bool InitializePowerProjectile ( class AActor* oCaster, float fTravelSpeed, float fRadius, class Usfxpowercustomaction* oPower );
	void FuseDone ( );
};

UClass* ASFXProjectile_PowerCustomAction_Grenade::pClassPointer = NULL;

// Class SFXGame.SFXRumble_Explode
// 0x0008 (0x0048 - 0x0040)
class USFXRumble_Explode : public UWaveFormBase
{
public:
	float                                              MinDetonationRumbleDistance;                      		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              MaxDetonationRumbleDistance;                      		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83318 ];

		return pClassPointer;
	};

};

UClass* USFXRumble_Explode::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_3DCeberusStateChange
// 0x0001 (0x00B1 - 0x00B0)
class USFXSeqAct_3DCeberusStateChange : public USequenceAction
{
public:
	unsigned char                                      m_eCerberus3DStateChange;                         		// 0x00B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83715 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USFXSeqAct_3DCeberusStateChange::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_AddCombatZone
// 0x0010 (0x00C0 - 0x00B0)
class USFXSeqAct_AddCombatZone : public USequenceAction
{
public:
	TArray< class ASFXCombatZone* >                    CombatZones;                                      		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      Squad;                                            		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83719 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* USFXSeqAct_AddCombatZone::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_AIGoHere
// 0x0020 (0x00E4 - 0x00C4)
class USFXSeqAct_AIGoHere : public UBioSequenceLatentAction
{
public:
	float                                              m_fTimeOut;                                       		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInvalidateRange;                               		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    m_Pawn;                                           		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ANavigationPoint*                            m_TargetNav;                                      		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ANavigationPoint*                            m_TargetNavAtInvalidation;                        		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_TimeRemaining;                                  		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_UpdateTimer;                                    		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bInvalidateOnFlank : 1;                         		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bInstanceLogging : 1;                           		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bArrivedPinFired : 1;                           		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bTargetInvalidated : 1;                         		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83810 ];

		return pClassPointer;
	};

	bool TryInvalidateTargetFlank ( );
	bool TryInvalidateTargetRange ( float fRangeToTargetInUU );
	void ResetUpdateTimer ( );
	void ClearGoHereTarget ( );
	void InvalidateGoHereTarget ( );
	bool eventUpdateOp ( float DeltaTime );
	void eventDeactivated ( );
	void eventActivated ( );
};

UClass* USFXSeqAct_AIGoHere::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_AwardEndGameAchievements
// 0x0004 (0x00B4 - 0x00B0)
class USFXSeqAct_AwardEndGameAchievements : public USequenceAction
{
public:
	int                                                PlayedME2VarIndex;                                		// 0x00B0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83872 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* USFXSeqAct_AwardEndGameAchievements::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_AwardGAWAsset
// 0x002A (0x00EE - 0x00C4)
class USFXSeqAct_AwardGAWAsset : public UBioSequenceLatentAction
{
public:
	struct FString                                     Text;                                             		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AssetName;                                        		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	void*                                              srErrorText;                                      		// 0x00DC (0x0004) [0x0000000000000000]              
	void*                                              srAButton;                                        		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                Id;                                               		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bFinished : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bWasPaused : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      m_Skin;                                           		// 0x00EC (0x0001) [0x0000000000000000]              
	unsigned char                                      m_TextAlign;                                      		// 0x00ED (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83884 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void MessageInputPressed ( unsigned long bAPressed, int nContext );
	bool UpdateOp ( float fDeltaT );
	void Activated ( );
};

UClass* USFXSeqAct_AwardGAWAsset::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_AwardGAWAsset_Silent
// 0x0010 (0x00C0 - 0x00B0)
class USFXSeqAct_AwardGAWAsset_Silent : public USequenceAction
{
public:
	struct FString                                     AssetName;                                        		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                Id;                                               		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83911 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* USFXSeqAct_AwardGAWAsset_Silent::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_AwardGAWAssetsForLevel
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_AwardGAWAssetsForLevel : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83920 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_AwardGAWAssetsForLevel::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_AwardTreasure
// 0x0000 (0x00B1 - 0x00B1)
class USFXSeqAct_AwardTreasure : public USFXSeqAct_AwardTreasure_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83945 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* USFXSeqAct_AwardTreasure::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_CanAffordTreasure
// 0x0004 (0x00B4 - 0x00B0)
class USFXSeqAct_CanAffordTreasure : public USequenceAction
{
public:
	int                                                nState;                                           		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83962 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* USFXSeqAct_CanAffordTreasure::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_ChangeBehaviour
// 0x0011 (0x00C1 - 0x00B0)
class USFXSeqAct_ChangeBehaviour : public USequenceAction
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       nmBehaviour;                                      		// 0x00B4 (0x0008) [0x0000000000000000]              
	class AActor*                                      oPawn;                                            		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eBehaviour;                                       		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83970 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USFXSeqAct_ChangeBehaviour::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_CharCreateCrust
// 0x0000 (0x00C0 - 0x00C0)
class USFXSeqAct_CharCreateCrust : public USeqAct_Latent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83977 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
	void AbortFor ( class AActor* latentActor, unsigned long bCancel );
};

UClass* USFXSeqAct_CharCreateCrust::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_CheckResourceBudget
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_CheckResourceBudget : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83979 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_CheckResourceBudget::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_ChooseLoadoutBase
// 0x0100 (0x01C0 - 0x00C0)
class USFXSeqAct_ChooseLoadoutBase : public USeqAct_Latent
{
public:
	TArray< class UBioSFHandler_ChoiceGUI* >           MenuStack;                                        		// 0x00C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UClass* >                            ModMenu_ModClasses;                               		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ShepardImage;                                     		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            LoadoutWeapons;                                   		// 0x00E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FLoadoutWeaponInfo >                SubMenuEnabledWeapons;                            		// 0x00F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             AvailableHenchmen;                                		// 0x00FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      WeaponMenuEnabledWeaponIDs;                       		// 0x0108 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFinished__Delegate;                           		// 0x0114 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      ModMenu_WeaponClass;                              		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                SubMenuWeaponIdx;                                 		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	void*                                              srButtonText_Choose;                              		// 0x0128 (0x0004) [0x0000000000000000]              
	void*                                              srButtonText_Exit;                                		// 0x012C (0x0004) [0x0000000000000000]              
	void*                                              srButtonText_SquadWeapons;                        		// 0x0130 (0x0004) [0x0000000000000000]              
	void*                                              srButtonText_CustomizeSquadWeapons;               		// 0x0134 (0x0004) [0x0000000000000000]              
	void*                                              srButtonText_CustomizeWeapons;                    		// 0x0138 (0x0004) [0x0000000000000000]              
	void*                                              srButtonText_Accept;                              		// 0x013C (0x0004) [0x0000000000000000]              
	void*                                              srButtonText_Back;                                		// 0x0140 (0x0004) [0x0000000000000000]              
	void*                                              srWeaponMenuSubHeading;                           		// 0x0144 (0x0004) [0x0000000000000000]              
	void*                                              srLeftBracketToken;                               		// 0x0148 (0x0004) [0x0000000000000000]              
	void*                                              srRightBracketToken;                              		// 0x014C (0x0004) [0x0000000000000000]              
	void*                                              srWeaponClassTokenString;                         		// 0x0150 (0x0004) [0x0000000000000000]              
	void*                                              srClassDescriptionTokenString;                    		// 0x0154 (0x0004) [0x0000000000000000]              
	void*                                              srPawnActiveWeaponsString;                        		// 0x0158 (0x0004) [0x0000000000000000]              
	void*                                              srShepardNameString;                              		// 0x015C (0x0004) [0x0000000000000000]              
	void*                                              srSingleCustomToken;                              		// 0x0160 (0x0004) [0x0000000000000000]              
	void*                                              srWeaponDescriptionTokenString;                   		// 0x0164 (0x0004) [0x0000000000000000]              
	void*                                              srModsEntryName;                                  		// 0x0168 (0x0004) [0x0000000000000000]              
	void*                                              srModsEntryDescription;                           		// 0x016C (0x0004) [0x0000000000000000]              
	void*                                              srModsMenuSubTitle;                               		// 0x0170 (0x0004) [0x0000000000000000]              
	void*                                              srModsSubMenuSubTitle;                            		// 0x0174 (0x0004) [0x0000000000000000]              
	void*                                              srSingleCustomToken01;                            		// 0x0178 (0x0004) [0x0000000000000000]              
	void*                                              srSingleCustomToken02;                            		// 0x017C (0x0004) [0x0000000000000000]              
	void*                                              srSingleCustomToken03;                            		// 0x0180 (0x0004) [0x0000000000000000]              
	void*                                              srModTokenizedName;                               		// 0x0184 (0x0004) [0x0000000000000000]              
	void*                                              srModAttachDetach;                                		// 0x0188 (0x0004) [0x0000000000000000]              
	void*                                              srModInstalled;                                   		// 0x018C (0x0004) [0x0000000000000000]              
	int                                                ModsTopMenuIndex;                                 		// 0x0190 (0x0004) [0x0000000000000000]              
	int                                                ModsSelectedWeapon;                               		// 0x0194 (0x0004) [0x0000000000000000]              
	void*                                              srWeaponGroupEntryName;                           		// 0x0198 (0x0004) [0x0000000000000000]              
	void*                                              srWeaponGroupEntryDescription;                    		// 0x019C (0x0004) [0x0000000000000000]              
	void*                                              srWeaponGroupTokenizedName;                       		// 0x01A0 (0x0004) [0x0000000000000000]              
	void*                                              srWeaponGroupActive;                              		// 0x01A4 (0x0004) [0x0000000000000000]              
	void*                                              srWeaponGroupRequired;                            		// 0x01A8 (0x0004) [0x0000000000000000]              
	void*                                              srWeaponGroupSubTitle;                            		// 0x01AC (0x0004) [0x0000000000000000]              
	int                                                WeaponGroupSelection;                             		// 0x01B0 (0x0004) [0x0000000000000000]              
	class UWwiseEvent*                                 WeaponEquipSound;                                 		// 0x01B4 (0x0004) [0x0000000000000000]              
	int                                                CurrentPawn;                                      		// 0x01B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bFinished : 1;                                  		// 0x01BC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bAllHenchmen : 1;                               		// 0x01BC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83981 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventUpdate ( float DeltaTime );
	void Activated ( );
	void RefillAmmo ( );
	void eventDeactivated ( );
	struct FHenchmanInfoStruct GetHenchmanInfo ( struct FName HenchClassName );
	void PrepareHenchmanRecords ( struct FName Tag );
	void BuildPawnWeaponList ( int PawnID, struct FSFXChoiceEntry* Entry );
	void ShowCharacterMenu ( );
	void CharacterMenuHandler ( unsigned long bAPressed, int nContext );
	void PreparePlayerLoadout ( );
	void PrepareHenchmanLoadout ( int HenchIdx );
	class UTexture2D* FindImage ( struct FString Path );
	void ShowWeaponsTopMenu ( );
	void ApplyPlayerWeaponMods ( );
	void TopMenuHandler ( unsigned long bAPressed, int nContext );
	void ApplyHenchmanLoadout ( int HenchIdx );
	void ApplyPlayerLoadout ( );
	int GetWeaponClassUnlockedCount ( int GroupIdx );
	bool IsPawnUsingWeaponGroup ( int PawnID, unsigned char WeaponGroupID );
	void SubMenuHandler ( unsigned long bAPressed, int nContext );
	void ShowWeaponSubMenu ( int GroupIdx );
	void WeaponGroupInputHandler ( unsigned long bAPressed, int nContext );
	void ShowWeaponGroupMenu ( int nSelection );
	void ModsSubMenuHandler ( unsigned long bAPressed, int nContext );
	void ShowModsSubMenu ( int GroupIdx, int DefaultSelectionIndex );
	void ModsTopMenuHandler ( unsigned long bAPressed, int nContext );
	void ShowModsTopMenu ( );
	class UBioSFHandler_ChoiceGUI* PopChoiceGUI ( );
	class UBioSFHandler_ChoiceGUI* PushChoiceGUI ( );
	void PlayEquipSound ( );
	void OnFinished ( );
};

UClass* USFXSeqAct_ChooseLoadoutBase::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_CloseGalaxyMap
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_CloseGalaxyMap : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84236 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_CloseGalaxyMap::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_DefendActor
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_DefendActor : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84254 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_DefendActor::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_FlushAsyncWork
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_FlushAsyncWork : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84326 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_FlushAsyncWork::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_ForceCombatOn
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_ForceCombatOn : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84333 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_ForceCombatOn::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_GenerateVocEvent
// 0x0011 (0x00C1 - 0x00B0)
class USFXSeqAct_GenerateVocEvent : public USequenceAction
{
public:
	class AActor*                                      oInstigator;                                      		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    oRecipient;                                       		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDelay;                                           		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fChanceToPlayMod;                                 		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      oEventID;                                         		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84339 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	class ABioPawn* GetBioPawn ( class AActor* oTarget );
	void Activated ( );
};

UClass* USFXSeqAct_GenerateVocEvent::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_GetCurrentGoal
// 0x0008 (0x00B8 - 0x00B0)
class USFXSeqAct_GetCurrentGoal : public USequenceAction
{
public:
	class ASFXNav_GoalPoint*                           oGoal;                                            		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                nPriority;                                        		// 0x00B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84354 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* USFXSeqAct_GetCurrentGoal::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_GetTreasureImage
// 0x0008 (0x00B8 - 0x00B0)
class USFXSeqAct_GetTreasureImage : public USequenceAction
{
public:
	int                                                nTreasureId;                                      		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  oImage;                                           		// 0x00B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84361 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* USFXSeqAct_GetTreasureImage::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_GivePlotWeapon
// 0x001E (0x00DE - 0x00C0)
class USFXSeqAct_GivePlotWeapon : public USeqAct_Latent
{
public:
	class UClass*                                      WeaponClass;                                      		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	void*                                              srText;                                           		// 0x00C4 (0x0004) [0x0000000000000000]              
	void*                                              srAButton;                                        		// 0x00C8 (0x0004) [0x0000000000000000]              
	void*                                              srNoSquadMembers;                                 		// 0x00CC (0x0004) [0x0000000000000000]              
	void*                                              ShepardName;                                      		// 0x00D0 (0x0004) [0x0000000000000000]              
	void*                                              srSquadListTokens;                                		// 0x00D4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAutoEquip : 1;                                   		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShowPopup : 1;                                   		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bFinished : 1;                                  		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bWasPaused : 1;                                 		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned char                                      m_Skin;                                           		// 0x00DC (0x0001) [0x0000000000000000]              
	unsigned char                                      m_TextAlign;                                      		// 0x00DD (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84370 ];

		return pClassPointer;
	};

	void eventPreVersionUpdated ( int OldVersion, int NewVersion );
	int eventGetObjClassVersion ( );
	void MessageInputPressed ( unsigned long bAPressed, int nContext );
	bool eventUpdate ( float DeltaTime );
	struct FString BuildSquadMemberList ( class UClass* WClass );
	void DisplayMessageBox ( );
	void Activated ( );
};

UClass* USFXSeqAct_GivePlotWeapon::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_InitMainMenu
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_InitMainMenu : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84456 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_InitMainMenu::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_InterruptCustomAction
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_InterruptCustomAction : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84461 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_InterruptCustomAction::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_LinkLighting
// 0x0004 (0x00B4 - 0x00B0)
class USFXSeqAct_LinkLighting : public USequenceAction
{
public:
	unsigned long                                      bLinkShadows : 1;                                 		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLinkEnvironment : 1;                             		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84497 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USFXSeqAct_LinkLighting::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_LinkToSaveBool
// 0x000C (0x00BC - 0x00B0)
class USFXSeqAct_LinkToSaveBool : public USequenceAction
{
public:
	class AActor*                                      oActor;                                           		// 0x00B0 (0x0004) [0x0000000000000000]              
	class USeqVar_Bool*                                oTargetBool;                                      		// 0x00B4 (0x0004) [0x0000000000000000]              
	class USeqVar_Bool*                                oCombatTargetBool;                                		// 0x00B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84510 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* USFXSeqAct_LinkToSaveBool::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_MainMenu
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_MainMenu : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84567 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_MainMenu::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_MakeLevelLive
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_MakeLevelLive : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84573 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_MakeLevelLive::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_RemoveCombatZone
// 0x0010 (0x00C0 - 0x00B0)
class USFXSeqAct_RemoveCombatZone : public USequenceAction
{
public:
	TArray< class ASFXCombatZone* >                    CombatZones;                                      		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      Squad;                                            		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84616 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* USFXSeqAct_RemoveCombatZone::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_ResearchChoiceGUI
// 0x01E0 (0x02A4 - 0x00C4)
class USFXSeqAct_ResearchChoiceGUI : public UBioSequenceLatentAction
{
public:
	struct FTechData                                   m_ChosenTechData;                                 		// 0x00C4 (0x011C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTechData >                         m_TechChoices;                                    		// 0x01E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTechData >                         m_ResearchChoices;                                		// 0x01EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTechData >                         m_ResearchSubMenuChoices;                         		// 0x01F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSFXChoiceEntry >                   m_TopLevelChoices;                                		// 0x0204 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFXChoiceEntry >                   m_TechTopChoices;                                 		// 0x0210 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFXChoiceEntry >                   m_ResearchTopChoices;                             		// 0x021C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FResearchMenu >                     ResearchSubMenus;                                 		// 0x0228 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UBioSFHandler_ChoiceGUI*                     m_ChoiceGUIHandler;                               		// 0x0234 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXGameChoiceGUIData_Research*              m_ChoiceGUIData;                                  		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBioSFHandler_MessageBox*                    m_oMsgBox;                                        		// 0x023C (0x0004) [0x0000000000000000]              
	void*                                              srText;                                           		// 0x0240 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srErrorAButton;                                   		// 0x0244 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srErrorCanNotAfford;                              		// 0x0248 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srErrorDoNotQualify;                              		// 0x024C (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srErrorKnown;                                     		// 0x0250 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srTechNameLabel;                                  		// 0x0254 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srResearchConfirmMessage;                         		// 0x0258 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srResearchConfirm;                                		// 0x025C (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srResearchCancel;                                 		// 0x0260 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srEezo;                                           		// 0x0264 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srPlatinum;                                       		// 0x0268 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srPalladium;                                      		// 0x026C (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srIridium;                                        		// 0x0270 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                nLastUnlockedResearch;                            		// 0x0274 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                nLastUnlockedTech;                                		// 0x0278 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srResearchDescription;                            		// 0x027C (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srResearchTokenizedDescriptionPlural;             		// 0x0280 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srResearchTokenizedDescriptionSingular;           		// 0x0284 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srResearchTokenizedDescriptionResources;          		// 0x0288 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srUpgradeTokenizedDescription;                    		// 0x028C (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srTokenizedResearchCategory;                      		// 0x0290 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srTokenizedResearchCategoryCounter;               		// 0x0294 (0x0004) [0x0000000000000002]              ( CPF_Const )
	void*                                              srTopLevelAButton;                                		// 0x0298 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      m_bFinished : 1;                                  		// 0x029C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bAborted : 1;                                   		// 0x029C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bWasPaused : 1;                                 		// 0x029C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bDidResearch : 1;                                 		// 0x029C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bMessageBoxActivated : 1;                       		// 0x029C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned char                                      mode;                                             		// 0x02A0 (0x0001) [0x0000000000000000]              
	unsigned char                                      RMode;                                            		// 0x02A1 (0x0001) [0x0000000000000000]              
	unsigned char                                      InitialMode;                                      		// 0x02A2 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      InitialResearchMode;                              		// 0x02A3 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84625 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void TopLevelChosen ( );
	void ExitChosen ( );
	void DoResearch ( );
	void TechChosen ( );
	void TechMenuChosen ( );
	void ResearchMenuChosen ( );
	void MessageInputPressed ( unsigned long bAPressed, int nContext );
	void MessageInputPressedResearch ( unsigned long bAPressed, int nContext );
	void MessageInputPressedError ( unsigned long bAPressed, int nContext );
	void ShowResearchMessageBox ( struct FSTreasure stTreasure, struct FSTech stTech );
	void ShowErrorMessageBox ( void* srError );
	void HandleInput_Research ( unsigned long bAPressed, int nContext );
	void HandleInput_Tech ( unsigned long bAPressed, int nContext );
	void HandleInput_TopLevel ( unsigned long bAPressed, int nContext );
	void ExitGui ( );
	void ChoiceGUIInputPressed ( unsigned long bAPressed, int nContext );
	bool UpdateOp ( float fDeltaT );
	void SetupTech ( );
	struct FString GetResearchDescription ( struct FTechData ResearchData );
	struct FString GetResearchCanAffordString ( struct FTechData ResearchData );
	struct FString GetResearchQualifiesForString ( struct FTechData ResearchData );
	struct FString TokenizeResearchString ( int nLevel, void* srString );
	void SetupResearch ( struct FResearchMenu Menu );
	void TokenizeTechData ( int nLevel, struct FTechData* Data );
	void SetupTop ( );
	void SetupChoiceGUI ( );
	bool RenderModeResearch ( );
	bool RenderModeTech ( );
	bool RenderModeTopLevel ( );
	void Reset ( );
	void SetupTreasureData ( );
	void eventActivated ( );
	void eventDeactivated ( );
};

UClass* USFXSeqAct_ResearchChoiceGUI::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_SetDoorState
// 0x0010 (0x00D4 - 0x00C4)
class USFXSeqAct_SetDoorState : public UBioSequenceLatentAction
{
public:
	class ASFXDoor*                                    m_Door;                                           		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ActivatedStartTime;                               		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              MaxWaitTime;                                      		// 0x00CC (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bInstantTransition : 1;                         		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceFireSuccess : 1;                            		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84826 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool UpdateOp ( float fDeltaT );
	void SetDoorState ( unsigned char ToState, unsigned long bEnableDoor );
	void eventActivated ( );
};

UClass* USFXSeqAct_SetDoorState::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_SetDoorType
// 0x0005 (0x00B5 - 0x00B0)
class USFXSeqAct_SetDoorType : public USequenceAction
{
public:
	class ASFXDoor*                                    m_Door;                                           		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_DoorType;                                       		// 0x00B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84844 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};

UClass* USFXSeqAct_SetDoorType::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_SetGoalPriority
// 0x0010 (0x00C0 - 0x00B0)
class USFXSeqAct_SetGoalPriority : public USequenceAction
{
public:
	class UObject*                                     m_oTarget;                                        		// 0x00B0 (0x0004) [0x0000000000000000]              
	class ASFXNav_GoalPoint*                           m_oGoal;                                          		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                m_nSetPriority;                                   		// 0x00B8 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bResetPriorityToDefault : 1;                    		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84851 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* USFXSeqAct_SetGoalPriority::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_SetPawnVocState
// 0x0004 (0x00B4 - 0x00B0)
class USFXSeqAct_SetPawnVocState : public USequenceAction
{
public:
	unsigned long                                      bVocState : 1;                                    		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84858 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* USFXSeqAct_SetPawnVocState::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_SetTargetable
// 0x0004 (0x00B4 - 0x00B0)
class USFXSeqAct_SetTargetable : public USequenceAction
{
public:
	unsigned long                                      bTargetable : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCombatTargetable : 1;                            		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84870 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* USFXSeqAct_SetTargetable::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_SetTreasure
// 0x0009 (0x00B9 - 0x00B0)
class USFXSeqAct_SetTreasure : public USequenceAction
{
public:
	int                                                ResourcePercent;                                  		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTargetable : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOverrideResource : 1;                            		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTreasureTypeOverride : 1;                        		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      TreasureType;                                     		// 0x00B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84879 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* USFXSeqAct_SetTreasure::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_SetWeaponVisibility
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_SetWeaponVisibility : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84892 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_SetWeaponVisibility::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_ShowCharacterRecordGUI
// 0x0004 (0x00C8 - 0x00C4)
class USFXSeqAct_ShowCharacterRecordGUI : public UBioSequenceLatentAction
{
public:
	unsigned long                                      m_bIsFinished : 1;                                		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84898 ];

		return pClassPointer;
	};

	void eventDeactivated ( );
	void onScreenClosed ( );
	bool UpdateOp ( float fDeltaT );
	void eventActivated ( );
};

UClass* USFXSeqAct_ShowCharacterRecordGUI::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_ShowOptionsGUI
// 0x0005 (0x00C9 - 0x00C4)
class USFXSeqAct_ShowOptionsGUI : public UBioSequenceLatentAction
{
public:
	unsigned long                                      m_bIsFinished : 1;                                		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      OptionsGUIMode;                                   		// 0x00C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84914 ];

		return pClassPointer;
	};

	void eventDeactivated ( );
	void onScreenClosed ( );
	bool UpdateOp ( float fDeltaT );
	void eventActivated ( );
};

UClass* USFXSeqAct_ShowOptionsGUI::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_StoreGUI
// 0x0014 (0x00D8 - 0x00C4)
class USFXSeqAct_StoreGUI : public UBioSequenceLatentAction
{
public:
	class UClass*                                      StorefrontClass;                                  		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFXGUI_Store*                               m_StoreGUIHandler;                                		// 0x00C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFXGUIData_Store*                           m_StoreStockData;                                 		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxMovieInfo*                               m_StoreGUIResource;                               		// 0x00D0 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bFinished : 1;                                  		// 0x00D4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bAborted : 1;                                   		// 0x00D4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bWasPaused : 1;                                 		// 0x00D4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84959 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void ExitStore ( );
	bool UpdateOp ( float fDeltaT );
	void SetupStock ( );
	void ResetStorefront ( );
	void eventActivated ( );
	void eventDeactivated ( );
};

UClass* USFXSeqAct_StoreGUI::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_ToggleAutoHints
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_ToggleAutoHints : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84984 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_ToggleAutoHints::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_ToggleBlinking
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_ToggleBlinking : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84988 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_ToggleBlinking::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_ToggleInjuredShepardMode
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_ToggleInjuredShepardMode : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85024 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_ToggleInjuredShepardMode::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_TogglePrototyping
// 0x0000 (0x00B0 - 0x00B0)
class USFXSeqAct_TogglePrototyping : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85029 ];

		return pClassPointer;
	};

};

UClass* USFXSeqAct_TogglePrototyping::pClassPointer = NULL;

// Class SFXGame.SFXSeqAct_WaitForPlayerSpawn
// 0x0004 (0x00C4 - 0x00C0)
class USFXSeqAct_WaitForPlayerSpawn : public USeqAct_Latent
{
public:
	unsigned long                                      bWaitForPlayerSpawn : 1;                          		// 0x00C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85052 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
	class ABioPawn* GetPlayerPawn ( );
};

UClass* USFXSeqAct_WaitForPlayerSpawn::pClassPointer = NULL;

// Class SFXGame.SFXSeqCond_GetDifficulty
// 0x0007 (0x009C - 0x0095)
class USFXSeqCond_GetDifficulty : public USequenceCondition
{
public:
	class AActor*                                      Player;                                           		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85088 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};

UClass* USFXSeqCond_GetDifficulty::pClassPointer = NULL;

// Class SFXGame.SFXSeqCond_HasPlayerStart
// 0x0000 (0x0095 - 0x0095)
class USFXSeqCond_HasPlayerStart : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85095 ];

		return pClassPointer;
	};

	void ForceActivateInput ( int InputIdx );
	class AController* GetController ( class AActor* TheActor );
	class APawn* GetPawn ( class AActor* TheActor );
	void Reset ( );
	void PublishLinkedVariableValues ( );
	void PopulateLinkedVariableValues ( );
	void eventPreVersionUpdated ( int OldVersion, int NewVersion );
	void eventVersionUpdated ( int OldVersion, int NewVersion );
	void SetStringRefVars ( struct FString sLink, void* srValue );
	void SetNameVars ( struct FString sLink, struct FName sValue );
	void SetObjectVars ( struct FString sLink, class UObject* oValue );
	void SetStringVars ( struct FString sLink, struct FString sValue );
	void SetFloatVars ( struct FString sLink, float fValue );
	void SetIntVars ( struct FString sLink, int nValue );
	void SetBoolVars ( struct FString sLink, unsigned long bValue );
	void eventDeactivated ( );
	void eventActivated ( );
	bool ActivateNamedOutputLink ( struct FString LinkDesc );
	bool ActivateOutputLink ( int OutputIdx );
	void GetStringRefVars ( struct FString sDescription, TArray< void* >* aStringRef );
	void GetNameVars ( struct FString inDesc, TArray< struct FName >* nameVars );
	void GetStringVars ( struct FString inDesc, TArray< struct FString >* strVars );
	void GetFloatVars ( struct FString inDesc, TArray< float >* floatVars );
	void GetIntVars ( struct FString inDesc, TArray< int >* intVars );
	void LinkedVariables ( class UClass* VarClass, struct FString inDesc, class USequenceVariable** OutVariable );
	void GetBoolVars ( struct FString inDesc, TArray< unsigned char >* boolVars );
	void GetInterpDataVars ( struct FString inDesc, TArray< class UInterpData* >* outIData );
	void GetObjectVars ( struct FString inDesc, TArray< class UObject* >* objVars );
	void GetLinkedObjects ( class UClass* ObjectType, unsigned long bRecurse, TArray< class USequenceObject* >* out_Objects );
	bool HasLinkedOps ( unsigned long bConsiderInputLinks );
};

UClass* USFXSeqCond_HasPlayerStart::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_HordeEnemyKilled
// 0x0000 (0x00D2 - 0x00D2)
class USFXSeqEvt_HordeEnemyKilled : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85117 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USFXSeqEvt_HordeEnemyKilled::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_HordeWaveEnd
// 0x0000 (0x00D2 - 0x00D2)
class USFXSeqEvt_HordeWaveEnd : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85119 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USFXSeqEvt_HordeWaveEnd::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_HordeWaveStart
// 0x0000 (0x00D2 - 0x00D2)
class USFXSeqEvt_HordeWaveStart : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85121 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USFXSeqEvt_HordeWaveStart::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_LeavingStasis
// 0x0000 (0x00D2 - 0x00D2)
class USFXSeqEvt_LeavingStasis : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85125 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USFXSeqEvt_LeavingStasis::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_ProtoInputTrap
// 0x0000 (0x00D2 - 0x00D2)
class USFXSeqEvt_ProtoInputTrap : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85131 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USFXSeqEvt_ProtoInputTrap::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_Tutorial
// 0x0000 (0x00D2 - 0x00D2)
class USFXSeqEvt_Tutorial : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85152 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USFXSeqEvt_Tutorial::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_VehicleMiningFailure
// 0x0000 (0x00D2 - 0x00D2)
class USFXSeqEvt_VehicleMiningFailure : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85154 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USFXSeqEvt_VehicleMiningFailure::pClassPointer = NULL;

// Class SFXGame.SFXSeqEvt_VehicleMiningSuccess
// 0x0000 (0x00D2 - 0x00D2)
class USFXSeqEvt_VehicleMiningSuccess : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85156 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USFXSeqEvt_VehicleMiningSuccess::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_PCAreaMap
// 0x0000 (0x0370 - 0x0370)
class USFXSFHandler_PCAreaMap : public USFXSFHandler_AreaMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85882 ];

		return pClassPointer;
	};

	void ASSetTriggerDisplay ( unsigned long bShowingBumpers );
	void ASOnStartScrollLeft ( );
	void ASOnStartScrollRight ( );
	void ASScrollDrawer ( float nScroll );
	void ASSetMapData ( TArray< struct FString > NewMapAssetList, TArray< struct FString > NewMapLayoutList, TArray< struct FString > NewDrawerTextList, int NewMapIndex );
	void ASSetPlayerLocRot ( float nPxX, float nPxY, float nRotation );
	void ASOnBeginClose ( );
	void ScrollLeft ( );
	void ScrollRight ( );
	void RemoveDOFEffect ( );
	void AddDOFEffect ( );
	void CloseMap ( );
	void OnBeginClose ( );
	struct FString GetDrawerText ( class USFXAreaMapData* oMapData, unsigned char Floor );
	void ProcessPlayer ( class USFXAreaMapData* oMapData );
	void SetMap ( class USFXAreaMapData* oMapData );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void ShowAreaMapCharactersHint ( );
	void ShowAreaMapHint ( );
	bool ShowHint ( struct FName HintName );
	bool Initialize ( unsigned long bFromBrowserWheel );
	void PauseMenuAdditionalProcessing ( );
	void OnPanelAdded ( );
};

UClass* USFXSFHandler_PCAreaMap::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_PCEANetworking
// 0x0000 (0x0370 - 0x0370)
class USFXSFHandler_PCEANetworking : public USFXSFHandler_EANetworking
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85885 ];

		return pClassPointer;
	};

	void AS_SetActiveInputField ( struct FString sText );
	void GFxScreenVisibilityChange ( unsigned long bNewValue );
	void OnRedeemCodeConfirmationResult ( unsigned char eReturnEnum );
	void KeyboardEntryComplete ( unsigned long bOK, struct FString sText );
	void EnterCode ( struct FString sDefault );
	void EnterPassword ( struct FString sDefault );
	void EnterEmail ( struct FString sDefault );
	void eventOnPanelRemoved ( );
	void eventOnPanelAdded ( );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void onExternalInitialize ( );
	void ClearDelegates ( );
	void SubmitCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, unsigned long bSubmit );
	void SubmitCerberusWelcomeMessage ( );
	void SubmitParentEmail ( unsigned long bContinue, struct FString ParentEmail );
	void SubmitAccountDemographics ( unsigned long bContinue, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode );
	void SubmitRedeemCode ( unsigned long bContinue, struct FString i_sCode );
	void SubmitCerberusIntro ( unsigned char eReturnCode );
	void SubmitNucleusWelcomeMessage ( );
	void SubmitTermsOfService ( unsigned long bAccept );
	void SubmitCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bSubmit );
	void SubmitEmailPasswordMismatch ( struct FString email, struct FString Password, unsigned char eReturnCode );
	void SubmitMessageBox ( unsigned char eReturnEnum );
	void SubmitNucleusLogin ( struct FString email, struct FString Password, unsigned char eReturnCode );
	void SubmitIntroPage ( unsigned long bContinue );
	void OnGFxScreenVisibilityChange ( unsigned long bNewValue );
	void GuiCallback_SubmitParentEmail ( unsigned long bContinue, struct FString ParentEmail );
	void GuiCallback_SubmitAccountDemographics ( unsigned long bContinue, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode );
	void GuiCallback_SubmitEmailPasswordMismatch ( struct FString email, struct FString Password, unsigned char eReturnCode );
	void GuiCallback_SubmitCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, unsigned long bSubmit );
	void GuiCallback_SubmitCerberusWelcomeMessage ( );
	void GuiCallback_SubmitRedeemCode ( unsigned long bContinue, struct FString i_sCode );
	void GuiCallback_SubmitCerberusIntro ( unsigned char eReturnCode );
	void GuiCallback_SubmitNucleusWelcomeMessage ( );
	void GuiCallback_SubmitTermsOfService ( unsigned long bAccept );
	void GuiCallback_SubmitCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bSubmit );
	void GuiCallback_SubmitRedeemCodeConfirmation ( unsigned char eReturnEnum );
	void GuiCallback_SubmitMessageBox ( unsigned char eReturnEnum );
	void GuiCallback_SubmitNucleusLogin ( struct FString email, struct FString Password, unsigned char eReturnCode );
	void GuiCallback_SubmitIntroPage ( unsigned long bContinue );
	void ShowParentEmail ( );
	void ShowAccountDemographics ( TArray< struct FString > m_CountryCodeList, TArray< struct FString > m_CountryDisplayList );
	void ShowEmailPasswordMismatch ( struct FString email, struct FString Password );
	void ShowCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, TArray< struct FString > m_CountryCodeList, TArray< struct FString > m_CountryDisplayList );
	void ShowCerberusWelcomeMessage ( );
	void ShowRedeemCode ( );
	void ShowCerberusIntro ( );
	void ShowNucleusWelcomeMessage ( );
	void ShowTermsOfService ( struct FString i_sTermsOfService, struct FString i_sPrivacyPolicy, unsigned long bTOSChanged );
	void ShowCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bUnderage );
	void eventShowRedeemCodeConfirmation ( );
	void ShowMessageBox ( struct FString sTitle, struct FString sMessage, struct FString sButton1Text, struct FString sButton2Text, struct FString sButton3Text );
	void ShowNucleusLogin ( struct FString email, struct FString Password, int eScreenState );
	void ShowIntroPage ( );
};

UClass* USFXSFHandler_PCEANetworking::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_PCHUD
// 0x0006 (0x06D4 - 0x06CE)
class USFXSFHandler_PCHUD : public USFXSFHandler_HUD
{
public:
	void*                                              m_srPOIAction;                                    		// 0x06D0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85888 ];

		return pClassPointer;
	};

	struct FString GetActionIconString ( unsigned char eActionIcon );
	void SetTargetStatus ( struct FString sStatus, unsigned long bInteractive, unsigned long bInRange );
};

UClass* USFXSFHandler_PCHUD::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_PCLoad
// 0x0000 (0x0419 - 0x0419)
class USFXSFHandler_PCLoad : public USFXSFHandler_Load
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85899 ];

		return pClassPointer;
	};

	void eventAS_ScrollDetailsAnalog ( float fScroll );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	struct FString GetPlotSummary ( int nSaveIndex );
	void GameSessionEnded ( );
	void OnStorageDeviceChanged ( );
	void eventOnPanelRemoved ( );
	void eventOnPanelAdded ( );
	void QuitToMainMenu ( );
	void eventHideImportSearchOverlay ( );
	void eventShowImportSearchOverlay ( );
	void InitImportManager ( );
	void Initialize ( );
	void Callback_ConfirmNGPlusLoadGame ( unsigned long bAPressed, int Context );
	void LaunchNGPlusSaveFromCareer ( int nCareerIdx );
	struct FString GetNewGamePlusSaveSummary ( class USFXSaveGame* aSave );
	void SelectCareer ( int nCareerIdx );
	void DeleteGame ( int nIndex );
	void DeleteCareer ( int nCareerIdx );
	void LoadGame ( int nIndex );
	void eventCheckForCorruptSaves ( );
	void Callback_ConfirmDeleteCorruptSaves ( unsigned long bAPressed, int Context );
	void ResetGui ( struct FSFXSaveGameCommandEventArgs Args );
	void SaveCommandCallback_InitializeCareers ( struct FSFXSaveGameCommandEventArgs Args );
	void Callback_ConfirmDeleteCareer ( unsigned long bAPressed, int CareerIdx );
	void LoadGameCallback ( struct FSFXSaveGameCommandEventArgs Args );
	void Callback_ConfirmLoadGame ( unsigned long bAPressed, int Context );
	void FillCareerListCallback_InitializeLoadList ( );
	void EndInitializeLoadList ( struct FSFXSaveGameCommandEventArgs Args );
	void BeginInitializeLoadList ( );
	void InitializeLoadList ( int CareerIdx );
	void EndInitializeCareers ( struct FSFXSaveGameCommandEventArgs Args );
	void BeginInitializeCareers ( );
	void eventOnStart ( );
};

UClass* USFXSFHandler_PCLoad::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_PCPersonalization
// 0x0007 (0x03B4 - 0x03AD)
class USFXSFHandler_PCPersonalization : public USFXSFHandler_Personalization
{
public:
	unsigned long                                      bRotationEnabled : 1;                             		// 0x03B0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86148 ];

		return pClassPointer;
	};

	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void eventUpdate ( float fDeltaT );
};

UClass* USFXSFHandler_PCPersonalization::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_PCSave
// 0x0000 (0x0349 - 0x0349)
class USFXSFHandler_PCSave : public USFXSFHandler_Save
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86702 ];

		return pClassPointer;
	};

	void SetLoadSave ( unsigned long bIsSave, unsigned long bLegacySave, unsigned long ME2Import, int nLastGUI, int nLayout, unsigned long bCarreerSelection );
	bool UpdateCheckingDataMessage ( void* Message );
	void DisplayInsufficientSpaceMessage ( int AdditionalBytesNeeded );
	void SaveGameCompleted ( struct FSFXSaveGameCommandEventArgs Args );
	void CheckFreeSpace ( struct FSFXSaveGameCommandEventArgs Args );
	void eventOnClose ( );
	void QueryFreeSpace ( struct FSFXSaveGameCommandEventArgs Args );
	void PrepareSaveGame ( );
	int GetNewSaveIdx ( );
	bool eventGetPlayerData ( struct FString* firstName, void** LastName, void** className, int* Level );
	void DeleteGame ( int SaveIdx );
	void Initialize ( );
	void SaveGame ( int nIndex );
	void Callback_DeviceSelectionComplete ( unsigned long bWasSuccessful, unsigned long bWasBlocked );
	void ResetGui ( struct FSFXSaveGameCommandEventArgs Args );
	void Callback_ConfirmDelete ( unsigned long bAPressed, int Context );
	void Callback_ConfirmOverwrite ( unsigned long bAPressed, int Context );
	void EndInitializeSaveList ( struct FSFXSaveGameCommandEventArgs Args );
	void BeginInitializeSaveList ( );
};

UClass* USFXSFHandler_PCSave::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_PCSlideshow
// 0x0000 (0x02F0 - 0x02F0)
class USFXSFHandler_PCSlideshow : public USFXSFHandler_Slideshow
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86780 ];

		return pClassPointer;
	};

	void TryExitShow ( );
	void TryAdvanceShow ( unsigned long bForward );
	void ExInt_OnInitializationComplete ( );
	void ExInt_OnTransitionComplete ( );
	void EndSlideshow ( unsigned long bFadeToBlack );
	void BeginSlideshow ( );
	void PreloadAdjacentSlides ( );
	void AdvanceShow ( unsigned long bForward, unsigned long bAutoAdvanced );
	void UpdateNavButtonDisplay ( unsigned long bCanGoNext, unsigned long bCanGoPrev, unsigned long bCanExit );
	void Update ( float fDeltaT );
	void OnPanelAdded ( );
	void SetTransitionOptions ( unsigned long bFadeIn, unsigned long bFadeOut, float fFadeScalar );
	void PlaySlideshow ( struct FScriptDelegate OnFinished, struct FSFXSlideshowParams* oParams );
	void SlideshowFinished ( class USFXSFHandler_Slideshow* slideshow );
};

UClass* USFXSFHandler_PCSlideshow::pClassPointer = NULL;

// Class SFXGame.sfxsfhandler_ps3achievement
// 0x0000 (0x02A0 - 0x02A0)
class Usfxsfhandler_ps3achievement : public Ubiosfhandler_achievement
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86791 ];

		return pClassPointer;
	};

	bool IsAccomplishmentValid ( struct FAccomplishment* Data );
	void PopulateAchivementItemListEntry ( int nDisplayIndex, struct FAccomplishment* CurrentAccomplishment );
	void PopulateAccomplishmentItemList ( );
	void Init ( );
	void HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments );
	void eventOnPanelAdded ( );
	void SetFromMainMenu ( );
};

UClass* Usfxsfhandler_ps3achievement::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_PS3EANetworking
// 0x0000 (0x0370 - 0x0370)
class USFXSFHandler_PS3EANetworking : public USFXSFHandler_EANetworking
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86796 ];

		return pClassPointer;
	};

	void AS_SetActiveInputField ( struct FString sText );
	void GFxScreenVisibilityChange ( unsigned long bNewValue );
	void OnRedeemCodeConfirmationResult ( unsigned char eReturnEnum );
	void KeyboardEntryComplete ( unsigned long bOK, struct FString sText );
	void EnterCode ( struct FString sDefault );
	void EnterPassword ( struct FString sDefault );
	void EnterEmail ( struct FString sDefault );
	void eventOnPanelRemoved ( );
	void eventOnPanelAdded ( );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void onExternalInitialize ( );
	void ClearDelegates ( );
	void SubmitCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, unsigned long bSubmit );
	void SubmitCerberusWelcomeMessage ( );
	void SubmitParentEmail ( unsigned long bContinue, struct FString ParentEmail );
	void SubmitAccountDemographics ( unsigned long bContinue, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode );
	void SubmitRedeemCode ( unsigned long bContinue, struct FString i_sCode );
	void SubmitCerberusIntro ( unsigned char eReturnCode );
	void SubmitNucleusWelcomeMessage ( );
	void SubmitTermsOfService ( unsigned long bAccept );
	void SubmitCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bSubmit );
	void SubmitEmailPasswordMismatch ( struct FString email, struct FString Password, unsigned char eReturnCode );
	void SubmitMessageBox ( unsigned char eReturnEnum );
	void SubmitNucleusLogin ( struct FString email, struct FString Password, unsigned char eReturnCode );
	void SubmitIntroPage ( unsigned long bContinue );
	void OnGFxScreenVisibilityChange ( unsigned long bNewValue );
	void GuiCallback_SubmitParentEmail ( unsigned long bContinue, struct FString ParentEmail );
	void GuiCallback_SubmitAccountDemographics ( unsigned long bContinue, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode );
	void GuiCallback_SubmitEmailPasswordMismatch ( struct FString email, struct FString Password, unsigned char eReturnCode );
	void GuiCallback_SubmitCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, unsigned long bSubmit );
	void GuiCallback_SubmitCerberusWelcomeMessage ( );
	void GuiCallback_SubmitRedeemCode ( unsigned long bContinue, struct FString i_sCode );
	void GuiCallback_SubmitCerberusIntro ( unsigned char eReturnCode );
	void GuiCallback_SubmitNucleusWelcomeMessage ( );
	void GuiCallback_SubmitTermsOfService ( unsigned long bAccept );
	void GuiCallback_SubmitCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bSubmit );
	void GuiCallback_SubmitRedeemCodeConfirmation ( unsigned char eReturnEnum );
	void GuiCallback_SubmitMessageBox ( unsigned char eReturnEnum );
	void GuiCallback_SubmitNucleusLogin ( struct FString email, struct FString Password, unsigned char eReturnCode );
	void GuiCallback_SubmitIntroPage ( unsigned long bContinue );
	void ShowParentEmail ( );
	void ShowAccountDemographics ( TArray< struct FString > m_CountryCodeList, TArray< struct FString > m_CountryDisplayList );
	void ShowEmailPasswordMismatch ( struct FString email, struct FString Password );
	void ShowCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, TArray< struct FString > m_CountryCodeList, TArray< struct FString > m_CountryDisplayList );
	void ShowCerberusWelcomeMessage ( );
	void ShowRedeemCode ( );
	void ShowCerberusIntro ( );
	void ShowNucleusWelcomeMessage ( );
	void ShowTermsOfService ( struct FString i_sTermsOfService, struct FString i_sPrivacyPolicy, unsigned long bTOSChanged );
	void ShowCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bUnderage );
	void eventShowRedeemCodeConfirmation ( );
	void ShowMessageBox ( struct FString sTitle, struct FString sMessage, struct FString sButton1Text, struct FString sButton2Text, struct FString sButton3Text );
	void ShowNucleusLogin ( struct FString email, struct FString Password, int eScreenState );
	void ShowIntroPage ( );
};

UClass* USFXSFHandler_PS3EANetworking::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_PS3MainMenu
// 0x0000 (0x02D1 - 0x02D1)
class USFXSFHandler_PS3MainMenu : public UBioSFHandler_MainMenu
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86798 ];

		return pClassPointer;
	};

	void ProcessRankChangeNotifications ( );
	void eventUpdate ( float fDeltaT );
	void OutputMessages ( );
	void SetEnabled ( unsigned long bVal );
	void MainMenu_FailImageAssets ( );
	bool eventHandleInputEvent ( unsigned char nEventID, float fValue );
	void OnMessagingComputerConnectButton ( );
	void SetConnectButtonState ( struct FString sMessage, unsigned long bVisible );
	void eventCerberusConnect ( unsigned char connectMode );
	void OnEANetworkingVisibilityChange ( unsigned long bNewValue );
	void OnRankMessageReceived ( TArray< struct FRankBypassNotification > RankBypassNotifications );
	void RequestAdditionalNetworkMessages ( );
	void ClearDisconnectedTickerMessages ( );
	void AddDisconnectedTickerMessages ( );
	void SetOnlineState ( unsigned char eState );
	void RemoveConnectingMessageBox ( );
	void UpdateConnectingMessageBox ( void* srMessage );
	void QueueConnectingMessageBox ( void* srMessage );
	void CloseMessagingComputer ( );
	void OpenMessagingComputer ( );
	void OpenMenuComputer ( );
	void AddTickerMessage ( unsigned char Type, struct FString MessageData, int nDLC_ID, int ServerID );
	void AddDownloadPromtMessageItem ( struct FString i_sTitle, struct FString i_sInfo, struct FString i_sImage, unsigned char Type, int nDLC_ID, int ServerID );
	void AddNetworkImageMessageItem ( struct FString i_sTitle, struct FString i_sInfo, struct FString i_sImage, unsigned char Type, int nDLC_ID, int ServerID );
	void OnDisplayNotification ( unsigned char Type, struct FString MessageData, struct FString Title, struct FString Image, int DLC_ID, int ServerID );
	void CloseEANetworking ( );
	void ClearNotifications ( TArray< unsigned char > MessageTypesToClear );
	void ClearAllConnectedNotifications ( );
	void PrevCerberusItem ( );
	void NextCerberusItem ( );
	void InitCerberus ( );
	bool eventIsFromGameEntryFlow ( );
	void OnPanelRemoved ( );
	void OnMessagingSystemReady ( );
	void OnPanelAdded ( );
};

UClass* USFXSFHandler_PS3MainMenu::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_PS3NewCharacter
// 0x0000 (0x04A2 - 0x04A2)
class USFXSFHandler_PS3NewCharacter : public UBioSFHandler_NewCharacter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86808 ];

		return pClassPointer;
	};

	void SetDefaultFemaleME2SaveProperties ( struct FMorphHeadSaveRecord* InProperties );
	void CalculateCurrentScar ( );
	void AS_InitializeScreen ( );
	int GetBestBonusTalentID ( struct FName ClassLabel );
	unsigned char GetGender ( );
	void UpdateLookAtTarget ( );
	void Callback_NoDevice ( unsigned long bAPressed, int Context );
	void OnDeviceSelectionComplete ( unsigned long bWasSuccessful, unsigned long bWasBlocked );
	void OnCreatePlaceholderCareer ( struct FSFXSaveGameCommandEventArgs Args );
	void OnUIUnblock ( unsigned long Unblocked );
	void ChooseStorageDevice ( );
	int GetSpawnableClassIndexFromClass ( class UClass* aClass );
	void eventProcessExternalStates ( class ABioWorldInfo* BWI );
	bool IsDefaultME2Player ( struct FPlayerSaveRecord* InRecord );
	void eventTriggerClassOverlay ( );
	void SelectPreviousPregeneratedHead ( );
	void SelectNextPregeneratedHead ( );
	void InsertDefaultPregeneratedHead ( struct FString InCode );
	void ConfirmDeviceSelection_Fallback ( unsigned long bAPressed, int nContext );
	void OnDeviceSelectionComplete_Fallback ( unsigned long bWasSuccessful, unsigned long bWasBlocked );
	void ChooseStorageDevice_Fallback ( );
	void AS_ConfirmCharacterCreationEnd ( unsigned long bAPressed );
	void ConfirmCharacterCreationEnd ( unsigned long bAPressed, int nContext );
	void ConfirmComplete ( );
	void ClearModels ( );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void PopulateCustomFaceList ( );
	void HandleSliderChange ( int nCategory, int nSlider, int nValue );
	void UpdateCurrentMorphAppearance ( );
	void UpdateUIWorldMorphFace ( class UObject* InData );
	void DoCategoryReset ( int nCategory );
	void SetSliderPositions ( );
	void SetCustomModel ( );
	void ApplyManualScar ( class UObject* InData );
	void Update3DModel ( unsigned char nTemplate, class ABioPawn* SwapoutPawn );
	void Update3DModelState ( unsigned char nTemplate, class ABioPawn* PrevPawn );
	void SetPlotChoices ( );
	void FinalCommit ( );
	void RefitBonusTalent ( struct FName BonusTalent );
	void GetAllUnlockedBonusTalentInfo ( TArray< struct FBonusTalentData >* aUnlockedBonusTalentInfo );
	void UpdateBonusTalentList ( );
	void SetSquadMemberPlotChoice ( int nChoice );
	void SetGameTypeSettings ( int GameType );
	void SetPlayerCharacter ( TArray< struct FString >* playerSettings );
	void SetupIconicCharacter ( TArray< struct FString >* lstSettings );
	void UpdateCustomClassChoice ( class UClass* PlayerClass, int Row );
	void UpdateCustomClassList ( );
	void SetupSummary ( );
	void ClearCurrentCareer ( );
	void SetCustomName ( struct FString sMaleName, struct FString sFemaleName );
	void UpdateCode ( );
	void ApplyNewCode ( struct FString sInputCode );
	void KeyboardCodeEntryComplete ( unsigned long bOK, struct FString sCode );
	void KeyboardNameEntryComplete ( unsigned long bOK, struct FString sName );
	void Update ( float fDeltaT );
	void ResetLookAt ( );
	void HandleLookAtLeftRight ( float fValue );
	void HandleLookAtUpDown ( float fValue );
	void HandleRotate ( float fValue );
	void ScrollText ( float fValue );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void SetUIPawnCasual ( unsigned long bCasual );
	void HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments );
	void DisableSchematicAnim ( class UObject* InData );
	void EnableSchematicAnim ( class UObject* InData );
	void SetBackgroundMaterial ( class UMaterialInterface* Material );
	void SetSchematicResources ( class URvrClientEffectInterface* CE_NewSchematicEffect, class UAnimSet* NewSchematicAnimSet );
	void SetClassClientEffects ( class URvrClientEffectInterface* CE_FullBiotic, class URvrClientEffectInterface* CE_HalfBiotic, class URvrClientEffectInterface* CE_OmniTool );
	void AddKismetNamedObject ( struct FName KismetVariableName, class UObject* ObjectValue );
	void SetMaleSelected ( unsigned long bSelected );
	class UClass* eventGetCharacterClassByName ( struct FName nmClass );
	void ClearEffects ( );
	void Update3DModelByClass ( struct FName nmClass, class ABioPawn* pTemplate, unsigned char nTemplate, unsigned long bUpdate, unsigned long bForce, unsigned long bAttachVFXandUpdatePose );
	class ABioPawn* eventGenderTemplatePawn ( unsigned char BNCT );
	void SpawnPawns ( );
	void EnsureMICs ( class AActor* InActor );
	void eventOnClose ( );
	void eventOnStart ( );
	void Setup3DModel ( );
	void SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate );
	void OnCloseCallback ( );
};

UClass* USFXSFHandler_PS3NewCharacter::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_PS3Options
// 0x0000 (0x036E - 0x036E)
class USFXSFHandler_PS3Options : public UBioSFHandler_Options
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86811 ];

		return pClassPointer;
	};

	void SaveAndExit ( );
	void MovieLoaded ( );
	void OnPanelAdded ( );
	void CloseGui ( );
	void eventOnStart ( );
	void InitSystemSettingsCache ( );
	void SendTelemetryDump ( struct FName Hook );
	void SendTelemetryChanges ( );
	void eventAddTelemetryInfo ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes );
	void AddTelem_Language ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void AddTelem_VCOutput ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void AddTelem_VCInput ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void AddTelem_Resolution ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void AddTelem_Brightness ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void AddTelem_InvBool ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void AddTelem_Bool ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void AddTelem_Int ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
	void UpdateAudioVolumeSettings ( class USFXProfileSettings* ReadFrom );
	void UpdateDisplayGamma ( class USFXProfileSettings* ReadFrom );
	void GetProfileSettingsForOptions ( TArray< unsigned char >* lstProfSettings, TArray< int >* lstTypes );
	unsigned char GetProfileSettingForOption ( int Type );
	void SetOption ( int Type, int Value );
	void SetOptionsOnGUI ( class USFXProfileSettings* Settings );
	void UpdateSpeechLanguageOptions ( class USFXGUI_Option_TextLanguage* TextOption );
	void Callback_ResetToDefaults ( unsigned long bAPressed, int Context );
	void ResetToDefaults ( struct FString sPackedIDs );
	void Helper_ExtractPackedOptIDs ( struct FString sPackedIDs, TArray< int >* lstOptIDs );
	void Helper_CreateResetConfirmPopup ( class USFXGUIInteraction* GuiMan, struct FScriptDelegate pInputDelegate );
	void SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate );
	void OnCloseCallback ( );
	void AddTelem ( unsigned char eOptionId, int Value, TArray< struct FTelemetryAttribute >* Attributes, struct FString* TelemetryKey );
};

UClass* USFXSFHandler_PS3Options::pClassPointer = NULL;

// Class SFXGame.SFXSFHandler_PS3Personalization
// 0x0000 (0x03AD - 0x03AD)
class USFXSFHandler_PS3Personalization : public USFXSFHandler_Personalization
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86813 ];

		return pClassPointer;
	};

	void ASSetDetailedCustomizationVisible ( unsigned long bVisible );
	void ASSetSwatchOptions ( int nOptionNumber, struct FString sTitle, TArray< struct FTintSwatchData > oSwatches, int nActiveIndex );
	void ASSetDetailOptions ( int nOptionNumber, struct FString sTitle, struct FString sOptions, int nActiveIndex );
	void ASStopScroll ( );
	void ASScrollInfoText ( float nScroll );
	void ASUpdateStatsInfo ( struct FString sTitle, struct FString sInfo );
	void ASSetInfoText ( struct FString sDetailText );
	void ASDeferredInitialization ( );
	void* GetPersonalizationTitle ( int PersOpt );
	TArray< float > onExIntGetBonusValues ( );
	struct FString onExIntGetBonusString ( int BonusIndex );
	void ConditionalReleaseAssetCacheAndGC ( );
	void OnPawnApperanceChanged ( TArray< class UObject* >* LoadedAssets );
	void UpdateAppearanceOnPawn ( class ASFXPawn_Player* oPawn );
	void onExIntDetailItemChange ( int nOptIndex, int nOptionIndex );
	int GetIdxByAppearanceID ( int Id, unsigned long CheckAvailability, TArray< struct FCustomizableElement >* AppearanceData );
	int GetAppearanceIDByIdx ( int Index, TArray< struct FCustomizableElement >* AppearanceData );
	void onExIntExit ( );
	void onExIntDoInitialize ( );
	void ResetOptions ( );
	bool CanUndoChanges ( );
	void CancelChanges ( );
	void ApplyChanges ( );
	void SendAppearanceChangedTelemetry ( int nCasualID, int nFullBodyID, int nHelmetID, int nTorsoID, int nShoulderID, int nArmID, int nLegID, int nSpecID, int nTint1ID, int nTint2ID, int nPatternID, int nPatternColorID, int nEmissiveID );
	void AddSwatchEntry ( unsigned char nEntryIndex, TArray< struct FCustomizableElement > Elements, int nIndex );
	void AddDetailEntry ( unsigned char nEntryIndex, int nIndex, TArray< struct FCustomizableElement >* Elements );
	bool IsAvailable ( struct FCustomizableElement Element );
	class ASFXPawn_Player* GetUIWorldPlayerPawn ( );
	void eventUpdate ( float fDeltaT );
	bool eventHandleInputEvent ( unsigned char Event, float fValue );
	void InitializeUIWorld ( );
	void ReleaseGameEffects ( TArray< struct FCustomizableElement > Elements );
	bool LoadGameEffectsFromElements ( TArray< struct FCustomizableElement > Elements );
	bool LoadGameEffects ( );
	void OnPanelRemoved ( );
	void eventOnPanelAdded ( );
	void ClearDelegates ( );
	void SetExternalCallback_OnComplete ( struct FScriptDelegate pDelegate );
	void ExternalCallback_OnComplete ( );
};

UClass* USFXSFHandler_PS3Personalization::pClassPointer = NULL;

// Class SFXGame.sfxshield_player
// 0x00BA (0x03D0 - 0x0316)
class Asfxshield_player : public Asfxshield_base
{
public:
	struct FInterpCurveFloat                           TimeDilation;                                     		// 0x0318 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           BreachTimeDilation;                               		// 0x0328 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScreenShakeStruct                          BreachShake;                                      		// 0x0338 (0x0078) [0x0000000000000001]              ( CPF_Edit )
	float                                              PartialBreakPct;                                  		// 0x03B0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UParticleSystem*                             PS_CriticalHit;                                   		// 0x03B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URvrClientEffectInterface*                   CE_ShieldBreak;                                   		// 0x03B8 (0x0004) [0x0000000000000000]              
	float                                              TimeDilationLength;                               		// 0x03BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BreachTimeDilationLength;                         		// 0x03C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 PCShieldsBreakSound;                              		// 0x03C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 PCShieldsUpSound;                                 		// 0x03C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 ShieldBreakPainVoc;                               		// 0x03CC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86990 ];

		return pClassPointer;
	};

	void BeginRecharge ( );
	void PlayRecharge ( );
	void BreachShields ( class UClass* DamageType );
	void ApplyDamageToShields ( class UClass* DamageType, struct FVector Momentum, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class AController* instigatedBy, float* Damage, float* TotalDamageDone );
	float GetShieldRegenDelay ( );
	float GetShieldRegenRate ( );
	void PrecacheVFX ( class ASFXObjectPool* ObjectPool, class URvrClientEffectManager* ClientEffects );
};

UClass* Asfxshield_player::pClassPointer = NULL;

// Class SFXGame.SFXSignText
// 0x0000 (0x01F6 - 0x01F6)
class ASFXSignText : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87046 ];

		return pClassPointer;
	};

	struct FVector LocalToWorld ( struct FVector vLocal );
	void eventBioBaseRemovedFromWorld ( );
	void BioRestoreFromStasis ( );
	void BioApplyStasis ( struct FString Cause );
	void eventPlayFootStepSound ( int FootDown );
	void eventSFXSetAudioComponentRTPCs ( class UActorComponent* pWwiseAudioComponent );
	class USkeletalMeshComponent* GetHeadSkelMeshComponent ( );
	class USkeletalMeshComponent* GetPrimarySkelMeshComponent ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	unsigned char GetPowerResistance ( class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, class UClass* DamageType, float* Damage, struct FVector* Force, class AActor** TargetOverride );
	void RemoveSFXModuleIndex ( int nIndex );
	void RemoveSFXModule ( class USFXModule* oModule );
	void AddSFXModule ( class USFXModule* oModule, unsigned long bUserModule );
	void StopAllSounds ( );
	bool WillOverlap ( struct FVector PosA, struct FVector VelA, struct FVector PosB, struct FVector VelB, float StepSize, float Radius, float* Time );
	struct FVector GetAvoidanceVector ( struct FVector GoalLocation, float CollisionRadius, float MaxSpeed, int NumSamples, float VelocityStepRate, float MaxTimeTilOverlap, TArray< class AActor* >* Obstacles );
	bool IsClient ( );
	bool IsServer ( );
	bool IsOwningClient ( );
	void eventReplicationEnded ( );
	void eventPostDemoRewind ( );
	void eventAnimTreeUpdated ( class USkeletalMeshComponent* SkelMesh );
	bool SupportsKismetModification ( class USequenceOp* AskingOp, struct FString* Reason );
	void eventTrailsNotifyEnd ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotifyTick ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotify ( class UAnimNotify_Trails* AnimNotifyData );
	void eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	void GetAimAdhesionExtent ( float* Width, float* Height, struct FVector* Center );
	void GetAimFrictionExtent ( float* Width, float* Height, struct FVector* Center );
	bool IsInPersistentLevel ( );
	void SetActive ( unsigned long bActive );
	class USFXModule* GetModule ( class UClass* ModuleClass );
	void eventExceededPhysicsThreshold ( class AActor* instigatedBy );
	void eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance );
	struct FGuid GetPackageGuid ( struct FName PackageName );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void SetHUDLocation ( struct FVector NewHUDLocation );
	void eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void PickedUpBy ( class APawn* P );
	void eventSpawnedByKismet ( );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	void FindGoodEndView ( class APlayerController* PC, struct FRotator* GoodRotation );
	void NotifyLocalPlayerTeamReceived ( );
	struct FString GetLocationStringFor ( class APlayerReplicationInfo* PRI );
	unsigned char eventScriptGetTeamNum ( );
	unsigned char GetTeamNum ( );
	void PawnBaseDied ( );
	bool IsPlayerOwned ( );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_rotation );
	bool IsStationary ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	bool CanActorPlayFaceFXAnim ( );
	bool IsActorPlayingFaceFXAnim ( );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay );
	void eventFinishMovementControl ( class UInterpGroup* InInterpGroup );
	void eventBeginMovementControl ( class UInterpGroup* InInterpGroup );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnAttachToActor ( class USeqAct_AttachToActor* Action );
	void BioEnqueueDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation );
	void eventBioDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void OnChangeCollision ( class USeqAct_ChangeCollision* Action );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	void OnSetBlockRigidBody ( class USeqAct_SetBlockRigidBody* Action );
	void OnSetVelocity ( class USeqAct_SetVelocity* Action );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnModifyHealth ( class USeqAct_ModifyHealth* Action );
	void BlockForTextureStreaming ( );
	bool TexturePrestreamIsRequired ( );
	void PrestreamTextures ( float Seconds, unsigned long bEnableStreaming, int CinematicTextureGroups );
	void eventShutDown ( );
	void SetNetUpdateTime ( float NewUpdateTime );
	void eventForceNetRelevant ( );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void ClearLatentAction ( class UClass* actionClass, unsigned long bAborted, class USeqAct_Latent* exceptionAction, unsigned long bCancelled );
	bool FindEventsOfClass ( class UClass* EventClass, unsigned long bIncludeDisabled, TArray< class USequenceEvent* >* out_EventList );
	bool ActivateEventClass ( class UClass* InClass, class AActor* inInstigator, unsigned long bTest, TArray< class USequenceEvent* >* EventList, TArray< int >* ActivateIndices, TArray< class USequenceEvent* >* ActivatedEvents );
	bool TriggerGlobalEventClass ( class UClass* InEventClass, class AActor* inInstigator, int ActivateIndex );
	void eventReceivedNewEvent ( class USequenceEvent* Evt );
	bool TriggerEventClass ( class UClass* InEventClass, class AActor* inInstigator, int ActivateIndex, unsigned long bTest, TArray< class USequenceEvent* >* ActivatedEvents );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	bool CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance );
	void ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation );
	bool CanSplash ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	bool IsInPain ( );
	bool IsInVolume ( class AVolume* aVolume );
	void eventReset ( );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventModifyHearSoundComponent ( class UAudioComponent* AC );
	struct FString GetPhysicsName ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FString GetDebugName ( );
	void MatchStarting ( );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void ReplaceText ( struct FString Replace, struct FString With, struct FString* Text );
	struct FString GetHumanReadableName ( );
	struct FString GetItemName ( struct FString FullName );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void eventEndViewTarget ( class APlayerController* PC );
	void eventBecomeViewTarget ( class APlayerController* PC );
	bool CheckForErrors ( );
	void eventDebugFreezeGame ( class AActor* ActorToLookAt );
	float GetGravityZ ( );
	void CheckHitInfo ( class UPrimitiveComponent* FallBackComponent, struct FVector Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation );
	void eventTakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void KilledBy ( class APawn* EventInstigator );
	bool HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool StopsProjectile ( class AProjectile* P );
	void eventNotifySkelControlBeyondLimit ( class USkelControlLookAt* LookAt );
	void eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance );
	void eventSetInitialState ( );
	void eventPostBeginPlay ( );
	void eventBroadcastLocalizedTeamMessage ( int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalizedMessage ( class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventPreBeginPlay ( );
	bool FindActorsOfClass ( class UClass* ActorClass, TArray< class AActor* >* out_Actors );
	bool MoveActorToFloor ( );
	class APlayerController* GetALocalPlayerController ( );
	void LocalPlayerControllers ( class UClass* BaseClass, class APlayerController** PC );
	void AllOwnedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	void ComponentList ( class UClass* BaseClass, class UActorComponent** out_Component );
	void OverlappingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** out_Actor );
	void CollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bUseOverlapCheck, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleCollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, struct FVector Extent, unsigned long bTraceActors, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor );
	void TraceActors ( class UClass* BaseClass, struct FVector End, struct FVector Start, struct FVector Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo );
	void TouchingActors ( class UClass* BaseClass, unsigned long bReverse, class AActor** Actor );
	void BasedActors ( class UClass* BaseClass, class AActor** Actor );
	void ChildActors ( class UClass* BaseClass, class AActor** Actor );
	void DynamicActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	void AllActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	struct FString GetURLMap ( );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	bool PreTeleport ( class ATeleporter* InTeleporter );
	struct FVector GetDestination ( class AController* C );
	bool SuggestTossVelocity ( struct FVector Destination, struct FVector Start, float TossSpeed, float BaseTossZ, float DesiredZPct, struct FVector CollisionSize, float TerminalVelocity, float OverrideGravityZ, unsigned long bOnlyTraceUp, struct FVector* TossVelocity );
	bool PlayerCanSeeMe ( );
	void MakeNoise ( float Loudness, struct FName NoiseType );
	void StopSound ( class UWwiseBaseSoundObject* InSoundEvent );
	void PlaySound ( class UWwiseBaseSoundObject* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	class UAudioComponent* CreateAudioComponent ( class USoundCue* InSoundCue, unsigned long bPlay, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation, unsigned long bAttachToSelf );
	void ResetTimerTimeDilation ( struct FName TimerName, class UObject* inObj );
	void ModifyTimerTimeDilation ( struct FName TimerName, float InTimerTimeDilation, class UObject* inObj );
	float GetRemainingTimeForTimer ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerRate ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerCount ( struct FName inTimerFunc, class UObject* inObj );
	bool IsTimerActive ( struct FName inTimerFunc, class UObject* inObj );
	void PauseTimer ( unsigned long bPause, struct FName inTimerFunc, class UObject* inObj );
	void ClearAllTimers ( class UObject* inObj );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	void eventTornOff ( );
	bool Destroy ( );
	class AActor* Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail, unsigned long bFindSafeLocation );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void GetComponentsBoundingBox ( struct FBox* ActorBox );
	bool IsOverlapping ( class AActor* A );
	bool ContainsPoint ( struct FVector Spot );
	bool FindSpot ( struct FVector BoxExtent, struct FVector* SpotLocation );
	bool TraceAllPhysicsAssetInteractions ( class USkeletalMeshComponent* SkelMeshComp, struct FVector EndTrace, struct FVector StartTrace, struct FVector Extent, TArray< struct FImpactInfo >* out_Hits );
	bool FastTrace ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceBullet );
	bool PointCheckComponent ( class UPrimitiveComponent* InComponent, struct FVector PointLocation, struct FVector PointExtent );
	bool TraceComponent ( class UPrimitiveComponent* InComponent, struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, unsigned long bComplexCollision, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	class AActor* Trace ( struct FVector TraceEnd, struct FVector TraceStart, unsigned long bTraceActors, struct FVector Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	void VolumeBasedDestroy ( class APhysicsVolume* PV );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool UsedBy ( class APawn* User );
	bool eventOverRotated ( struct FRotator* out_Desired, struct FRotator* out_Actual );
	bool ClampRotation ( struct FRotator rBase, struct FRotator rUpperLimits, struct FRotator rLowerLimits, struct FRotator* out_Rot );
	void eventOnSleepRBPhysics ( );
	void eventOnWakeRBPhysics ( );
	void eventRanInto ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void eventCollisionChanged ( );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventBaseChange ( );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void eventUnTouch ( class AActor* Other );
	void eventPostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventFalling ( );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventTimer ( );
	void eventTick ( float DeltaTime );
	void eventLostChild ( class AActor* Other );
	void eventGainedChild ( class AActor* Other );
	void eventDestroyed ( );
	void SetTickIsDisabled ( unsigned long bInDisabled );
	void SetTickGroup ( unsigned char NewTickGroup );
	void ReattachComponent ( class UActorComponent* ComponentToReattach );
	void DetachComponent ( class UActorComponent* ExComponent );
	void AttachComponent ( class UActorComponent* NewComponent );
	void UnClock ( float* Time );
	void Clock ( float* Time );
	void SetPhysics ( unsigned char newPhysics );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetHidden ( unsigned long bNewHidden );
	void ChartData ( struct FString DataName, float DataValue );
	void FlushDebugStrings ( );
	void DrawDebugFrustrum ( unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, struct FMatrix* FrustumToWorld );
	void DrawDebugString ( struct FVector TextLocation, struct FString Text, class AActor* TestBaseActor, struct FColor TextColor, float Duration );
	void DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines );
	void DrawDebugCylinder ( struct FVector Start, struct FVector End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines );
	void DrawDebugStar ( struct FVector Position, float Size, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugBox ( struct FVector Center, struct FVector Extent, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugPoint ( struct FVector Position, float Size, struct FLinearColor PointColor, unsigned long bPersistentLines );
	void DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void FlushPersistentDebugLines ( );
	struct FVector GetBasedPosition ( struct FBasedPosition BP );
	void SetBasedPosition ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	struct FVector BP2Vect ( struct FBasedPosition BP );
	void Vect2BP ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	void SetForcedInitialReplicatedProperty ( class UProperty* PropToReplicate, unsigned long bAdd );
	void eventReplicatedDataBinding ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsOwnedBy ( class AActor* TestActor );
	class AActor* GetBaseMost ( );
	bool IsBasedOn ( class AActor* TestActor );
	void FindBase ( );
	void SetOwner ( class AActor* NewOwner );
	void SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName );
	float GetTerminalVelocity ( );
	void AutonomousPhysics ( float DeltaSeconds );
	bool MoveSmooth ( struct FVector Delta );
	int fixedTurn ( int Current, int Desired, int DeltaRate );
	void SetHardAttach ( unsigned long bNewHardAttach );
	bool SetRelativeLocation ( struct FVector NewLocation );
	bool SetRelativeRotation ( struct FRotator NewRotation );
	void SetZone ( unsigned long bForceRefresh );
	unsigned char MovingWhichWay ( float* Amount );
	bool SetRotation ( struct FRotator NewRotation );
	bool SetLocation ( struct FVector NewLocation, unsigned long bDebugFailure );
	bool Move ( struct FVector Delta );
	void SetDrawScale3D ( struct FVector NewScale3D );
	void SetDrawScale ( float NewScale );
	void SetCollisionType ( unsigned char NewCollisionType );
	void SetCollisionSize ( float NewRadius, float NewHeight );
	void SetCollision ( unsigned long bNewColActors, unsigned long bNewBlockActors, unsigned long bNewIgnoreEncroachers );
	void FinishAnim ( class UAnimNodeSequence* SeqNode );
	void Sleep ( float Seconds );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	void ForceUpdateComponents ( unsigned long bCollisionUpdate, unsigned long bTransformOnly );
};

UClass* ASFXSignText::pClassPointer = NULL;

// Class SFXGame.SFXStealthVolume
// 0x0000 (0x022C - 0x022C)
class ASFXStealthVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87150 ];

		return pClassPointer;
	};

	void eventProcessActorSetVolume ( class AActor* Other );
	void eventCollisionChanged ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FString GetLocationStringFor ( class APlayerReplicationInfo* PRI );
	void eventPostBeginPlay ( );
	bool ScriptLineCheck ( struct FVector* End, struct FVector* Start, struct FVector* Extent );
	bool EncompassesPoint ( struct FVector Loc );
	bool Encompasses ( class AActor* Other );
};

UClass* ASFXStealthVolume::pClassPointer = NULL;

// Class SFXGame.SFXTracer_Bullet
// 0x0000 (0x0245 - 0x0245)
class ASFXTracer_Bullet : public ASFXTracer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87619 ];

		return pClassPointer;
	};

	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void Reset ( );
	void OutsideWorldBounds ( );
	void FellOutOfWorld ( class UClass* dmgType );
	void ShutDown ( );
	void Recycle ( );
	void Reuse ( );
	void StopTracer ( );
	void InitTracer ( struct FVector Start, struct FVector End, struct FVector DesiredScale, float DesiredSpeed );
};

UClass* ASFXTracer_Bullet::pClassPointer = NULL;

// Class SFXGame.SFXTreasureNode
// 0x0000 (0x01F6 - 0x01F6)
class ASFXTreasureNode : public ASFXPointOfInterest
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87623 ];

		return pClassPointer;
	};

	struct FVector LocalToWorld ( struct FVector vLocal );
	void eventBioBaseRemovedFromWorld ( );
	void BioRestoreFromStasis ( );
	void BioApplyStasis ( struct FString Cause );
	void eventPlayFootStepSound ( int FootDown );
	void eventSFXSetAudioComponentRTPCs ( class UActorComponent* pWwiseAudioComponent );
	class USkeletalMeshComponent* GetHeadSkelMeshComponent ( );
	class USkeletalMeshComponent* GetPrimarySkelMeshComponent ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	unsigned char GetPowerResistance ( class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, class UClass* DamageType, float* Damage, struct FVector* Force, class AActor** TargetOverride );
	void RemoveSFXModuleIndex ( int nIndex );
	void RemoveSFXModule ( class USFXModule* oModule );
	void AddSFXModule ( class USFXModule* oModule, unsigned long bUserModule );
	void StopAllSounds ( );
	bool WillOverlap ( struct FVector PosA, struct FVector VelA, struct FVector PosB, struct FVector VelB, float StepSize, float Radius, float* Time );
	struct FVector GetAvoidanceVector ( struct FVector GoalLocation, float CollisionRadius, float MaxSpeed, int NumSamples, float VelocityStepRate, float MaxTimeTilOverlap, TArray< class AActor* >* Obstacles );
	bool IsClient ( );
	bool IsServer ( );
	bool IsOwningClient ( );
	void eventReplicationEnded ( );
	void eventPostDemoRewind ( );
	void eventAnimTreeUpdated ( class USkeletalMeshComponent* SkelMesh );
	bool SupportsKismetModification ( class USequenceOp* AskingOp, struct FString* Reason );
	void eventTrailsNotifyEnd ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotifyTick ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotify ( class UAnimNotify_Trails* AnimNotifyData );
	void eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	void GetAimAdhesionExtent ( float* Width, float* Height, struct FVector* Center );
	void GetAimFrictionExtent ( float* Width, float* Height, struct FVector* Center );
	bool IsInPersistentLevel ( );
	void SetActive ( unsigned long bActive );
	class USFXModule* GetModule ( class UClass* ModuleClass );
	void eventExceededPhysicsThreshold ( class AActor* instigatedBy );
	void eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance );
	struct FGuid GetPackageGuid ( struct FName PackageName );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void SetHUDLocation ( struct FVector NewHUDLocation );
	void eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void PickedUpBy ( class APawn* P );
	void eventSpawnedByKismet ( );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	void FindGoodEndView ( class APlayerController* PC, struct FRotator* GoodRotation );
	void NotifyLocalPlayerTeamReceived ( );
	struct FString GetLocationStringFor ( class APlayerReplicationInfo* PRI );
	unsigned char eventScriptGetTeamNum ( );
	unsigned char GetTeamNum ( );
	void PawnBaseDied ( );
	bool IsPlayerOwned ( );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_rotation );
	bool IsStationary ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	bool CanActorPlayFaceFXAnim ( );
	bool IsActorPlayingFaceFXAnim ( );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay );
	void eventFinishMovementControl ( class UInterpGroup* InInterpGroup );
	void eventBeginMovementControl ( class UInterpGroup* InInterpGroup );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnAttachToActor ( class USeqAct_AttachToActor* Action );
	void BioEnqueueDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation );
	void eventBioDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void OnChangeCollision ( class USeqAct_ChangeCollision* Action );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	void OnSetBlockRigidBody ( class USeqAct_SetBlockRigidBody* Action );
	void OnSetVelocity ( class USeqAct_SetVelocity* Action );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnModifyHealth ( class USeqAct_ModifyHealth* Action );
	void BlockForTextureStreaming ( );
	bool TexturePrestreamIsRequired ( );
	void PrestreamTextures ( float Seconds, unsigned long bEnableStreaming, int CinematicTextureGroups );
	void eventShutDown ( );
	void SetNetUpdateTime ( float NewUpdateTime );
	void eventForceNetRelevant ( );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void ClearLatentAction ( class UClass* actionClass, unsigned long bAborted, class USeqAct_Latent* exceptionAction, unsigned long bCancelled );
	bool FindEventsOfClass ( class UClass* EventClass, unsigned long bIncludeDisabled, TArray< class USequenceEvent* >* out_EventList );
	bool ActivateEventClass ( class UClass* InClass, class AActor* inInstigator, unsigned long bTest, TArray< class USequenceEvent* >* EventList, TArray< int >* ActivateIndices, TArray< class USequenceEvent* >* ActivatedEvents );
	bool TriggerGlobalEventClass ( class UClass* InEventClass, class AActor* inInstigator, int ActivateIndex );
	void eventReceivedNewEvent ( class USequenceEvent* Evt );
	bool TriggerEventClass ( class UClass* InEventClass, class AActor* inInstigator, int ActivateIndex, unsigned long bTest, TArray< class USequenceEvent* >* ActivatedEvents );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	bool CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance );
	void ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation );
	bool CanSplash ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	bool IsInPain ( );
	bool IsInVolume ( class AVolume* aVolume );
	void eventReset ( );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventModifyHearSoundComponent ( class UAudioComponent* AC );
	struct FString GetPhysicsName ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FString GetDebugName ( );
	void MatchStarting ( );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void ReplaceText ( struct FString Replace, struct FString With, struct FString* Text );
	struct FString GetHumanReadableName ( );
	struct FString GetItemName ( struct FString FullName );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void eventEndViewTarget ( class APlayerController* PC );
	void eventBecomeViewTarget ( class APlayerController* PC );
	bool CheckForErrors ( );
	void eventDebugFreezeGame ( class AActor* ActorToLookAt );
	float GetGravityZ ( );
	void CheckHitInfo ( class UPrimitiveComponent* FallBackComponent, struct FVector Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation );
	void eventTakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void KilledBy ( class APawn* EventInstigator );
	bool HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool StopsProjectile ( class AProjectile* P );
	void eventNotifySkelControlBeyondLimit ( class USkelControlLookAt* LookAt );
	void eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance );
	void eventSetInitialState ( );
	void eventPostBeginPlay ( );
	void eventBroadcastLocalizedTeamMessage ( int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalizedMessage ( class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventPreBeginPlay ( );
	bool FindActorsOfClass ( class UClass* ActorClass, TArray< class AActor* >* out_Actors );
	bool MoveActorToFloor ( );
	class APlayerController* GetALocalPlayerController ( );
	void LocalPlayerControllers ( class UClass* BaseClass, class APlayerController** PC );
	void AllOwnedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	void ComponentList ( class UClass* BaseClass, class UActorComponent** out_Component );
	void OverlappingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** out_Actor );
	void CollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bUseOverlapCheck, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleCollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, struct FVector Extent, unsigned long bTraceActors, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor );
	void TraceActors ( class UClass* BaseClass, struct FVector End, struct FVector Start, struct FVector Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo );
	void TouchingActors ( class UClass* BaseClass, unsigned long bReverse, class AActor** Actor );
	void BasedActors ( class UClass* BaseClass, class AActor** Actor );
	void ChildActors ( class UClass* BaseClass, class AActor** Actor );
	void DynamicActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	void AllActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	struct FString GetURLMap ( );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	bool PreTeleport ( class ATeleporter* InTeleporter );
	struct FVector GetDestination ( class AController* C );
	bool SuggestTossVelocity ( struct FVector Destination, struct FVector Start, float TossSpeed, float BaseTossZ, float DesiredZPct, struct FVector CollisionSize, float TerminalVelocity, float OverrideGravityZ, unsigned long bOnlyTraceUp, struct FVector* TossVelocity );
	bool PlayerCanSeeMe ( );
	void MakeNoise ( float Loudness, struct FName NoiseType );
	void StopSound ( class UWwiseBaseSoundObject* InSoundEvent );
	void PlaySound ( class UWwiseBaseSoundObject* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	class UAudioComponent* CreateAudioComponent ( class USoundCue* InSoundCue, unsigned long bPlay, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation, unsigned long bAttachToSelf );
	void ResetTimerTimeDilation ( struct FName TimerName, class UObject* inObj );
	void ModifyTimerTimeDilation ( struct FName TimerName, float InTimerTimeDilation, class UObject* inObj );
	float GetRemainingTimeForTimer ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerRate ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerCount ( struct FName inTimerFunc, class UObject* inObj );
	bool IsTimerActive ( struct FName inTimerFunc, class UObject* inObj );
	void PauseTimer ( unsigned long bPause, struct FName inTimerFunc, class UObject* inObj );
	void ClearAllTimers ( class UObject* inObj );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	void eventTornOff ( );
	bool Destroy ( );
	class AActor* Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail, unsigned long bFindSafeLocation );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void GetComponentsBoundingBox ( struct FBox* ActorBox );
	bool IsOverlapping ( class AActor* A );
	bool ContainsPoint ( struct FVector Spot );
	bool FindSpot ( struct FVector BoxExtent, struct FVector* SpotLocation );
	bool TraceAllPhysicsAssetInteractions ( class USkeletalMeshComponent* SkelMeshComp, struct FVector EndTrace, struct FVector StartTrace, struct FVector Extent, TArray< struct FImpactInfo >* out_Hits );
	bool FastTrace ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceBullet );
	bool PointCheckComponent ( class UPrimitiveComponent* InComponent, struct FVector PointLocation, struct FVector PointExtent );
	bool TraceComponent ( class UPrimitiveComponent* InComponent, struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, unsigned long bComplexCollision, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	class AActor* Trace ( struct FVector TraceEnd, struct FVector TraceStart, unsigned long bTraceActors, struct FVector Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	void VolumeBasedDestroy ( class APhysicsVolume* PV );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool UsedBy ( class APawn* User );
	bool eventOverRotated ( struct FRotator* out_Desired, struct FRotator* out_Actual );
	bool ClampRotation ( struct FRotator rBase, struct FRotator rUpperLimits, struct FRotator rLowerLimits, struct FRotator* out_Rot );
	void eventOnSleepRBPhysics ( );
	void eventOnWakeRBPhysics ( );
	void eventRanInto ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void eventCollisionChanged ( );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventBaseChange ( );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void eventUnTouch ( class AActor* Other );
	void eventPostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventFalling ( );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventTimer ( );
	void eventTick ( float DeltaTime );
	void eventLostChild ( class AActor* Other );
	void eventGainedChild ( class AActor* Other );
	void eventDestroyed ( );
	void SetTickIsDisabled ( unsigned long bInDisabled );
	void SetTickGroup ( unsigned char NewTickGroup );
	void ReattachComponent ( class UActorComponent* ComponentToReattach );
	void DetachComponent ( class UActorComponent* ExComponent );
	void AttachComponent ( class UActorComponent* NewComponent );
	void UnClock ( float* Time );
	void Clock ( float* Time );
	void SetPhysics ( unsigned char newPhysics );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetHidden ( unsigned long bNewHidden );
	void ChartData ( struct FString DataName, float DataValue );
	void FlushDebugStrings ( );
	void DrawDebugFrustrum ( unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, struct FMatrix* FrustumToWorld );
	void DrawDebugString ( struct FVector TextLocation, struct FString Text, class AActor* TestBaseActor, struct FColor TextColor, float Duration );
	void DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines );
	void DrawDebugCylinder ( struct FVector Start, struct FVector End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines );
	void DrawDebugStar ( struct FVector Position, float Size, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugBox ( struct FVector Center, struct FVector Extent, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugPoint ( struct FVector Position, float Size, struct FLinearColor PointColor, unsigned long bPersistentLines );
	void DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void FlushPersistentDebugLines ( );
	struct FVector GetBasedPosition ( struct FBasedPosition BP );
	void SetBasedPosition ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	struct FVector BP2Vect ( struct FBasedPosition BP );
	void Vect2BP ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	void SetForcedInitialReplicatedProperty ( class UProperty* PropToReplicate, unsigned long bAdd );
	void eventReplicatedDataBinding ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsOwnedBy ( class AActor* TestActor );
	class AActor* GetBaseMost ( );
	bool IsBasedOn ( class AActor* TestActor );
	void FindBase ( );
	void SetOwner ( class AActor* NewOwner );
	void SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName );
	float GetTerminalVelocity ( );
	void AutonomousPhysics ( float DeltaSeconds );
	bool MoveSmooth ( struct FVector Delta );
	int fixedTurn ( int Current, int Desired, int DeltaRate );
	void SetHardAttach ( unsigned long bNewHardAttach );
	bool SetRelativeLocation ( struct FVector NewLocation );
	bool SetRelativeRotation ( struct FRotator NewRotation );
	void SetZone ( unsigned long bForceRefresh );
	unsigned char MovingWhichWay ( float* Amount );
	bool SetRotation ( struct FRotator NewRotation );
	bool SetLocation ( struct FVector NewLocation, unsigned long bDebugFailure );
	bool Move ( struct FVector Delta );
	void SetDrawScale3D ( struct FVector NewScale3D );
	void SetDrawScale ( float NewScale );
	void SetCollisionType ( unsigned char NewCollisionType );
	void SetCollisionSize ( float NewRadius, float NewHeight );
	void SetCollision ( unsigned long bNewColActors, unsigned long bNewBlockActors, unsigned long bNewIgnoreEncroachers );
	void FinishAnim ( class UAnimNodeSequence* SeqNode );
	void Sleep ( float Seconds );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	void ForceUpdateComponents ( unsigned long bCollisionUpdate, unsigned long bTransformOnly );
};

UClass* ASFXTreasureNode::pClassPointer = NULL;

// Class SFXGame.SFXWallRunReachSpec
// 0x0000 (0x008C - 0x008C)
class USFXWallRunReachSpec : public USFXCustomReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87978 ];

		return pClassPointer;
	};

};

UClass* USFXWallRunReachSpec::pClassPointer = NULL;

// Class SFXGame.SFXWaveManager
// 0x0016 (0x020C - 0x01F6)
class ASFXWaveManager : public AActor
{
public:
	TArray< class Usfxwave* >                          PotentialWaves;                                   		// 0x01F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      PotentialWavesType;                               		// 0x0204 (0x0004) [0x0000000000000000]              
	class ABioWorldInfo*                               BioWorldInfo;                                     		// 0x0208 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87988 ];

		return pClassPointer;
	};

	void GeneratePotentialWaveList ( class UClass* SpecifiedWaveType );
	int GetWaveIndex ( int DesiredWaveIndex, struct FString WaveString );
	class Usfxwave* GetNewWave ( int WaveIndex, class UClass* WaveType );
	void eventPostBeginPlay ( );
};

UClass* ASFXWaveManager::pClassPointer = NULL;

// Class SFXGame.SFXWeaponModUseModule
// 0x0010 (0x00C0 - 0x00B0)
class USFXWeaponModUseModule : public USFXModule_SavedUse
{
public:
	class UClass*                                      WeaponModClass;                                   		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastUpdateTime;                                   		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              UpdateFrequency;                                  		// 0x00B8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bStopCustomTicking : 1;                           		// 0x00BC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88329 ];

		return pClassPointer;
	};

	void DisableWeaponModUseModule ( );
	void OnUsed ( class AActor* User );
	void Tick ( float DeltaTime );
	bool DisabilityCheck ( );
	void eventHandlePostBeginPlay ( );
};

UClass* USFXWeaponModUseModule::pClassPointer = NULL;

// Class SFXGame.SFXWeaponModNode
// 0x000A (0x0200 - 0x01F6)
class ASFXWeaponModNode : public ASFXPointOfInterest
{
public:
	class UStaticMeshComponent*                        SMC;                                              		// 0x01F8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x01FC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88354 ];

		return pClassPointer;
	};

	void DisableWeaponModNode ( );
};

UClass* ASFXWeaponModNode::pClassPointer = NULL;

// Class SFXGame.SFXWeaponNode
// 0x000A (0x0200 - 0x01F6)
class ASFXWeaponNode : public ASFXPointOfInterest
{
public:
	class USkeletalMeshComponent*                      SMC;                                              		// 0x01F8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x01FC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88380 ];

		return pClassPointer;
	};

	void DisableWeaponNode ( );
	void PostBeginPlay ( );
};

UClass* ASFXWeaponNode::pClassPointer = NULL;

// Class SFXGame.SFXWeaponUseModule_BonusWeapon
// 0x0000 (0x00E0 - 0x00E0)
class USFXWeaponUseModule_BonusWeapon : public USFXWeaponUseModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88426 ];

		return pClassPointer;
	};

	void StartWeaponSelection ( );
	void WeaponAwardUIAction ( class UBioSFHandler_MessageBox* oUI, int nSelection );
	void WeaponUseModuleOnUsed ( class AActor* User );
	void OnUsed ( class AActor* User );
	void DisableWeaponUseModule ( );
	void Tick ( float DeltaTime );
	bool DisabilityCheck ( );
	void WeaponUseModuleInit ( );
	void eventHandlePostBeginPlay ( );
};

UClass* USFXWeaponUseModule_BonusWeapon::pClassPointer = NULL;

// Class SFXGame.SFXWeaponNode_BonusWeapon
// 0x0000 (0x0200 - 0x0200)
class ASFXWeaponNode_BonusWeapon : public ASFXWeaponNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88440 ];

		return pClassPointer;
	};

	void DisableWeaponNode ( );
	void PostBeginPlay ( );
};

UClass* ASFXWeaponNode_BonusWeapon::pClassPointer = NULL;


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif